
oledU8g.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000026f0  00002784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ba  00800116  00800116  0000279a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000279a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000698  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e6b8  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ee2  00000000  00000000  0001155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032c6  00000000  00000000  0001343e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014f8  00000000  00000000  00016704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003610  00000000  00000000  00017bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000947c  00000000  00000000  0001b20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a0  00000000  00000000  00024688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__ctors_end>
       4:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
       8:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
       c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      10:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      14:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      18:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      1c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      20:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      24:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      28:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      2c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      30:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      34:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      38:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      3c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      40:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      44:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      48:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      4c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      50:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      54:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      58:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      5c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      60:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      64:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      68:	45 13       	cpse	r20, r21
      6a:	4d 13       	cpse	r20, r29
      6c:	67 13       	cpse	r22, r23
      6e:	57 13       	cpse	r21, r23
      70:	67 13       	cpse	r22, r23
      72:	67 13       	cpse	r22, r23
      74:	67 13       	cpse	r22, r23
      76:	67 13       	cpse	r22, r23
      78:	67 13       	cpse	r22, r23
      7a:	67 13       	cpse	r22, r23
      7c:	67 13       	cpse	r22, r23
      7e:	67 13       	cpse	r22, r23
      80:	67 13       	cpse	r22, r23
      82:	67 13       	cpse	r22, r23
      84:	67 13       	cpse	r22, r23
      86:	67 13       	cpse	r22, r23
      88:	67 13       	cpse	r22, r23
      8a:	67 13       	cpse	r22, r23
      8c:	67 13       	cpse	r22, r23
      8e:	67 13       	cpse	r22, r23
      90:	67 13       	cpse	r22, r23
      92:	67 13       	cpse	r22, r23
      94:	67 13       	cpse	r22, r23
      96:	67 13       	cpse	r22, r23
      98:	67 13       	cpse	r22, r23
      9a:	67 13       	cpse	r22, r23
      9c:	67 13       	cpse	r22, r23
      9e:	67 13       	cpse	r22, r23
      a0:	67 13       	cpse	r22, r23
      a2:	67 13       	cpse	r22, r23
      a4:	3f 13       	cpse	r19, r31
      a6:	67 13       	cpse	r22, r23
      a8:	67 13       	cpse	r22, r23
      aa:	67 13       	cpse	r22, r23
      ac:	67 13       	cpse	r22, r23
      ae:	67 13       	cpse	r22, r23
      b0:	67 13       	cpse	r22, r23
      b2:	67 13       	cpse	r22, r23
      b4:	67 13       	cpse	r22, r23
      b6:	33 13       	cpse	r19, r19
      b8:	67 13       	cpse	r22, r23
      ba:	67 13       	cpse	r22, r23
      bc:	67 13       	cpse	r22, r23
      be:	67 13       	cpse	r22, r23
      c0:	67 13       	cpse	r22, r23
      c2:	67 13       	cpse	r22, r23
      c4:	67 13       	cpse	r22, r23
      c6:	67 13       	cpse	r22, r23
      c8:	67 13       	cpse	r22, r23
      ca:	67 13       	cpse	r22, r23
      cc:	5d 13       	cpse	r21, r29
      ce:	62 13       	cpse	r22, r18

000000d0 <__trampolines_end>:
      d0:	ff e0       	ldi	r31, 0x0F	; 15
      d2:	ff d1       	rcall	.+1022   	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
      d4:	af ff       	.word	0xffaf	; ????
      d6:	32 ff       	sbrs	r19, 2
      d8:	d0 ff       	sbrs	r29, 0
      da:	fe ff       	Address 0x000000da is out of bounds.
.word	0xffff	; ????

000000db <u8g_dev_ssd13xx_sleep_on>:
      db:	ff e0 ff d1 ae ff d0 ff fe                          .........

000000e4 <u8g_dev_ssd1306_128x64_data_start>:
      e4:	ff e0 ff d1 10 00 ff fe                             ........

000000ec <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      ec:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      fc:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     10c:	a6 af ff d0 ff fe                                   ......

00000112 <u8g_font_fub14>:
     112:	00 1f 1a fe fb 0e 03 74 07 5f 20 ff fc 15 fb 0e     .......t._ .....
     122:	fc 00 00 00 06 00 00 03 0e 0e 08 03 00 e0 e0 e0     ................
     132:	e0 e0 e0 e0 e0 e0 e0 00 00 e0 e0 08 06 06 0a 01     ................
     142:	08 e7 67 67 67 67 67 0c 0e 1c 0e 01 00 06 60 06     ..ggggg.......`.
     152:	60 0c 60 3f f0 3f f0 18 c0 19 80 19 80 ff e0 ff     `.`?.?..........
     162:	e0 33 00 33 00 63 00 66 00 0a 11 22 0c 01 fe 04     .3.3.c.f..."....
     172:	00 1f 00 7f 80 77 80 e5 c0 e4 00 fc 00 7e 00 1f     .....w.......~..
     182:	80 07 c0 05 c0 e5 c0 e5 c0 7f 80 3f 00 04 00 04     ...........?....
     192:	00 12 0e 2a 14 01 00 3c 04 00 7e 0c 00 c3 18 00     ...*...<..~.....
     1a2:	c3 10 00 c3 30 00 e7 60 00 7e 67 00 18 cd 80 00     ....0..`.~g.....
     1b2:	98 c0 01 98 c0 03 18 c0 03 18 c0 06 0f 80 0c 07     ................
     1c2:	00 0e 0e 1c 10 01 00 1f 00 7f 80 71 c0 71 c0 73     ...........q.q.s
     1d2:	80 3f 00 1e 00 7e 38 f7 30 e3 b0 e1 f0 e0 e0 7f     .?...~8.0.......
     1e2:	f0 1f bc 03 06 06 08 03 08 e0 c0 c0 c0 c0 c0 04     ................
     1f2:	11 11 08 02 fd 30 70 70 60 e0 e0 e0 e0 e0 e0 e0     .....0pp`.......
     202:	e0 e0 60 70 70 30 04 11 11 08 02 fd c0 c0 e0 e0     ..`pp0..........
     212:	60 60 70 70 70 70 70 60 60 e0 e0 c0 c0 08 07 07     ``ppppp``.......
     222:	0c 02 07 66 3c 18 ff 18 3c 66 0c 0c 18 14 04 00     ...f<...<f......
     232:	02 00 02 00 02 00 02 00 02 00 ff f0 ff f0 02 00     ................
     242:	02 00 02 00 02 00 02 00 04 05 05 06 01 fe 70 70     ..............pp
     252:	60 e0 c0 05 03 03 07 01 04 f8 f8 f8 03 03 03 06     `...............
     262:	02 00 e0 e0 e0 06 0f 0f 09 01 ff 0c 0c 0c 0c 18     ................
     272:	18 18 30 30 30 60 60 60 60 c0 0a 0e 1c 0b 01 00     ..000````.......
     282:	1e 00 7f 00 61 80 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0     ....a...........
     292:	e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 06 0e 0e 0b     ......a.........
     2a2:	02 00 1c 7c fc dc 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     ...|............
     2b2:	0a 0e 1c 0b 01 00 1f 00 7f 80 61 c0 e1 c0 01 c0     ..........a.....
     2c2:	01 c0 03 80 07 80 0f 00 1e 00 38 00 70 00 ff c0     ..........8.p...
     2d2:	ff c0 0a 0e 1c 0b 01 00 3e 00 7f 00 e3 80 03 80     ........>.......
     2e2:	03 80 1f 00 1f 00 03 80 01 c0 01 c0 e1 c0 f3 80     ................
     2f2:	7f 00 3e 00 0b 0e 1c 0b 01 00 07 80 0f 80 0f 80     ..>.............
     302:	1b 80 3b 80 33 80 73 80 63 80 e3 80 ff e0 ff e0     ..;.3.s.c.......
     312:	03 80 03 80 03 80 0a 0e 1c 0b 01 00 ff 80 ff 80     ................
     322:	e0 00 e0 00 e0 00 ff 00 ff 80 e1 80 01 c0 01 c0     ................
     332:	e1 c0 e3 80 7f 00 3e 00 0a 0e 1c 0b 01 00 1e 00     ......>.........
     342:	3f 80 61 80 60 00 e0 00 df 00 ff 80 e1 80 e1 c0     ?.a.`...........
     352:	e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0b 01 00     ....a...........
     362:	ff c0 ff c0 01 c0 03 80 03 80 07 80 07 00 07 00     ................
     372:	0e 00 0e 00 1c 00 1c 00 3c 00 38 00 0a 0e 1c 0b     ........<.8.....
     382:	01 00 3f 00 7f 80 e1 c0 e1 c0 e1 80 7f 00 3f 00     ..?...........?.
     392:	73 80 e1 c0 e1 c0 e1 c0 e1 c0 7f 80 3f 00 0a 0e     s...........?...
     3a2:	1c 0b 01 00 1e 00 7f 00 e1 80 e1 80 e1 c0 e1 c0     ................
     3b2:	f3 c0 7f c0 19 c0 01 80 e1 80 63 80 7f 00 3e 00     ..........c...>.
     3c2:	03 0a 0a 07 03 00 e0 e0 e0 00 00 00 00 e0 e0 e0     ................
     3d2:	04 0c 0c 06 01 fe 70 70 70 00 00 00 00 70 60 e0     ......ppp....p`.
     3e2:	c0 c0 0c 0a 14 14 04 01 00 10 00 e0 03 80 1c 00     ................
     3f2:	e0 00 c0 00 38 00 07 00 01 c0 00 30 0c 05 0a 14     ....8......0....
     402:	04 03 ff f0 ff f0 00 00 ff f0 ff f0 0c 0a 14 14     ................
     412:	04 01 80 00 70 00 1c 00 03 80 00 70 00 30 01 c0     ....p......p.0..
     422:	0e 00 38 00 c0 00 09 0e 1c 0b 01 00 3e 00 7f 00     ..8.........>...
     432:	c3 80 43 80 03 80 07 00 06 00 0c 00 18 00 18 00     ..C.............
     442:	18 00 00 00 18 00 18 00 13 12 36 15 01 fc 01 f8     ..........6.....
     452:	00 0f fe 00 1e 07 80 38 03 c0 71 fd c0 73 fc e0     .......8..q..s..
     462:	e7 1c e0 e7 1c e0 e7 1c e0 e7 1c e0 e7 1c e0 e7     ................
     472:	3c c0 73 ff c0 71 e7 80 38 00 00 1e 04 00 0f fc     <.s..q..8.......
     482:	00 03 fc 00 0e 0e 1c 0e 00 00 07 80 07 80 07 c0     ................
     492:	0f c0 0e c0 1c e0 1c e0 1c 60 38 70 3f f0 3f f8     .........`8p?.?.
     4a2:	70 38 70 38 e0 1c 0b 0e 1c 0d 01 00 ff 00 ff 80     p8p8............
     4b2:	e1 c0 e1 c0 e1 c0 e3 80 ff 00 ff 80 e0 c0 e0 e0     ................
     4c2:	e0 e0 e0 e0 ff c0 ff 00 0d 0e 1c 0f 01 00 0f 80     ................
     4d2:	3f e0 70 70 60 70 e0 00 e0 00 e0 00 e0 00 e0 00     ?.pp`p..........
     4e2:	e0 78 60 70 70 f0 3f e0 0f 80 0c 0e 1c 0e 01 00     .x`pp.?.........
     4f2:	ff 00 ff c0 e1 e0 e0 e0 e0 70 e0 70 e0 70 e0 70     .........p.p.p.p
     502:	e0 70 e0 70 e0 e0 e1 e0 ff c0 ff 00 0a 0e 1c 0c     .p.p............
     512:	01 00 ff c0 ff c0 e0 00 e0 00 e0 00 e0 00 ff 80     ................
     522:	ff 80 e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 09 0e     ................
     532:	1c 0b 01 00 ff 80 ff 80 e0 00 e0 00 e0 00 e0 00     ................
     542:	ff 80 ff 80 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
     552:	0d 0e 1c 0f 01 00 0f c0 1f f0 38 38 70 38 e0 00     ..........88p8..
     562:	e0 00 e1 f8 e1 f8 e0 38 e0 38 70 38 78 38 3f f8     .......8.8p8x8?.
     572:	0f f0 0c 0e 1c 0e 01 00 e0 70 e0 70 e0 70 e0 70     .........p.p.p.p
     582:	e0 70 e0 70 ff f0 ff f0 e0 70 e0 70 e0 70 e0 70     .p.p.....p.p.p.p
     592:	e0 70 e0 70 03 0e 0e 05 01 00 e0 e0 e0 e0 e0 e0     .p.p............
     5a2:	e0 e0 e0 e0 e0 e0 e0 e0 0a 0e 1c 0c 01 00 01 c0     ................
     5b2:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     5c2:	e1 c0 e1 c0 f3 c0 7f 80 3e 00 0b 0e 1c 0d 01 00     ........>.......
     5d2:	e1 e0 e3 c0 e3 80 e7 00 ee 00 fc 00 fc 00 fe 00     ................
     5e2:	ee 00 e7 00 e7 80 e3 c0 e1 c0 e0 e0 0a 0e 1c 0b     ................
     5f2:	01 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
     602:	e0 00 e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 10 0e     ................
     612:	1c 12 01 00 f8 1f f8 1f fc 3f fc 3f fc 37 ec 77     .........?.?.7.w
     622:	ee 77 ee 67 e6 e7 e7 e7 e7 c7 e3 c7 e3 c7 e3 87     .w.g............
     632:	0d 0e 1c 0f 01 00 f0 38 f8 38 f8 38 fc 38 ee 38     .......8.8.8.8.8
     642:	ee 38 e7 38 e7 38 e3 b8 e3 b8 e1 f8 e1 f8 e0 f8     .8.8.8..........
     652:	e0 f8 0e 0e 1c 10 01 00 0f c0 3f f0 70 70 60 38     ..........?.pp`8
     662:	e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70 70     ............`8pp
     672:	3f f0 0f c0 0b 0e 1c 0d 01 00 ff 00 ff c0 e1 c0     ?...............
     682:	e0 e0 e0 e0 e0 e0 e1 c0 ff c0 ff 00 e0 00 e0 00     ................
     692:	e0 00 e0 00 e0 00 0f 0e 1c 11 01 00 0f c0 3f e0     ..............?.
     6a2:	70 70 60 38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18     pp`8............
     6b2:	60 38 70 78 3f fe 0f fe 0b 0e 1c 0d 01 00 ff 80     `8px?...........
     6c2:	ff c0 e0 e0 e0 e0 e0 e0 e0 e0 ff 80 ff c0 e1 c0     ................
     6d2:	e0 e0 e0 e0 e0 e0 e0 e0 e0 60 0c 0e 1c 0e 01 00     .........`......
     6e2:	1f 80 3f c0 60 e0 e0 e0 e0 00 fc 00 7f 80 1f e0     ..?.`...........
     6f2:	03 e0 00 70 e0 70 e0 60 7f c0 1f 80 0c 0e 1c 0e     ...p.p.`........
     702:	01 00 ff f0 ff f0 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     712:	0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0c 0e     ................
     722:	1c 0e 01 00 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70     .....p.p.p.p.p.p
     732:	e0 70 e0 70 e0 70 e0 70 e0 70 70 e0 3f c0 1f 80     .p.p.p.p.pp.?...
     742:	0e 0e 1c 0f 00 00 f0 1c 70 1c 70 3c 38 38 38 38     ........p.p<8888
     752:	38 70 1c 70 1c 70 1e e0 0e e0 0f c0 07 c0 07 c0     8p.p.p..........
     762:	07 80 14 0e 2a 14 00 00 f0 f0 f0 70 f0 e0 70 f0     ....*......p..p.
     772:	e0 71 f8 e0 71 f8 e0 39 99 c0 39 99 c0 3b 9d c0     .q..q..9..9..;..
     782:	3b 9d c0 1b 0d 80 1f 0f 80 1f 0f 80 1f 0f 80 0e     ;...............
     792:	07 00 0c 0e 1c 0e 01 00 e0 70 70 e0 78 e0 39 c0     .........pp.x.9.
     7a2:	1f 80 1f 00 0f 00 0f 00 1f 80 3b c0 39 c0 70 e0     ..........;.9.p.
     7b2:	e0 f0 e0 70 0c 0e 1c 0d 00 00 f0 70 70 f0 38 e0     ...p.......pp.8.
     7c2:	38 e0 1d c0 1d c0 0f 80 0f 00 07 00 07 00 07 00     8...............
     7d2:	07 00 07 00 07 00 0b 0e 1c 0d 01 00 7f e0 7f e0     ................
     7e2:	01 e0 03 c0 03 80 07 80 0f 00 1e 00 1e 00 3c 00     ..............<.
     7f2:	78 00 f8 00 ff e0 ff e0 05 12 12 08 02 fc f8 f8     x...............
     802:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 f8 f8     ................
     812:	06 0f 0f 09 01 ff c0 c0 60 60 60 30 30 30 10 18     ........```000..
     822:	18 18 0c 0c 0c 05 12 12 08 02 fc f8 f8 38 38 38     .............888
     832:	38 38 38 38 38 38 38 38 38 38 38 f8 f8 0a 0c 18     88888888888.....
     842:	14 05 00 0c 00 0c 00 0c 00 12 00 12 00 33 00 21     .............3.!
     852:	00 21 00 40 80 40 80 c0 c0 80 40 0a 02 04 0a 00     .!.@.@....@.....
     862:	fd ff c0 ff c0 05 04 04 05 ff 0c e0 70 30 18 09     ............p0..
     872:	0a 14 0b 01 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3     .....>..........
     882:	80 e3 80 e3 80 ff 80 39 80 0a 0e 1c 0c 01 00 e0     .......9........
     892:	00 e0 00 e0 00 e0 00 ef 00 ff 80 e1 c0 e1 c0 e1     ................
     8a2:	c0 e1 c0 e1 c0 e1 80 ff 80 ef 00 09 0a 14 0b 01     ................
     8b2:	00 3e 00 7f 00 e3 80 e3 80 e0 00 e0 00 e3 80 e3     .>..............
     8c2:	80 7f 00 3e 00 0a 0e 1c 0c 01 00 01 c0 01 c0 01     ...>............
     8d2:	c0 01 c0 3d c0 7f c0 e1 c0 e1 c0 e1 c0 e1 c0 e1     ...=............
     8e2:	c0 e1 c0 7f c0 3d c0 09 0a 14 0b 01 00 1e 00 7f     .....=..........
     8f2:	00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f 80 3e     ...............>
     902:	00 07 0e 0e 08 01 00 1e 3e 38 38 fe fe 38 38 38     ........>88..888
     912:	38 38 38 38 38 0a 0e 1c 0c 01 fc 3d c0 7f c0 71     88888......=...q
     922:	c0 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 7f c0 3d c0 01     .............=..
     932:	c0 61 c0 7f 80 3f 00 09 0e 1c 0b 01 00 e0 00 e0     .a...?..........
     942:	00 e0 00 e0 00 ef 00 ff 80 e3 80 e3 80 e3 80 e3     ................
     952:	80 e3 80 e3 80 e3 80 e3 80 03 0e 0e 05 01 00 e0     ................
     962:	e0 e0 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 04 12 12     ................
     972:	07 02 fc 70 70 70 00 70 70 70 70 70 70 70 70 70     ...ppp.ppppppppp
     982:	70 70 70 f0 e0 09 0e 1c 0b 01 00 e0 00 e0 00 e0     ppp.............
     992:	00 e0 00 e7 80 e7 00 ee 00 fc 00 fc 00 fc 00 ee     ................
     9a2:	00 e7 00 e7 00 e3 80 03 0e 0e 05 01 00 e0 e0 e0     ................
     9b2:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 0f 0a 14 12 01     ................
     9c2:	00 ef 3c ff fe e3 ce e3 86 e3 86 e3 86 e3 86 e3     ..<.............
     9d2:	86 e3 86 e3 86 09 0a 14 0b 01 00 ef 00 ff 80 e3     ................
     9e2:	80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 0a     ................
     9f2:	0a 14 0c 01 00 1e 00 7f 80 61 80 e1 c0 e1 c0 e1     .........a......
     a02:	c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0c 01 fc ef     ...a............
     a12:	00 ff 80 e1 80 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 ff     ................
     a22:	80 ef 00 e0 00 e0 00 e0 00 e0 00 0a 0e 1c 0c 01     ................
     a32:	fc 3d c0 7f c0 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 e1     .=..............
     a42:	c0 7f c0 3d c0 01 c0 01 c0 01 c0 01 c0 06 0a 0a     ...=............
     a52:	08 01 00 ec fc f0 e0 e0 e0 e0 e0 e0 e0 09 0a 14     ................
     a62:	0b 01 00 3e 00 ff 00 e3 80 e0 00 7e 00 1f 00 03     ...>.......~....
     a72:	80 e3 80 ff 00 3e 00 07 0d 0d 09 01 00 08 38 38     .....>........88
     a82:	fe fe 38 38 38 38 38 38 3e 1e 09 0a 14 0b 01 00     ..888888>.......
     a92:	e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80     ................
     aa2:	ff 80 7b 80 0b 0a 14 0b 00 00 e0 e0 71 c0 71 c0     ..{.........q.q.
     ab2:	31 80 3b 80 3b 80 1b 00 1f 00 1f 00 0e 00 11 0a     1.;.;...........
     ac2:	1e 11 00 00 e1 c3 80 61 e3 00 73 e7 00 73 67 00     .......a..s..sg.
     ad2:	33 77 00 3f 76 00 3f 3e 00 3e 3e 00 1e 3c 00 1e     3w.?v.?>.>>..<..
     ae2:	1c 00 09 0a 14 0b 01 00 e3 80 73 00 77 00 3e 00     ..........s.w.>.
     af2:	1c 00 3e 00 3e 00 77 00 e3 80 e3 80 0b 0e 1c 0b     ..>.>.w.........
     b02:	00 fc e0 e0 71 c0 71 c0 39 80 3b 80 3b 80 1f 00     ....q.q.9.;.;...
     b12:	1f 00 0f 00 0e 00 0e 00 0e 00 1c 00 1c 00 08 0a     ................
     b22:	0a 0a 01 00 ff ff 07 0e 1c 38 70 e0 ff ff 07 13     .........8p.....
     b32:	13 0a 02 fb 0e 3e 38 38 38 38 38 30 f0 c0 f0 70     .....>888880...p
     b42:	38 38 38 38 38 3e 0e 01 15 15 07 03 fb 80 80 80     88888>..........
     b52:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     b62:	80 80 07 13 13 0a 02 fb e0 f0 38 38 38 38 38 38     ..........888888
     b72:	1c 06 1c 38 38 38 38 38 38 f0 e0 0b 03 06 0b 00     ...888888.......
     b82:	04 30 60 7f c0 c7 80 ff ff ff ff ff ff ff ff ff     .0`.............
     b92:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ba2:	ff ff ff ff ff ff ff ff 00 00 00 06 00 00 03 0e     ................
     bb2:	0e 09 03 fc e0 e0 00 00 e0 e0 e0 e0 e0 e0 e0 e0     ................
     bc2:	e0 e0 09 0e 1c 0b 01 fe 02 00 02 00 3e 00 7f 00     ............>...
     bd2:	e7 80 e7 80 e8 00 e8 00 eb 80 f3 80 7f 00 3e 00     ..............>.
     be2:	20 00 20 00 0a 0e 1c 0c 01 00 1f 00 3f c0 71 c0      . .........?.q.
     bf2:	70 00 70 00 fe 00 fe 00 70 00 70 00 70 00 70 00     p.p.....p.p.p.p.
     c02:	70 00 ff c0 ff c0 0a 0a 14 0c 01 03 80 40 5e 80     p............@^.
     c12:	21 00 40 80 40 80 40 80 40 80 21 00 5e 80 80 40     !.@.@.@.@.!.^..@
     c22:	0b 0e 1c 0d 01 00 e0 e0 e1 c0 71 c0 71 80 fb e0     ..........q.q...
     c32:	fb e0 1f 00 ff e0 ff e0 0e 00 0e 00 0e 00 0e 00     ................
     c42:	0e 00 01 12 12 07 03 fc 80 80 80 80 80 80 80 80     ................
     c52:	00 00 80 80 80 80 80 80 80 80 08 12 12 0a 01 fc     ................
     c62:	3e 7e e0 e0 70 3c 7e e7 e7 e7 fe 7c 1e 07 07 87     >~..p<~....|....
     c72:	fe 38 07 02 02 07 00 0c ee ee 0f 0e 1c 11 01 00     .8..............
     c82:	07 c0 1f f0 37 98 6f cc cc e4 9c 02 9c 02 9c e2     ....7.o.........
     c92:	8c e2 cf c6 47 84 20 18 1c 70 0f c0 07 09 09 08     ....G. ..p......
     ca2:	01 05 78 cc 7c cc cc fc 24 00 fe 0a 08 10 0c 01     ..x.|...$.......
     cb2:	01 39 c0 71 80 73 80 e7 00 e7 00 73 80 71 80 39     .9.q.s.....s.q.9
     cc2:	c0 0b 05 0a 0d 01 04 ff e0 ff e0 00 20 00 20 00     ............ . .
     cd2:	20 ff 0f 0e 1c 11 01 00 07 c0 1f f0 3f 98 6f ec      ...........?.o.
     ce2:	cc 64 8c 62 8f c2 8f c2 8c 62 cc 66 4c 64 20 18     .d.b.....b.fLd .
     cf2:	1c 70 0f c0 06 02 02 06 00 0c fc fc 05 05 05 07     .p..............
     d02:	01 09 70 88 88 88 70 0c 0c 18 14 04 00 02 00 02     ..p...p.........
     d12:	00 02 00 ff f0 ff f0 02 00 02 00 02 00 00 00 00     ................
     d22:	00 ff f0 ff f0 06 08 08 08 01 06 78 cc 0c 18 30     ...........x...0
     d32:	e0 fc fc 06 07 07 08 01 07 78 cc 0c 30 0c cc 78     .........x..0..x
     d42:	04 04 04 04 01 0c 30 60 60 c0 ff 09 11 22 0b 01     ......0``...."..
     d52:	fd 3f 80 79 00 f9 00 f9 00 f9 00 f9 00 79 00 09     .?.y.........y..
     d62:	00 09 00 09 00 09 00 09 00 09 00 09 00 09 00 09     ................
     d72:	00 09 00 03 03 03 06 02 05 e0 e0 e0 05 05 05 05     ................
     d82:	01 fb 40 70 18 18 f0 04 08 08 06 01 06 30 f0 30     ..@p.........0.0
     d92:	30 30 30 30 30 07 09 09 09 01 05 38 44 c6 c6 c6     00000......8D...
     da2:	44 38 00 fe 0a 08 10 0c 01 01 e7 00 63 80 73 80     D8..........c.s.
     db2:	39 c0 39 c0 73 80 63 80 e7 00 0e 0e 1c 10 01 00     9.9.s.c.........
     dc2:	70 30 f0 30 30 60 30 c0 30 c0 31 80 31 9c 33 3c     p0.00`0.0.1.1.3<
     dd2:	06 3c 06 6c 0c cc 18 fc 18 0c 30 0c 0f 0e 1c 11     .<.l......0.....
     de2:	01 00 70 30 f0 20 30 60 30 c0 30 c0 31 80 33 3c     ..p0. 0`0.0.1.3<
     df2:	33 66 06 06 0c 0e 0c 1c 18 30 30 7e 30 7e 0e 0e     3f.......00~0~..
     e02:	1c 10 01 00 78 18 cc 30 0c 30 30 60 0c c0 cc c0     ....x..0.00`....
     e12:	79 9c 01 bc 03 3c 06 6c 06 cc 0c fc 08 0c 18 0c     y....<.l........
     e22:	09 0e 1c 0b 01 fc 0e 00 0e 00 00 00 0e 00 0e 00     ................
     e32:	0e 00 3c 00 70 00 e0 00 e0 00 e1 80 e1 80 7f 80     ..<.p...........
     e42:	3e 00 0e 14 28 0e 00 00 0c 00 0e 00 06 00 03 00     >...(...........
     e52:	00 00 00 00 07 80 07 80 07 c0 0f c0 0e c0 1c e0     ................
     e62:	1c e0 1c 60 38 70 3f f0 3f f8 70 38 70 38 e0 1c     ...`8p?.?.p8p8..
     e72:	0e 14 28 0e 00 00 00 c0 01 c0 01 80 03 00 00 00     ..(.............
     e82:	00 00 07 80 07 80 07 c0 0f c0 0e c0 1c e0 1c e0     ................
     e92:	1c 60 38 70 3f f0 3f f8 70 38 70 38 e0 1c 0e 14     .`8p?.?.p8p8....
     ea2:	28 0e 00 00 03 80 07 80 06 c0 0c c0 00 00 00 00     (...............
     eb2:	07 80 07 80 07 c0 0f c0 0e c0 1c e0 1c e0 1c 60     ...............`
     ec2:	38 70 3f f0 3f f8 70 38 70 38 e0 1c 0e 13 26 0e     8p?.?.p8p8....&.
     ed2:	00 00 06 40 0f c0 08 80 00 00 00 00 07 80 07 80     ...@............
     ee2:	07 c0 0f c0 0e c0 1c e0 1c e0 1c 60 38 70 3f f0     ...........`8p?.
     ef2:	3f f8 70 38 70 38 e0 1c 0e 13 26 0f 00 00 0e e0     ?.p8p8....&.....
     f02:	0e e0 00 00 00 00 00 00 03 80 07 80 07 c0 07 c0     ................
     f12:	0e c0 0e e0 1c e0 1c 70 1c 70 3f f8 3f f8 70 38     .......p.p?.?.p8
     f22:	70 1c e0 1c 0d 15 2a 0f 01 00 07 00 08 80 08 80     p.....*.........
     f32:	08 80 07 00 00 00 00 00 07 00 0f 80 0f 80 1d c0     ................
     f42:	1d c0 1d c0 38 e0 38 e0 30 60 7f f0 7f f0 e0 38     ....8.8.0`.....8
     f52:	e0 38 e0 38 13 0e 2a 14 00 00 00 ff e0 01 ff e0     .8.8..*.........
     f62:	03 f0 00 03 70 00 07 70 00 07 70 00 0e 7f c0 0e     ....p..p..p.....
     f72:	7f c0 1c 70 00 1f f0 00 3f f0 00 70 70 00 70 7f     ...p....?..pp.p.
     f82:	e0 e0 7f e0 0d 12 24 0f 01 fc 0f 80 3f e0 70 f0     ......$.....?.p.
     f92:	60 70 e0 00 e0 00 e0 00 e0 00 e0 00 e0 78 60 70     `p...........x`p
     fa2:	70 f0 3f e0 1f 80 04 00 07 80 01 80 0f 00 0a 14     p.?.............
     fb2:	28 0c 01 00 30 00 38 00 18 00 0c 00 00 00 00 00     (...0.8.........
     fc2:	ff c0 ff c0 e0 00 e0 00 e0 00 e0 00 ff 80 ff 80     ................
     fd2:	e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 0a 14 28 0c     ..............(.
     fe2:	01 00 07 00 06 00 0c 00 08 00 00 00 00 00 ff c0     ................
     ff2:	ff c0 e0 00 e0 00 e0 00 e0 00 ff 80 ff 80 e0 00     ................
    1002:	e0 00 e0 00 e0 00 ff c0 ff c0 0a 14 28 0c 01 00     ............(...
    1012:	1c 00 1e 00 36 00 23 00 00 00 00 00 ff c0 ff c0     ....6.#.........
    1022:	e0 00 e0 00 e0 00 e0 00 ff 80 ff 80 e0 00 e0 00     ................
    1032:	e0 00 e0 00 ff c0 ff c0 0a 13 26 0c 01 00 77 00     ..........&...w.
    1042:	77 00 00 00 00 00 00 00 ff c0 ff c0 e0 00 e0 00     w...............
    1052:	e0 00 e0 00 ff 80 ff 80 e0 00 e0 00 e0 00 e0 00     ................
    1062:	ff c0 ff c0 05 14 14 05 ff 00 e0 60 30 10 00 00     ...........`0...
    1072:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 04 14     88888888888888..
    1082:	14 05 01 00 30 70 60 c0 00 00 e0 e0 e0 e0 e0 e0     ....0p`.........
    1092:	e0 e0 e0 e0 e0 e0 e0 e0 05 14 14 05 00 00 70 70     ..............pp
    10a2:	d8 88 00 00 70 70 70 70 70 70 70 70 70 70 70 70     ....pppppppppppp
    10b2:	70 70 07 13 13 07 00 00 ee ee 00 00 00 38 38 38     pp...........888
    10c2:	38 38 38 38 38 38 38 38 38 38 38 0d 0e 1c 0e 00     88888888888.....
    10d2:	00 7f 80 7f e0 70 f0 70 70 70 38 70 38 fe 38 fe     .....p.ppp8p8.8.
    10e2:	38 70 38 70 38 70 70 70 f0 7f e0 7f 80 0d 13 26     8p8p8ppp.......&
    10f2:	0f 01 00 0c 40 1f 80 11 00 00 00 00 00 f0 38 f8     ....@.........8.
    1102:	38 f8 38 fc 38 ee 38 ee 38 e7 38 e7 38 e3 b8 e3     8.8.8.8.8.8.8...
    1112:	b8 e1 f8 e1 f8 e0 f8 e0 f8 0e 14 28 10 01 00 1c     ...........(....
    1122:	00 0c 00 06 00 02 00 00 00 00 00 0f c0 3f f0 70     .............?.p
    1132:	70 60 38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60     p`8............`
    1142:	38 70 70 3f f0 0f c0 0e 14 28 10 01 00 00 e0 01     8pp?.....(......
    1152:	c0 01 80 03 00 00 00 00 00 0f c0 3f f0 70 70 60     ...........?.pp`
    1162:	38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70     8............`8p
    1172:	70 3f f0 0f c0 0e 14 28 10 01 00 07 00 07 80 0d     p?.....(........
    1182:	c0 08 c0 00 00 00 00 0f c0 3f f0 70 70 60 38 e0     .........?.pp`8.
    1192:	18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70 70 3f     ...........`8pp?
    11a2:	f0 0f c0 0e 13 26 10 01 00 07 c0 0f c0 00 00 00     .....&..........
    11b2:	00 00 00 0f c0 3f f0 70 30 60 38 e0 18 e0 1c e0     .....?.p0`8.....
    11c2:	1c e0 1c e0 1c e0 18 70 38 78 f0 3f f0 0f c0 0e     .......p8x.?....
    11d2:	13 26 10 01 00 1d c0 1d c0 00 00 00 00 00 00 0f     .&..............
    11e2:	c0 3f f0 70 70 60 38 e0 18 e0 1c e0 1c e0 1c e0     .?.pp`8.........
    11f2:	1c e0 18 60 38 70 70 3f f0 0f c0 0a 0a 14 14 05     ...`8pp?........
    1202:	01 80 40 c0 c0 61 80 33 00 0c 00 0c 00 12 00 21     ..@..a.3.......!
    1212:	00 40 80 80 40 0f 10 20 10 00 ff 00 02 07 e6 1f     .@..@.. ........
    1222:	fc 38 3c 30 3c 70 6c 70 ee 71 ce 73 8e 77 0e 7e     .8<0<plp.q.s.w.~
    1232:	0c 7c 1c 38 38 3f f0 ef e0 40 00 0c 14 28 0e 01     .|.88?...@...(..
    1242:	00 38 00 18 00 0c 00 06 00 00 00 00 00 e0 70 e0     .8............p.
    1252:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0     p.p.p.p.p.p.p.p.
    1262:	70 e0 70 71 e0 3f c0 1f 80 0c 14 28 0e 01 00 01     p.pq.?.....(....
    1272:	c0 03 80 03 00 06 00 00 00 00 00 e0 70 e0 70 e0     ............p.p.
    1282:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0     p.p.p.p.p.p.p.p.
    1292:	70 71 e0 3f c0 1f 80 0c 14 28 0e 01 00 0e 00 0f     pq.?.....(......
    12a2:	00 1b 00 11 80 00 00 00 00 e0 70 e0 70 e0 70 e0     ..........p.p.p.
    12b2:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 71     p.p.p.p.p.p.p.pq
    12c2:	e0 3f c0 1f 80 0c 13 26 0e 01 00 1d c0 1d c0 00     .?.....&........
    12d2:	00 00 00 00 00 e0 70 e0 70 e0 70 e0 70 e0 70 e0     ......p.p.p.p.p.
    12e2:	70 e0 70 e0 70 e0 70 e0 70 e0 70 70 e0 3f c0 1f     p.p.p.p.p.pp.?..
    12f2:	80 0c 13 26 0d 00 00 01 80 03 00 02 00 00 00 00     ...&............
    1302:	00 f0 70 70 f0 38 e0 38 e0 1d c0 1d c0 0f 80 0f     ..pp.8.8........
    1312:	00 07 00 07 00 07 00 07 00 07 00 07 00 0b 0e 1c     ................
    1322:	0d 01 00 e0 00 e0 00 ff 00 ff c0 e1 c0 e0 e0 e0     ................
    1332:	e0 e0 e0 e1 c0 ff 80 fe 00 e0 00 e0 00 e0 00 0a     ................
    1342:	0e 1c 0c 01 00 3e 00 7f 80 e3 80 e3 80 e3 00 e7     .....>..........
    1352:	00 ee 00 ee 00 e7 80 e3 c0 e1 c0 fd c0 ff c0 ef     ................
    1362:	80 09 10 20 0b 01 00 70 00 30 00 18 00 08 00 00     ... ...p.0......
    1372:	00 00 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3 80 e3     ...>............
    1382:	80 e3 80 ff 80 39 80 09 10 20 0b 01 00 07 00 06     .....9... ......
    1392:	00 0c 00 0c 00 00 00 00 00 3e 00 7f 80 e3 80 03     .........>......
    13a2:	80 3f 80 fb 80 e3 80 e3 80 ff 80 79 80 09 10 20     .?.........y... 
    13b2:	0b 01 00 1c 00 1e 00 36 00 23 00 00 00 00 00 3e     .......6.#.....>
    13c2:	00 7f 80 e3 80 1f 80 7f 80 e3 80 e3 80 e3 80 ff     ................
    13d2:	80 39 80 09 0e 1c 0b 01 00 3f 00 3e 00 00 00 00     .9.......?.>....
    13e2:	00 3e 00 7f 80 e3 80 1f 80 7f 80 e3 80 e3 80 e3     .>..............
    13f2:	80 ff 80 39 80 09 0f 1e 0b 01 00 77 00 77 00 00     ...9.......w.w..
    1402:	00 00 00 00 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3     .....>..........
    1412:	80 e3 80 e3 80 ff 80 39 80 09 11 22 0b 01 00 1c     .......9..."....
    1422:	00 22 00 22 00 22 00 1c 00 00 00 00 00 3e 00 7f     .".".".......>..
    1432:	80 e3 80 1f 80 7f 80 e3 80 e3 80 e3 80 ff 80 39     ...............9
    1442:	80 10 0a 14 12 01 00 3e 7c 7f fe e3 87 1f ff 7f     .......>|.......
    1452:	ff e3 80 e3 80 e3 c7 fe fe 3c 7c 09 0e 1c 0b 01     .........<|.....
    1462:	fc 3e 00 7f 00 e3 80 e3 80 e0 00 e0 00 e3 80 e3     .>..............
    1472:	80 7f 00 3e 00 10 00 1e 00 06 00 3e 00 09 10 20     ...>.......>... 
    1482:	0b 01 00 70 00 30 00 18 00 08 00 00 00 00 00 1e     ...p.0..........
    1492:	00 7f 00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f     ................
    14a2:	80 3e 00 09 10 20 0b 01 00 07 00 06 00 0c 00 08     .>... ..........
    14b2:	00 00 00 00 00 1e 00 7f 00 e3 80 e3 80 ff 80 ff     ................
    14c2:	80 e0 00 e3 80 7f 80 3e 00 09 10 20 0b 01 00 1c     .......>... ....
    14d2:	00 1e 00 36 00 23 00 00 00 00 00 1e 00 7f 00 e3     ...6.#..........
    14e2:	80 e3 80 ff 80 ff 80 e0 00 e3 80 7f 80 3e 00 09     .............>..
    14f2:	0f 1e 0b 01 00 77 00 77 00 00 00 00 00 00 00 1e     .....w.w........
    1502:	00 7f 00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f     ................
    1512:	80 3e 00 04 0f 0f 05 00 00 c0 e0 60 30 00 70 70     .>.........`0.pp
    1522:	70 70 70 70 70 70 70 70 04 0f 0f 04 01 00 70 60     pppppppp......p`
    1532:	c0 80 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 07 0f 0f     ................
    1542:	05 ff 00 38 7c 4c c6 00 38 38 38 38 38 38 38 38     ...8|L..88888888
    1552:	38 38 07 0e 0e 06 00 00 ee ee 00 00 38 38 38 38     88..........8888
    1562:	38 38 38 38 38 38 0a 0e 1c 0c 01 00 39 80 0f 00     888888......9...
    1572:	1f 00 63 00 1f 80 7f 80 61 c0 e1 c0 e1 c0 e1 c0     ..c.....a.......
    1582:	e1 c0 61 c0 7f 80 1f 00 09 0e 1c 0b 01 00 3e 00     ..a...........>.
    1592:	3c 00 00 00 00 00 ef 00 ff 80 e3 80 e3 80 e3 80     <...............
    15a2:	e3 80 e3 80 e3 80 e3 80 e3 80 0a 10 20 0c 01 00     ............ ...
    15b2:	30 00 18 00 18 00 0c 00 00 00 00 00 1e 00 7f 80     0...............
    15c2:	61 80 e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00     a.........a.....
    15d2:	0a 10 20 0c 01 00 03 00 06 00 06 00 0c 00 00 00     .. .............
    15e2:	00 00 1e 00 7f 80 61 80 e1 c0 e1 c0 e1 c0 e1 c0     ......a.........
    15f2:	61 80 7f 80 1e 00 0a 10 20 0c 01 00 0c 00 1e 00     a....... .......
    1602:	1a 00 33 00 00 00 00 00 1e 00 7f 80 61 80 e1 c0     ..3.........a...
    1612:	e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0c     ......a.........
    1622:	01 00 1f 00 3e 00 00 00 00 00 1e 00 7f 80 61 80     ....>.........a.
    1632:	e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0f     ........a.......
    1642:	1e 0c 01 00 3b 80 3b 80 00 00 00 00 00 00 1e 00     ....;.;.........
    1652:	7f 80 61 80 e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80     ..a.........a...
    1662:	1e 00 0c 08 10 14 04 02 06 00 0e 00 00 00 ff f0     ................
    1672:	ff f0 00 00 06 00 0e 00 0a 0c 18 0c 01 00 00 c0     ................
    1682:	1f 80 7f 80 63 80 e7 c0 ed c0 e9 c0 f1 c0 71 80     ....c.........q.
    1692:	7f 80 de 00 80 00 09 10 20 0b 01 00 70 00 30 00     ........ ...p.0.
    16a2:	18 00 08 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80     ................
    16b2:	e3 80 e3 80 e3 80 e3 80 ff 80 7b 80 09 10 20 0b     ..........{... .
    16c2:	01 00 07 00 06 00 0c 00 08 00 00 00 00 00 e3 80     ................
    16d2:	e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 ff 80     ................
    16e2:	7b 80 09 10 20 0b 01 00 1c 00 1c 00 36 00 22 00     {... .......6.".
    16f2:	00 00 00 00 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80     ................
    1702:	e3 80 e3 80 ff 80 7b 80 09 0f 1e 0b 01 00 77 00     ......{.......w.
    1712:	77 00 00 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80     w...............
    1722:	e3 80 e3 80 e3 80 e3 80 ff 80 7b 80 0b 13 26 0b     ..........{...&.
    1732:	00 fc 01 80 03 00 02 00 04 00 00 00 70 e0 71 c0     ............p.q.
    1742:	71 c0 39 c0 3b 80 1b 80 1f 80 1f 00 0f 00 0e 00     q.9.;...........
    1752:	0e 00 4e 00 fc 00 78 00 0a 12 24 0c 01 fc e0 00     ..N...x...$.....
    1762:	e0 00 e0 00 e0 00 ef 00 ff 80 e1 80 e1 c0 e1 c0     ................
    1772:	e1 c0 e1 c0 e1 c0 ff 80 ff 00 e0 00 e0 00 e0 00     ................
    1782:	e0 00 0b 12 24 0b 00 fc 3b 80 3b 80 00 00 00 00     ....$...;.;.....
    1792:	e1 e0 71 c0 71 c0 73 80 3b 80 3b 80 1f 00 1f 00     ..q.q.s.;.;.....
    17a2:	1f 00 0e 00 0e 00 0c 00 1c 00 1c 00                 ............

000017ae <__ctors_end>:
    17ae:	11 24       	eor	r1, r1
    17b0:	1f be       	out	0x3f, r1	; 63
    17b2:	cf ef       	ldi	r28, 0xFF	; 255
    17b4:	d8 e0       	ldi	r29, 0x08	; 8
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	cd bf       	out	0x3d, r28	; 61

000017ba <__do_copy_data>:
    17ba:	11 e0       	ldi	r17, 0x01	; 1
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b1 e0       	ldi	r27, 0x01	; 1
    17c0:	e0 ef       	ldi	r30, 0xF0	; 240
    17c2:	f6 e2       	ldi	r31, 0x26	; 38
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <__do_copy_data+0x10>
    17c6:	05 90       	lpm	r0, Z+
    17c8:	0d 92       	st	X+, r0
    17ca:	a6 31       	cpi	r26, 0x16	; 22
    17cc:	b1 07       	cpc	r27, r17
    17ce:	d9 f7       	brne	.-10     	; 0x17c6 <__do_copy_data+0xc>

000017d0 <__do_clear_bss>:
    17d0:	21 e0       	ldi	r18, 0x01	; 1
    17d2:	a6 e1       	ldi	r26, 0x16	; 22
    17d4:	b1 e0       	ldi	r27, 0x01	; 1
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <.do_clear_bss_start>

000017d8 <.do_clear_bss_loop>:
    17d8:	1d 92       	st	X+, r1

000017da <.do_clear_bss_start>:
    17da:	a0 3d       	cpi	r26, 0xD0	; 208
    17dc:	b2 07       	cpc	r27, r18
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <.do_clear_bss_loop>
    17e0:	0e 94 13 0c 	call	0x1826	; 0x1826 <main>
    17e4:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <_exit>

000017e8 <__bad_interrupt>:
    17e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000017ec <u8g_setup>:
  
  /* activate pull-up, set ports to output, init U8glib */  
  //u8g_SetPinInput(PN(2,5)); u8g_SetPinLevel(PN(2,5), 1); u8g_SetPinOutput(PN(2,5));
  //u8g_SetPinInput(PN(2,4)); u8g_SetPinLevel(PN(2,4), 1); u8g_SetPinOutput(PN(2,4));
  //u8g_InitI2C(&u8g, &u8g_dev_ssd1327_96x96_gr_i2c, U8G_I2C_OPT_NONE);
  u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	71 e0       	ldi	r23, 0x01	; 1
    17f2:	89 e9       	ldi	r24, 0x99	; 153
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	0e 94 09 12 	call	0x2412	; 0x2412 <u8g_InitI2C>
    17fa:	08 95       	ret

000017fc <sys_init>:

void sys_init(void)
{
#if defined(__AVR__)
  /* select minimal prescaler (max system speed) */
  CLKPR = 0x80;
    17fc:	e1 e6       	ldi	r30, 0x61	; 97
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 e8       	ldi	r24, 0x80	; 128
    1802:	80 83       	st	Z, r24
  CLKPR = 0x00;
    1804:	10 82       	st	Z, r1
    1806:	08 95       	ret

00001808 <draw>:
#endif
}

void draw(void)
{
  u8g_SetFont(&u8g, u8g_font_fub14);
    1808:	62 e1       	ldi	r22, 0x12	; 18
    180a:	71 e0       	ldi	r23, 0x01	; 1
    180c:	89 e9       	ldi	r24, 0x99	; 153
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <u8g_SetFont>
  u8g_DrawStr(&u8g, 2, 16, "TEST123");
    1814:	2e e0       	ldi	r18, 0x0E	; 14
    1816:	31 e0       	ldi	r19, 0x01	; 1
    1818:	40 e1       	ldi	r20, 0x10	; 16
    181a:	62 e0       	ldi	r22, 0x02	; 2
    181c:	89 e9       	ldi	r24, 0x99	; 153
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 70 10 	call	0x20e0	; 0x20e0 <u8g_DrawStr>
    1824:	08 95       	ret

00001826 <main>:
}

int main(void)
{
  sys_init();
    1826:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <sys_init>
  u8g_setup();
    182a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <u8g_setup>

  for(;;)
  {  
    u8g_FirstPage(&u8g);
    182e:	89 e9       	ldi	r24, 0x99	; 153
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	0e 94 1f 12 	call	0x243e	; 0x243e <u8g_FirstPage>
    do
    {
      draw();
    1836:	0e 94 04 0c 	call	0x1808	; 0x1808 <draw>
    } while ( u8g_NextPage(&u8g) );
    183a:	89 e9       	ldi	r24, 0x99	; 153
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	0e 94 25 12 	call	0x244a	; 0x244a <u8g_NextPage>
    1842:	81 11       	cpse	r24, r1
    1844:	f8 cf       	rjmp	.-16     	; 0x1836 <main+0x10>
    u8g_Delay(100);
    1846:	84 e6       	ldi	r24, 0x64	; 100
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <u8g_Delay>
  }
    184e:	ef cf       	rjmp	.-34     	; 0x182e <main+0x8>

00001850 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1850:	0f 93       	push	r16
    1852:	fc 01       	movw	r30, r24
    1854:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    1856:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1858:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    185a:	96 a9       	ldd	r25, Z+54	; 0x36
    185c:	94 17       	cp	r25, r20
    185e:	38 f0       	brcs	.+14     	; 0x186e <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    1860:	08 17       	cp	r16, r24
    1862:	68 f4       	brcc	.+26     	; 0x187e <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	04 17       	cp	r16, r20
    1868:	40 f0       	brcs	.+16     	; 0x187a <u8g_IsBBXIntersection+0x2a>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	06 c0       	rjmp	.+12     	; 0x187a <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    186e:	08 17       	cp	r16, r24
    1870:	d0 f0       	brcs	.+52     	; 0x18a6 <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	04 17       	cp	r16, r20
    1876:	08 f0       	brcs	.+2      	; 0x187a <u8g_IsBBXIntersection+0x2a>
    1878:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    187a:	88 23       	and	r24, r24
    187c:	c9 f0       	breq	.+50     	; 0x18b0 <u8g_IsBBXIntersection+0x60>
    187e:	21 50       	subi	r18, 0x01	; 1
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    1880:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    1882:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1884:	95 a9       	ldd	r25, Z+53	; 0x35
    1886:	96 17       	cp	r25, r22
    1888:	38 f0       	brcs	.+14     	; 0x1898 <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    188a:	28 17       	cp	r18, r24
    188c:	70 f4       	brcc	.+28     	; 0x18aa <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	26 17       	cp	r18, r22
    1892:	70 f0       	brcs	.+28     	; 0x18b0 <u8g_IsBBXIntersection+0x60>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	0c c0       	rjmp	.+24     	; 0x18b0 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1898:	28 17       	cp	r18, r24
    189a:	48 f0       	brcs	.+18     	; 0x18ae <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	26 17       	cp	r18, r22
    18a0:	38 f0       	brcs	.+14     	; 0x18b0 <u8g_IsBBXIntersection+0x60>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    18ae:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    18b0:	0f 91       	pop	r16
    18b2:	08 95       	ret

000018b4 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    18b4:	db 01       	movw	r26, r22
    18b6:	14 96       	adiw	r26, 0x04	; 4
    18b8:	ed 91       	ld	r30, X+
    18ba:	fc 91       	ld	r31, X
    18bc:	15 97       	sbiw	r26, 0x05	; 5
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	09 95       	icall
    18c6:	08 95       	ret

000018c8 <u8g_SetChipSelect>:
    18c8:	db 01       	movw	r26, r22
    18ca:	14 96       	adiw	r26, 0x04	; 4
    18cc:	ed 91       	ld	r30, X+
    18ce:	fc 91       	ld	r31, X
    18d0:	15 97       	sbiw	r26, 0x05	; 5
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	63 e0       	ldi	r22, 0x03	; 3
    18d8:	09 95       	icall
    18da:	08 95       	ret

000018dc <u8g_SetResetLow>:
    18dc:	db 01       	movw	r26, r22
    18de:	14 96       	adiw	r26, 0x04	; 4
    18e0:	ed 91       	ld	r30, X+
    18e2:	fc 91       	ld	r31, X
    18e4:	15 97       	sbiw	r26, 0x05	; 5
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	64 e0       	ldi	r22, 0x04	; 4
    18ee:	09 95       	icall
    18f0:	08 95       	ret

000018f2 <u8g_SetResetHigh>:
    18f2:	db 01       	movw	r26, r22
    18f4:	14 96       	adiw	r26, 0x04	; 4
    18f6:	ed 91       	ld	r30, X+
    18f8:	fc 91       	ld	r31, X
    18fa:	15 97       	sbiw	r26, 0x05	; 5
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	64 e0       	ldi	r22, 0x04	; 4
    1904:	09 95       	icall
    1906:	08 95       	ret

00001908 <u8g_SetAddress>:
    1908:	db 01       	movw	r26, r22
    190a:	14 96       	adiw	r26, 0x04	; 4
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	15 97       	sbiw	r26, 0x05	; 5
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	62 e0       	ldi	r22, 0x02	; 2
    1918:	09 95       	icall
    191a:	08 95       	ret

0000191c <u8g_WriteByte>:
    191c:	db 01       	movw	r26, r22
    191e:	14 96       	adiw	r26, 0x04	; 4
    1920:	ed 91       	ld	r30, X+
    1922:	fc 91       	ld	r31, X
    1924:	15 97       	sbiw	r26, 0x05	; 5
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	65 e0       	ldi	r22, 0x05	; 5
    192c:	09 95       	icall
    192e:	08 95       	ret

00001930 <u8g_WriteSequence>:
    1930:	db 01       	movw	r26, r22
    1932:	14 96       	adiw	r26, 0x04	; 4
    1934:	ed 91       	ld	r30, X+
    1936:	fc 91       	ld	r31, X
    1938:	15 97       	sbiw	r26, 0x05	; 5
    193a:	66 e0       	ldi	r22, 0x06	; 6
    193c:	09 95       	icall
    193e:	08 95       	ret

00001940 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    1940:	af 92       	push	r10
    1942:	bf 92       	push	r11
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	6c 01       	movw	r12, r24
    1956:	7b 01       	movw	r14, r22
    1958:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    195a:	d0 e0       	ldi	r29, 0x00	; 0
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    195c:	b1 2c       	mov	r11, r1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    195e:	aa 24       	eor	r10, r10
    1960:	a3 94       	inc	r10
{
  uint8_t is_escape = 0;
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    1962:	f8 01       	movw	r30, r16
    1964:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    1966:	d1 11       	cpse	r29, r1
    1968:	0b c0       	rjmp	.+22     	; 0x1980 <u8g_WriteEscSeqP+0x40>
    {
      if ( value != 255 )
    196a:	cf 3f       	cpi	r28, 0xFF	; 255
    196c:	09 f4       	brne	.+2      	; 0x1970 <u8g_WriteEscSeqP+0x30>
    196e:	4a c0       	rjmp	.+148    	; 0x1a04 <u8g_WriteEscSeqP+0xc4>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1970:	4c 2f       	mov	r20, r28
    1972:	b7 01       	movw	r22, r14
    1974:	c6 01       	movw	r24, r12
    1976:	0e 94 8e 0c 	call	0x191c	; 0x191c <u8g_WriteByte>
    197a:	81 11       	cpse	r24, r1
    197c:	48 c0       	rjmp	.+144    	; 0x1a0e <u8g_WriteEscSeqP+0xce>
    197e:	4b c0       	rjmp	.+150    	; 0x1a16 <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1980:	cf 3f       	cpi	r28, 0xFF	; 255
    1982:	51 f4       	brne	.+20     	; 0x1998 <u8g_WriteEscSeqP+0x58>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1984:	4f ef       	ldi	r20, 0xFF	; 255
    1986:	b7 01       	movw	r22, r14
    1988:	c6 01       	movw	r24, r12
    198a:	0e 94 8e 0c 	call	0x191c	; 0x191c <u8g_WriteByte>
    198e:	88 23       	and	r24, r24
    1990:	09 f4       	brne	.+2      	; 0x1994 <u8g_WriteEscSeqP+0x54>
    1992:	41 c0       	rjmp	.+130    	; 0x1a16 <u8g_WriteEscSeqP+0xd6>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1994:	db 2d       	mov	r29, r11
    1996:	3b c0       	rjmp	.+118    	; 0x1a0e <u8g_WriteEscSeqP+0xce>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    1998:	ce 3f       	cpi	r28, 0xFE	; 254
    199a:	e1 f1       	breq	.+120    	; 0x1a14 <u8g_WriteEscSeqP+0xd4>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    199c:	c0 3f       	cpi	r28, 0xF0	; 240
    199e:	a0 f5       	brcc	.+104    	; 0x1a08 <u8g_WriteEscSeqP+0xc8>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    19a0:	c0 3e       	cpi	r28, 0xE0	; 224
    19a2:	40 f0       	brcs	.+16     	; 0x19b4 <u8g_WriteEscSeqP+0x74>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    19a4:	4c 2f       	mov	r20, r28
    19a6:	4f 70       	andi	r20, 0x0F	; 15
    19a8:	b7 01       	movw	r22, r14
    19aa:	c6 01       	movw	r24, r12
    19ac:	0e 94 84 0c 	call	0x1908	; 0x1908 <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    19b0:	db 2d       	mov	r29, r11
    19b2:	2d c0       	rjmp	.+90     	; 0x1a0e <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    19b4:	c0 3d       	cpi	r28, 0xD0	; 208
    19b6:	40 f0       	brcs	.+16     	; 0x19c8 <u8g_WriteEscSeqP+0x88>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    19b8:	4c 2f       	mov	r20, r28
    19ba:	4f 70       	andi	r20, 0x0F	; 15
    19bc:	b7 01       	movw	r22, r14
    19be:	c6 01       	movw	r24, r12
    19c0:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    19c4:	db 2d       	mov	r29, r11
    19c6:	23 c0       	rjmp	.+70     	; 0x1a0e <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    19c8:	c0 3c       	cpi	r28, 0xC0	; 192
    19ca:	a0 f0       	brcs	.+40     	; 0x19f4 <u8g_WriteEscSeqP+0xb4>
      {
        u8g_SetResetLow(u8g, dev);
    19cc:	b7 01       	movw	r22, r14
    19ce:	c6 01       	movw	r24, r12
    19d0:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    19d4:	c2 95       	swap	r28
    19d6:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
    19d8:	ce 5f       	subi	r28, 0xFE	; 254
        u8g_Delay(value);
    19da:	d0 e0       	ldi	r29, 0x00	; 0
    19dc:	ce 01       	movw	r24, r28
    19de:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    19e2:	b7 01       	movw	r22, r14
    19e4:	c6 01       	movw	r24, r12
    19e6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <u8g_SetResetHigh>
        u8g_Delay(value);
    19ea:	ce 01       	movw	r24, r28
    19ec:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    19f0:	db 2d       	mov	r29, r11
    19f2:	0d c0       	rjmp	.+26     	; 0x1a0e <u8g_WriteEscSeqP+0xce>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    19f4:	cc 23       	and	r28, r28
    19f6:	54 f0       	brlt	.+20     	; 0x1a0c <u8g_WriteEscSeqP+0xcc>
      {
        u8g_Delay(value);
    19f8:	8c 2f       	mov	r24, r28
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <u8g_Delay>
      }
      is_escape = 0;
    1a00:	db 2d       	mov	r29, r11
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <u8g_WriteEscSeqP+0xce>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1a04:	da 2d       	mov	r29, r10
    1a06:	03 c0       	rjmp	.+6      	; 0x1a0e <u8g_WriteEscSeqP+0xce>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1a08:	db 2d       	mov	r29, r11
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <u8g_WriteEscSeqP+0xce>
    1a0c:	db 2d       	mov	r29, r11
    }
    esc_seq++;
    1a0e:	0f 5f       	subi	r16, 0xFF	; 255
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    1a12:	a7 cf       	rjmp	.-178    	; 0x1962 <u8g_WriteEscSeqP+0x22>
  return 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
}
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	bf 90       	pop	r11
    1a28:	af 90       	pop	r10
    1a2a:	08 95       	ret

00001a2c <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    1a30:	fc 01       	movw	r30, r24
    1a32:	23 a5       	ldd	r18, Z+43	; 0x2b
    1a34:	22 23       	and	r18, r18
    1a36:	b1 f0       	breq	.+44     	; 0x1a64 <u8g_com_arduino_ssd_start_sequence+0x38>
    1a38:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    1a3a:	88 e7       	ldi	r24, 0x78	; 120
    1a3c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <u8g_i2c_start>
    1a40:	88 23       	and	r24, r24
    1a42:	89 f0       	breq	.+34     	; 0x1a66 <u8g_com_arduino_ssd_start_sequence+0x3a>
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    1a44:	8e a1       	ldd	r24, Y+38	; 0x26
    1a46:	81 11       	cpse	r24, r1
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    1a4a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <u8g_i2c_send_byte>
    1a4e:	81 11       	cpse	r24, r1
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <u8g_com_arduino_ssd_start_sequence+0x32>
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    1a54:	80 e4       	ldi	r24, 0x40	; 64
    1a56:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <u8g_i2c_send_byte>
    1a5a:	88 23       	and	r24, r24
    1a5c:	21 f0       	breq	.+8      	; 0x1a66 <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    1a5e:	1b a6       	std	Y+43, r1	; 0x2b
  return 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <u8g_com_arduino_ssd_start_sequence+0x3a>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	08 95       	ret

00001a6c <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	e4 2e       	mov	r14, r20
    1a7c:	89 01       	movw	r16, r18
  switch(msg)
    1a7e:	63 30       	cpi	r22, 0x03	; 3
    1a80:	b1 f0       	breq	.+44     	; 0x1aae <u8g_com_arduino_ssd_i2c_fn+0x42>
    1a82:	30 f4       	brcc	.+12     	; 0x1a90 <u8g_com_arduino_ssd_i2c_fn+0x24>
    1a84:	61 30       	cpi	r22, 0x01	; 1
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <u8g_com_arduino_ssd_i2c_fn+0x36>
    1a88:	62 30       	cpi	r22, 0x02	; 2
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <u8g_com_arduino_ssd_i2c_fn+0x22>
    1a8c:	6f c0       	rjmp	.+222    	; 0x1b6c <u8g_com_arduino_ssd_i2c_fn+0x100>
    1a8e:	74 c0       	rjmp	.+232    	; 0x1b78 <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1a90:	66 30       	cpi	r22, 0x06	; 6
    1a92:	41 f1       	breq	.+80     	; 0x1ae4 <u8g_com_arduino_ssd_i2c_fn+0x78>
    1a94:	67 30       	cpi	r22, 0x07	; 7
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <u8g_com_arduino_ssd_i2c_fn+0x2e>
    1a98:	48 c0       	rjmp	.+144    	; 0x1b2a <u8g_com_arduino_ssd_i2c_fn+0xbe>
    1a9a:	65 30       	cpi	r22, 0x05	; 5
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <u8g_com_arduino_ssd_i2c_fn+0x34>
    1a9e:	6c c0       	rjmp	.+216    	; 0x1b78 <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1aa0:	10 c0       	rjmp	.+32     	; 0x1ac2 <u8g_com_arduino_ssd_i2c_fn+0x56>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	86 a5       	ldd	r24, Z+46	; 0x2e
    1aa6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <u8g_i2c_init>
      }
      */
#endif
      break;
  }
  return 1;
    1aaa:	c1 e0       	ldi	r28, 0x01	; 1
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);

      break;
    1aac:	6a c0       	rjmp	.+212    	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    1aae:	fc 01       	movw	r30, r24
    1ab0:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    1ab2:	21 e0       	ldi	r18, 0x01	; 1
    1ab4:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    1ab6:	41 11       	cpse	r20, r1
    1ab8:	61 c0       	rjmp	.+194    	; 0x1b7c <u8g_com_arduino_ssd_i2c_fn+0x110>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    1aba:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <u8g_i2c_stop>
      }
      */
#endif
      break;
  }
  return 1;
    1abe:	c1 e0       	ldi	r28, 0x01	; 1
    1ac0:	60 c0       	rjmp	.+192    	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1ac2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <u8g_com_arduino_ssd_start_sequence>
    1ac6:	c8 2f       	mov	r28, r24
    1ac8:	81 11       	cpse	r24, r1
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <u8g_com_arduino_ssd_i2c_fn+0x66>
	return u8g_i2c_stop(), 0;
    1acc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <u8g_i2c_stop>
    1ad0:	58 c0       	rjmp	.+176    	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    1ad2:	8e 2d       	mov	r24, r14
    1ad4:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <u8g_i2c_send_byte>
    1ad8:	c8 2f       	mov	r28, r24
    1ada:	81 11       	cpse	r24, r1
    1adc:	51 c0       	rjmp	.+162    	; 0x1b80 <u8g_com_arduino_ssd_i2c_fn+0x114>
	return u8g_i2c_stop(), 0;
    1ade:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <u8g_i2c_stop>
    1ae2:	4f c0       	rjmp	.+158    	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1ae4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <u8g_com_arduino_ssd_start_sequence>
    1ae8:	c8 2f       	mov	r28, r24
    1aea:	88 23       	and	r24, r24
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <u8g_com_arduino_ssd_i2c_fn+0x8a>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1aee:	e1 10       	cpse	r14, r1
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <u8g_com_arduino_ssd_i2c_fn+0x90>
      }
      */
#endif
      break;
  }
  return 1;
    1af2:	c1 e0       	ldi	r28, 0x01	; 1
    1af4:	46 c0       	rjmp	.+140    	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1af6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <u8g_i2c_stop>
    1afa:	43 c0       	rjmp	.+134    	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1afc:	68 01       	movw	r12, r16
    1afe:	ea 94       	dec	r14
    1b00:	8e 2d       	mov	r24, r14
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	08 0f       	add	r16, r24
    1b08:	19 1f       	adc	r17, r25
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    1b0a:	f6 01       	movw	r30, r12
    1b0c:	81 91       	ld	r24, Z+
    1b0e:	6f 01       	movw	r12, r30
    1b10:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <u8g_i2c_send_byte>
    1b14:	c8 2f       	mov	r28, r24
    1b16:	81 11       	cpse	r24, r1
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <u8g_com_arduino_ssd_i2c_fn+0xb4>
	    return u8g_i2c_stop(), 0;
    1b1a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <u8g_i2c_stop>
    1b1e:	31 c0       	rjmp	.+98     	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1b20:	c0 16       	cp	r12, r16
    1b22:	d1 06       	cpc	r13, r17
    1b24:	91 f7       	brne	.-28     	; 0x1b0a <u8g_com_arduino_ssd_i2c_fn+0x9e>
      }
      */
#endif
      break;
  }
  return 1;
    1b26:	c1 e0       	ldi	r28, 0x01	; 1
    1b28:	2c c0       	rjmp	.+88     	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1b2a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <u8g_com_arduino_ssd_start_sequence>
    1b2e:	c8 2f       	mov	r28, r24
    1b30:	88 23       	and	r24, r24
    1b32:	21 f0       	breq	.+8      	; 0x1b3c <u8g_com_arduino_ssd_i2c_fn+0xd0>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1b34:	e1 10       	cpse	r14, r1
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <u8g_com_arduino_ssd_i2c_fn+0xd6>
      }
      */
#endif
      break;
  }
  return 1;
    1b38:	c1 e0       	ldi	r28, 0x01	; 1
    1b3a:	23 c0       	rjmp	.+70     	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1b3c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <u8g_i2c_stop>
    1b40:	20 c0       	rjmp	.+64     	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1b42:	ea 94       	dec	r14
    1b44:	f1 2c       	mov	r15, r1
    1b46:	ff ef       	ldi	r31, 0xFF	; 255
    1b48:	ef 1a       	sub	r14, r31
    1b4a:	ff 0a       	sbc	r15, r31
    1b4c:	e0 0e       	add	r14, r16
    1b4e:	f1 1e       	adc	r15, r17
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    1b50:	f8 01       	movw	r30, r16
    1b52:	84 91       	lpm	r24, Z
    1b54:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <u8g_i2c_send_byte>
    1b58:	c8 2f       	mov	r28, r24
    1b5a:	88 23       	and	r24, r24
    1b5c:	91 f0       	breq	.+36     	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
	    return 0;
          ptr++;
    1b5e:	0f 5f       	subi	r16, 0xFF	; 255
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1b62:	0e 15       	cp	r16, r14
    1b64:	1f 05       	cpc	r17, r15
    1b66:	a1 f7       	brne	.-24     	; 0x1b50 <u8g_com_arduino_ssd_i2c_fn+0xe4>
      }
      */
#endif
      break;
  }
  return 1;
    1b68:	c1 e0       	ldi	r28, 0x01	; 1
    1b6a:	0b c0       	rjmp	.+22     	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    1b70:	21 e0       	ldi	r18, 0x01	; 1
    1b72:	23 a7       	std	Z+43, r18	; 0x2b
      }
      */
#endif
      break;
  }
  return 1;
    1b74:	c1 e0       	ldi	r28, 0x01	; 1
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
  }
  return 1;
    1b78:	c1 e0       	ldi	r28, 0x01	; 1
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1b7c:	c1 e0       	ldi	r28, 0x01	; 1
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1b80:	c1 e0       	ldi	r28, 0x01	; 1
}
    1b82:	8c 2f       	mov	r24, r28
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	ff 90       	pop	r15
    1b8c:	ef 90       	pop	r14
    1b8e:	df 90       	pop	r13
    1b90:	cf 90       	pop	r12
    1b92:	08 95       	ret

00001b94 <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    1b94:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <u8g_i2c_err_code>
    1b98:	91 11       	cpse	r25, r1
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <u8g_i2c_set_error+0x10>
    1b9c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <u8g_i2c_err_code>
    1ba0:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
    1ba4:	08 95       	ret

00001ba6 <u8g_i2c_clear_error>:
    1ba6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <u8g_i2c_err_code>
    1baa:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
    1bae:	08 95       	ret

00001bb0 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    1bb0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <u8g_i2c_opt>
  TWSR = 0;
    1bb4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    1bb8:	84 ff       	sbrs	r24, 4
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <u8g_i2c_init+0x14>
  {
    TWBR = F_CPU/(2*400000)-8;
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1bc2:	03 c0       	rjmp	.+6      	; 0x1bca <u8g_i2c_init+0x1a>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    1bc4:	80 e2       	ldi	r24, 0x20	; 32
    1bc6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    1bca:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <u8g_i2c_clear_error>
    1bce:	08 95       	ret

00001bd0 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <u8g_i2c_wait+0x8>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    1bdc:	20 ed       	ldi	r18, 0xD0	; 208
    1bde:	37 e0       	ldi	r19, 0x07	; 7
    1be0:	3a 83       	std	Y+2, r19	; 0x02
    1be2:	29 83       	std	Y+1, r18	; 0x01
  while( !(TWCR & mask) )
    1be4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1be8:	98 23       	and	r25, r24
    1bea:	01 f5       	brne	.+64     	; 0x1c2c <u8g_i2c_wait+0x5c>
  {
      if ( cnt == 0 )
    1bec:	29 81       	ldd	r18, Y+1	; 0x01
    1bee:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf0:	23 2b       	or	r18, r19
    1bf2:	39 f0       	breq	.+14     	; 0x1c02 <u8g_i2c_wait+0x32>
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1bf4:	ec eb       	ldi	r30, 0xBC	; 188
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <u8g_i2c_wait+0x46>
  {
      if ( cnt == 0 )
    1bfa:	29 81       	ldd	r18, Y+1	; 0x01
    1bfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bfe:	23 2b       	or	r18, r19
    1c00:	51 f4       	brne	.+20     	; 0x1c16 <u8g_i2c_wait+0x46>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1c02:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8g_i2c_opt>
    1c06:	18 2f       	mov	r17, r24
    1c08:	12 70       	andi	r17, 0x02	; 2
    1c0a:	81 fd       	sbrc	r24, 1
    1c0c:	11 c0       	rjmp	.+34     	; 0x1c30 <u8g_i2c_wait+0x60>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <u8g_i2c_set_error>
	  return 0; /* error */
    1c14:	0e c0       	rjmp	.+28     	; 0x1c32 <u8g_i2c_wait+0x62>
	}
      }
      cnt--;
    1c16:	29 81       	ldd	r18, Y+1	; 0x01
    1c18:	3a 81       	ldd	r19, Y+2	; 0x02
    1c1a:	21 50       	subi	r18, 0x01	; 1
    1c1c:	31 09       	sbc	r19, r1
    1c1e:	3a 83       	std	Y+2, r19	; 0x02
    1c20:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1c22:	90 81       	ld	r25, Z
    1c24:	98 23       	and	r25, r24
    1c26:	49 f3       	breq	.-46     	; 0x1bfa <u8g_i2c_wait+0x2a>
	  return 0; /* error */
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
    1c28:	11 e0       	ldi	r17, 0x01	; 1
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <u8g_i2c_wait+0x62>
    1c2c:	11 e0       	ldi	r17, 0x01	; 1
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <u8g_i2c_wait+0x62>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    1c30:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    1c32:	81 2f       	mov	r24, r17
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	08 95       	ret

00001c40 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	d8 2f       	mov	r29, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    1c46:	94 ea       	ldi	r25, 0xA4	; 164
    1c48:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	80 e8       	ldi	r24, 0x80	; 128
    1c50:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <u8g_i2c_wait>
    1c54:	c8 2f       	mov	r28, r24
    1c56:	88 23       	and	r24, r24
    1c58:	61 f1       	breq	.+88     	; 0x1cb2 <u8g_i2c_start+0x72>
    return 0;
  
  status = TW_STATUS;
    1c5a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1c5e:	98 7f       	andi	r25, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    1c60:	98 30       	cpi	r25, 0x08	; 8
    1c62:	41 f0       	breq	.+16     	; 0x1c74 <u8g_i2c_start+0x34>
    1c64:	90 31       	cpi	r25, 0x10	; 16
    1c66:	31 f0       	breq	.+12     	; 0x1c74 <u8g_i2c_start+0x34>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	82 e0       	ldi	r24, 0x02	; 2
    1c6c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <u8g_i2c_set_error>
    return 0;
    1c70:	c0 e0       	ldi	r28, 0x00	; 0
    1c72:	1f c0       	rjmp	.+62     	; 0x1cb2 <u8g_i2c_start+0x72>
  }

  /* set slave address */  
  TWDR = sla;
    1c74:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1c78:	84 e8       	ldi	r24, 0x84	; 132
    1c7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    1c7e:	62 e0       	ldi	r22, 0x02	; 2
    1c80:	80 e8       	ldi	r24, 0x80	; 128
    1c82:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <u8g_i2c_wait>
    1c86:	c8 2f       	mov	r28, r24
    1c88:	88 23       	and	r24, r24
    1c8a:	99 f0       	breq	.+38     	; 0x1cb2 <u8g_i2c_start+0x72>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1c8c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8g_i2c_opt>
    1c90:	c8 2f       	mov	r28, r24
    1c92:	c2 70       	andi	r28, 0x02	; 2
    1c94:	81 fd       	sbrc	r24, 1
    1c96:	0a c0       	rjmp	.+20     	; 0x1cac <u8g_i2c_start+0x6c>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    1c98:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1c9c:	88 7f       	andi	r24, 0xF8	; 248
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    1c9e:	88 31       	cpi	r24, 0x18	; 24
    1ca0:	39 f0       	breq	.+14     	; 0x1cb0 <u8g_i2c_start+0x70>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <u8g_i2c_set_error>
      return 0;
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <u8g_i2c_start+0x72>
    }
  }

   return 1;
    1cac:	c1 e0       	ldi	r28, 0x01	; 1
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <u8g_i2c_start+0x72>
    1cb0:	c1 e0       	ldi	r28, 0x01	; 1
}
    1cb2:	8c 2f       	mov	r24, r28
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    1cba:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    1cbc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1cc0:	84 e8       	ldi	r24, 0x84	; 132
    1cc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    1cc6:	63 e0       	ldi	r22, 0x03	; 3
    1cc8:	80 e8       	ldi	r24, 0x80	; 128
    1cca:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <u8g_i2c_wait>
    1cce:	c8 2f       	mov	r28, r24
    1cd0:	88 23       	and	r24, r24
    1cd2:	99 f0       	breq	.+38     	; 0x1cfa <u8g_i2c_send_byte+0x40>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1cd4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8g_i2c_opt>
    1cd8:	c8 2f       	mov	r28, r24
    1cda:	c2 70       	andi	r28, 0x02	; 2
    1cdc:	81 fd       	sbrc	r24, 1
    1cde:	0a c0       	rjmp	.+20     	; 0x1cf4 <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    1ce0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1ce4:	88 7f       	andi	r24, 0xF8	; 248
    if ( status != TW_MT_DATA_ACK )
    1ce6:	88 32       	cpi	r24, 0x28	; 40
    1ce8:	39 f0       	breq	.+14     	; 0x1cf8 <u8g_i2c_send_byte+0x3e>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    1cea:	63 e0       	ldi	r22, 0x03	; 3
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <u8g_i2c_set_error>
      return 0;
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <u8g_i2c_send_byte+0x40>
    }
  }

  return 1;  
    1cf4:	c1 e0       	ldi	r28, 0x01	; 1
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <u8g_i2c_send_byte+0x40>
    1cf8:	c1 e0       	ldi	r28, 0x01	; 1
}
    1cfa:	8c 2f       	mov	r24, r28
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    1d00:	84 e9       	ldi	r24, 0x94	; 148
    1d02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    1d06:	64 e0       	ldi	r22, 0x04	; 4
    1d08:	80 e1       	ldi	r24, 0x10	; 16
    1d0a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <u8g_i2c_wait>
    1d0e:	08 95       	ret

00001d10 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	39 f0       	breq	.+14     	; 0x1d22 <u8g_Delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d14:	2e ec       	ldi	r18, 0xCE	; 206
    1d16:	37 e0       	ldi	r19, 0x07	; 7
    1d18:	f9 01       	movw	r30, r18
    1d1a:	31 97       	sbiw	r30, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1d20:	d9 f7       	brne	.-10     	; 0x1d18 <u8g_Delay+0x8>
    1d22:	08 95       	ret

00001d24 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1d24:	af 92       	push	r10
    1d26:	bf 92       	push	r11
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	7c 01       	movw	r14, r24
    1d38:	8b 01       	movw	r16, r22
    1d3a:	c4 2f       	mov	r28, r20
    1d3c:	69 01       	movw	r12, r18
  switch(msg)
    1d3e:	40 31       	cpi	r20, 0x10	; 16
    1d40:	99 f1       	breq	.+102    	; 0x1da8 <u8g_dev_ssd1306_128x64_fn+0x84>
    1d42:	18 f4       	brcc	.+6      	; 0x1d4a <u8g_dev_ssd1306_128x64_fn+0x26>
    1d44:	4a 30       	cpi	r20, 0x0A	; 10
    1d46:	31 f0       	breq	.+12     	; 0x1d54 <u8g_dev_ssd1306_128x64_fn+0x30>
    1d48:	3b c0       	rjmp	.+118    	; 0x1dc0 <u8g_dev_ssd1306_128x64_fn+0x9c>
    1d4a:	41 31       	cpi	r20, 0x11	; 17
    1d4c:	99 f1       	breq	.+102    	; 0x1db4 <u8g_dev_ssd1306_128x64_fn+0x90>
    1d4e:	45 31       	cpi	r20, 0x15	; 21
    1d50:	59 f0       	breq	.+22     	; 0x1d68 <u8g_dev_ssd1306_128x64_fn+0x44>
    1d52:	36 c0       	rjmp	.+108    	; 0x1dc0 <u8g_dev_ssd1306_128x64_fn+0x9c>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    1d54:	42 e0       	ldi	r20, 0x02	; 2
    1d56:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    1d5a:	4c ee       	ldi	r20, 0xEC	; 236
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	b8 01       	movw	r22, r16
    1d60:	c7 01       	movw	r24, r14
    1d62:	0e 94 a0 0c 	call	0x1940	; 0x1940 <u8g_WriteEscSeqP>
      break;
    1d66:	2c c0       	rjmp	.+88     	; 0x1dc0 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1d68:	fb 01       	movw	r30, r22
    1d6a:	a2 80       	ldd	r10, Z+2	; 0x02
    1d6c:	b3 80       	ldd	r11, Z+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    1d6e:	44 ee       	ldi	r20, 0xE4	; 228
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	0e 94 a0 0c 	call	0x1940	; 0x1940 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    1d76:	f5 01       	movw	r30, r10
    1d78:	44 81       	ldd	r20, Z+4	; 0x04
    1d7a:	40 6b       	ori	r20, 0xB0	; 176
    1d7c:	b8 01       	movw	r22, r16
    1d7e:	c7 01       	movw	r24, r14
    1d80:	0e 94 8e 0c 	call	0x191c	; 0x191c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	b8 01       	movw	r22, r16
    1d88:	c7 01       	movw	r24, r14
    1d8a:	0e 94 84 0c 	call	0x1908	; 0x1908 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    1d8e:	a8 01       	movw	r20, r16
    1d90:	b7 01       	movw	r22, r14
    1d92:	c5 01       	movw	r24, r10
    1d94:	0e 94 ad 12 	call	0x255a	; 0x255a <u8g_pb_WriteBuffer>
    1d98:	88 23       	and	r24, r24
    1d9a:	c1 f0       	breq	.+48     	; 0x1dcc <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	b8 01       	movw	r22, r16
    1da0:	c7 01       	movw	r24, r14
    1da2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <u8g_SetChipSelect>
      }
      break;
    1da6:	0c c0       	rjmp	.+24     	; 0x1dc0 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    1da8:	4b ed       	ldi	r20, 0xDB	; 219
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	0e 94 a0 0c 	call	0x1940	; 0x1940 <u8g_WriteEscSeqP>
      return 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	0c c0       	rjmp	.+24     	; 0x1dcc <u8g_dev_ssd1306_128x64_fn+0xa8>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    1db4:	40 ed       	ldi	r20, 0xD0	; 208
    1db6:	50 e0       	ldi	r21, 0x00	; 0
    1db8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <u8g_WriteEscSeqP>
      return 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <u8g_dev_ssd1306_128x64_fn+0xa8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    1dc0:	96 01       	movw	r18, r12
    1dc2:	4c 2f       	mov	r20, r28
    1dc4:	b8 01       	movw	r22, r16
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	0e 94 21 13 	call	0x2642	; 0x2642 <u8g_dev_pb8v1_base_fn>
}
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	df 90       	pop	r13
    1dd8:	cf 90       	pop	r12
    1dda:	bf 90       	pop	r11
    1ddc:	af 90       	pop	r10
    1dde:	08 95       	ret

00001de0 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    1de0:	fc 01       	movw	r30, r24
    1de2:	e6 0f       	add	r30, r22
    1de4:	f1 1d       	adc	r31, r1
    1de6:	84 91       	lpm	r24, Z
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	98 2f       	mov	r25, r24
    1dec:	88 27       	eor	r24, r24
    1dee:	31 96       	adiw	r30, 0x01	; 1
    1df0:	e4 91       	lpm	r30, Z
    1df2:	8e 0f       	add	r24, r30
    1df4:	91 1d       	adc	r25, r1
    1df6:	08 95       	ret

00001df8 <u8g_font_GetFormat>:
    1df8:	fc 01       	movw	r30, r24
    1dfa:	84 91       	lpm	r24, Z
    1dfc:	08 95       	ret

00001dfe <u8g_font_GetFontGlyphStructureSize>:
    1dfe:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <u8g_font_GetFormat>
    1e02:	88 23       	and	r24, r24
    1e04:	21 f0       	breq	.+8      	; 0x1e0e <u8g_font_GetFontGlyphStructureSize+0x10>
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	11 f0       	breq	.+4      	; 0x1e0e <u8g_font_GetFontGlyphStructureSize+0x10>
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	08 95       	ret
    1e0e:	86 e0       	ldi	r24, 0x06	; 6
    1e10:	08 95       	ret

00001e12 <u8g_font_calc_vref_font>:
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	08 95       	ret

00001e16 <u8g_font_GetEncoding65Pos>:
    1e16:	66 e0       	ldi	r22, 0x06	; 6
    1e18:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <u8g_font_get_word>
    1e1c:	08 95       	ret

00001e1e <u8g_font_GetEncoding97Pos>:
    1e1e:	68 e0       	ldi	r22, 0x08	; 8
    1e20:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <u8g_font_get_word>
    1e24:	08 95       	ret

00001e26 <u8g_font_GetFontStartEncoding>:
    1e26:	0a 96       	adiw	r24, 0x0a	; 10
    1e28:	fc 01       	movw	r30, r24
    1e2a:	84 91       	lpm	r24, Z
    1e2c:	08 95       	ret

00001e2e <u8g_font_GetFontEndEncoding>:
    1e2e:	0b 96       	adiw	r24, 0x0b	; 11
    1e30:	fc 01       	movw	r30, r24
    1e32:	84 91       	lpm	r24, Z
    1e34:	08 95       	ret

00001e36 <u8g_GetGlyph>:
    1e36:	af 92       	push	r10
    1e38:	bf 92       	push	r11
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	7c 01       	movw	r14, r24
    1e4c:	b6 2e       	mov	r11, r22
    1e4e:	dc 01       	movw	r26, r24
    1e50:	14 96       	adiw	r26, 0x04	; 4
    1e52:	cd 91       	ld	r28, X+
    1e54:	dc 91       	ld	r29, X
    1e56:	15 97       	sbiw	r26, 0x05	; 5
    1e58:	ce 01       	movw	r24, r28
    1e5a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <u8g_font_GetFormat>
    1e5e:	18 2f       	mov	r17, r24
    1e60:	f7 01       	movw	r30, r14
    1e62:	84 81       	ldd	r24, Z+4	; 0x04
    1e64:	95 81       	ldd	r25, Z+5	; 0x05
    1e66:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <u8g_font_GetFontGlyphStructureSize>
    1e6a:	d8 2e       	mov	r13, r24
    1e6c:	11 30       	cpi	r17, 0x01	; 1
    1e6e:	29 f4       	brne	.+10     	; 0x1e7a <u8g_GetGlyph+0x44>
    1e70:	0f 2e       	mov	r0, r31
    1e72:	ff e0       	ldi	r31, 0x0F	; 15
    1e74:	af 2e       	mov	r10, r31
    1e76:	f0 2d       	mov	r31, r0
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <u8g_GetGlyph+0x48>
    1e7a:	aa 24       	eor	r10, r10
    1e7c:	aa 94       	dec	r10
    1e7e:	d7 01       	movw	r26, r14
    1e80:	14 96       	adiw	r26, 0x04	; 4
    1e82:	8d 91       	ld	r24, X+
    1e84:	9c 91       	ld	r25, X
    1e86:	15 97       	sbiw	r26, 0x05	; 5
    1e88:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <u8g_font_GetFontStartEncoding>
    1e8c:	18 2f       	mov	r17, r24
    1e8e:	f7 01       	movw	r30, r14
    1e90:	84 81       	ldd	r24, Z+4	; 0x04
    1e92:	95 81       	ldd	r25, Z+5	; 0x05
    1e94:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <u8g_font_GetFontEndEncoding>
    1e98:	08 2f       	mov	r16, r24
    1e9a:	d7 01       	movw	r26, r14
    1e9c:	14 96       	adiw	r26, 0x04	; 4
    1e9e:	8d 91       	ld	r24, X+
    1ea0:	9c 91       	ld	r25, X
    1ea2:	15 97       	sbiw	r26, 0x05	; 5
    1ea4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <u8g_font_GetEncoding97Pos>
    1ea8:	b0 e6       	ldi	r27, 0x60	; 96
    1eaa:	bb 15       	cp	r27, r11
    1eac:	30 f4       	brcc	.+12     	; 0x1eba <u8g_GetGlyph+0x84>
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	21 f0       	breq	.+8      	; 0x1eba <u8g_GetGlyph+0x84>
    1eb2:	c8 0f       	add	r28, r24
    1eb4:	d9 1f       	adc	r29, r25
    1eb6:	11 e6       	ldi	r17, 0x61	; 97
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <u8g_GetGlyph+0xa2>
    1eba:	f7 01       	movw	r30, r14
    1ebc:	84 81       	ldd	r24, Z+4	; 0x04
    1ebe:	95 81       	ldd	r25, Z+5	; 0x05
    1ec0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <u8g_font_GetEncoding65Pos>
    1ec4:	f0 e4       	ldi	r31, 0x40	; 64
    1ec6:	fb 15       	cp	r31, r11
    1ec8:	30 f4       	brcc	.+12     	; 0x1ed6 <u8g_GetGlyph+0xa0>
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <u8g_GetGlyph+0xa0>
    1ece:	c8 0f       	add	r28, r24
    1ed0:	d9 1f       	adc	r29, r25
    1ed2:	11 e4       	ldi	r17, 0x41	; 65
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <u8g_GetGlyph+0xa2>
    1ed6:	61 96       	adiw	r28, 0x11	; 17
    1ed8:	0b 15       	cp	r16, r11
    1eda:	90 f4       	brcc	.+36     	; 0x1f00 <u8g_GetGlyph+0xca>
    1edc:	d7 01       	movw	r26, r14
    1ede:	50 96       	adiw	r26, 0x10	; 16
    1ee0:	1c 92       	st	X, r1
    1ee2:	50 97       	sbiw	r26, 0x10	; 16
    1ee4:	53 96       	adiw	r26, 0x13	; 19
    1ee6:	1c 92       	st	X, r1
    1ee8:	53 97       	sbiw	r26, 0x13	; 19
    1eea:	54 96       	adiw	r26, 0x14	; 20
    1eec:	1c 92       	st	X, r1
    1eee:	54 97       	sbiw	r26, 0x14	; 20
    1ef0:	51 96       	adiw	r26, 0x11	; 17
    1ef2:	1c 92       	st	X, r1
    1ef4:	51 97       	sbiw	r26, 0x11	; 17
    1ef6:	52 96       	adiw	r26, 0x12	; 18
    1ef8:	1c 92       	st	X, r1
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	75 c0       	rjmp	.+234    	; 0x1fea <u8g_GetGlyph+0x1b4>
    1f00:	01 17       	cp	r16, r17
    1f02:	08 f4       	brcc	.+2      	; 0x1f06 <u8g_GetGlyph+0xd0>
    1f04:	6a c0       	rjmp	.+212    	; 0x1fda <u8g_GetGlyph+0x1a4>
    1f06:	2d 2d       	mov	r18, r13
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	6e 01       	movw	r12, r28
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	94 91       	lpm	r25, Z
    1f10:	9f 3f       	cpi	r25, 0xFF	; 255
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <u8g_GetGlyph+0xe2>
    1f14:	21 96       	adiw	r28, 0x01	; 1
    1f16:	5d c0       	rjmp	.+186    	; 0x1fd2 <u8g_GetGlyph+0x19c>
    1f18:	1b 11       	cpse	r17, r11
    1f1a:	52 c0       	rjmp	.+164    	; 0x1fc0 <u8g_GetGlyph+0x18a>
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	d7 01       	movw	r26, r14
    1f20:	14 96       	adiw	r26, 0x04	; 4
    1f22:	8d 91       	ld	r24, X+
    1f24:	9c 91       	ld	r25, X
    1f26:	15 97       	sbiw	r26, 0x05	; 5
    1f28:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <u8g_font_GetFormat>
    1f2c:	88 23       	and	r24, r24
    1f2e:	11 f0       	breq	.+4      	; 0x1f34 <u8g_GetGlyph+0xfe>
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	f1 f4       	brne	.+60     	; 0x1f70 <u8g_GetGlyph+0x13a>
    1f34:	f6 01       	movw	r30, r12
    1f36:	c4 90       	lpm	r12, Z
    1f38:	d7 01       	movw	r26, r14
    1f3a:	53 96       	adiw	r26, 0x13	; 19
    1f3c:	cc 92       	st	X, r12
    1f3e:	53 97       	sbiw	r26, 0x13	; 19
    1f40:	f8 01       	movw	r30, r16
    1f42:	31 96       	adiw	r30, 0x01	; 1
    1f44:	e4 91       	lpm	r30, Z
    1f46:	54 96       	adiw	r26, 0x14	; 20
    1f48:	ec 93       	st	X, r30
    1f4a:	54 97       	sbiw	r26, 0x14	; 20
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	33 96       	adiw	r30, 0x03	; 3
    1f50:	e4 91       	lpm	r30, Z
    1f52:	50 96       	adiw	r26, 0x10	; 16
    1f54:	ec 93       	st	X, r30
    1f56:	50 97       	sbiw	r26, 0x10	; 16
    1f58:	f8 01       	movw	r30, r16
    1f5a:	34 96       	adiw	r30, 0x04	; 4
    1f5c:	e4 91       	lpm	r30, Z
    1f5e:	51 96       	adiw	r26, 0x11	; 17
    1f60:	ec 93       	st	X, r30
    1f62:	51 97       	sbiw	r26, 0x11	; 17
    1f64:	f8 01       	movw	r30, r16
    1f66:	35 96       	adiw	r30, 0x05	; 5
    1f68:	e4 91       	lpm	r30, Z
    1f6a:	52 96       	adiw	r26, 0x12	; 18
    1f6c:	ec 93       	st	X, r30
    1f6e:	25 c0       	rjmp	.+74     	; 0x1fba <u8g_GetGlyph+0x184>
    1f70:	fe 01       	movw	r30, r28
    1f72:	84 91       	lpm	r24, Z
    1f74:	98 2f       	mov	r25, r24
    1f76:	9f 70       	andi	r25, 0x0F	; 15
    1f78:	92 50       	subi	r25, 0x02	; 2
    1f7a:	d7 01       	movw	r26, r14
    1f7c:	52 96       	adiw	r26, 0x12	; 18
    1f7e:	9c 93       	st	X, r25
    1f80:	52 97       	sbiw	r26, 0x12	; 18
    1f82:	c8 2e       	mov	r12, r24
    1f84:	c6 94       	lsr	r12
    1f86:	c6 94       	lsr	r12
    1f88:	c6 94       	lsr	r12
    1f8a:	c6 94       	lsr	r12
    1f8c:	51 96       	adiw	r26, 0x11	; 17
    1f8e:	cc 92       	st	X, r12
    1f90:	51 97       	sbiw	r26, 0x11	; 17
    1f92:	fe 01       	movw	r30, r28
    1f94:	31 96       	adiw	r30, 0x01	; 1
    1f96:	e4 91       	lpm	r30, Z
    1f98:	8e 2f       	mov	r24, r30
    1f9a:	8f 70       	andi	r24, 0x0F	; 15
    1f9c:	54 96       	adiw	r26, 0x14	; 20
    1f9e:	8c 93       	st	X, r24
    1fa0:	54 97       	sbiw	r26, 0x14	; 20
    1fa2:	e2 95       	swap	r30
    1fa4:	ef 70       	andi	r30, 0x0F	; 15
    1fa6:	53 96       	adiw	r26, 0x13	; 19
    1fa8:	ec 93       	st	X, r30
    1faa:	53 97       	sbiw	r26, 0x13	; 19
    1fac:	fe 01       	movw	r30, r28
    1fae:	32 96       	adiw	r30, 0x02	; 2
    1fb0:	e4 91       	lpm	r30, Z
    1fb2:	e2 95       	swap	r30
    1fb4:	ef 70       	andi	r30, 0x0F	; 15
    1fb6:	50 96       	adiw	r26, 0x10	; 16
    1fb8:	ec 93       	st	X, r30
    1fba:	8c 2f       	mov	r24, r28
    1fbc:	9d 2f       	mov	r25, r29
    1fbe:	15 c0       	rjmp	.+42     	; 0x1fea <u8g_GetGlyph+0x1b4>
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	32 96       	adiw	r30, 0x02	; 2
    1fc4:	e4 91       	lpm	r30, Z
    1fc6:	ea 21       	and	r30, r10
    1fc8:	c9 01       	movw	r24, r18
    1fca:	8e 0f       	add	r24, r30
    1fcc:	91 1d       	adc	r25, r1
    1fce:	c8 0f       	add	r28, r24
    1fd0:	d9 1f       	adc	r29, r25
    1fd2:	10 17       	cp	r17, r16
    1fd4:	11 f0       	breq	.+4      	; 0x1fda <u8g_GetGlyph+0x1a4>
    1fd6:	1f 5f       	subi	r17, 0xFF	; 255
    1fd8:	98 cf       	rjmp	.-208    	; 0x1f0a <u8g_GetGlyph+0xd4>
    1fda:	f7 01       	movw	r30, r14
    1fdc:	10 8a       	std	Z+16, r1	; 0x10
    1fde:	13 8a       	std	Z+19, r1	; 0x13
    1fe0:	14 8a       	std	Z+20, r1	; 0x14
    1fe2:	11 8a       	std	Z+17, r1	; 0x11
    1fe4:	12 8a       	std	Z+18, r1	; 0x12
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	08 95       	ret

00002000 <u8g_draw_glyph>:
    2000:	6f 92       	push	r6
    2002:	7f 92       	push	r7
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	5c 01       	movw	r10, r24
    201e:	16 2f       	mov	r17, r22
    2020:	64 2e       	mov	r6, r20
    2022:	62 2f       	mov	r22, r18
    2024:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <u8g_GetGlyph>
    2028:	6c 01       	movw	r12, r24
    202a:	89 2b       	or	r24, r25
    202c:	09 f4       	brne	.+2      	; 0x2030 <u8g_draw_glyph+0x30>
    202e:	48 c0       	rjmp	.+144    	; 0x20c0 <u8g_draw_glyph+0xc0>
    2030:	f5 01       	movw	r30, r10
    2032:	84 81       	ldd	r24, Z+4	; 0x04
    2034:	95 81       	ldd	r25, Z+5	; 0x05
    2036:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <u8g_font_GetFontGlyphStructureSize>
    203a:	98 2e       	mov	r9, r24
    203c:	f5 01       	movw	r30, r10
    203e:	d3 89       	ldd	r29, Z+19	; 0x13
    2040:	c4 89       	ldd	r28, Z+20	; 0x14
    2042:	71 88       	ldd	r7, Z+17	; 0x11
    2044:	71 0e       	add	r7, r17
    2046:	92 89       	ldd	r25, Z+18	; 0x12
    2048:	69 1a       	sub	r6, r25
    204a:	f6 2c       	mov	r15, r6
    204c:	fc 1a       	sub	r15, r28
    204e:	0c 2f       	mov	r16, r28
    2050:	2d 2f       	mov	r18, r29
    2052:	4f 2d       	mov	r20, r15
    2054:	67 2d       	mov	r22, r7
    2056:	c5 01       	movw	r24, r10
    2058:	0e 94 28 0c 	call	0x1850	; 0x1850 <u8g_IsBBXIntersection>
    205c:	81 11       	cpse	r24, r1
    205e:	03 c0       	rjmp	.+6      	; 0x2066 <u8g_draw_glyph+0x66>
    2060:	f5 01       	movw	r30, r10
    2062:	80 89       	ldd	r24, Z+16	; 0x10
    2064:	2e c0       	rjmp	.+92     	; 0x20c2 <u8g_draw_glyph+0xc2>
    2066:	d9 5f       	subi	r29, 0xF9	; 249
    2068:	ed 2e       	mov	r14, r29
    206a:	e6 94       	lsr	r14
    206c:	e6 94       	lsr	r14
    206e:	e6 94       	lsr	r14
    2070:	cc 23       	and	r28, r28
    2072:	19 f1       	breq	.+70     	; 0x20ba <u8g_draw_glyph+0xba>
    2074:	e6 01       	movw	r28, r12
    2076:	c9 0d       	add	r28, r9
    2078:	d1 1d       	adc	r29, r1
    207a:	88 24       	eor	r8, r8
    207c:	8a 94       	dec	r8
    207e:	8e 0c       	add	r8, r14
    2080:	91 2c       	mov	r9, r1
    2082:	ff ef       	ldi	r31, 0xFF	; 255
    2084:	8f 1a       	sub	r8, r31
    2086:	9f 0a       	sbc	r9, r31
    2088:	11 c0       	rjmp	.+34     	; 0x20ac <u8g_draw_glyph+0xac>
    208a:	fe 01       	movw	r30, r28
    208c:	04 91       	lpm	r16, Z
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	4f 2d       	mov	r20, r15
    2092:	61 2f       	mov	r22, r17
    2094:	c5 01       	movw	r24, r10
    2096:	0e 94 35 12 	call	0x246a	; 0x246a <u8g_Draw8Pixel>
    209a:	21 96       	adiw	r28, 0x01	; 1
    209c:	18 5f       	subi	r17, 0xF8	; 248
    209e:	cc 15       	cp	r28, r12
    20a0:	dd 05       	cpc	r29, r13
    20a2:	99 f7       	brne	.-26     	; 0x208a <u8g_draw_glyph+0x8a>
    20a4:	e6 01       	movw	r28, r12
    20a6:	f3 94       	inc	r15
    20a8:	f6 14       	cp	r15, r6
    20aa:	39 f0       	breq	.+14     	; 0x20ba <u8g_draw_glyph+0xba>
    20ac:	ee 20       	and	r14, r14
    20ae:	d9 f3       	breq	.-10     	; 0x20a6 <u8g_draw_glyph+0xa6>
    20b0:	6e 01       	movw	r12, r28
    20b2:	c8 0c       	add	r12, r8
    20b4:	d9 1c       	adc	r13, r9
    20b6:	17 2d       	mov	r17, r7
    20b8:	e8 cf       	rjmp	.-48     	; 0x208a <u8g_draw_glyph+0x8a>
    20ba:	f5 01       	movw	r30, r10
    20bc:	80 89       	ldd	r24, Z+16	; 0x10
    20be:	01 c0       	rjmp	.+2      	; 0x20c2 <u8g_draw_glyph+0xc2>
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	bf 90       	pop	r11
    20d4:	af 90       	pop	r10
    20d6:	9f 90       	pop	r9
    20d8:	8f 90       	pop	r8
    20da:	7f 90       	pop	r7
    20dc:	6f 90       	pop	r6
    20de:	08 95       	ret

000020e0 <u8g_DrawStr>:
    20e0:	cf 92       	push	r12
    20e2:	df 92       	push	r13
    20e4:	ff 92       	push	r15
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	6c 01       	movw	r12, r24
    20f0:	c6 2f       	mov	r28, r22
    20f2:	f4 2e       	mov	r15, r20
    20f4:	89 01       	movw	r16, r18
    20f6:	dc 01       	movw	r26, r24
    20f8:	55 96       	adiw	r26, 0x15	; 21
    20fa:	ed 91       	ld	r30, X+
    20fc:	fc 91       	ld	r31, X
    20fe:	56 97       	sbiw	r26, 0x16	; 22
    2100:	09 95       	icall
    2102:	f8 0e       	add	r15, r24
    2104:	f8 01       	movw	r30, r16
    2106:	20 81       	ld	r18, Z
    2108:	22 23       	and	r18, r18
    210a:	81 f0       	breq	.+32     	; 0x212c <u8g_DrawStr+0x4c>
    210c:	0f 5f       	subi	r16, 0xFF	; 255
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	d0 e0       	ldi	r29, 0x00	; 0
    2112:	4f 2d       	mov	r20, r15
    2114:	6c 2f       	mov	r22, r28
    2116:	c6 01       	movw	r24, r12
    2118:	0e 94 00 10 	call	0x2000	; 0x2000 <u8g_draw_glyph>
    211c:	c8 0f       	add	r28, r24
    211e:	d8 0f       	add	r29, r24
    2120:	d8 01       	movw	r26, r16
    2122:	2d 91       	ld	r18, X+
    2124:	8d 01       	movw	r16, r26
    2126:	21 11       	cpse	r18, r1
    2128:	f4 cf       	rjmp	.-24     	; 0x2112 <u8g_DrawStr+0x32>
    212a:	01 c0       	rjmp	.+2      	; 0x212e <u8g_DrawStr+0x4e>
    212c:	d0 e0       	ldi	r29, 0x00	; 0
    212e:	8d 2f       	mov	r24, r29
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	ff 90       	pop	r15
    213a:	df 90       	pop	r13
    213c:	cf 90       	pop	r12
    213e:	08 95       	ret

00002140 <u8g_UpdateRefHeight>:
    2140:	dc 01       	movw	r26, r24
    2142:	14 96       	adiw	r26, 0x04	; 4
    2144:	8d 91       	ld	r24, X+
    2146:	9c 91       	ld	r25, X
    2148:	15 97       	sbiw	r26, 0x05	; 5
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	09 f4       	brne	.+2      	; 0x2150 <u8g_UpdateRefHeight+0x10>
    214e:	4d c0       	rjmp	.+154    	; 0x21ea <u8g_UpdateRefHeight+0xaa>
    2150:	57 96       	adiw	r26, 0x17	; 23
    2152:	2c 91       	ld	r18, X
    2154:	57 97       	sbiw	r26, 0x17	; 23
    2156:	21 11       	cpse	r18, r1
    2158:	0d c0       	rjmp	.+26     	; 0x2174 <u8g_UpdateRefHeight+0x34>
    215a:	fc 01       	movw	r30, r24
    215c:	35 96       	adiw	r30, 0x05	; 5
    215e:	e4 91       	lpm	r30, Z
    2160:	58 96       	adiw	r26, 0x18	; 24
    2162:	ec 93       	st	X, r30
    2164:	58 97       	sbiw	r26, 0x18	; 24
    2166:	fc 01       	movw	r30, r24
    2168:	3c 96       	adiw	r30, 0x0c	; 12
    216a:	e4 91       	lpm	r30, Z
    216c:	59 96       	adiw	r26, 0x19	; 25
    216e:	ec 93       	st	X, r30
    2170:	59 97       	sbiw	r26, 0x19	; 25
    2172:	1b c0       	rjmp	.+54     	; 0x21aa <u8g_UpdateRefHeight+0x6a>
    2174:	21 30       	cpi	r18, 0x01	; 1
    2176:	69 f4       	brne	.+26     	; 0x2192 <u8g_UpdateRefHeight+0x52>
    2178:	fc 01       	movw	r30, r24
    217a:	3f 96       	adiw	r30, 0x0f	; 15
    217c:	e4 91       	lpm	r30, Z
    217e:	58 96       	adiw	r26, 0x18	; 24
    2180:	ec 93       	st	X, r30
    2182:	58 97       	sbiw	r26, 0x18	; 24
    2184:	fc 01       	movw	r30, r24
    2186:	70 96       	adiw	r30, 0x10	; 16
    2188:	e4 91       	lpm	r30, Z
    218a:	59 96       	adiw	r26, 0x19	; 25
    218c:	ec 93       	st	X, r30
    218e:	59 97       	sbiw	r26, 0x19	; 25
    2190:	0c c0       	rjmp	.+24     	; 0x21aa <u8g_UpdateRefHeight+0x6a>
    2192:	fc 01       	movw	r30, r24
    2194:	3d 96       	adiw	r30, 0x0d	; 13
    2196:	e4 91       	lpm	r30, Z
    2198:	58 96       	adiw	r26, 0x18	; 24
    219a:	ec 93       	st	X, r30
    219c:	58 97       	sbiw	r26, 0x18	; 24
    219e:	fc 01       	movw	r30, r24
    21a0:	3e 96       	adiw	r30, 0x0e	; 14
    21a2:	e4 91       	lpm	r30, Z
    21a4:	59 96       	adiw	r26, 0x19	; 25
    21a6:	ec 93       	st	X, r30
    21a8:	59 97       	sbiw	r26, 0x19	; 25
    21aa:	58 96       	adiw	r26, 0x18	; 24
    21ac:	8c 91       	ld	r24, X
    21ae:	58 97       	sbiw	r26, 0x18	; 24
    21b0:	08 2e       	mov	r0, r24
    21b2:	00 0c       	add	r0, r0
    21b4:	99 0b       	sbc	r25, r25
    21b6:	59 96       	adiw	r26, 0x19	; 25
    21b8:	2c 91       	ld	r18, X
    21ba:	59 97       	sbiw	r26, 0x19	; 25
    21bc:	82 1b       	sub	r24, r18
    21be:	91 09       	sbc	r25, r1
    21c0:	27 fd       	sbrc	r18, 7
    21c2:	93 95       	inc	r25
    21c4:	5a 96       	adiw	r26, 0x1a	; 26
    21c6:	2c 91       	ld	r18, X
    21c8:	5a 97       	sbiw	r26, 0x1a	; 26
    21ca:	20 34       	cpi	r18, 0x40	; 64
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <u8g_UpdateRefHeight+0xa6>
    21ce:	82 9f       	mul	r24, r18
    21d0:	c0 01       	movw	r24, r0
    21d2:	11 24       	eor	r1, r1
    21d4:	00 24       	eor	r0, r0
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	00 1c       	adc	r0, r0
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	00 1c       	adc	r0, r0
    21e2:	89 2f       	mov	r24, r25
    21e4:	90 2d       	mov	r25, r0
    21e6:	5b 96       	adiw	r26, 0x1b	; 27
    21e8:	8c 93       	st	X, r24
    21ea:	08 95       	ret

000021ec <u8g_SetFontPosBaseline>:
    21ec:	29 e0       	ldi	r18, 0x09	; 9
    21ee:	3f e0       	ldi	r19, 0x0F	; 15
    21f0:	fc 01       	movw	r30, r24
    21f2:	36 8b       	std	Z+22, r19	; 0x16
    21f4:	25 8b       	std	Z+21, r18	; 0x15
    21f6:	08 95       	ret

000021f8 <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
  if ( u8g->font != font )
    21fc:	fc 01       	movw	r30, r24
    21fe:	24 81       	ldd	r18, Z+4	; 0x04
    2200:	35 81       	ldd	r19, Z+5	; 0x05
    2202:	26 17       	cp	r18, r22
    2204:	37 07       	cpc	r19, r23
    2206:	49 f0       	breq	.+18     	; 0x221a <u8g_SetFont+0x22>
    2208:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    220a:	75 83       	std	Z+5, r23	; 0x05
    220c:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    220e:	0e 94 a0 10 	call	0x2140	; 0x2140 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2212:	89 e0       	ldi	r24, 0x09	; 9
    2214:	9f e0       	ldi	r25, 0x0F	; 15
    2216:	9e 8b       	std	Y+22, r25	; 0x16
    2218:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <u8g_init_data>:
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	ec 01       	movw	r28, r24
    2228:	1d 82       	std	Y+5, r1	; 0x05
    222a:	1c 82       	std	Y+4, r1	; 0x04
    222c:	1f 82       	std	Y+7, r1	; 0x07
    222e:	1e 82       	std	Y+6, r1	; 0x06
    2230:	19 86       	std	Y+9, r1	; 0x09
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	88 87       	std	Y+8, r24	; 0x08
    2236:	82 e2       	ldi	r24, 0x22	; 34
    2238:	8a 87       	std	Y+10, r24	; 0x0a
    223a:	1f 86       	std	Y+15, r1	; 0x0f
    223c:	1e 86       	std	Y+14, r1	; 0x0e
    223e:	fe 01       	movw	r30, r28
    2240:	b3 96       	adiw	r30, 0x23	; 35
    2242:	9e 01       	movw	r18, r28
    2244:	2f 5c       	subi	r18, 0xCF	; 207
    2246:	3f 4f       	sbci	r19, 0xFF	; 255
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	81 93       	st	Z+, r24
    224c:	e2 17       	cp	r30, r18
    224e:	f3 07       	cpc	r31, r19
    2250:	e1 f7       	brne	.-8      	; 0x224a <u8g_init_data+0x2a>
    2252:	11 e0       	ldi	r17, 0x01	; 1
    2254:	18 a3       	std	Y+32, r17	; 0x20
    2256:	ce 01       	movw	r24, r28
    2258:	0e 94 f6 10 	call	0x21ec	; 0x21ec <u8g_SetFontPosBaseline>
    225c:	1f 8b       	std	Y+23, r17	; 0x17
    225e:	18 8e       	std	Y+24, r1	; 0x18
    2260:	19 8e       	std	Y+25, r1	; 0x19
    2262:	80 e4       	ldi	r24, 0x40	; 64
    2264:	8a 8f       	std	Y+26, r24	; 0x1a
    2266:	1b 8e       	std	Y+27, r1	; 0x1b
    2268:	8f e6       	ldi	r24, 0x6F	; 111
    226a:	93 e1       	ldi	r25, 0x13	; 19
    226c:	9a ab       	std	Y+50, r25	; 0x32
    226e:	89 ab       	std	Y+49, r24	; 0x31
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	1f 91       	pop	r17
    2276:	08 95       	ret

00002278 <u8g_call_dev_fn>:
    2278:	db 01       	movw	r26, r22
    227a:	ed 91       	ld	r30, X+
    227c:	fc 91       	ld	r31, X
    227e:	09 95       	icall
    2280:	08 95       	ret

00002282 <u8g_InitLL>:
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	ec 01       	movw	r28, r24
    228c:	8b 01       	movw	r16, r22
    228e:	e9 a9       	ldd	r30, Y+49	; 0x31
    2290:	fa a9       	ldd	r31, Y+50	; 0x32
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	09 95       	icall
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	4a e0       	ldi	r20, 0x0A	; 10
    229c:	b8 01       	movw	r22, r16
    229e:	ce 01       	movw	r24, r28
    22a0:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    22a4:	18 2f       	mov	r17, r24
    22a6:	e9 a9       	ldd	r30, Y+49	; 0x31
    22a8:	fa a9       	ldd	r31, Y+50	; 0x32
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	09 95       	icall
    22ae:	e9 a9       	ldd	r30, Y+49	; 0x31
    22b0:	fa a9       	ldd	r31, Y+50	; 0x32
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	09 95       	icall
    22b6:	81 2f       	mov	r24, r17
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	08 95       	ret

000022c2 <u8g_FirstPageLL>:
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	ec 01       	movw	r28, r24
    22cc:	8b 01       	movw	r16, r22
    22ce:	e9 a9       	ldd	r30, Y+49	; 0x31
    22d0:	fa a9       	ldd	r31, Y+50	; 0x32
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	09 95       	icall
    22d6:	e9 a9       	ldd	r30, Y+49	; 0x31
    22d8:	fa a9       	ldd	r31, Y+50	; 0x32
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	09 95       	icall
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	44 e1       	ldi	r20, 0x14	; 20
    22e4:	b8 01       	movw	r22, r16
    22e6:	ce 01       	movw	r24, r28
    22e8:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    22ec:	9e 01       	movw	r18, r28
    22ee:	2d 5c       	subi	r18, 0xCD	; 205
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	47 e1       	ldi	r20, 0x17	; 23
    22f4:	b8 01       	movw	r22, r16
    22f6:	ce 01       	movw	r24, r28
    22f8:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    22fc:	e9 a9       	ldd	r30, Y+49	; 0x31
    22fe:	fa a9       	ldd	r31, Y+50	; 0x32
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	09 95       	icall
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	1f 91       	pop	r17
    230a:	0f 91       	pop	r16
    230c:	08 95       	ret

0000230e <u8g_NextPageLL>:
    230e:	ef 92       	push	r14
    2310:	ff 92       	push	r15
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	ec 01       	movw	r28, r24
    231a:	7b 01       	movw	r14, r22
    231c:	e9 a9       	ldd	r30, Y+49	; 0x31
    231e:	fa a9       	ldd	r31, Y+50	; 0x32
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	09 95       	icall
    2324:	e9 a9       	ldd	r30, Y+49	; 0x31
    2326:	fa a9       	ldd	r31, Y+50	; 0x32
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	09 95       	icall
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	45 e1       	ldi	r20, 0x15	; 21
    2332:	b7 01       	movw	r22, r14
    2334:	ce 01       	movw	r24, r28
    2336:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    233a:	18 2f       	mov	r17, r24
    233c:	88 23       	and	r24, r24
    233e:	41 f0       	breq	.+16     	; 0x2350 <u8g_NextPageLL+0x42>
    2340:	9e 01       	movw	r18, r28
    2342:	2d 5c       	subi	r18, 0xCD	; 205
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	47 e1       	ldi	r20, 0x17	; 23
    2348:	b7 01       	movw	r22, r14
    234a:	ce 01       	movw	r24, r28
    234c:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    2350:	e9 a9       	ldd	r30, Y+49	; 0x31
    2352:	fa a9       	ldd	r31, Y+50	; 0x32
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	09 95       	icall
    2358:	81 2f       	mov	r24, r17
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	ff 90       	pop	r15
    2362:	ef 90       	pop	r14
    2364:	08 95       	ret

00002366 <u8g_GetWidthLL>:
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	1f 92       	push	r1
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	9e 01       	movw	r18, r28
    2372:	2f 5f       	subi	r18, 0xFF	; 255
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	46 e4       	ldi	r20, 0x46	; 70
    2378:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	0f 90       	pop	r0
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	08 95       	ret

00002386 <u8g_GetHeightLL>:
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	1f 92       	push	r1
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	9e 01       	movw	r18, r28
    2392:	2f 5f       	subi	r18, 0xFF	; 255
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	47 e4       	ldi	r20, 0x47	; 71
    2398:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	0f 90       	pop	r0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <u8g_GetModeLL>:
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	48 e4       	ldi	r20, 0x48	; 72
    23ac:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    23b0:	08 95       	ret

000023b2 <u8g_UpdateDimension>:
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	ec 01       	movw	r28, r24
    23b8:	6a 81       	ldd	r22, Y+2	; 0x02
    23ba:	7b 81       	ldd	r23, Y+3	; 0x03
    23bc:	0e 94 b3 11 	call	0x2366	; 0x2366 <u8g_GetWidthLL>
    23c0:	88 83       	st	Y, r24
    23c2:	6a 81       	ldd	r22, Y+2	; 0x02
    23c4:	7b 81       	ldd	r23, Y+3	; 0x03
    23c6:	ce 01       	movw	r24, r28
    23c8:	0e 94 c3 11 	call	0x2386	; 0x2386 <u8g_GetHeightLL>
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	6a 81       	ldd	r22, Y+2	; 0x02
    23d0:	7b 81       	ldd	r23, Y+3	; 0x03
    23d2:	ce 01       	movw	r24, r28
    23d4:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <u8g_GetModeLL>
    23d8:	8b 87       	std	Y+11, r24	; 0x0b
    23da:	9e 01       	movw	r18, r28
    23dc:	2d 5c       	subi	r18, 0xCD	; 205
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
    23e0:	6a 81       	ldd	r22, Y+2	; 0x02
    23e2:	7b 81       	ldd	r23, Y+3	; 0x03
    23e4:	47 e1       	ldi	r20, 0x17	; 23
    23e6:	ce 01       	movw	r24, r28
    23e8:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	08 95       	ret

000023f2 <u8g_Begin>:
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	ec 01       	movw	r28, r24
    23f8:	6a 81       	ldd	r22, Y+2	; 0x02
    23fa:	7b 81       	ldd	r23, Y+3	; 0x03
    23fc:	0e 94 41 11 	call	0x2282	; 0x2282 <u8g_InitLL>
    2400:	88 23       	and	r24, r24
    2402:	21 f0       	breq	.+8      	; 0x240c <u8g_Begin+0x1a>
    2404:	ce 01       	movw	r24, r28
    2406:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <u8g_UpdateDimension>
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <u8g_InitI2C>:
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	1f 93       	push	r17
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	ec 01       	movw	r28, r24
    241e:	7b 01       	movw	r14, r22
    2420:	14 2f       	mov	r17, r20
    2422:	0e 94 10 11 	call	0x2220	; 0x2220 <u8g_init_data>
    2426:	fb 82       	std	Y+3, r15	; 0x03
    2428:	ea 82       	std	Y+2, r14	; 0x02
    242a:	1e a7       	std	Y+46, r17	; 0x2e
    242c:	ce 01       	movw	r24, r28
    242e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <u8g_Begin>
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	ff 90       	pop	r15
    243a:	ef 90       	pop	r14
    243c:	08 95       	ret

0000243e <u8g_FirstPage>:
    243e:	fc 01       	movw	r30, r24
    2440:	62 81       	ldd	r22, Z+2	; 0x02
    2442:	73 81       	ldd	r23, Z+3	; 0x03
    2444:	0e 94 61 11 	call	0x22c2	; 0x22c2 <u8g_FirstPageLL>
    2448:	08 95       	ret

0000244a <u8g_NextPage>:
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	ec 01       	movw	r28, r24
    2450:	ee 85       	ldd	r30, Y+14	; 0x0e
    2452:	ff 85       	ldd	r31, Y+15	; 0x0f
    2454:	30 97       	sbiw	r30, 0x00	; 0
    2456:	09 f0       	breq	.+2      	; 0x245a <u8g_NextPage+0x10>
    2458:	09 95       	icall
    245a:	6a 81       	ldd	r22, Y+2	; 0x02
    245c:	7b 81       	ldd	r23, Y+3	; 0x03
    245e:	ce 01       	movw	r24, r28
    2460:	0e 94 87 11 	call	0x230e	; 0x230e <u8g_NextPageLL>
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	08 95       	ret

0000246a <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    246a:	0f 93       	push	r16
    246c:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    2472:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    2474:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    2476:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    2478:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    247a:	9f 01       	movw	r18, r30
    247c:	24 5e       	subi	r18, 0xE4	; 228
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    2480:	4b e3       	ldi	r20, 0x3B	; 59
    2482:	bc 01       	movw	r22, r24
    2484:	cf 01       	movw	r24, r30
    2486:	0e 94 3c 11 	call	0x2278	; 0x2278 <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    248a:	0f 91       	pop	r16
    248c:	08 95       	ret

0000248e <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    248e:	fc 01       	movw	r30, r24
    2490:	12 82       	std	Z+2, r1	; 0x02
    2492:	80 81       	ld	r24, Z
    2494:	81 50       	subi	r24, 0x01	; 1
    2496:	83 83       	std	Z+3, r24	; 0x03
    2498:	14 82       	std	Z+4, r1	; 0x04
    249a:	08 95       	ret

0000249c <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    249c:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    249e:	90 81       	ld	r25, Z
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	89 0f       	add	r24, r25
    24a4:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    24a6:	21 81       	ldd	r18, Z+1	; 0x01
    24a8:	82 17       	cp	r24, r18
    24aa:	60 f4       	brcc	.+24     	; 0x24c4 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    24ac:	84 81       	ldd	r24, Z+4	; 0x04
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    24b2:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    24b4:	98 0f       	add	r25, r24
  if ( y1 >= p->total_height )
    24b6:	92 17       	cp	r25, r18
    24b8:	10 f0       	brcs	.+4      	; 0x24be <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    24ba:	9f ef       	ldi	r25, 0xFF	; 255
    24bc:	92 0f       	add	r25, r18
  }
  p->page_y1 = y1;
    24be:	93 83       	std	Z+3, r25	; 0x03
  
  return 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    24c6:	08 95       	ret

000024c8 <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    24c8:	dc 01       	movw	r26, r24
    24ca:	16 96       	adiw	r26, 0x06	; 6
    24cc:	ed 91       	ld	r30, X+
    24ce:	fc 91       	ld	r31, X
    24d0:	17 97       	sbiw	r26, 0x07	; 7
    24d2:	15 96       	adiw	r26, 0x05	; 5
    24d4:	8c 91       	ld	r24, X
    24d6:	9f 01       	movw	r18, r30
    24d8:	28 0f       	add	r18, r24
    24da:	31 1d       	adc	r19, r1
    24dc:	c9 01       	movw	r24, r18
    24de:	11 92       	st	Z+, r1
    24e0:	e8 17       	cp	r30, r24
    24e2:	f9 07       	cpc	r31, r25
    24e4:	e1 f7       	brne	.-8      	; 0x24de <u8g_pb_Clear+0x16>
    24e6:	08 95       	ret

000024e8 <u8g_pb_IsYIntersection>:
    24e8:	fc 01       	movw	r30, r24
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	83 81       	ldd	r24, Z+3	; 0x03
    24ee:	86 17       	cp	r24, r22
    24f0:	08 f4       	brcc	.+2      	; 0x24f4 <u8g_pb_IsYIntersection+0xc>
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	31 e0       	ldi	r19, 0x01	; 1
    24f6:	46 17       	cp	r20, r22
    24f8:	08 f0       	brcs	.+2      	; 0x24fc <u8g_pb_IsYIntersection+0x14>
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	83 2f       	mov	r24, r19
    24fe:	89 2b       	or	r24, r25
    2500:	21 e0       	ldi	r18, 0x01	; 1
    2502:	52 81       	ldd	r21, Z+2	; 0x02
    2504:	45 17       	cp	r20, r21
    2506:	08 f4       	brcc	.+2      	; 0x250a <u8g_pb_IsYIntersection+0x22>
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	28 23       	and	r18, r24
    250c:	83 2f       	mov	r24, r19
    250e:	89 23       	and	r24, r25
    2510:	82 2b       	or	r24, r18
    2512:	08 95       	ret

00002514 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    2514:	dc 01       	movw	r26, r24
    2516:	fb 01       	movw	r30, r22
  box->x0 = 0;
    2518:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    251a:	12 96       	adiw	r26, 0x02	; 2
    251c:	8c 91       	ld	r24, X
    251e:	12 97       	sbiw	r26, 0x02	; 2
    2520:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    2522:	15 96       	adiw	r26, 0x05	; 5
    2524:	8c 91       	ld	r24, X
    2526:	15 97       	sbiw	r26, 0x05	; 5
    2528:	81 50       	subi	r24, 0x01	; 1
    252a:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    252c:	13 96       	adiw	r26, 0x03	; 3
    252e:	8c 91       	ld	r24, X
    2530:	83 83       	std	Z+3, r24	; 0x03
    2532:	08 95       	ret

00002534 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2534:	fb 01       	movw	r30, r22
    2536:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    2538:	23 81       	ldd	r18, Z+3	; 0x03
    253a:	21 30       	cpi	r18, 0x01	; 1
    253c:	19 f0       	breq	.+6      	; 0x2544 <u8g_pb_Is8PixelVisible+0x10>
    253e:	23 30       	cpi	r18, 0x03	; 3
    2540:	21 f0       	breq	.+8      	; 0x254a <u8g_pb_Is8PixelVisible+0x16>
    2542:	06 c0       	rjmp	.+12     	; 0x2550 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    2544:	48 e0       	ldi	r20, 0x08	; 8
    2546:	43 0f       	add	r20, r19
      break;
    2548:	04 c0       	rjmp	.+8      	; 0x2552 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    254a:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    254c:	38 50       	subi	r19, 0x08	; 8
      break;
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2550:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    2552:	63 2f       	mov	r22, r19
    2554:	0e 94 74 12 	call	0x24e8	; 0x24e8 <u8g_pb_IsYIntersection>
}
    2558:	08 95       	ret

0000255a <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    255a:	fc 01       	movw	r30, r24
    255c:	cb 01       	movw	r24, r22
    255e:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    2560:	26 81       	ldd	r18, Z+6	; 0x06
    2562:	37 81       	ldd	r19, Z+7	; 0x07
    2564:	45 81       	ldd	r20, Z+5	; 0x05
    2566:	0e 94 98 0c 	call	0x1930	; 0x1930 <u8g_WriteSequence>
}
    256a:	08 95       	ret

0000256c <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    256c:	dc 01       	movw	r26, r24
    256e:	16 96       	adiw	r26, 0x06	; 6
    2570:	ed 91       	ld	r30, X+
    2572:	fc 91       	ld	r31, X
    2574:	17 97       	sbiw	r26, 0x07	; 7
    2576:	12 96       	adiw	r26, 0x02	; 2
    2578:	8c 91       	ld	r24, X
    257a:	48 1b       	sub	r20, r24
    257c:	47 70       	andi	r20, 0x07	; 7
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <u8g_pb8v1_set_pixel+0x1c>
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	4a 95       	dec	r20
    258a:	e2 f7       	brpl	.-8      	; 0x2584 <u8g_pb8v1_set_pixel+0x18>
    258c:	e6 0f       	add	r30, r22
    258e:	f1 1d       	adc	r31, r1
    2590:	22 23       	and	r18, r18
    2592:	21 f0       	breq	.+8      	; 0x259c <u8g_pb8v1_set_pixel+0x30>
    2594:	90 81       	ld	r25, Z
    2596:	89 2b       	or	r24, r25
    2598:	80 83       	st	Z, r24
    259a:	08 95       	ret
    259c:	80 95       	com	r24
    259e:	90 81       	ld	r25, Z
    25a0:	89 23       	and	r24, r25
    25a2:	80 83       	st	Z, r24
    25a4:	08 95       	ret

000025a6 <u8g_pb8v1_SetPixel>:
    25a6:	fb 01       	movw	r30, r22
    25a8:	41 81       	ldd	r20, Z+1	; 0x01
    25aa:	fc 01       	movw	r30, r24
    25ac:	22 81       	ldd	r18, Z+2	; 0x02
    25ae:	42 17       	cp	r20, r18
    25b0:	70 f0       	brcs	.+28     	; 0x25ce <u8g_pb8v1_SetPixel+0x28>
    25b2:	23 81       	ldd	r18, Z+3	; 0x03
    25b4:	24 17       	cp	r18, r20
    25b6:	58 f0       	brcs	.+22     	; 0x25ce <u8g_pb8v1_SetPixel+0x28>
    25b8:	fb 01       	movw	r30, r22
    25ba:	30 81       	ld	r19, Z
    25bc:	fc 01       	movw	r30, r24
    25be:	25 81       	ldd	r18, Z+5	; 0x05
    25c0:	32 17       	cp	r19, r18
    25c2:	28 f4       	brcc	.+10     	; 0x25ce <u8g_pb8v1_SetPixel+0x28>
    25c4:	fb 01       	movw	r30, r22
    25c6:	24 81       	ldd	r18, Z+4	; 0x04
    25c8:	63 2f       	mov	r22, r19
    25ca:	0e 94 b6 12 	call	0x256c	; 0x256c <u8g_pb8v1_set_pixel>
    25ce:	08 95       	ret

000025d0 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	7c 01       	movw	r14, r24
    25e0:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    25e2:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	49 f0       	breq	.+18     	; 0x25fc <u8g_pb8v1_Set8PixelOpt2+0x2c>
    25ea:	28 f0       	brcs	.+10     	; 0x25f6 <u8g_pb8v1_Set8PixelOpt2+0x26>
    25ec:	82 30       	cpi	r24, 0x02	; 2
    25ee:	51 f0       	breq	.+20     	; 0x2604 <u8g_pb8v1_Set8PixelOpt2+0x34>
    25f0:	83 30       	cpi	r24, 0x03	; 3
    25f2:	59 f0       	breq	.+22     	; 0x260a <u8g_pb8v1_Set8PixelOpt2+0x3a>
    25f4:	0e c0       	rjmp	.+28     	; 0x2612 <u8g_pb8v1_Set8PixelOpt2+0x42>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    25f6:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    25f8:	01 e0       	ldi	r16, 0x01	; 1
    25fa:	0d c0       	rjmp	.+26     	; 0x2616 <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 1: dy++; break;
    25fc:	dd 24       	eor	r13, r13
    25fe:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2600:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    2602:	09 c0       	rjmp	.+18     	; 0x2616 <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2604:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    2606:	0f ef       	ldi	r16, 0xFF	; 255
    2608:	06 c0       	rjmp	.+12     	; 0x2616 <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
    260a:	dd 24       	eor	r13, r13
    260c:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    260e:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2612:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2614:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    2616:	11 23       	and	r17, r17
    2618:	24 f4       	brge	.+8      	; 0x2622 <u8g_pb8v1_Set8PixelOpt2+0x52>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    261a:	be 01       	movw	r22, r28
    261c:	c7 01       	movw	r24, r14
    261e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2622:	98 81       	ld	r25, Y
    2624:	90 0f       	add	r25, r16
    2626:	98 83       	st	Y, r25
    arg_pixel->y += dy;
    2628:	99 81       	ldd	r25, Y+1	; 0x01
    262a:	9d 0d       	add	r25, r13
    262c:	99 83       	std	Y+1, r25	; 0x01
    pixel <<= 1;
    262e:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    2630:	91 f7       	brne	.-28     	; 0x2616 <u8g_pb8v1_Set8PixelOpt2+0x46>
  
}
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	08 95       	ret

00002642 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    264a:	fb 01       	movw	r30, r22
    264c:	c2 81       	ldd	r28, Z+2	; 0x02
    264e:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	fa 01       	movw	r30, r20
    2654:	74 97       	sbiw	r30, 0x14	; 20
    2656:	e4 33       	cpi	r30, 0x34	; 52
    2658:	f1 05       	cpc	r31, r1
    265a:	c8 f5       	brcc	.+114    	; 0x26ce <u8g_dev_pb8v1_base_fn+0x8c>
    265c:	89 01       	movw	r16, r18
    265e:	ec 5c       	subi	r30, 0xCC	; 204
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    2666:	b9 01       	movw	r22, r18
    2668:	ce 01       	movw	r24, r28
    266a:	0e 94 9a 12 	call	0x2534	; 0x2534 <u8g_pb_Is8PixelVisible>
    266e:	88 23       	and	r24, r24
    2670:	81 f1       	breq	.+96     	; 0x26d2 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    2672:	b8 01       	movw	r22, r16
    2674:	ce 01       	movw	r24, r28
    2676:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	2b c0       	rjmp	.+86     	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    267e:	b9 01       	movw	r22, r18
    2680:	ce 01       	movw	r24, r28
    2682:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    2688:	25 c0       	rjmp	.+74     	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    268a:	ce 01       	movw	r24, r28
    268c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    2690:	ce 01       	movw	r24, r28
    2692:	0e 94 47 12 	call	0x248e	; 0x248e <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    2698:	1d c0       	rjmp	.+58     	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    269a:	ce 01       	movw	r24, r28
    269c:	0e 94 4e 12 	call	0x249c	; 0x249c <u8g_page_Next>
    26a0:	88 23       	and	r24, r24
    26a2:	c1 f0       	breq	.+48     	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
        return 0;
      u8g_pb_Clear(pb);
    26a4:	ce 01       	movw	r24, r28
    26a6:	0e 94 64 12 	call	0x24c8	; 0x24c8 <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    26ac:	13 c0       	rjmp	.+38     	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    26ae:	b9 01       	movw	r22, r18
    26b0:	ce 01       	movw	r24, r28
    26b2:	0e 94 8a 12 	call	0x2514	; 0x2514 <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	f9 01       	movw	r30, r18
    26be:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    26c2:	08 c0       	rjmp	.+16     	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	f9 01       	movw	r30, r18
    26c8:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <u8g_dev_pb8v1_base_fn+0x92>
  }
  return 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
}
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    26de:	08 95       	ret

000026e0 <__tablejump2__>:
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	05 90       	lpm	r0, Z+
    26e6:	f4 91       	lpm	r31, Z
    26e8:	e0 2d       	mov	r30, r0
    26ea:	09 94       	ijmp

000026ec <_exit>:
    26ec:	f8 94       	cli

000026ee <__stop_program>:
    26ee:	ff cf       	rjmp	.-2      	; 0x26ee <__stop_program>
