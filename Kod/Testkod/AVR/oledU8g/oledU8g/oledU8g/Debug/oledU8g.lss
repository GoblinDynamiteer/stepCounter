
oledU8g.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00002838  000028cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ba  00800114  00800114  000028e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000698  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e51c  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e7d  00000000  00000000  00011504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000031dc  00000000  00000000  00013381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000151c  00000000  00000000  00016560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003638  00000000  00000000  00017a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009531  00000000  00000000  0001b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a8  00000000  00000000  000245e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__ctors_end>
       4:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
       8:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
       c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      10:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      14:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      18:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      1c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      20:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      24:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      28:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      2c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      30:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      34:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      38:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      3c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      40:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      44:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      48:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      4c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      50:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      54:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      58:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      5c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      60:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      64:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      68:	81 13       	cpse	r24, r17
      6a:	89 13       	cpse	r24, r25
      6c:	a3 13       	cpse	r26, r19
      6e:	93 13       	cpse	r25, r19
      70:	a3 13       	cpse	r26, r19
      72:	a3 13       	cpse	r26, r19
      74:	a3 13       	cpse	r26, r19
      76:	a3 13       	cpse	r26, r19
      78:	a3 13       	cpse	r26, r19
      7a:	a3 13       	cpse	r26, r19
      7c:	a3 13       	cpse	r26, r19
      7e:	a3 13       	cpse	r26, r19
      80:	a3 13       	cpse	r26, r19
      82:	a3 13       	cpse	r26, r19
      84:	a3 13       	cpse	r26, r19
      86:	a3 13       	cpse	r26, r19
      88:	a3 13       	cpse	r26, r19
      8a:	a3 13       	cpse	r26, r19
      8c:	a3 13       	cpse	r26, r19
      8e:	a3 13       	cpse	r26, r19
      90:	a3 13       	cpse	r26, r19
      92:	a3 13       	cpse	r26, r19
      94:	a3 13       	cpse	r26, r19
      96:	a3 13       	cpse	r26, r19
      98:	a3 13       	cpse	r26, r19
      9a:	a3 13       	cpse	r26, r19
      9c:	a3 13       	cpse	r26, r19
      9e:	a3 13       	cpse	r26, r19
      a0:	a3 13       	cpse	r26, r19
      a2:	a3 13       	cpse	r26, r19
      a4:	7b 13       	cpse	r23, r27
      a6:	a3 13       	cpse	r26, r19
      a8:	a3 13       	cpse	r26, r19
      aa:	a3 13       	cpse	r26, r19
      ac:	a3 13       	cpse	r26, r19
      ae:	a3 13       	cpse	r26, r19
      b0:	a3 13       	cpse	r26, r19
      b2:	a3 13       	cpse	r26, r19
      b4:	a3 13       	cpse	r26, r19
      b6:	6f 13       	cpse	r22, r31
      b8:	a3 13       	cpse	r26, r19
      ba:	a3 13       	cpse	r26, r19
      bc:	a3 13       	cpse	r26, r19
      be:	a3 13       	cpse	r26, r19
      c0:	a3 13       	cpse	r26, r19
      c2:	a3 13       	cpse	r26, r19
      c4:	a3 13       	cpse	r26, r19
      c6:	a3 13       	cpse	r26, r19
      c8:	a3 13       	cpse	r26, r19
      ca:	a3 13       	cpse	r26, r19
      cc:	99 13       	cpse	r25, r25
      ce:	9e 13       	cpse	r25, r30

000000d0 <__trampolines_end>:
      d0:	ff e0       	ldi	r31, 0x0F	; 15
      d2:	ff d1       	rcall	.+1022   	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
      d4:	af ff       	.word	0xffaf	; ????
      d6:	32 ff       	sbrs	r19, 2
      d8:	d0 ff       	sbrs	r29, 0
      da:	fe ff       	Address 0x000000da is out of bounds.
.word	0xffff	; ????

000000db <u8g_dev_ssd13xx_sleep_on>:
      db:	ff e0 ff d1 ae ff d0 ff fe                          .........

000000e4 <u8g_dev_ssd1306_128x64_data_start>:
      e4:	ff e0 ff d1 10 00 ff fe                             ........

000000ec <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      ec:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      fc:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     10c:	a6 af ff d0 ff fe                                   ......

00000112 <u8g_font_fub14>:
     112:	00 1f 1a fe fb 0e 03 74 07 5f 20 ff fc 15 fb 0e     .......t._ .....
     122:	fc 00 00 00 06 00 00 03 0e 0e 08 03 00 e0 e0 e0     ................
     132:	e0 e0 e0 e0 e0 e0 e0 00 00 e0 e0 08 06 06 0a 01     ................
     142:	08 e7 67 67 67 67 67 0c 0e 1c 0e 01 00 06 60 06     ..ggggg.......`.
     152:	60 0c 60 3f f0 3f f0 18 c0 19 80 19 80 ff e0 ff     `.`?.?..........
     162:	e0 33 00 33 00 63 00 66 00 0a 11 22 0c 01 fe 04     .3.3.c.f..."....
     172:	00 1f 00 7f 80 77 80 e5 c0 e4 00 fc 00 7e 00 1f     .....w.......~..
     182:	80 07 c0 05 c0 e5 c0 e5 c0 7f 80 3f 00 04 00 04     ...........?....
     192:	00 12 0e 2a 14 01 00 3c 04 00 7e 0c 00 c3 18 00     ...*...<..~.....
     1a2:	c3 10 00 c3 30 00 e7 60 00 7e 67 00 18 cd 80 00     ....0..`.~g.....
     1b2:	98 c0 01 98 c0 03 18 c0 03 18 c0 06 0f 80 0c 07     ................
     1c2:	00 0e 0e 1c 10 01 00 1f 00 7f 80 71 c0 71 c0 73     ...........q.q.s
     1d2:	80 3f 00 1e 00 7e 38 f7 30 e3 b0 e1 f0 e0 e0 7f     .?...~8.0.......
     1e2:	f0 1f bc 03 06 06 08 03 08 e0 c0 c0 c0 c0 c0 04     ................
     1f2:	11 11 08 02 fd 30 70 70 60 e0 e0 e0 e0 e0 e0 e0     .....0pp`.......
     202:	e0 e0 60 70 70 30 04 11 11 08 02 fd c0 c0 e0 e0     ..`pp0..........
     212:	60 60 70 70 70 70 70 60 60 e0 e0 c0 c0 08 07 07     ``ppppp``.......
     222:	0c 02 07 66 3c 18 ff 18 3c 66 0c 0c 18 14 04 00     ...f<...<f......
     232:	02 00 02 00 02 00 02 00 02 00 ff f0 ff f0 02 00     ................
     242:	02 00 02 00 02 00 02 00 04 05 05 06 01 fe 70 70     ..............pp
     252:	60 e0 c0 05 03 03 07 01 04 f8 f8 f8 03 03 03 06     `...............
     262:	02 00 e0 e0 e0 06 0f 0f 09 01 ff 0c 0c 0c 0c 18     ................
     272:	18 18 30 30 30 60 60 60 60 c0 0a 0e 1c 0b 01 00     ..000````.......
     282:	1e 00 7f 00 61 80 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0     ....a...........
     292:	e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 06 0e 0e 0b     ......a.........
     2a2:	02 00 1c 7c fc dc 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     ...|............
     2b2:	0a 0e 1c 0b 01 00 1f 00 7f 80 61 c0 e1 c0 01 c0     ..........a.....
     2c2:	01 c0 03 80 07 80 0f 00 1e 00 38 00 70 00 ff c0     ..........8.p...
     2d2:	ff c0 0a 0e 1c 0b 01 00 3e 00 7f 00 e3 80 03 80     ........>.......
     2e2:	03 80 1f 00 1f 00 03 80 01 c0 01 c0 e1 c0 f3 80     ................
     2f2:	7f 00 3e 00 0b 0e 1c 0b 01 00 07 80 0f 80 0f 80     ..>.............
     302:	1b 80 3b 80 33 80 73 80 63 80 e3 80 ff e0 ff e0     ..;.3.s.c.......
     312:	03 80 03 80 03 80 0a 0e 1c 0b 01 00 ff 80 ff 80     ................
     322:	e0 00 e0 00 e0 00 ff 00 ff 80 e1 80 01 c0 01 c0     ................
     332:	e1 c0 e3 80 7f 00 3e 00 0a 0e 1c 0b 01 00 1e 00     ......>.........
     342:	3f 80 61 80 60 00 e0 00 df 00 ff 80 e1 80 e1 c0     ?.a.`...........
     352:	e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0b 01 00     ....a...........
     362:	ff c0 ff c0 01 c0 03 80 03 80 07 80 07 00 07 00     ................
     372:	0e 00 0e 00 1c 00 1c 00 3c 00 38 00 0a 0e 1c 0b     ........<.8.....
     382:	01 00 3f 00 7f 80 e1 c0 e1 c0 e1 80 7f 00 3f 00     ..?...........?.
     392:	73 80 e1 c0 e1 c0 e1 c0 e1 c0 7f 80 3f 00 0a 0e     s...........?...
     3a2:	1c 0b 01 00 1e 00 7f 00 e1 80 e1 80 e1 c0 e1 c0     ................
     3b2:	f3 c0 7f c0 19 c0 01 80 e1 80 63 80 7f 00 3e 00     ..........c...>.
     3c2:	03 0a 0a 07 03 00 e0 e0 e0 00 00 00 00 e0 e0 e0     ................
     3d2:	04 0c 0c 06 01 fe 70 70 70 00 00 00 00 70 60 e0     ......ppp....p`.
     3e2:	c0 c0 0c 0a 14 14 04 01 00 10 00 e0 03 80 1c 00     ................
     3f2:	e0 00 c0 00 38 00 07 00 01 c0 00 30 0c 05 0a 14     ....8......0....
     402:	04 03 ff f0 ff f0 00 00 ff f0 ff f0 0c 0a 14 14     ................
     412:	04 01 80 00 70 00 1c 00 03 80 00 70 00 30 01 c0     ....p......p.0..
     422:	0e 00 38 00 c0 00 09 0e 1c 0b 01 00 3e 00 7f 00     ..8.........>...
     432:	c3 80 43 80 03 80 07 00 06 00 0c 00 18 00 18 00     ..C.............
     442:	18 00 00 00 18 00 18 00 13 12 36 15 01 fc 01 f8     ..........6.....
     452:	00 0f fe 00 1e 07 80 38 03 c0 71 fd c0 73 fc e0     .......8..q..s..
     462:	e7 1c e0 e7 1c e0 e7 1c e0 e7 1c e0 e7 1c e0 e7     ................
     472:	3c c0 73 ff c0 71 e7 80 38 00 00 1e 04 00 0f fc     <.s..q..8.......
     482:	00 03 fc 00 0e 0e 1c 0e 00 00 07 80 07 80 07 c0     ................
     492:	0f c0 0e c0 1c e0 1c e0 1c 60 38 70 3f f0 3f f8     .........`8p?.?.
     4a2:	70 38 70 38 e0 1c 0b 0e 1c 0d 01 00 ff 00 ff 80     p8p8............
     4b2:	e1 c0 e1 c0 e1 c0 e3 80 ff 00 ff 80 e0 c0 e0 e0     ................
     4c2:	e0 e0 e0 e0 ff c0 ff 00 0d 0e 1c 0f 01 00 0f 80     ................
     4d2:	3f e0 70 70 60 70 e0 00 e0 00 e0 00 e0 00 e0 00     ?.pp`p..........
     4e2:	e0 78 60 70 70 f0 3f e0 0f 80 0c 0e 1c 0e 01 00     .x`pp.?.........
     4f2:	ff 00 ff c0 e1 e0 e0 e0 e0 70 e0 70 e0 70 e0 70     .........p.p.p.p
     502:	e0 70 e0 70 e0 e0 e1 e0 ff c0 ff 00 0a 0e 1c 0c     .p.p............
     512:	01 00 ff c0 ff c0 e0 00 e0 00 e0 00 e0 00 ff 80     ................
     522:	ff 80 e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 09 0e     ................
     532:	1c 0b 01 00 ff 80 ff 80 e0 00 e0 00 e0 00 e0 00     ................
     542:	ff 80 ff 80 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
     552:	0d 0e 1c 0f 01 00 0f c0 1f f0 38 38 70 38 e0 00     ..........88p8..
     562:	e0 00 e1 f8 e1 f8 e0 38 e0 38 70 38 78 38 3f f8     .......8.8p8x8?.
     572:	0f f0 0c 0e 1c 0e 01 00 e0 70 e0 70 e0 70 e0 70     .........p.p.p.p
     582:	e0 70 e0 70 ff f0 ff f0 e0 70 e0 70 e0 70 e0 70     .p.p.....p.p.p.p
     592:	e0 70 e0 70 03 0e 0e 05 01 00 e0 e0 e0 e0 e0 e0     .p.p............
     5a2:	e0 e0 e0 e0 e0 e0 e0 e0 0a 0e 1c 0c 01 00 01 c0     ................
     5b2:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     5c2:	e1 c0 e1 c0 f3 c0 7f 80 3e 00 0b 0e 1c 0d 01 00     ........>.......
     5d2:	e1 e0 e3 c0 e3 80 e7 00 ee 00 fc 00 fc 00 fe 00     ................
     5e2:	ee 00 e7 00 e7 80 e3 c0 e1 c0 e0 e0 0a 0e 1c 0b     ................
     5f2:	01 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
     602:	e0 00 e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 10 0e     ................
     612:	1c 12 01 00 f8 1f f8 1f fc 3f fc 3f fc 37 ec 77     .........?.?.7.w
     622:	ee 77 ee 67 e6 e7 e7 e7 e7 c7 e3 c7 e3 c7 e3 87     .w.g............
     632:	0d 0e 1c 0f 01 00 f0 38 f8 38 f8 38 fc 38 ee 38     .......8.8.8.8.8
     642:	ee 38 e7 38 e7 38 e3 b8 e3 b8 e1 f8 e1 f8 e0 f8     .8.8.8..........
     652:	e0 f8 0e 0e 1c 10 01 00 0f c0 3f f0 70 70 60 38     ..........?.pp`8
     662:	e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70 70     ............`8pp
     672:	3f f0 0f c0 0b 0e 1c 0d 01 00 ff 00 ff c0 e1 c0     ?...............
     682:	e0 e0 e0 e0 e0 e0 e1 c0 ff c0 ff 00 e0 00 e0 00     ................
     692:	e0 00 e0 00 e0 00 0f 0e 1c 11 01 00 0f c0 3f e0     ..............?.
     6a2:	70 70 60 38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18     pp`8............
     6b2:	60 38 70 78 3f fe 0f fe 0b 0e 1c 0d 01 00 ff 80     `8px?...........
     6c2:	ff c0 e0 e0 e0 e0 e0 e0 e0 e0 ff 80 ff c0 e1 c0     ................
     6d2:	e0 e0 e0 e0 e0 e0 e0 e0 e0 60 0c 0e 1c 0e 01 00     .........`......
     6e2:	1f 80 3f c0 60 e0 e0 e0 e0 00 fc 00 7f 80 1f e0     ..?.`...........
     6f2:	03 e0 00 70 e0 70 e0 60 7f c0 1f 80 0c 0e 1c 0e     ...p.p.`........
     702:	01 00 ff f0 ff f0 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     712:	0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0c 0e     ................
     722:	1c 0e 01 00 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70     .....p.p.p.p.p.p
     732:	e0 70 e0 70 e0 70 e0 70 e0 70 70 e0 3f c0 1f 80     .p.p.p.p.pp.?...
     742:	0e 0e 1c 0f 00 00 f0 1c 70 1c 70 3c 38 38 38 38     ........p.p<8888
     752:	38 70 1c 70 1c 70 1e e0 0e e0 0f c0 07 c0 07 c0     8p.p.p..........
     762:	07 80 14 0e 2a 14 00 00 f0 f0 f0 70 f0 e0 70 f0     ....*......p..p.
     772:	e0 71 f8 e0 71 f8 e0 39 99 c0 39 99 c0 3b 9d c0     .q..q..9..9..;..
     782:	3b 9d c0 1b 0d 80 1f 0f 80 1f 0f 80 1f 0f 80 0e     ;...............
     792:	07 00 0c 0e 1c 0e 01 00 e0 70 70 e0 78 e0 39 c0     .........pp.x.9.
     7a2:	1f 80 1f 00 0f 00 0f 00 1f 80 3b c0 39 c0 70 e0     ..........;.9.p.
     7b2:	e0 f0 e0 70 0c 0e 1c 0d 00 00 f0 70 70 f0 38 e0     ...p.......pp.8.
     7c2:	38 e0 1d c0 1d c0 0f 80 0f 00 07 00 07 00 07 00     8...............
     7d2:	07 00 07 00 07 00 0b 0e 1c 0d 01 00 7f e0 7f e0     ................
     7e2:	01 e0 03 c0 03 80 07 80 0f 00 1e 00 1e 00 3c 00     ..............<.
     7f2:	78 00 f8 00 ff e0 ff e0 05 12 12 08 02 fc f8 f8     x...............
     802:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 f8 f8     ................
     812:	06 0f 0f 09 01 ff c0 c0 60 60 60 30 30 30 10 18     ........```000..
     822:	18 18 0c 0c 0c 05 12 12 08 02 fc f8 f8 38 38 38     .............888
     832:	38 38 38 38 38 38 38 38 38 38 38 f8 f8 0a 0c 18     88888888888.....
     842:	14 05 00 0c 00 0c 00 0c 00 12 00 12 00 33 00 21     .............3.!
     852:	00 21 00 40 80 40 80 c0 c0 80 40 0a 02 04 0a 00     .!.@.@....@.....
     862:	fd ff c0 ff c0 05 04 04 05 ff 0c e0 70 30 18 09     ............p0..
     872:	0a 14 0b 01 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3     .....>..........
     882:	80 e3 80 e3 80 ff 80 39 80 0a 0e 1c 0c 01 00 e0     .......9........
     892:	00 e0 00 e0 00 e0 00 ef 00 ff 80 e1 c0 e1 c0 e1     ................
     8a2:	c0 e1 c0 e1 c0 e1 80 ff 80 ef 00 09 0a 14 0b 01     ................
     8b2:	00 3e 00 7f 00 e3 80 e3 80 e0 00 e0 00 e3 80 e3     .>..............
     8c2:	80 7f 00 3e 00 0a 0e 1c 0c 01 00 01 c0 01 c0 01     ...>............
     8d2:	c0 01 c0 3d c0 7f c0 e1 c0 e1 c0 e1 c0 e1 c0 e1     ...=............
     8e2:	c0 e1 c0 7f c0 3d c0 09 0a 14 0b 01 00 1e 00 7f     .....=..........
     8f2:	00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f 80 3e     ...............>
     902:	00 07 0e 0e 08 01 00 1e 3e 38 38 fe fe 38 38 38     ........>88..888
     912:	38 38 38 38 38 0a 0e 1c 0c 01 fc 3d c0 7f c0 71     88888......=...q
     922:	c0 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 7f c0 3d c0 01     .............=..
     932:	c0 61 c0 7f 80 3f 00 09 0e 1c 0b 01 00 e0 00 e0     .a...?..........
     942:	00 e0 00 e0 00 ef 00 ff 80 e3 80 e3 80 e3 80 e3     ................
     952:	80 e3 80 e3 80 e3 80 e3 80 03 0e 0e 05 01 00 e0     ................
     962:	e0 e0 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 04 12 12     ................
     972:	07 02 fc 70 70 70 00 70 70 70 70 70 70 70 70 70     ...ppp.ppppppppp
     982:	70 70 70 f0 e0 09 0e 1c 0b 01 00 e0 00 e0 00 e0     ppp.............
     992:	00 e0 00 e7 80 e7 00 ee 00 fc 00 fc 00 fc 00 ee     ................
     9a2:	00 e7 00 e7 00 e3 80 03 0e 0e 05 01 00 e0 e0 e0     ................
     9b2:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 0f 0a 14 12 01     ................
     9c2:	00 ef 3c ff fe e3 ce e3 86 e3 86 e3 86 e3 86 e3     ..<.............
     9d2:	86 e3 86 e3 86 09 0a 14 0b 01 00 ef 00 ff 80 e3     ................
     9e2:	80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 0a     ................
     9f2:	0a 14 0c 01 00 1e 00 7f 80 61 80 e1 c0 e1 c0 e1     .........a......
     a02:	c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0c 01 fc ef     ...a............
     a12:	00 ff 80 e1 80 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 ff     ................
     a22:	80 ef 00 e0 00 e0 00 e0 00 e0 00 0a 0e 1c 0c 01     ................
     a32:	fc 3d c0 7f c0 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 e1     .=..............
     a42:	c0 7f c0 3d c0 01 c0 01 c0 01 c0 01 c0 06 0a 0a     ...=............
     a52:	08 01 00 ec fc f0 e0 e0 e0 e0 e0 e0 e0 09 0a 14     ................
     a62:	0b 01 00 3e 00 ff 00 e3 80 e0 00 7e 00 1f 00 03     ...>.......~....
     a72:	80 e3 80 ff 00 3e 00 07 0d 0d 09 01 00 08 38 38     .....>........88
     a82:	fe fe 38 38 38 38 38 38 3e 1e 09 0a 14 0b 01 00     ..888888>.......
     a92:	e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80     ................
     aa2:	ff 80 7b 80 0b 0a 14 0b 00 00 e0 e0 71 c0 71 c0     ..{.........q.q.
     ab2:	31 80 3b 80 3b 80 1b 00 1f 00 1f 00 0e 00 11 0a     1.;.;...........
     ac2:	1e 11 00 00 e1 c3 80 61 e3 00 73 e7 00 73 67 00     .......a..s..sg.
     ad2:	33 77 00 3f 76 00 3f 3e 00 3e 3e 00 1e 3c 00 1e     3w.?v.?>.>>..<..
     ae2:	1c 00 09 0a 14 0b 01 00 e3 80 73 00 77 00 3e 00     ..........s.w.>.
     af2:	1c 00 3e 00 3e 00 77 00 e3 80 e3 80 0b 0e 1c 0b     ..>.>.w.........
     b02:	00 fc e0 e0 71 c0 71 c0 39 80 3b 80 3b 80 1f 00     ....q.q.9.;.;...
     b12:	1f 00 0f 00 0e 00 0e 00 0e 00 1c 00 1c 00 08 0a     ................
     b22:	0a 0a 01 00 ff ff 07 0e 1c 38 70 e0 ff ff 07 13     .........8p.....
     b32:	13 0a 02 fb 0e 3e 38 38 38 38 38 30 f0 c0 f0 70     .....>888880...p
     b42:	38 38 38 38 38 3e 0e 01 15 15 07 03 fb 80 80 80     88888>..........
     b52:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     b62:	80 80 07 13 13 0a 02 fb e0 f0 38 38 38 38 38 38     ..........888888
     b72:	1c 06 1c 38 38 38 38 38 38 f0 e0 0b 03 06 0b 00     ...888888.......
     b82:	04 30 60 7f c0 c7 80 ff ff ff ff ff ff ff ff ff     .0`.............
     b92:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ba2:	ff ff ff ff ff ff ff ff 00 00 00 06 00 00 03 0e     ................
     bb2:	0e 09 03 fc e0 e0 00 00 e0 e0 e0 e0 e0 e0 e0 e0     ................
     bc2:	e0 e0 09 0e 1c 0b 01 fe 02 00 02 00 3e 00 7f 00     ............>...
     bd2:	e7 80 e7 80 e8 00 e8 00 eb 80 f3 80 7f 00 3e 00     ..............>.
     be2:	20 00 20 00 0a 0e 1c 0c 01 00 1f 00 3f c0 71 c0      . .........?.q.
     bf2:	70 00 70 00 fe 00 fe 00 70 00 70 00 70 00 70 00     p.p.....p.p.p.p.
     c02:	70 00 ff c0 ff c0 0a 0a 14 0c 01 03 80 40 5e 80     p............@^.
     c12:	21 00 40 80 40 80 40 80 40 80 21 00 5e 80 80 40     !.@.@.@.@.!.^..@
     c22:	0b 0e 1c 0d 01 00 e0 e0 e1 c0 71 c0 71 80 fb e0     ..........q.q...
     c32:	fb e0 1f 00 ff e0 ff e0 0e 00 0e 00 0e 00 0e 00     ................
     c42:	0e 00 01 12 12 07 03 fc 80 80 80 80 80 80 80 80     ................
     c52:	00 00 80 80 80 80 80 80 80 80 08 12 12 0a 01 fc     ................
     c62:	3e 7e e0 e0 70 3c 7e e7 e7 e7 fe 7c 1e 07 07 87     >~..p<~....|....
     c72:	fe 38 07 02 02 07 00 0c ee ee 0f 0e 1c 11 01 00     .8..............
     c82:	07 c0 1f f0 37 98 6f cc cc e4 9c 02 9c 02 9c e2     ....7.o.........
     c92:	8c e2 cf c6 47 84 20 18 1c 70 0f c0 07 09 09 08     ....G. ..p......
     ca2:	01 05 78 cc 7c cc cc fc 24 00 fe 0a 08 10 0c 01     ..x.|...$.......
     cb2:	01 39 c0 71 80 73 80 e7 00 e7 00 73 80 71 80 39     .9.q.s.....s.q.9
     cc2:	c0 0b 05 0a 0d 01 04 ff e0 ff e0 00 20 00 20 00     ............ . .
     cd2:	20 ff 0f 0e 1c 11 01 00 07 c0 1f f0 3f 98 6f ec      ...........?.o.
     ce2:	cc 64 8c 62 8f c2 8f c2 8c 62 cc 66 4c 64 20 18     .d.b.....b.fLd .
     cf2:	1c 70 0f c0 06 02 02 06 00 0c fc fc 05 05 05 07     .p..............
     d02:	01 09 70 88 88 88 70 0c 0c 18 14 04 00 02 00 02     ..p...p.........
     d12:	00 02 00 ff f0 ff f0 02 00 02 00 02 00 00 00 00     ................
     d22:	00 ff f0 ff f0 06 08 08 08 01 06 78 cc 0c 18 30     ...........x...0
     d32:	e0 fc fc 06 07 07 08 01 07 78 cc 0c 30 0c cc 78     .........x..0..x
     d42:	04 04 04 04 01 0c 30 60 60 c0 ff 09 11 22 0b 01     ......0``...."..
     d52:	fd 3f 80 79 00 f9 00 f9 00 f9 00 f9 00 79 00 09     .?.y.........y..
     d62:	00 09 00 09 00 09 00 09 00 09 00 09 00 09 00 09     ................
     d72:	00 09 00 03 03 03 06 02 05 e0 e0 e0 05 05 05 05     ................
     d82:	01 fb 40 70 18 18 f0 04 08 08 06 01 06 30 f0 30     ..@p.........0.0
     d92:	30 30 30 30 30 07 09 09 09 01 05 38 44 c6 c6 c6     00000......8D...
     da2:	44 38 00 fe 0a 08 10 0c 01 01 e7 00 63 80 73 80     D8..........c.s.
     db2:	39 c0 39 c0 73 80 63 80 e7 00 0e 0e 1c 10 01 00     9.9.s.c.........
     dc2:	70 30 f0 30 30 60 30 c0 30 c0 31 80 31 9c 33 3c     p0.00`0.0.1.1.3<
     dd2:	06 3c 06 6c 0c cc 18 fc 18 0c 30 0c 0f 0e 1c 11     .<.l......0.....
     de2:	01 00 70 30 f0 20 30 60 30 c0 30 c0 31 80 33 3c     ..p0. 0`0.0.1.3<
     df2:	33 66 06 06 0c 0e 0c 1c 18 30 30 7e 30 7e 0e 0e     3f.......00~0~..
     e02:	1c 10 01 00 78 18 cc 30 0c 30 30 60 0c c0 cc c0     ....x..0.00`....
     e12:	79 9c 01 bc 03 3c 06 6c 06 cc 0c fc 08 0c 18 0c     y....<.l........
     e22:	09 0e 1c 0b 01 fc 0e 00 0e 00 00 00 0e 00 0e 00     ................
     e32:	0e 00 3c 00 70 00 e0 00 e0 00 e1 80 e1 80 7f 80     ..<.p...........
     e42:	3e 00 0e 14 28 0e 00 00 0c 00 0e 00 06 00 03 00     >...(...........
     e52:	00 00 00 00 07 80 07 80 07 c0 0f c0 0e c0 1c e0     ................
     e62:	1c e0 1c 60 38 70 3f f0 3f f8 70 38 70 38 e0 1c     ...`8p?.?.p8p8..
     e72:	0e 14 28 0e 00 00 00 c0 01 c0 01 80 03 00 00 00     ..(.............
     e82:	00 00 07 80 07 80 07 c0 0f c0 0e c0 1c e0 1c e0     ................
     e92:	1c 60 38 70 3f f0 3f f8 70 38 70 38 e0 1c 0e 14     .`8p?.?.p8p8....
     ea2:	28 0e 00 00 03 80 07 80 06 c0 0c c0 00 00 00 00     (...............
     eb2:	07 80 07 80 07 c0 0f c0 0e c0 1c e0 1c e0 1c 60     ...............`
     ec2:	38 70 3f f0 3f f8 70 38 70 38 e0 1c 0e 13 26 0e     8p?.?.p8p8....&.
     ed2:	00 00 06 40 0f c0 08 80 00 00 00 00 07 80 07 80     ...@............
     ee2:	07 c0 0f c0 0e c0 1c e0 1c e0 1c 60 38 70 3f f0     ...........`8p?.
     ef2:	3f f8 70 38 70 38 e0 1c 0e 13 26 0f 00 00 0e e0     ?.p8p8....&.....
     f02:	0e e0 00 00 00 00 00 00 03 80 07 80 07 c0 07 c0     ................
     f12:	0e c0 0e e0 1c e0 1c 70 1c 70 3f f8 3f f8 70 38     .......p.p?.?.p8
     f22:	70 1c e0 1c 0d 15 2a 0f 01 00 07 00 08 80 08 80     p.....*.........
     f32:	08 80 07 00 00 00 00 00 07 00 0f 80 0f 80 1d c0     ................
     f42:	1d c0 1d c0 38 e0 38 e0 30 60 7f f0 7f f0 e0 38     ....8.8.0`.....8
     f52:	e0 38 e0 38 13 0e 2a 14 00 00 00 ff e0 01 ff e0     .8.8..*.........
     f62:	03 f0 00 03 70 00 07 70 00 07 70 00 0e 7f c0 0e     ....p..p..p.....
     f72:	7f c0 1c 70 00 1f f0 00 3f f0 00 70 70 00 70 7f     ...p....?..pp.p.
     f82:	e0 e0 7f e0 0d 12 24 0f 01 fc 0f 80 3f e0 70 f0     ......$.....?.p.
     f92:	60 70 e0 00 e0 00 e0 00 e0 00 e0 00 e0 78 60 70     `p...........x`p
     fa2:	70 f0 3f e0 1f 80 04 00 07 80 01 80 0f 00 0a 14     p.?.............
     fb2:	28 0c 01 00 30 00 38 00 18 00 0c 00 00 00 00 00     (...0.8.........
     fc2:	ff c0 ff c0 e0 00 e0 00 e0 00 e0 00 ff 80 ff 80     ................
     fd2:	e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 0a 14 28 0c     ..............(.
     fe2:	01 00 07 00 06 00 0c 00 08 00 00 00 00 00 ff c0     ................
     ff2:	ff c0 e0 00 e0 00 e0 00 e0 00 ff 80 ff 80 e0 00     ................
    1002:	e0 00 e0 00 e0 00 ff c0 ff c0 0a 14 28 0c 01 00     ............(...
    1012:	1c 00 1e 00 36 00 23 00 00 00 00 00 ff c0 ff c0     ....6.#.........
    1022:	e0 00 e0 00 e0 00 e0 00 ff 80 ff 80 e0 00 e0 00     ................
    1032:	e0 00 e0 00 ff c0 ff c0 0a 13 26 0c 01 00 77 00     ..........&...w.
    1042:	77 00 00 00 00 00 00 00 ff c0 ff c0 e0 00 e0 00     w...............
    1052:	e0 00 e0 00 ff 80 ff 80 e0 00 e0 00 e0 00 e0 00     ................
    1062:	ff c0 ff c0 05 14 14 05 ff 00 e0 60 30 10 00 00     ...........`0...
    1072:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 04 14     88888888888888..
    1082:	14 05 01 00 30 70 60 c0 00 00 e0 e0 e0 e0 e0 e0     ....0p`.........
    1092:	e0 e0 e0 e0 e0 e0 e0 e0 05 14 14 05 00 00 70 70     ..............pp
    10a2:	d8 88 00 00 70 70 70 70 70 70 70 70 70 70 70 70     ....pppppppppppp
    10b2:	70 70 07 13 13 07 00 00 ee ee 00 00 00 38 38 38     pp...........888
    10c2:	38 38 38 38 38 38 38 38 38 38 38 0d 0e 1c 0e 00     88888888888.....
    10d2:	00 7f 80 7f e0 70 f0 70 70 70 38 70 38 fe 38 fe     .....p.ppp8p8.8.
    10e2:	38 70 38 70 38 70 70 70 f0 7f e0 7f 80 0d 13 26     8p8p8ppp.......&
    10f2:	0f 01 00 0c 40 1f 80 11 00 00 00 00 00 f0 38 f8     ....@.........8.
    1102:	38 f8 38 fc 38 ee 38 ee 38 e7 38 e7 38 e3 b8 e3     8.8.8.8.8.8.8...
    1112:	b8 e1 f8 e1 f8 e0 f8 e0 f8 0e 14 28 10 01 00 1c     ...........(....
    1122:	00 0c 00 06 00 02 00 00 00 00 00 0f c0 3f f0 70     .............?.p
    1132:	70 60 38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60     p`8............`
    1142:	38 70 70 3f f0 0f c0 0e 14 28 10 01 00 00 e0 01     8pp?.....(......
    1152:	c0 01 80 03 00 00 00 00 00 0f c0 3f f0 70 70 60     ...........?.pp`
    1162:	38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70     8............`8p
    1172:	70 3f f0 0f c0 0e 14 28 10 01 00 07 00 07 80 0d     p?.....(........
    1182:	c0 08 c0 00 00 00 00 0f c0 3f f0 70 70 60 38 e0     .........?.pp`8.
    1192:	18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70 70 3f     ...........`8pp?
    11a2:	f0 0f c0 0e 13 26 10 01 00 07 c0 0f c0 00 00 00     .....&..........
    11b2:	00 00 00 0f c0 3f f0 70 30 60 38 e0 18 e0 1c e0     .....?.p0`8.....
    11c2:	1c e0 1c e0 1c e0 18 70 38 78 f0 3f f0 0f c0 0e     .......p8x.?....
    11d2:	13 26 10 01 00 1d c0 1d c0 00 00 00 00 00 00 0f     .&..............
    11e2:	c0 3f f0 70 70 60 38 e0 18 e0 1c e0 1c e0 1c e0     .?.pp`8.........
    11f2:	1c e0 18 60 38 70 70 3f f0 0f c0 0a 0a 14 14 05     ...`8pp?........
    1202:	01 80 40 c0 c0 61 80 33 00 0c 00 0c 00 12 00 21     ..@..a.3.......!
    1212:	00 40 80 80 40 0f 10 20 10 00 ff 00 02 07 e6 1f     .@..@.. ........
    1222:	fc 38 3c 30 3c 70 6c 70 ee 71 ce 73 8e 77 0e 7e     .8<0<plp.q.s.w.~
    1232:	0c 7c 1c 38 38 3f f0 ef e0 40 00 0c 14 28 0e 01     .|.88?...@...(..
    1242:	00 38 00 18 00 0c 00 06 00 00 00 00 00 e0 70 e0     .8............p.
    1252:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0     p.p.p.p.p.p.p.p.
    1262:	70 e0 70 71 e0 3f c0 1f 80 0c 14 28 0e 01 00 01     p.pq.?.....(....
    1272:	c0 03 80 03 00 06 00 00 00 00 00 e0 70 e0 70 e0     ............p.p.
    1282:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0     p.p.p.p.p.p.p.p.
    1292:	70 71 e0 3f c0 1f 80 0c 14 28 0e 01 00 0e 00 0f     pq.?.....(......
    12a2:	00 1b 00 11 80 00 00 00 00 e0 70 e0 70 e0 70 e0     ..........p.p.p.
    12b2:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 71     p.p.p.p.p.p.p.pq
    12c2:	e0 3f c0 1f 80 0c 13 26 0e 01 00 1d c0 1d c0 00     .?.....&........
    12d2:	00 00 00 00 00 e0 70 e0 70 e0 70 e0 70 e0 70 e0     ......p.p.p.p.p.
    12e2:	70 e0 70 e0 70 e0 70 e0 70 e0 70 70 e0 3f c0 1f     p.p.p.p.p.pp.?..
    12f2:	80 0c 13 26 0d 00 00 01 80 03 00 02 00 00 00 00     ...&............
    1302:	00 f0 70 70 f0 38 e0 38 e0 1d c0 1d c0 0f 80 0f     ..pp.8.8........
    1312:	00 07 00 07 00 07 00 07 00 07 00 07 00 0b 0e 1c     ................
    1322:	0d 01 00 e0 00 e0 00 ff 00 ff c0 e1 c0 e0 e0 e0     ................
    1332:	e0 e0 e0 e1 c0 ff 80 fe 00 e0 00 e0 00 e0 00 0a     ................
    1342:	0e 1c 0c 01 00 3e 00 7f 80 e3 80 e3 80 e3 00 e7     .....>..........
    1352:	00 ee 00 ee 00 e7 80 e3 c0 e1 c0 fd c0 ff c0 ef     ................
    1362:	80 09 10 20 0b 01 00 70 00 30 00 18 00 08 00 00     ... ...p.0......
    1372:	00 00 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3 80 e3     ...>............
    1382:	80 e3 80 ff 80 39 80 09 10 20 0b 01 00 07 00 06     .....9... ......
    1392:	00 0c 00 0c 00 00 00 00 00 3e 00 7f 80 e3 80 03     .........>......
    13a2:	80 3f 80 fb 80 e3 80 e3 80 ff 80 79 80 09 10 20     .?.........y... 
    13b2:	0b 01 00 1c 00 1e 00 36 00 23 00 00 00 00 00 3e     .......6.#.....>
    13c2:	00 7f 80 e3 80 1f 80 7f 80 e3 80 e3 80 e3 80 ff     ................
    13d2:	80 39 80 09 0e 1c 0b 01 00 3f 00 3e 00 00 00 00     .9.......?.>....
    13e2:	00 3e 00 7f 80 e3 80 1f 80 7f 80 e3 80 e3 80 e3     .>..............
    13f2:	80 ff 80 39 80 09 0f 1e 0b 01 00 77 00 77 00 00     ...9.......w.w..
    1402:	00 00 00 00 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3     .....>..........
    1412:	80 e3 80 e3 80 ff 80 39 80 09 11 22 0b 01 00 1c     .......9..."....
    1422:	00 22 00 22 00 22 00 1c 00 00 00 00 00 3e 00 7f     .".".".......>..
    1432:	80 e3 80 1f 80 7f 80 e3 80 e3 80 e3 80 ff 80 39     ...............9
    1442:	80 10 0a 14 12 01 00 3e 7c 7f fe e3 87 1f ff 7f     .......>|.......
    1452:	ff e3 80 e3 80 e3 c7 fe fe 3c 7c 09 0e 1c 0b 01     .........<|.....
    1462:	fc 3e 00 7f 00 e3 80 e3 80 e0 00 e0 00 e3 80 e3     .>..............
    1472:	80 7f 00 3e 00 10 00 1e 00 06 00 3e 00 09 10 20     ...>.......>... 
    1482:	0b 01 00 70 00 30 00 18 00 08 00 00 00 00 00 1e     ...p.0..........
    1492:	00 7f 00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f     ................
    14a2:	80 3e 00 09 10 20 0b 01 00 07 00 06 00 0c 00 08     .>... ..........
    14b2:	00 00 00 00 00 1e 00 7f 00 e3 80 e3 80 ff 80 ff     ................
    14c2:	80 e0 00 e3 80 7f 80 3e 00 09 10 20 0b 01 00 1c     .......>... ....
    14d2:	00 1e 00 36 00 23 00 00 00 00 00 1e 00 7f 00 e3     ...6.#..........
    14e2:	80 e3 80 ff 80 ff 80 e0 00 e3 80 7f 80 3e 00 09     .............>..
    14f2:	0f 1e 0b 01 00 77 00 77 00 00 00 00 00 00 00 1e     .....w.w........
    1502:	00 7f 00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f     ................
    1512:	80 3e 00 04 0f 0f 05 00 00 c0 e0 60 30 00 70 70     .>.........`0.pp
    1522:	70 70 70 70 70 70 70 70 04 0f 0f 04 01 00 70 60     pppppppp......p`
    1532:	c0 80 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 07 0f 0f     ................
    1542:	05 ff 00 38 7c 4c c6 00 38 38 38 38 38 38 38 38     ...8|L..88888888
    1552:	38 38 07 0e 0e 06 00 00 ee ee 00 00 38 38 38 38     88..........8888
    1562:	38 38 38 38 38 38 0a 0e 1c 0c 01 00 39 80 0f 00     888888......9...
    1572:	1f 00 63 00 1f 80 7f 80 61 c0 e1 c0 e1 c0 e1 c0     ..c.....a.......
    1582:	e1 c0 61 c0 7f 80 1f 00 09 0e 1c 0b 01 00 3e 00     ..a...........>.
    1592:	3c 00 00 00 00 00 ef 00 ff 80 e3 80 e3 80 e3 80     <...............
    15a2:	e3 80 e3 80 e3 80 e3 80 e3 80 0a 10 20 0c 01 00     ............ ...
    15b2:	30 00 18 00 18 00 0c 00 00 00 00 00 1e 00 7f 80     0...............
    15c2:	61 80 e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00     a.........a.....
    15d2:	0a 10 20 0c 01 00 03 00 06 00 06 00 0c 00 00 00     .. .............
    15e2:	00 00 1e 00 7f 80 61 80 e1 c0 e1 c0 e1 c0 e1 c0     ......a.........
    15f2:	61 80 7f 80 1e 00 0a 10 20 0c 01 00 0c 00 1e 00     a....... .......
    1602:	1a 00 33 00 00 00 00 00 1e 00 7f 80 61 80 e1 c0     ..3.........a...
    1612:	e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0c     ......a.........
    1622:	01 00 1f 00 3e 00 00 00 00 00 1e 00 7f 80 61 80     ....>.........a.
    1632:	e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0f     ........a.......
    1642:	1e 0c 01 00 3b 80 3b 80 00 00 00 00 00 00 1e 00     ....;.;.........
    1652:	7f 80 61 80 e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80     ..a.........a...
    1662:	1e 00 0c 08 10 14 04 02 06 00 0e 00 00 00 ff f0     ................
    1672:	ff f0 00 00 06 00 0e 00 0a 0c 18 0c 01 00 00 c0     ................
    1682:	1f 80 7f 80 63 80 e7 c0 ed c0 e9 c0 f1 c0 71 80     ....c.........q.
    1692:	7f 80 de 00 80 00 09 10 20 0b 01 00 70 00 30 00     ........ ...p.0.
    16a2:	18 00 08 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80     ................
    16b2:	e3 80 e3 80 e3 80 e3 80 ff 80 7b 80 09 10 20 0b     ..........{... .
    16c2:	01 00 07 00 06 00 0c 00 08 00 00 00 00 00 e3 80     ................
    16d2:	e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 ff 80     ................
    16e2:	7b 80 09 10 20 0b 01 00 1c 00 1c 00 36 00 22 00     {... .......6.".
    16f2:	00 00 00 00 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80     ................
    1702:	e3 80 e3 80 ff 80 7b 80 09 0f 1e 0b 01 00 77 00     ......{.......w.
    1712:	77 00 00 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80     w...............
    1722:	e3 80 e3 80 e3 80 e3 80 ff 80 7b 80 0b 13 26 0b     ..........{...&.
    1732:	00 fc 01 80 03 00 02 00 04 00 00 00 70 e0 71 c0     ............p.q.
    1742:	71 c0 39 c0 3b 80 1b 80 1f 80 1f 00 0f 00 0e 00     q.9.;...........
    1752:	0e 00 4e 00 fc 00 78 00 0a 12 24 0c 01 fc e0 00     ..N...x...$.....
    1762:	e0 00 e0 00 e0 00 ef 00 ff 80 e1 80 e1 c0 e1 c0     ................
    1772:	e1 c0 e1 c0 e1 c0 ff 80 ff 00 e0 00 e0 00 e0 00     ................
    1782:	e0 00 0b 12 24 0b 00 fc 3b 80 3b 80 00 00 00 00     ....$...;.;.....
    1792:	e1 e0 71 c0 71 c0 73 80 3b 80 3b 80 1f 00 1f 00     ..q.q.s.;.;.....
    17a2:	1f 00 0e 00 0e 00 0c 00 1c 00 1c 00                 ............

000017ae <__ctors_end>:
    17ae:	11 24       	eor	r1, r1
    17b0:	1f be       	out	0x3f, r1	; 63
    17b2:	cf ef       	ldi	r28, 0xFF	; 255
    17b4:	d8 e0       	ldi	r29, 0x08	; 8
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	cd bf       	out	0x3d, r28	; 61

000017ba <__do_copy_data>:
    17ba:	11 e0       	ldi	r17, 0x01	; 1
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b1 e0       	ldi	r27, 0x01	; 1
    17c0:	e8 e3       	ldi	r30, 0x38	; 56
    17c2:	f8 e2       	ldi	r31, 0x28	; 40
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <__do_copy_data+0x10>
    17c6:	05 90       	lpm	r0, Z+
    17c8:	0d 92       	st	X+, r0
    17ca:	a4 31       	cpi	r26, 0x14	; 20
    17cc:	b1 07       	cpc	r27, r17
    17ce:	d9 f7       	brne	.-10     	; 0x17c6 <__do_copy_data+0xc>

000017d0 <__do_clear_bss>:
    17d0:	21 e0       	ldi	r18, 0x01	; 1
    17d2:	a4 e1       	ldi	r26, 0x14	; 20
    17d4:	b1 e0       	ldi	r27, 0x01	; 1
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <.do_clear_bss_start>

000017d8 <.do_clear_bss_loop>:
    17d8:	1d 92       	st	X+, r1

000017da <.do_clear_bss_start>:
    17da:	ae 3c       	cpi	r26, 0xCE	; 206
    17dc:	b2 07       	cpc	r27, r18
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <.do_clear_bss_loop>
    17e0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <main>
    17e4:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <_exit>

000017e8 <__bad_interrupt>:
    17e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000017ec <u8g_setup>:
  
  /* activate pull-up, set ports to output, init U8glib */  
  //u8g_SetPinInput(PN(2,5)); u8g_SetPinLevel(PN(2,5), 1); u8g_SetPinOutput(PN(2,5));
  //u8g_SetPinInput(PN(2,4)); u8g_SetPinLevel(PN(2,4), 1); u8g_SetPinOutput(PN(2,4));
  //u8g_InitI2C(&u8g, &u8g_dev_ssd1327_96x96_gr_i2c, U8G_I2C_OPT_NONE);
  u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	71 e0       	ldi	r23, 0x01	; 1
    17f2:	87 e9       	ldi	r24, 0x97	; 151
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	0e 94 44 12 	call	0x2488	; 0x2488 <u8g_InitI2C>
    17fa:	08 95       	ret

000017fc <sys_init>:

void sys_init(void)
{
#if defined(__AVR__)
  /* select minimal prescaler (max system speed) */
  CLKPR = 0x80;
    17fc:	e1 e6       	ldi	r30, 0x61	; 97
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 e8       	ldi	r24, 0x80	; 128
    1802:	80 83       	st	Z, r24
  CLKPR = 0x00;
    1804:	10 82       	st	Z, r1
    1806:	08 95       	ret

00001808 <drawSteps>:
#endif
}

void drawSteps(int steps){
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	00 d0       	rcall	.+0      	; 0x180e <drawSteps+0x6>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <drawSteps+0x8>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <drawSteps+0xa>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	char counterString[6] = "\0";
    1816:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <u8g_dev_ssd1306_128x64_i2c_pb+0x8>
    181a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <u8g_dev_ssd1306_128x64_i2c_pb+0x9>
    181e:	3a 83       	std	Y+2, r19	; 0x02
    1820:	29 83       	std	Y+1, r18	; 0x01
    1822:	fe 01       	movw	r30, r28
    1824:	33 96       	adiw	r30, 0x03	; 3
    1826:	24 e0       	ldi	r18, 0x04	; 4
    1828:	df 01       	movw	r26, r30
    182a:	1d 92       	st	X+, r1
    182c:	2a 95       	dec	r18
    182e:	e9 f7       	brne	.-6      	; 0x182a <drawSteps+0x22>
	itoa(steps, counterString, 10);
    1830:	4a e0       	ldi	r20, 0x0A	; 10
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	be 01       	movw	r22, r28
    1836:	6f 5f       	subi	r22, 0xFF	; 255
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <itoa>
	u8g_FirstPage(&u8g);
    183e:	87 e9       	ldi	r24, 0x97	; 151
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <u8g_FirstPage>
	do{
		u8g_DrawStr(&u8g, 2, 16, counterString);
    1846:	9e 01       	movw	r18, r28
    1848:	2f 5f       	subi	r18, 0xFF	; 255
    184a:	3f 4f       	sbci	r19, 0xFF	; 255
    184c:	40 e1       	ldi	r20, 0x10	; 16
    184e:	62 e0       	ldi	r22, 0x02	; 2
    1850:	87 e9       	ldi	r24, 0x97	; 151
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	0e 94 ab 10 	call	0x2156	; 0x2156 <u8g_DrawStr>
	}while(u8g_NextPage(&u8g));
    1858:	87 e9       	ldi	r24, 0x97	; 151
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <u8g_NextPage>
    1860:	81 11       	cpse	r24, r1
    1862:	f1 cf       	rjmp	.-30     	; 0x1846 <drawSteps+0x3e>
}
    1864:	26 96       	adiw	r28, 0x06	; 6
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <main>:


int main(void){
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
	int counter = 0;
	sys_init();
    187e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <sys_init>
	u8g_setup();
    1882:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <u8g_setup>
	u8g_SetFont(&u8g, u8g_font_fub14);
    1886:	62 e1       	ldi	r22, 0x12	; 18
    1888:	71 e0       	ldi	r23, 0x01	; 1
    188a:	87 e9       	ldi	r24, 0x97	; 151
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	0e 94 37 11 	call	0x226e	; 0x226e <u8g_SetFont>
	while(counter < 1001){
		if(!(++counter % 10)){
    1892:	c1 e0       	ldi	r28, 0x01	; 1
    1894:	d0 e0       	ldi	r29, 0x00	; 0
    1896:	0a e0       	ldi	r16, 0x0A	; 10
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	21 96       	adiw	r28, 0x01	; 1
    189c:	ce 01       	movw	r24, r28
    189e:	b8 01       	movw	r22, r16
    18a0:	0e 94 ac 13 	call	0x2758	; 0x2758 <__divmodhi4>
    18a4:	89 2b       	or	r24, r25
    18a6:	19 f4       	brne	.+6      	; 0x18ae <main+0x38>
			drawSteps(counter);
    18a8:	ce 01       	movw	r24, r28
    18aa:	0e 94 04 0c 	call	0x1808	; 0x1808 <drawSteps>
int main(void){
	int counter = 0;
	sys_init();
	u8g_setup();
	u8g_SetFont(&u8g, u8g_font_fub14);
	while(counter < 1001){
    18ae:	c9 3e       	cpi	r28, 0xE9	; 233
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	d8 07       	cpc	r29, r24
    18b4:	91 f7       	brne	.-28     	; 0x189a <main+0x24>
		if(!(++counter % 10)){
			drawSteps(counter);
		}
	}
}
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    18c4:	0f 93       	push	r16
    18c6:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    18c8:	01 50       	subi	r16, 0x01	; 1
    18ca:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    18cc:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    18ce:	96 a9       	ldd	r25, Z+54	; 0x36
    18d0:	94 17       	cp	r25, r20
    18d2:	38 f0       	brcs	.+14     	; 0x18e2 <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    18d4:	08 17       	cp	r16, r24
    18d6:	68 f4       	brcc	.+26     	; 0x18f2 <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	04 17       	cp	r16, r20
    18dc:	40 f0       	brcs	.+16     	; 0x18ee <u8g_IsBBXIntersection+0x2a>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    18e2:	08 17       	cp	r16, r24
    18e4:	d0 f0       	brcs	.+52     	; 0x191a <u8g_IsBBXIntersection+0x56>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	04 17       	cp	r16, r20
    18ea:	08 f0       	brcs	.+2      	; 0x18ee <u8g_IsBBXIntersection+0x2a>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    18ee:	88 23       	and	r24, r24
    18f0:	c9 f0       	breq	.+50     	; 0x1924 <u8g_IsBBXIntersection+0x60>
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    18f2:	21 50       	subi	r18, 0x01	; 1
    18f4:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    18f6:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    18f8:	95 a9       	ldd	r25, Z+53	; 0x35
    18fa:	96 17       	cp	r25, r22
    18fc:	38 f0       	brcs	.+14     	; 0x190c <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    18fe:	28 17       	cp	r18, r24
    1900:	70 f4       	brcc	.+28     	; 0x191e <u8g_IsBBXIntersection+0x5a>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	26 17       	cp	r18, r22
    1906:	70 f0       	brcs	.+28     	; 0x1924 <u8g_IsBBXIntersection+0x60>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	0c c0       	rjmp	.+24     	; 0x1924 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    190c:	28 17       	cp	r18, r24
    190e:	48 f0       	brcs	.+18     	; 0x1922 <u8g_IsBBXIntersection+0x5e>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	26 17       	cp	r18, r22
    1914:	38 f0       	brcs	.+14     	; 0x1924 <u8g_IsBBXIntersection+0x60>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <u8g_IsBBXIntersection+0x60>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    1922:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    1928:	db 01       	movw	r26, r22
    192a:	14 96       	adiw	r26, 0x04	; 4
    192c:	ed 91       	ld	r30, X+
    192e:	fc 91       	ld	r31, X
    1930:	15 97       	sbiw	r26, 0x05	; 5
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	09 95       	icall
    193a:	08 95       	ret

0000193c <u8g_SetChipSelect>:
    193c:	db 01       	movw	r26, r22
    193e:	14 96       	adiw	r26, 0x04	; 4
    1940:	ed 91       	ld	r30, X+
    1942:	fc 91       	ld	r31, X
    1944:	15 97       	sbiw	r26, 0x05	; 5
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	63 e0       	ldi	r22, 0x03	; 3
    194c:	09 95       	icall
    194e:	08 95       	ret

00001950 <u8g_SetResetLow>:
    1950:	db 01       	movw	r26, r22
    1952:	14 96       	adiw	r26, 0x04	; 4
    1954:	ed 91       	ld	r30, X+
    1956:	fc 91       	ld	r31, X
    1958:	15 97       	sbiw	r26, 0x05	; 5
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	64 e0       	ldi	r22, 0x04	; 4
    1962:	09 95       	icall
    1964:	08 95       	ret

00001966 <u8g_SetResetHigh>:
    1966:	db 01       	movw	r26, r22
    1968:	14 96       	adiw	r26, 0x04	; 4
    196a:	ed 91       	ld	r30, X+
    196c:	fc 91       	ld	r31, X
    196e:	15 97       	sbiw	r26, 0x05	; 5
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	64 e0       	ldi	r22, 0x04	; 4
    1978:	09 95       	icall
    197a:	08 95       	ret

0000197c <u8g_SetAddress>:
    197c:	db 01       	movw	r26, r22
    197e:	14 96       	adiw	r26, 0x04	; 4
    1980:	ed 91       	ld	r30, X+
    1982:	fc 91       	ld	r31, X
    1984:	15 97       	sbiw	r26, 0x05	; 5
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	62 e0       	ldi	r22, 0x02	; 2
    198c:	09 95       	icall
    198e:	08 95       	ret

00001990 <u8g_WriteByte>:
    1990:	db 01       	movw	r26, r22
    1992:	14 96       	adiw	r26, 0x04	; 4
    1994:	ed 91       	ld	r30, X+
    1996:	fc 91       	ld	r31, X
    1998:	15 97       	sbiw	r26, 0x05	; 5
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	65 e0       	ldi	r22, 0x05	; 5
    19a0:	09 95       	icall
    19a2:	08 95       	ret

000019a4 <u8g_WriteSequence>:
    19a4:	db 01       	movw	r26, r22
    19a6:	14 96       	adiw	r26, 0x04	; 4
    19a8:	ed 91       	ld	r30, X+
    19aa:	fc 91       	ld	r31, X
    19ac:	15 97       	sbiw	r26, 0x05	; 5
    19ae:	66 e0       	ldi	r22, 0x06	; 6
    19b0:	09 95       	icall
    19b2:	08 95       	ret

000019b4 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	6c 01       	movw	r12, r24
    19ca:	7b 01       	movw	r14, r22
    19cc:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    19ce:	d0 e0       	ldi	r29, 0x00	; 0
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    19d0:	b1 2c       	mov	r11, r1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    19d2:	aa 24       	eor	r10, r10
    19d4:	a3 94       	inc	r10
{
  uint8_t is_escape = 0;
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    19d6:	f8 01       	movw	r30, r16
    19d8:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    19da:	d1 11       	cpse	r29, r1
    19dc:	0b c0       	rjmp	.+22     	; 0x19f4 <u8g_WriteEscSeqP+0x40>
    {
      if ( value != 255 )
    19de:	cf 3f       	cpi	r28, 0xFF	; 255
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <u8g_WriteEscSeqP+0x30>
    19e2:	4a c0       	rjmp	.+148    	; 0x1a78 <u8g_WriteEscSeqP+0xc4>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    19e4:	4c 2f       	mov	r20, r28
    19e6:	b7 01       	movw	r22, r14
    19e8:	c6 01       	movw	r24, r12
    19ea:	0e 94 c8 0c 	call	0x1990	; 0x1990 <u8g_WriteByte>
    19ee:	81 11       	cpse	r24, r1
    19f0:	48 c0       	rjmp	.+144    	; 0x1a82 <u8g_WriteEscSeqP+0xce>
    19f2:	4b c0       	rjmp	.+150    	; 0x1a8a <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    19f4:	cf 3f       	cpi	r28, 0xFF	; 255
    19f6:	51 f4       	brne	.+20     	; 0x1a0c <u8g_WriteEscSeqP+0x58>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    19f8:	4f ef       	ldi	r20, 0xFF	; 255
    19fa:	b7 01       	movw	r22, r14
    19fc:	c6 01       	movw	r24, r12
    19fe:	0e 94 c8 0c 	call	0x1990	; 0x1990 <u8g_WriteByte>
    1a02:	88 23       	and	r24, r24
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <u8g_WriteEscSeqP+0x54>
    1a06:	41 c0       	rjmp	.+130    	; 0x1a8a <u8g_WriteEscSeqP+0xd6>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1a08:	db 2d       	mov	r29, r11
    1a0a:	3b c0       	rjmp	.+118    	; 0x1a82 <u8g_WriteEscSeqP+0xce>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    1a0c:	ce 3f       	cpi	r28, 0xFE	; 254
    1a0e:	e1 f1       	breq	.+120    	; 0x1a88 <u8g_WriteEscSeqP+0xd4>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1a10:	c0 3f       	cpi	r28, 0xF0	; 240
    1a12:	a0 f5       	brcc	.+104    	; 0x1a7c <u8g_WriteEscSeqP+0xc8>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1a14:	c0 3e       	cpi	r28, 0xE0	; 224
    1a16:	40 f0       	brcs	.+16     	; 0x1a28 <u8g_WriteEscSeqP+0x74>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    1a18:	4c 2f       	mov	r20, r28
    1a1a:	4f 70       	andi	r20, 0x0F	; 15
    1a1c:	b7 01       	movw	r22, r14
    1a1e:	c6 01       	movw	r24, r12
    1a20:	0e 94 be 0c 	call	0x197c	; 0x197c <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1a24:	db 2d       	mov	r29, r11
    1a26:	2d c0       	rjmp	.+90     	; 0x1a82 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    1a28:	c0 3d       	cpi	r28, 0xD0	; 208
    1a2a:	40 f0       	brcs	.+16     	; 0x1a3c <u8g_WriteEscSeqP+0x88>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    1a2c:	4c 2f       	mov	r20, r28
    1a2e:	4f 70       	andi	r20, 0x0F	; 15
    1a30:	b7 01       	movw	r22, r14
    1a32:	c6 01       	movw	r24, r12
    1a34:	0e 94 9e 0c 	call	0x193c	; 0x193c <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1a38:	db 2d       	mov	r29, r11
    1a3a:	23 c0       	rjmp	.+70     	; 0x1a82 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    1a3c:	c0 3c       	cpi	r28, 0xC0	; 192
    1a3e:	a0 f0       	brcs	.+40     	; 0x1a68 <u8g_WriteEscSeqP+0xb4>
      {
        u8g_SetResetLow(u8g, dev);
    1a40:	b7 01       	movw	r22, r14
    1a42:	c6 01       	movw	r24, r12
    1a44:	0e 94 a8 0c 	call	0x1950	; 0x1950 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    1a48:	c2 95       	swap	r28
    1a4a:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
        u8g_Delay(value);
    1a4c:	ce 5f       	subi	r28, 0xFE	; 254
    1a4e:	d0 e0       	ldi	r29, 0x00	; 0
    1a50:	ce 01       	movw	r24, r28
    1a52:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    1a56:	b7 01       	movw	r22, r14
    1a58:	c6 01       	movw	r24, r12
    1a5a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <u8g_SetResetHigh>
        u8g_Delay(value);
    1a5e:	ce 01       	movw	r24, r28
    1a60:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1a64:	db 2d       	mov	r29, r11
    1a66:	0d c0       	rjmp	.+26     	; 0x1a82 <u8g_WriteEscSeqP+0xce>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    1a68:	cc 23       	and	r28, r28
    1a6a:	54 f0       	brlt	.+20     	; 0x1a80 <u8g_WriteEscSeqP+0xcc>
      {
        u8g_Delay(value);
    1a6c:	8c 2f       	mov	r24, r28
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <u8g_Delay>
      }
      is_escape = 0;
    1a74:	db 2d       	mov	r29, r11
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <u8g_WriteEscSeqP+0xce>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1a78:	da 2d       	mov	r29, r10
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1a7c:	db 2d       	mov	r29, r11
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <u8g_WriteEscSeqP+0xce>
    1a80:	db 2d       	mov	r29, r11
    }
    esc_seq++;
    1a82:	0f 5f       	subi	r16, 0xFF	; 255
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    1a86:	a7 cf       	rjmp	.-178    	; 0x19d6 <u8g_WriteEscSeqP+0x22>
  return 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
}
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	08 95       	ret

00001aa0 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	23 a5       	ldd	r18, Z+43	; 0x2b
    1aa8:	22 23       	and	r18, r18
    1aaa:	b1 f0       	breq	.+44     	; 0x1ad8 <u8g_com_arduino_ssd_start_sequence+0x38>
    1aac:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    1aae:	88 e7       	ldi	r24, 0x78	; 120
    1ab0:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <u8g_i2c_start>
    1ab4:	88 23       	and	r24, r24
    1ab6:	89 f0       	breq	.+34     	; 0x1ada <u8g_com_arduino_ssd_start_sequence+0x3a>
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    1ab8:	8e a1       	ldd	r24, Y+38	; 0x26
    1aba:	81 11       	cpse	r24, r1
    1abc:	05 c0       	rjmp	.+10     	; 0x1ac8 <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    1abe:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <u8g_i2c_send_byte>
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <u8g_com_arduino_ssd_start_sequence+0x32>
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    1ac8:	80 e4       	ldi	r24, 0x40	; 64
    1aca:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <u8g_i2c_send_byte>
    1ace:	88 23       	and	r24, r24
    1ad0:	21 f0       	breq	.+8      	; 0x1ada <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    1ad2:	1b a6       	std	Y+43, r1	; 0x2b
  return 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <u8g_com_arduino_ssd_start_sequence+0x3a>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	08 95       	ret

00001ae0 <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    1ae0:	cf 92       	push	r12
    1ae2:	df 92       	push	r13
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	e4 2e       	mov	r14, r20
    1af0:	89 01       	movw	r16, r18
  switch(msg)
    1af2:	63 30       	cpi	r22, 0x03	; 3
    1af4:	b1 f0       	breq	.+44     	; 0x1b22 <u8g_com_arduino_ssd_i2c_fn+0x42>
    1af6:	30 f4       	brcc	.+12     	; 0x1b04 <u8g_com_arduino_ssd_i2c_fn+0x24>
    1af8:	61 30       	cpi	r22, 0x01	; 1
    1afa:	69 f0       	breq	.+26     	; 0x1b16 <u8g_com_arduino_ssd_i2c_fn+0x36>
    1afc:	62 30       	cpi	r22, 0x02	; 2
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <u8g_com_arduino_ssd_i2c_fn+0x22>
    1b00:	6f c0       	rjmp	.+222    	; 0x1be0 <u8g_com_arduino_ssd_i2c_fn+0x100>
    1b02:	74 c0       	rjmp	.+232    	; 0x1bec <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1b04:	66 30       	cpi	r22, 0x06	; 6
    1b06:	41 f1       	breq	.+80     	; 0x1b58 <u8g_com_arduino_ssd_i2c_fn+0x78>
    1b08:	67 30       	cpi	r22, 0x07	; 7
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <u8g_com_arduino_ssd_i2c_fn+0x2e>
    1b0c:	48 c0       	rjmp	.+144    	; 0x1b9e <u8g_com_arduino_ssd_i2c_fn+0xbe>
    1b0e:	65 30       	cpi	r22, 0x05	; 5
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <u8g_com_arduino_ssd_i2c_fn+0x34>
    1b12:	6c c0       	rjmp	.+216    	; 0x1bec <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1b14:	10 c0       	rjmp	.+32     	; 0x1b36 <u8g_com_arduino_ssd_i2c_fn+0x56>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    1b16:	fc 01       	movw	r30, r24
    1b18:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b1a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <u8g_i2c_init>
      }
      */
#endif
      break;
  }
  return 1;
    1b1e:	c1 e0       	ldi	r28, 0x01	; 1
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);

      break;
    1b20:	6a c0       	rjmp	.+212    	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    1b22:	fc 01       	movw	r30, r24
    1b24:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    1b2a:	41 11       	cpse	r20, r1
    1b2c:	61 c0       	rjmp	.+194    	; 0x1bf0 <u8g_com_arduino_ssd_i2c_fn+0x110>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    1b2e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <u8g_i2c_stop>
      }
      */
#endif
      break;
  }
  return 1;
    1b32:	c1 e0       	ldi	r28, 0x01	; 1
    1b34:	60 c0       	rjmp	.+192    	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1b36:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <u8g_com_arduino_ssd_start_sequence>
    1b3a:	c8 2f       	mov	r28, r24
    1b3c:	81 11       	cpse	r24, r1
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <u8g_com_arduino_ssd_i2c_fn+0x66>
	return u8g_i2c_stop(), 0;
    1b40:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <u8g_i2c_stop>
    1b44:	58 c0       	rjmp	.+176    	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    1b46:	8e 2d       	mov	r24, r14
    1b48:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <u8g_i2c_send_byte>
    1b4c:	c8 2f       	mov	r28, r24
    1b4e:	81 11       	cpse	r24, r1
    1b50:	51 c0       	rjmp	.+162    	; 0x1bf4 <u8g_com_arduino_ssd_i2c_fn+0x114>
	return u8g_i2c_stop(), 0;
    1b52:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <u8g_i2c_stop>
    1b56:	4f c0       	rjmp	.+158    	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1b58:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <u8g_com_arduino_ssd_start_sequence>
    1b5c:	c8 2f       	mov	r28, r24
    1b5e:	88 23       	and	r24, r24
    1b60:	21 f0       	breq	.+8      	; 0x1b6a <u8g_com_arduino_ssd_i2c_fn+0x8a>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1b62:	e1 10       	cpse	r14, r1
    1b64:	05 c0       	rjmp	.+10     	; 0x1b70 <u8g_com_arduino_ssd_i2c_fn+0x90>
      }
      */
#endif
      break;
  }
  return 1;
    1b66:	c1 e0       	ldi	r28, 0x01	; 1
    1b68:	46 c0       	rjmp	.+140    	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1b6a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <u8g_i2c_stop>
    1b6e:	43 c0       	rjmp	.+134    	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1b70:	68 01       	movw	r12, r16
    1b72:	ea 94       	dec	r14
    1b74:	8e 2d       	mov	r24, r14
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	08 0f       	add	r16, r24
    1b7c:	19 1f       	adc	r17, r25
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    1b7e:	f6 01       	movw	r30, r12
    1b80:	81 91       	ld	r24, Z+
    1b82:	6f 01       	movw	r12, r30
    1b84:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <u8g_i2c_send_byte>
    1b88:	c8 2f       	mov	r28, r24
    1b8a:	81 11       	cpse	r24, r1
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <u8g_com_arduino_ssd_i2c_fn+0xb4>
	    return u8g_i2c_stop(), 0;
    1b8e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <u8g_i2c_stop>
    1b92:	31 c0       	rjmp	.+98     	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1b94:	0c 15       	cp	r16, r12
    1b96:	1d 05       	cpc	r17, r13
    1b98:	91 f7       	brne	.-28     	; 0x1b7e <u8g_com_arduino_ssd_i2c_fn+0x9e>
      }
      */
#endif
      break;
  }
  return 1;
    1b9a:	c1 e0       	ldi	r28, 0x01	; 1
    1b9c:	2c c0       	rjmp	.+88     	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1b9e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <u8g_com_arduino_ssd_start_sequence>
    1ba2:	c8 2f       	mov	r28, r24
    1ba4:	88 23       	and	r24, r24
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <u8g_com_arduino_ssd_i2c_fn+0xd0>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1ba8:	e1 10       	cpse	r14, r1
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <u8g_com_arduino_ssd_i2c_fn+0xd6>
      }
      */
#endif
      break;
  }
  return 1;
    1bac:	c1 e0       	ldi	r28, 0x01	; 1
    1bae:	23 c0       	rjmp	.+70     	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1bb0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <u8g_i2c_stop>
    1bb4:	20 c0       	rjmp	.+64     	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1bb6:	ea 94       	dec	r14
    1bb8:	f1 2c       	mov	r15, r1
    1bba:	ff ef       	ldi	r31, 0xFF	; 255
    1bbc:	ef 1a       	sub	r14, r31
    1bbe:	ff 0a       	sbc	r15, r31
    1bc0:	e0 0e       	add	r14, r16
    1bc2:	f1 1e       	adc	r15, r17
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	84 91       	lpm	r24, Z
    1bc8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <u8g_i2c_send_byte>
    1bcc:	c8 2f       	mov	r28, r24
    1bce:	88 23       	and	r24, r24
    1bd0:	91 f0       	breq	.+36     	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
	    return 0;
          ptr++;
    1bd2:	0f 5f       	subi	r16, 0xFF	; 255
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1bd6:	e0 16       	cp	r14, r16
    1bd8:	f1 06       	cpc	r15, r17
    1bda:	a1 f7       	brne	.-24     	; 0x1bc4 <u8g_com_arduino_ssd_i2c_fn+0xe4>
      }
      */
#endif
      break;
  }
  return 1;
    1bdc:	c1 e0       	ldi	r28, 0x01	; 1
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    1be0:	fc 01       	movw	r30, r24
    1be2:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    1be4:	21 e0       	ldi	r18, 0x01	; 1
    1be6:	23 a7       	std	Z+43, r18	; 0x2b
      }
      */
#endif
      break;
  }
  return 1;
    1be8:	c1 e0       	ldi	r28, 0x01	; 1
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
  }
  return 1;
    1bec:	c1 e0       	ldi	r28, 0x01	; 1
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1bf0:	c1 e0       	ldi	r28, 0x01	; 1
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1bf4:	c1 e0       	ldi	r28, 0x01	; 1
}
    1bf6:	8c 2f       	mov	r24, r28
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	08 95       	ret

00001c08 <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    1c08:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u8g_i2c_err_code>
    1c0c:	91 11       	cpse	r25, r1
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <u8g_i2c_set_error+0x10>
    1c10:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <u8g_i2c_err_code>
    1c14:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <__data_end>
    1c18:	08 95       	ret

00001c1a <u8g_i2c_clear_error>:
    1c1a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u8g_i2c_err_code>
    1c1e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
    1c22:	08 95       	ret

00001c24 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    1c24:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <u8g_i2c_opt>
  TWSR = 0;
    1c28:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    1c2c:	84 ff       	sbrs	r24, 4
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <u8g_i2c_init+0x14>
  {
    TWBR = F_CPU/(2*400000)-8;
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1c36:	03 c0       	rjmp	.+6      	; 0x1c3e <u8g_i2c_init+0x1a>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    1c38:	80 e2       	ldi	r24, 0x20	; 32
    1c3a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    1c3e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <u8g_i2c_clear_error>
    1c42:	08 95       	ret

00001c44 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <u8g_i2c_wait+0x8>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    1c50:	20 ed       	ldi	r18, 0xD0	; 208
    1c52:	37 e0       	ldi	r19, 0x07	; 7
    1c54:	3a 83       	std	Y+2, r19	; 0x02
    1c56:	29 83       	std	Y+1, r18	; 0x01
  while( !(TWCR & mask) )
    1c58:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c5c:	98 23       	and	r25, r24
    1c5e:	01 f5       	brne	.+64     	; 0x1ca0 <u8g_i2c_wait+0x5c>
  {
      if ( cnt == 0 )
    1c60:	29 81       	ldd	r18, Y+1	; 0x01
    1c62:	3a 81       	ldd	r19, Y+2	; 0x02
    1c64:	23 2b       	or	r18, r19
    1c66:	39 f0       	breq	.+14     	; 0x1c76 <u8g_i2c_wait+0x32>
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1c68:	ec eb       	ldi	r30, 0xBC	; 188
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	0e c0       	rjmp	.+28     	; 0x1c8a <u8g_i2c_wait+0x46>
  {
      if ( cnt == 0 )
    1c6e:	29 81       	ldd	r18, Y+1	; 0x01
    1c70:	3a 81       	ldd	r19, Y+2	; 0x02
    1c72:	23 2b       	or	r18, r19
    1c74:	51 f4       	brne	.+20     	; 0x1c8a <u8g_i2c_wait+0x46>
    1c76:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u8g_i2c_opt>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1c7a:	18 2f       	mov	r17, r24
    1c7c:	12 70       	andi	r17, 0x02	; 2
    1c7e:	81 fd       	sbrc	r24, 1
    1c80:	11 c0       	rjmp	.+34     	; 0x1ca4 <u8g_i2c_wait+0x60>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <u8g_i2c_set_error>
	  return 0; /* error */
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <u8g_i2c_wait+0x62>
	}
      }
      cnt--;
    1c8a:	29 81       	ldd	r18, Y+1	; 0x01
    1c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8e:	21 50       	subi	r18, 0x01	; 1
    1c90:	31 09       	sbc	r19, r1
    1c92:	3a 83       	std	Y+2, r19	; 0x02
    1c94:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1c96:	90 81       	ld	r25, Z
    1c98:	98 23       	and	r25, r24
    1c9a:	49 f3       	breq	.-46     	; 0x1c6e <u8g_i2c_wait+0x2a>
	  return 0; /* error */
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
    1c9c:	11 e0       	ldi	r17, 0x01	; 1
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <u8g_i2c_wait+0x62>
    1ca0:	11 e0       	ldi	r17, 0x01	; 1
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <u8g_i2c_wait+0x62>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    1ca4:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    1ca6:	81 2f       	mov	r24, r17
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	08 95       	ret

00001cb4 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	d8 2f       	mov	r29, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    1cba:	84 ea       	ldi	r24, 0xA4	; 164
    1cbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    1cc0:	61 e0       	ldi	r22, 0x01	; 1
    1cc2:	80 e8       	ldi	r24, 0x80	; 128
    1cc4:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <u8g_i2c_wait>
    1cc8:	c8 2f       	mov	r28, r24
    1cca:	88 23       	and	r24, r24
    1ccc:	61 f1       	breq	.+88     	; 0x1d26 <u8g_i2c_start+0x72>
    return 0;
  
  status = TW_STATUS;
    1cce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1cd2:	88 7f       	andi	r24, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    1cd4:	88 30       	cpi	r24, 0x08	; 8
    1cd6:	41 f0       	breq	.+16     	; 0x1ce8 <u8g_i2c_start+0x34>
    1cd8:	80 31       	cpi	r24, 0x10	; 16
    1cda:	31 f0       	breq	.+12     	; 0x1ce8 <u8g_i2c_start+0x34>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <u8g_i2c_set_error>
    return 0;
    1ce4:	c0 e0       	ldi	r28, 0x00	; 0
    1ce6:	1f c0       	rjmp	.+62     	; 0x1d26 <u8g_i2c_start+0x72>
  }

  /* set slave address */  
  TWDR = sla;
    1ce8:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1cec:	84 e8       	ldi	r24, 0x84	; 132
    1cee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    1cf2:	62 e0       	ldi	r22, 0x02	; 2
    1cf4:	80 e8       	ldi	r24, 0x80	; 128
    1cf6:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <u8g_i2c_wait>
    1cfa:	c8 2f       	mov	r28, r24
    1cfc:	88 23       	and	r24, r24
    1cfe:	99 f0       	breq	.+38     	; 0x1d26 <u8g_i2c_start+0x72>
    1d00:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u8g_i2c_opt>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1d04:	c8 2f       	mov	r28, r24
    1d06:	c2 70       	andi	r28, 0x02	; 2
    1d08:	81 fd       	sbrc	r24, 1
    1d0a:	0a c0       	rjmp	.+20     	; 0x1d20 <u8g_i2c_start+0x6c>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    1d0c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    1d10:	88 7f       	andi	r24, 0xF8	; 248
    1d12:	88 31       	cpi	r24, 0x18	; 24
    1d14:	39 f0       	breq	.+14     	; 0x1d24 <u8g_i2c_start+0x70>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    1d16:	62 e0       	ldi	r22, 0x02	; 2
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <u8g_i2c_set_error>
      return 0;
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <u8g_i2c_start+0x72>
    }
  }

   return 1;
    1d20:	c1 e0       	ldi	r28, 0x01	; 1
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <u8g_i2c_start+0x72>
    1d24:	c1 e0       	ldi	r28, 0x01	; 1
}
    1d26:	8c 2f       	mov	r24, r28
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    1d2e:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    1d30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1d34:	84 e8       	ldi	r24, 0x84	; 132
    1d36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    1d3a:	63 e0       	ldi	r22, 0x03	; 3
    1d3c:	80 e8       	ldi	r24, 0x80	; 128
    1d3e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <u8g_i2c_wait>
    1d42:	c8 2f       	mov	r28, r24
    1d44:	88 23       	and	r24, r24
    1d46:	99 f0       	breq	.+38     	; 0x1d6e <u8g_i2c_send_byte+0x40>
    1d48:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u8g_i2c_opt>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1d4c:	c8 2f       	mov	r28, r24
    1d4e:	c2 70       	andi	r28, 0x02	; 2
    1d50:	81 fd       	sbrc	r24, 1
    1d52:	0a c0       	rjmp	.+20     	; 0x1d68 <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    1d54:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    if ( status != TW_MT_DATA_ACK )
    1d58:	88 7f       	andi	r24, 0xF8	; 248
    1d5a:	88 32       	cpi	r24, 0x28	; 40
    1d5c:	39 f0       	breq	.+14     	; 0x1d6c <u8g_i2c_send_byte+0x3e>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    1d5e:	63 e0       	ldi	r22, 0x03	; 3
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <u8g_i2c_set_error>
      return 0;
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <u8g_i2c_send_byte+0x40>
    }
  }

  return 1;  
    1d68:	c1 e0       	ldi	r28, 0x01	; 1
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <u8g_i2c_send_byte+0x40>
    1d6c:	c1 e0       	ldi	r28, 0x01	; 1
}
    1d6e:	8c 2f       	mov	r24, r28
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    1d74:	84 e9       	ldi	r24, 0x94	; 148
    1d76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    1d7a:	64 e0       	ldi	r22, 0x04	; 4
    1d7c:	80 e1       	ldi	r24, 0x10	; 16
    1d7e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <u8g_i2c_wait>
    1d82:	08 95       	ret

00001d84 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	39 f0       	breq	.+14     	; 0x1d96 <u8g_Delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d88:	2e ec       	ldi	r18, 0xCE	; 206
    1d8a:	37 e0       	ldi	r19, 0x07	; 7
    1d8c:	f9 01       	movw	r30, r18
    1d8e:	31 97       	sbiw	r30, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1d92:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1d94:	d9 f7       	brne	.-10     	; 0x1d8c <u8g_Delay+0x8>
    1d96:	08 95       	ret

00001d98 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	7c 01       	movw	r14, r24
    1dac:	8b 01       	movw	r16, r22
    1dae:	c4 2f       	mov	r28, r20
    1db0:	69 01       	movw	r12, r18
  switch(msg)
    1db2:	40 31       	cpi	r20, 0x10	; 16
    1db4:	99 f1       	breq	.+102    	; 0x1e1c <u8g_dev_ssd1306_128x64_fn+0x84>
    1db6:	18 f4       	brcc	.+6      	; 0x1dbe <u8g_dev_ssd1306_128x64_fn+0x26>
    1db8:	4a 30       	cpi	r20, 0x0A	; 10
    1dba:	31 f0       	breq	.+12     	; 0x1dc8 <u8g_dev_ssd1306_128x64_fn+0x30>
    1dbc:	3b c0       	rjmp	.+118    	; 0x1e34 <u8g_dev_ssd1306_128x64_fn+0x9c>
    1dbe:	41 31       	cpi	r20, 0x11	; 17
    1dc0:	99 f1       	breq	.+102    	; 0x1e28 <u8g_dev_ssd1306_128x64_fn+0x90>
    1dc2:	45 31       	cpi	r20, 0x15	; 21
    1dc4:	59 f0       	breq	.+22     	; 0x1ddc <u8g_dev_ssd1306_128x64_fn+0x44>
    1dc6:	36 c0       	rjmp	.+108    	; 0x1e34 <u8g_dev_ssd1306_128x64_fn+0x9c>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    1dc8:	42 e0       	ldi	r20, 0x02	; 2
    1dca:	0e 94 94 0c 	call	0x1928	; 0x1928 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    1dce:	4c ee       	ldi	r20, 0xEC	; 236
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	b8 01       	movw	r22, r16
    1dd4:	c7 01       	movw	r24, r14
    1dd6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <u8g_WriteEscSeqP>
      break;
    1dda:	2c c0       	rjmp	.+88     	; 0x1e34 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1ddc:	fb 01       	movw	r30, r22
    1dde:	a2 80       	ldd	r10, Z+2	; 0x02
    1de0:	b3 80       	ldd	r11, Z+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    1de2:	44 ee       	ldi	r20, 0xE4	; 228
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    1dea:	f5 01       	movw	r30, r10
    1dec:	44 81       	ldd	r20, Z+4	; 0x04
    1dee:	40 6b       	ori	r20, 0xB0	; 176
    1df0:	b8 01       	movw	r22, r16
    1df2:	c7 01       	movw	r24, r14
    1df4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	b8 01       	movw	r22, r16
    1dfc:	c7 01       	movw	r24, r14
    1dfe:	0e 94 be 0c 	call	0x197c	; 0x197c <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    1e02:	a8 01       	movw	r20, r16
    1e04:	b7 01       	movw	r22, r14
    1e06:	c5 01       	movw	r24, r10
    1e08:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <u8g_pb_WriteBuffer>
    1e0c:	88 23       	and	r24, r24
    1e0e:	c1 f0       	breq	.+48     	; 0x1e40 <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	b8 01       	movw	r22, r16
    1e14:	c7 01       	movw	r24, r14
    1e16:	0e 94 9e 0c 	call	0x193c	; 0x193c <u8g_SetChipSelect>
      }
      break;
    1e1a:	0c c0       	rjmp	.+24     	; 0x1e34 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    1e1c:	4b ed       	ldi	r20, 0xDB	; 219
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <u8g_WriteEscSeqP>
      return 1;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	0c c0       	rjmp	.+24     	; 0x1e40 <u8g_dev_ssd1306_128x64_fn+0xa8>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    1e28:	40 ed       	ldi	r20, 0xD0	; 208
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <u8g_WriteEscSeqP>
      return 1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <u8g_dev_ssd1306_128x64_fn+0xa8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    1e34:	96 01       	movw	r18, r12
    1e36:	4c 2f       	mov	r20, r28
    1e38:	b8 01       	movw	r22, r16
    1e3a:	c7 01       	movw	r24, r14
    1e3c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <u8g_dev_pb8v1_base_fn>
}
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	df 90       	pop	r13
    1e4c:	cf 90       	pop	r12
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	08 95       	ret

00001e54 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    1e54:	fc 01       	movw	r30, r24
    1e56:	e6 0f       	add	r30, r22
    1e58:	f1 1d       	adc	r31, r1
    1e5a:	84 91       	lpm	r24, Z
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	98 2f       	mov	r25, r24
    1e60:	88 27       	eor	r24, r24
    1e62:	31 96       	adiw	r30, 0x01	; 1
    1e64:	e4 91       	lpm	r30, Z
    1e66:	8e 0f       	add	r24, r30
    1e68:	91 1d       	adc	r25, r1
    1e6a:	08 95       	ret

00001e6c <u8g_font_GetFormat>:
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	84 91       	lpm	r24, Z
    1e70:	08 95       	ret

00001e72 <u8g_font_GetFontGlyphStructureSize>:
    1e72:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <u8g_font_GetFormat>
    1e76:	88 23       	and	r24, r24
    1e78:	21 f0       	breq	.+8      	; 0x1e82 <u8g_font_GetFontGlyphStructureSize+0x10>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	11 f0       	breq	.+4      	; 0x1e82 <u8g_font_GetFontGlyphStructureSize+0x10>
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	08 95       	ret
    1e82:	86 e0       	ldi	r24, 0x06	; 6
    1e84:	08 95       	ret

00001e86 <u8g_font_calc_vref_font>:
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	08 95       	ret

00001e8a <u8g_font_GetEncoding65Pos>:
    1e8a:	66 e0       	ldi	r22, 0x06	; 6
    1e8c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <u8g_font_get_word>
    1e90:	08 95       	ret

00001e92 <u8g_font_GetEncoding97Pos>:
    1e92:	68 e0       	ldi	r22, 0x08	; 8
    1e94:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <u8g_font_get_word>
    1e98:	08 95       	ret

00001e9a <u8g_font_GetFontStartEncoding>:
    1e9a:	0a 96       	adiw	r24, 0x0a	; 10
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	84 91       	lpm	r24, Z
    1ea0:	08 95       	ret

00001ea2 <u8g_font_GetFontEndEncoding>:
    1ea2:	0b 96       	adiw	r24, 0x0b	; 11
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	84 91       	lpm	r24, Z
    1ea8:	08 95       	ret

00001eaa <u8g_GetGlyph>:
    1eaa:	af 92       	push	r10
    1eac:	bf 92       	push	r11
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	7c 01       	movw	r14, r24
    1ec0:	b6 2e       	mov	r11, r22
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	14 96       	adiw	r26, 0x04	; 4
    1ec6:	cd 91       	ld	r28, X+
    1ec8:	dc 91       	ld	r29, X
    1eca:	15 97       	sbiw	r26, 0x05	; 5
    1ecc:	ce 01       	movw	r24, r28
    1ece:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <u8g_font_GetFormat>
    1ed2:	18 2f       	mov	r17, r24
    1ed4:	f7 01       	movw	r30, r14
    1ed6:	84 81       	ldd	r24, Z+4	; 0x04
    1ed8:	95 81       	ldd	r25, Z+5	; 0x05
    1eda:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <u8g_font_GetFontGlyphStructureSize>
    1ede:	d8 2e       	mov	r13, r24
    1ee0:	11 30       	cpi	r17, 0x01	; 1
    1ee2:	29 f4       	brne	.+10     	; 0x1eee <u8g_GetGlyph+0x44>
    1ee4:	0f 2e       	mov	r0, r31
    1ee6:	ff e0       	ldi	r31, 0x0F	; 15
    1ee8:	af 2e       	mov	r10, r31
    1eea:	f0 2d       	mov	r31, r0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <u8g_GetGlyph+0x48>
    1eee:	aa 24       	eor	r10, r10
    1ef0:	aa 94       	dec	r10
    1ef2:	d7 01       	movw	r26, r14
    1ef4:	14 96       	adiw	r26, 0x04	; 4
    1ef6:	8d 91       	ld	r24, X+
    1ef8:	9c 91       	ld	r25, X
    1efa:	15 97       	sbiw	r26, 0x05	; 5
    1efc:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <u8g_font_GetFontStartEncoding>
    1f00:	18 2f       	mov	r17, r24
    1f02:	f7 01       	movw	r30, r14
    1f04:	84 81       	ldd	r24, Z+4	; 0x04
    1f06:	95 81       	ldd	r25, Z+5	; 0x05
    1f08:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <u8g_font_GetFontEndEncoding>
    1f0c:	08 2f       	mov	r16, r24
    1f0e:	d7 01       	movw	r26, r14
    1f10:	14 96       	adiw	r26, 0x04	; 4
    1f12:	8d 91       	ld	r24, X+
    1f14:	9c 91       	ld	r25, X
    1f16:	15 97       	sbiw	r26, 0x05	; 5
    1f18:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <u8g_font_GetEncoding97Pos>
    1f1c:	b0 e6       	ldi	r27, 0x60	; 96
    1f1e:	bb 15       	cp	r27, r11
    1f20:	30 f4       	brcc	.+12     	; 0x1f2e <u8g_GetGlyph+0x84>
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <u8g_GetGlyph+0x84>
    1f26:	c8 0f       	add	r28, r24
    1f28:	d9 1f       	adc	r29, r25
    1f2a:	11 e6       	ldi	r17, 0x61	; 97
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <u8g_GetGlyph+0xa2>
    1f2e:	f7 01       	movw	r30, r14
    1f30:	84 81       	ldd	r24, Z+4	; 0x04
    1f32:	95 81       	ldd	r25, Z+5	; 0x05
    1f34:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <u8g_font_GetEncoding65Pos>
    1f38:	f0 e4       	ldi	r31, 0x40	; 64
    1f3a:	fb 15       	cp	r31, r11
    1f3c:	30 f4       	brcc	.+12     	; 0x1f4a <u8g_GetGlyph+0xa0>
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	21 f0       	breq	.+8      	; 0x1f4a <u8g_GetGlyph+0xa0>
    1f42:	c8 0f       	add	r28, r24
    1f44:	d9 1f       	adc	r29, r25
    1f46:	11 e4       	ldi	r17, 0x41	; 65
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <u8g_GetGlyph+0xa2>
    1f4a:	61 96       	adiw	r28, 0x11	; 17
    1f4c:	0b 15       	cp	r16, r11
    1f4e:	90 f4       	brcc	.+36     	; 0x1f74 <u8g_GetGlyph+0xca>
    1f50:	d7 01       	movw	r26, r14
    1f52:	50 96       	adiw	r26, 0x10	; 16
    1f54:	1c 92       	st	X, r1
    1f56:	50 97       	sbiw	r26, 0x10	; 16
    1f58:	53 96       	adiw	r26, 0x13	; 19
    1f5a:	1c 92       	st	X, r1
    1f5c:	53 97       	sbiw	r26, 0x13	; 19
    1f5e:	54 96       	adiw	r26, 0x14	; 20
    1f60:	1c 92       	st	X, r1
    1f62:	54 97       	sbiw	r26, 0x14	; 20
    1f64:	51 96       	adiw	r26, 0x11	; 17
    1f66:	1c 92       	st	X, r1
    1f68:	51 97       	sbiw	r26, 0x11	; 17
    1f6a:	52 96       	adiw	r26, 0x12	; 18
    1f6c:	1c 92       	st	X, r1
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	76 c0       	rjmp	.+236    	; 0x2060 <u8g_GetGlyph+0x1b6>
    1f74:	01 17       	cp	r16, r17
    1f76:	08 f4       	brcc	.+2      	; 0x1f7a <u8g_GetGlyph+0xd0>
    1f78:	6b c0       	rjmp	.+214    	; 0x2050 <u8g_GetGlyph+0x1a6>
    1f7a:	2d 2d       	mov	r18, r13
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	6e 01       	movw	r12, r28
    1f80:	fe 01       	movw	r30, r28
    1f82:	94 91       	lpm	r25, Z
    1f84:	9f 3f       	cpi	r25, 0xFF	; 255
    1f86:	11 f4       	brne	.+4      	; 0x1f8c <u8g_GetGlyph+0xe2>
    1f88:	21 96       	adiw	r28, 0x01	; 1
    1f8a:	5e c0       	rjmp	.+188    	; 0x2048 <u8g_GetGlyph+0x19e>
    1f8c:	1b 11       	cpse	r17, r11
    1f8e:	53 c0       	rjmp	.+166    	; 0x2036 <u8g_GetGlyph+0x18c>
    1f90:	d7 01       	movw	r26, r14
    1f92:	14 96       	adiw	r26, 0x04	; 4
    1f94:	8d 91       	ld	r24, X+
    1f96:	9c 91       	ld	r25, X
    1f98:	15 97       	sbiw	r26, 0x05	; 5
    1f9a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <u8g_font_GetFormat>
    1f9e:	88 23       	and	r24, r24
    1fa0:	11 f0       	breq	.+4      	; 0x1fa6 <u8g_GetGlyph+0xfc>
    1fa2:	82 30       	cpi	r24, 0x02	; 2
    1fa4:	01 f5       	brne	.+64     	; 0x1fe6 <u8g_GetGlyph+0x13c>
    1fa6:	f6 01       	movw	r30, r12
    1fa8:	c4 90       	lpm	r12, Z
    1faa:	d7 01       	movw	r26, r14
    1fac:	53 96       	adiw	r26, 0x13	; 19
    1fae:	cc 92       	st	X, r12
    1fb0:	53 97       	sbiw	r26, 0x13	; 19
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	31 96       	adiw	r30, 0x01	; 1
    1fb6:	e4 91       	lpm	r30, Z
    1fb8:	54 96       	adiw	r26, 0x14	; 20
    1fba:	ec 93       	st	X, r30
    1fbc:	54 97       	sbiw	r26, 0x14	; 20
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	33 96       	adiw	r30, 0x03	; 3
    1fc2:	e4 91       	lpm	r30, Z
    1fc4:	50 96       	adiw	r26, 0x10	; 16
    1fc6:	ec 93       	st	X, r30
    1fc8:	50 97       	sbiw	r26, 0x10	; 16
    1fca:	fe 01       	movw	r30, r28
    1fcc:	34 96       	adiw	r30, 0x04	; 4
    1fce:	e4 91       	lpm	r30, Z
    1fd0:	51 96       	adiw	r26, 0x11	; 17
    1fd2:	ec 93       	st	X, r30
    1fd4:	51 97       	sbiw	r26, 0x11	; 17
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	35 96       	adiw	r30, 0x05	; 5
    1fda:	e4 91       	lpm	r30, Z
    1fdc:	52 96       	adiw	r26, 0x12	; 18
    1fde:	ec 93       	st	X, r30
    1fe0:	8c 2f       	mov	r24, r28
    1fe2:	9d 2f       	mov	r25, r29
    1fe4:	3d c0       	rjmp	.+122    	; 0x2060 <u8g_GetGlyph+0x1b6>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	84 91       	lpm	r24, Z
    1fea:	98 2f       	mov	r25, r24
    1fec:	9f 70       	andi	r25, 0x0F	; 15
    1fee:	92 50       	subi	r25, 0x02	; 2
    1ff0:	d7 01       	movw	r26, r14
    1ff2:	52 96       	adiw	r26, 0x12	; 18
    1ff4:	9c 93       	st	X, r25
    1ff6:	52 97       	sbiw	r26, 0x12	; 18
    1ff8:	c8 2e       	mov	r12, r24
    1ffa:	c6 94       	lsr	r12
    1ffc:	c6 94       	lsr	r12
    1ffe:	c6 94       	lsr	r12
    2000:	c6 94       	lsr	r12
    2002:	51 96       	adiw	r26, 0x11	; 17
    2004:	cc 92       	st	X, r12
    2006:	51 97       	sbiw	r26, 0x11	; 17
    2008:	fe 01       	movw	r30, r28
    200a:	31 96       	adiw	r30, 0x01	; 1
    200c:	e4 91       	lpm	r30, Z
    200e:	8e 2f       	mov	r24, r30
    2010:	8f 70       	andi	r24, 0x0F	; 15
    2012:	54 96       	adiw	r26, 0x14	; 20
    2014:	8c 93       	st	X, r24
    2016:	54 97       	sbiw	r26, 0x14	; 20
    2018:	e2 95       	swap	r30
    201a:	ef 70       	andi	r30, 0x0F	; 15
    201c:	53 96       	adiw	r26, 0x13	; 19
    201e:	ec 93       	st	X, r30
    2020:	53 97       	sbiw	r26, 0x13	; 19
    2022:	fe 01       	movw	r30, r28
    2024:	32 96       	adiw	r30, 0x02	; 2
    2026:	e4 91       	lpm	r30, Z
    2028:	e2 95       	swap	r30
    202a:	ef 70       	andi	r30, 0x0F	; 15
    202c:	50 96       	adiw	r26, 0x10	; 16
    202e:	ec 93       	st	X, r30
    2030:	8c 2f       	mov	r24, r28
    2032:	9d 2f       	mov	r25, r29
    2034:	15 c0       	rjmp	.+42     	; 0x2060 <u8g_GetGlyph+0x1b6>
    2036:	fe 01       	movw	r30, r28
    2038:	32 96       	adiw	r30, 0x02	; 2
    203a:	e4 91       	lpm	r30, Z
    203c:	ea 21       	and	r30, r10
    203e:	c9 01       	movw	r24, r18
    2040:	8e 0f       	add	r24, r30
    2042:	91 1d       	adc	r25, r1
    2044:	c8 0f       	add	r28, r24
    2046:	d9 1f       	adc	r29, r25
    2048:	10 17       	cp	r17, r16
    204a:	11 f0       	breq	.+4      	; 0x2050 <u8g_GetGlyph+0x1a6>
    204c:	1f 5f       	subi	r17, 0xFF	; 255
    204e:	97 cf       	rjmp	.-210    	; 0x1f7e <u8g_GetGlyph+0xd4>
    2050:	f7 01       	movw	r30, r14
    2052:	10 8a       	std	Z+16, r1	; 0x10
    2054:	13 8a       	std	Z+19, r1	; 0x13
    2056:	14 8a       	std	Z+20, r1	; 0x14
    2058:	11 8a       	std	Z+17, r1	; 0x11
    205a:	12 8a       	std	Z+18, r1	; 0x12
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	bf 90       	pop	r11
    2072:	af 90       	pop	r10
    2074:	08 95       	ret

00002076 <u8g_draw_glyph>:
    2076:	6f 92       	push	r6
    2078:	7f 92       	push	r7
    207a:	8f 92       	push	r8
    207c:	9f 92       	push	r9
    207e:	af 92       	push	r10
    2080:	bf 92       	push	r11
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	5c 01       	movw	r10, r24
    2094:	16 2f       	mov	r17, r22
    2096:	74 2e       	mov	r7, r20
    2098:	62 2f       	mov	r22, r18
    209a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <u8g_GetGlyph>
    209e:	6c 01       	movw	r12, r24
    20a0:	89 2b       	or	r24, r25
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <u8g_draw_glyph+0x30>
    20a4:	48 c0       	rjmp	.+144    	; 0x2136 <u8g_draw_glyph+0xc0>
    20a6:	f5 01       	movw	r30, r10
    20a8:	84 81       	ldd	r24, Z+4	; 0x04
    20aa:	95 81       	ldd	r25, Z+5	; 0x05
    20ac:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <u8g_font_GetFontGlyphStructureSize>
    20b0:	98 2e       	mov	r9, r24
    20b2:	f5 01       	movw	r30, r10
    20b4:	d3 89       	ldd	r29, Z+19	; 0x13
    20b6:	c4 89       	ldd	r28, Z+20	; 0x14
    20b8:	61 88       	ldd	r6, Z+17	; 0x11
    20ba:	61 0e       	add	r6, r17
    20bc:	82 89       	ldd	r24, Z+18	; 0x12
    20be:	78 1a       	sub	r7, r24
    20c0:	f7 2c       	mov	r15, r7
    20c2:	fc 1a       	sub	r15, r28
    20c4:	0c 2f       	mov	r16, r28
    20c6:	2d 2f       	mov	r18, r29
    20c8:	4f 2d       	mov	r20, r15
    20ca:	66 2d       	mov	r22, r6
    20cc:	c5 01       	movw	r24, r10
    20ce:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <u8g_IsBBXIntersection>
    20d2:	81 11       	cpse	r24, r1
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <u8g_draw_glyph+0x66>
    20d6:	f5 01       	movw	r30, r10
    20d8:	80 89       	ldd	r24, Z+16	; 0x10
    20da:	2e c0       	rjmp	.+92     	; 0x2138 <u8g_draw_glyph+0xc2>
    20dc:	d9 5f       	subi	r29, 0xF9	; 249
    20de:	ed 2e       	mov	r14, r29
    20e0:	e6 94       	lsr	r14
    20e2:	e6 94       	lsr	r14
    20e4:	e6 94       	lsr	r14
    20e6:	cc 23       	and	r28, r28
    20e8:	19 f1       	breq	.+70     	; 0x2130 <u8g_draw_glyph+0xba>
    20ea:	e6 01       	movw	r28, r12
    20ec:	c9 0d       	add	r28, r9
    20ee:	d1 1d       	adc	r29, r1
    20f0:	88 24       	eor	r8, r8
    20f2:	8a 94       	dec	r8
    20f4:	8e 0c       	add	r8, r14
    20f6:	91 2c       	mov	r9, r1
    20f8:	ff ef       	ldi	r31, 0xFF	; 255
    20fa:	8f 1a       	sub	r8, r31
    20fc:	9f 0a       	sbc	r9, r31
    20fe:	11 c0       	rjmp	.+34     	; 0x2122 <u8g_draw_glyph+0xac>
    2100:	fe 01       	movw	r30, r28
    2102:	04 91       	lpm	r16, Z
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	4f 2d       	mov	r20, r15
    2108:	61 2f       	mov	r22, r17
    210a:	c5 01       	movw	r24, r10
    210c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <u8g_Draw8Pixel>
    2110:	21 96       	adiw	r28, 0x01	; 1
    2112:	18 5f       	subi	r17, 0xF8	; 248
    2114:	cc 15       	cp	r28, r12
    2116:	dd 05       	cpc	r29, r13
    2118:	99 f7       	brne	.-26     	; 0x2100 <u8g_draw_glyph+0x8a>
    211a:	e6 01       	movw	r28, r12
    211c:	f3 94       	inc	r15
    211e:	f7 14       	cp	r15, r7
    2120:	39 f0       	breq	.+14     	; 0x2130 <u8g_draw_glyph+0xba>
    2122:	ee 20       	and	r14, r14
    2124:	d9 f3       	breq	.-10     	; 0x211c <u8g_draw_glyph+0xa6>
    2126:	6e 01       	movw	r12, r28
    2128:	c8 0c       	add	r12, r8
    212a:	d9 1c       	adc	r13, r9
    212c:	16 2d       	mov	r17, r6
    212e:	e8 cf       	rjmp	.-48     	; 0x2100 <u8g_draw_glyph+0x8a>
    2130:	f5 01       	movw	r30, r10
    2132:	80 89       	ldd	r24, Z+16	; 0x10
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <u8g_draw_glyph+0xc2>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	9f 90       	pop	r9
    214e:	8f 90       	pop	r8
    2150:	7f 90       	pop	r7
    2152:	6f 90       	pop	r6
    2154:	08 95       	ret

00002156 <u8g_DrawStr>:
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ff 92       	push	r15
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	6c 01       	movw	r12, r24
    2166:	c6 2f       	mov	r28, r22
    2168:	f4 2e       	mov	r15, r20
    216a:	89 01       	movw	r16, r18
    216c:	dc 01       	movw	r26, r24
    216e:	55 96       	adiw	r26, 0x15	; 21
    2170:	ed 91       	ld	r30, X+
    2172:	fc 91       	ld	r31, X
    2174:	56 97       	sbiw	r26, 0x16	; 22
    2176:	09 95       	icall
    2178:	f8 0e       	add	r15, r24
    217a:	f8 01       	movw	r30, r16
    217c:	20 81       	ld	r18, Z
    217e:	22 23       	and	r18, r18
    2180:	81 f0       	breq	.+32     	; 0x21a2 <u8g_DrawStr+0x4c>
    2182:	0f 5f       	subi	r16, 0xFF	; 255
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	d0 e0       	ldi	r29, 0x00	; 0
    2188:	4f 2d       	mov	r20, r15
    218a:	6c 2f       	mov	r22, r28
    218c:	c6 01       	movw	r24, r12
    218e:	0e 94 3b 10 	call	0x2076	; 0x2076 <u8g_draw_glyph>
    2192:	c8 0f       	add	r28, r24
    2194:	d8 0f       	add	r29, r24
    2196:	d8 01       	movw	r26, r16
    2198:	2d 91       	ld	r18, X+
    219a:	8d 01       	movw	r16, r26
    219c:	21 11       	cpse	r18, r1
    219e:	f4 cf       	rjmp	.-24     	; 0x2188 <u8g_DrawStr+0x32>
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <u8g_DrawStr+0x4e>
    21a2:	d0 e0       	ldi	r29, 0x00	; 0
    21a4:	8d 2f       	mov	r24, r29
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	08 95       	ret

000021b6 <u8g_UpdateRefHeight>:
    21b6:	dc 01       	movw	r26, r24
    21b8:	14 96       	adiw	r26, 0x04	; 4
    21ba:	8d 91       	ld	r24, X+
    21bc:	9c 91       	ld	r25, X
    21be:	15 97       	sbiw	r26, 0x05	; 5
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <u8g_UpdateRefHeight+0x10>
    21c4:	4d c0       	rjmp	.+154    	; 0x2260 <u8g_UpdateRefHeight+0xaa>
    21c6:	57 96       	adiw	r26, 0x17	; 23
    21c8:	2c 91       	ld	r18, X
    21ca:	57 97       	sbiw	r26, 0x17	; 23
    21cc:	21 11       	cpse	r18, r1
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <u8g_UpdateRefHeight+0x34>
    21d0:	fc 01       	movw	r30, r24
    21d2:	35 96       	adiw	r30, 0x05	; 5
    21d4:	e4 91       	lpm	r30, Z
    21d6:	58 96       	adiw	r26, 0x18	; 24
    21d8:	ec 93       	st	X, r30
    21da:	58 97       	sbiw	r26, 0x18	; 24
    21dc:	fc 01       	movw	r30, r24
    21de:	3c 96       	adiw	r30, 0x0c	; 12
    21e0:	e4 91       	lpm	r30, Z
    21e2:	59 96       	adiw	r26, 0x19	; 25
    21e4:	ec 93       	st	X, r30
    21e6:	59 97       	sbiw	r26, 0x19	; 25
    21e8:	1b c0       	rjmp	.+54     	; 0x2220 <u8g_UpdateRefHeight+0x6a>
    21ea:	21 30       	cpi	r18, 0x01	; 1
    21ec:	69 f4       	brne	.+26     	; 0x2208 <u8g_UpdateRefHeight+0x52>
    21ee:	fc 01       	movw	r30, r24
    21f0:	3f 96       	adiw	r30, 0x0f	; 15
    21f2:	e4 91       	lpm	r30, Z
    21f4:	58 96       	adiw	r26, 0x18	; 24
    21f6:	ec 93       	st	X, r30
    21f8:	58 97       	sbiw	r26, 0x18	; 24
    21fa:	fc 01       	movw	r30, r24
    21fc:	70 96       	adiw	r30, 0x10	; 16
    21fe:	e4 91       	lpm	r30, Z
    2200:	59 96       	adiw	r26, 0x19	; 25
    2202:	ec 93       	st	X, r30
    2204:	59 97       	sbiw	r26, 0x19	; 25
    2206:	0c c0       	rjmp	.+24     	; 0x2220 <u8g_UpdateRefHeight+0x6a>
    2208:	fc 01       	movw	r30, r24
    220a:	3d 96       	adiw	r30, 0x0d	; 13
    220c:	e4 91       	lpm	r30, Z
    220e:	58 96       	adiw	r26, 0x18	; 24
    2210:	ec 93       	st	X, r30
    2212:	58 97       	sbiw	r26, 0x18	; 24
    2214:	fc 01       	movw	r30, r24
    2216:	3e 96       	adiw	r30, 0x0e	; 14
    2218:	e4 91       	lpm	r30, Z
    221a:	59 96       	adiw	r26, 0x19	; 25
    221c:	ec 93       	st	X, r30
    221e:	59 97       	sbiw	r26, 0x19	; 25
    2220:	58 96       	adiw	r26, 0x18	; 24
    2222:	8c 91       	ld	r24, X
    2224:	58 97       	sbiw	r26, 0x18	; 24
    2226:	08 2e       	mov	r0, r24
    2228:	00 0c       	add	r0, r0
    222a:	99 0b       	sbc	r25, r25
    222c:	59 96       	adiw	r26, 0x19	; 25
    222e:	2c 91       	ld	r18, X
    2230:	59 97       	sbiw	r26, 0x19	; 25
    2232:	82 1b       	sub	r24, r18
    2234:	91 09       	sbc	r25, r1
    2236:	27 fd       	sbrc	r18, 7
    2238:	93 95       	inc	r25
    223a:	5a 96       	adiw	r26, 0x1a	; 26
    223c:	2c 91       	ld	r18, X
    223e:	5a 97       	sbiw	r26, 0x1a	; 26
    2240:	20 34       	cpi	r18, 0x40	; 64
    2242:	61 f0       	breq	.+24     	; 0x225c <u8g_UpdateRefHeight+0xa6>
    2244:	82 9f       	mul	r24, r18
    2246:	c0 01       	movw	r24, r0
    2248:	11 24       	eor	r1, r1
    224a:	00 24       	eor	r0, r0
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	00 1c       	adc	r0, r0
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	00 1c       	adc	r0, r0
    2258:	89 2f       	mov	r24, r25
    225a:	90 2d       	mov	r25, r0
    225c:	5b 96       	adiw	r26, 0x1b	; 27
    225e:	8c 93       	st	X, r24
    2260:	08 95       	ret

00002262 <u8g_SetFontPosBaseline>:
    2262:	23 e4       	ldi	r18, 0x43	; 67
    2264:	3f e0       	ldi	r19, 0x0F	; 15
    2266:	fc 01       	movw	r30, r24
    2268:	36 8b       	std	Z+22, r19	; 0x16
    226a:	25 8b       	std	Z+21, r18	; 0x15
    226c:	08 95       	ret

0000226e <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
  if ( u8g->font != font )
    2272:	fc 01       	movw	r30, r24
    2274:	24 81       	ldd	r18, Z+4	; 0x04
    2276:	35 81       	ldd	r19, Z+5	; 0x05
    2278:	26 17       	cp	r18, r22
    227a:	37 07       	cpc	r19, r23
    227c:	49 f0       	breq	.+18     	; 0x2290 <u8g_SetFont+0x22>
    227e:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    2280:	75 83       	std	Z+5, r23	; 0x05
    2282:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    2284:	0e 94 db 10 	call	0x21b6	; 0x21b6 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2288:	83 e4       	ldi	r24, 0x43	; 67
    228a:	9f e0       	ldi	r25, 0x0F	; 15
    228c:	9e 8b       	std	Y+22, r25	; 0x16
    228e:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <u8g_init_data>:
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    2296:	1f 93       	push	r17
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	ec 01       	movw	r28, r24
    229e:	1d 82       	std	Y+5, r1	; 0x05
    22a0:	1c 82       	std	Y+4, r1	; 0x04
    22a2:	1f 82       	std	Y+7, r1	; 0x07
    22a4:	1e 82       	std	Y+6, r1	; 0x06
    22a6:	19 86       	std	Y+9, r1	; 0x09
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	88 87       	std	Y+8, r24	; 0x08
    22ac:	82 e2       	ldi	r24, 0x22	; 34
    22ae:	8a 87       	std	Y+10, r24	; 0x0a
    22b0:	1f 86       	std	Y+15, r1	; 0x0f
    22b2:	1e 86       	std	Y+14, r1	; 0x0e
    22b4:	fe 01       	movw	r30, r28
    22b6:	b3 96       	adiw	r30, 0x23	; 35
    22b8:	9e 01       	movw	r18, r28
    22ba:	2f 5c       	subi	r18, 0xCF	; 207
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	8f ef       	ldi	r24, 0xFF	; 255
    22c0:	81 93       	st	Z+, r24
    22c2:	e2 17       	cp	r30, r18
    22c4:	f3 07       	cpc	r31, r19
    22c6:	e1 f7       	brne	.-8      	; 0x22c0 <u8g_init_data+0x2a>
    22c8:	11 e0       	ldi	r17, 0x01	; 1
    22ca:	18 a3       	std	Y+32, r17	; 0x20
    22cc:	ce 01       	movw	r24, r28
    22ce:	0e 94 31 11 	call	0x2262	; 0x2262 <u8g_SetFontPosBaseline>
    22d2:	1f 8b       	std	Y+23, r17	; 0x17
    22d4:	18 8e       	std	Y+24, r1	; 0x18
    22d6:	19 8e       	std	Y+25, r1	; 0x19
    22d8:	80 e4       	ldi	r24, 0x40	; 64
    22da:	8a 8f       	std	Y+26, r24	; 0x1a
    22dc:	1b 8e       	std	Y+27, r1	; 0x1b
    22de:	8b ea       	ldi	r24, 0xAB	; 171
    22e0:	93 e1       	ldi	r25, 0x13	; 19
    22e2:	9a ab       	std	Y+50, r25	; 0x32
    22e4:	89 ab       	std	Y+49, r24	; 0x31
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	08 95       	ret

000022ee <u8g_call_dev_fn>:
    22ee:	db 01       	movw	r26, r22
    22f0:	ed 91       	ld	r30, X+
    22f2:	fc 91       	ld	r31, X
    22f4:	09 95       	icall
    22f6:	08 95       	ret

000022f8 <u8g_InitLL>:
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	ec 01       	movw	r28, r24
    2302:	8b 01       	movw	r16, r22
    2304:	e9 a9       	ldd	r30, Y+49	; 0x31
    2306:	fa a9       	ldd	r31, Y+50	; 0x32
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	09 95       	icall
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4a e0       	ldi	r20, 0x0A	; 10
    2312:	b8 01       	movw	r22, r16
    2314:	ce 01       	movw	r24, r28
    2316:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    231a:	18 2f       	mov	r17, r24
    231c:	e9 a9       	ldd	r30, Y+49	; 0x31
    231e:	fa a9       	ldd	r31, Y+50	; 0x32
    2320:	83 e0       	ldi	r24, 0x03	; 3
    2322:	09 95       	icall
    2324:	e9 a9       	ldd	r30, Y+49	; 0x31
    2326:	fa a9       	ldd	r31, Y+50	; 0x32
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	09 95       	icall
    232c:	81 2f       	mov	r24, r17
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	08 95       	ret

00002338 <u8g_FirstPageLL>:
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	ec 01       	movw	r28, r24
    2342:	8b 01       	movw	r16, r22
    2344:	e9 a9       	ldd	r30, Y+49	; 0x31
    2346:	fa a9       	ldd	r31, Y+50	; 0x32
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	09 95       	icall
    234c:	e9 a9       	ldd	r30, Y+49	; 0x31
    234e:	fa a9       	ldd	r31, Y+50	; 0x32
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	09 95       	icall
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	44 e1       	ldi	r20, 0x14	; 20
    235a:	b8 01       	movw	r22, r16
    235c:	ce 01       	movw	r24, r28
    235e:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    2362:	9e 01       	movw	r18, r28
    2364:	2d 5c       	subi	r18, 0xCD	; 205
    2366:	3f 4f       	sbci	r19, 0xFF	; 255
    2368:	47 e1       	ldi	r20, 0x17	; 23
    236a:	b8 01       	movw	r22, r16
    236c:	ce 01       	movw	r24, r28
    236e:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    2372:	e9 a9       	ldd	r30, Y+49	; 0x31
    2374:	fa a9       	ldd	r31, Y+50	; 0x32
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	09 95       	icall
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	08 95       	ret

00002384 <u8g_NextPageLL>:
    2384:	ef 92       	push	r14
    2386:	ff 92       	push	r15
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	ec 01       	movw	r28, r24
    2390:	7b 01       	movw	r14, r22
    2392:	e9 a9       	ldd	r30, Y+49	; 0x31
    2394:	fa a9       	ldd	r31, Y+50	; 0x32
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	09 95       	icall
    239a:	e9 a9       	ldd	r30, Y+49	; 0x31
    239c:	fa a9       	ldd	r31, Y+50	; 0x32
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	09 95       	icall
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	45 e1       	ldi	r20, 0x15	; 21
    23a8:	b7 01       	movw	r22, r14
    23aa:	ce 01       	movw	r24, r28
    23ac:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    23b0:	18 2f       	mov	r17, r24
    23b2:	88 23       	and	r24, r24
    23b4:	41 f0       	breq	.+16     	; 0x23c6 <u8g_NextPageLL+0x42>
    23b6:	9e 01       	movw	r18, r28
    23b8:	2d 5c       	subi	r18, 0xCD	; 205
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	47 e1       	ldi	r20, 0x17	; 23
    23be:	b7 01       	movw	r22, r14
    23c0:	ce 01       	movw	r24, r28
    23c2:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    23c6:	e9 a9       	ldd	r30, Y+49	; 0x31
    23c8:	fa a9       	ldd	r31, Y+50	; 0x32
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	09 95       	icall
    23ce:	81 2f       	mov	r24, r17
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	ff 90       	pop	r15
    23d8:	ef 90       	pop	r14
    23da:	08 95       	ret

000023dc <u8g_GetWidthLL>:
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	1f 92       	push	r1
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	9e 01       	movw	r18, r28
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	46 e4       	ldi	r20, 0x46	; 70
    23ee:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	0f 90       	pop	r0
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	08 95       	ret

000023fc <u8g_GetHeightLL>:
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	1f 92       	push	r1
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	9e 01       	movw	r18, r28
    2408:	2f 5f       	subi	r18, 0xFF	; 255
    240a:	3f 4f       	sbci	r19, 0xFF	; 255
    240c:	47 e4       	ldi	r20, 0x47	; 71
    240e:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	0f 90       	pop	r0
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	08 95       	ret

0000241c <u8g_GetModeLL>:
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	48 e4       	ldi	r20, 0x48	; 72
    2422:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    2426:	08 95       	ret

00002428 <u8g_UpdateDimension>:
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	ec 01       	movw	r28, r24
    242e:	6a 81       	ldd	r22, Y+2	; 0x02
    2430:	7b 81       	ldd	r23, Y+3	; 0x03
    2432:	0e 94 ee 11 	call	0x23dc	; 0x23dc <u8g_GetWidthLL>
    2436:	88 83       	st	Y, r24
    2438:	6a 81       	ldd	r22, Y+2	; 0x02
    243a:	7b 81       	ldd	r23, Y+3	; 0x03
    243c:	ce 01       	movw	r24, r28
    243e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <u8g_GetHeightLL>
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	6a 81       	ldd	r22, Y+2	; 0x02
    2446:	7b 81       	ldd	r23, Y+3	; 0x03
    2448:	ce 01       	movw	r24, r28
    244a:	0e 94 0e 12 	call	0x241c	; 0x241c <u8g_GetModeLL>
    244e:	8b 87       	std	Y+11, r24	; 0x0b
    2450:	9e 01       	movw	r18, r28
    2452:	2d 5c       	subi	r18, 0xCD	; 205
    2454:	3f 4f       	sbci	r19, 0xFF	; 255
    2456:	6a 81       	ldd	r22, Y+2	; 0x02
    2458:	7b 81       	ldd	r23, Y+3	; 0x03
    245a:	47 e1       	ldi	r20, 0x17	; 23
    245c:	ce 01       	movw	r24, r28
    245e:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <u8g_Begin>:
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	ec 01       	movw	r28, r24
    246e:	6a 81       	ldd	r22, Y+2	; 0x02
    2470:	7b 81       	ldd	r23, Y+3	; 0x03
    2472:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <u8g_InitLL>
    2476:	88 23       	and	r24, r24
    2478:	21 f0       	breq	.+8      	; 0x2482 <u8g_Begin+0x1a>
    247a:	ce 01       	movw	r24, r28
    247c:	0e 94 14 12 	call	0x2428	; 0x2428 <u8g_UpdateDimension>
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <u8g_InitI2C>:
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	ec 01       	movw	r28, r24
    2494:	7b 01       	movw	r14, r22
    2496:	14 2f       	mov	r17, r20
    2498:	0e 94 4b 11 	call	0x2296	; 0x2296 <u8g_init_data>
    249c:	fb 82       	std	Y+3, r15	; 0x03
    249e:	ea 82       	std	Y+2, r14	; 0x02
    24a0:	1e a7       	std	Y+46, r17	; 0x2e
    24a2:	ce 01       	movw	r24, r28
    24a4:	0e 94 34 12 	call	0x2468	; 0x2468 <u8g_Begin>
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	1f 91       	pop	r17
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	08 95       	ret

000024b4 <u8g_FirstPage>:
    24b4:	fc 01       	movw	r30, r24
    24b6:	62 81       	ldd	r22, Z+2	; 0x02
    24b8:	73 81       	ldd	r23, Z+3	; 0x03
    24ba:	0e 94 9c 11 	call	0x2338	; 0x2338 <u8g_FirstPageLL>
    24be:	08 95       	ret

000024c0 <u8g_NextPage>:
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	ec 01       	movw	r28, r24
    24c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    24c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    24ca:	30 97       	sbiw	r30, 0x00	; 0
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <u8g_NextPage+0x10>
    24ce:	09 95       	icall
    24d0:	6a 81       	ldd	r22, Y+2	; 0x02
    24d2:	7b 81       	ldd	r23, Y+3	; 0x03
    24d4:	ce 01       	movw	r24, r28
    24d6:	0e 94 c2 11 	call	0x2384	; 0x2384 <u8g_NextPageLL>
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	08 95       	ret

000024e0 <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    24e0:	0f 93       	push	r16
    24e2:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    24e8:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    24ea:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    24ec:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    24ee:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    24f0:	9f 01       	movw	r18, r30
    24f2:	24 5e       	subi	r18, 0xE4	; 228
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    24f6:	4b e3       	ldi	r20, 0x3B	; 59
    24f8:	bc 01       	movw	r22, r24
    24fa:	cf 01       	movw	r24, r30
    24fc:	0e 94 77 11 	call	0x22ee	; 0x22ee <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    2500:	0f 91       	pop	r16
    2502:	08 95       	ret

00002504 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    2504:	fc 01       	movw	r30, r24
    2506:	12 82       	std	Z+2, r1	; 0x02
    2508:	80 81       	ld	r24, Z
    250a:	81 50       	subi	r24, 0x01	; 1
    250c:	83 83       	std	Z+3, r24	; 0x03
    250e:	14 82       	std	Z+4, r1	; 0x04
    2510:	08 95       	ret

00002512 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    2512:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    2514:	20 81       	ld	r18, Z
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	82 0f       	add	r24, r18
    251a:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	89 17       	cp	r24, r25
    2520:	60 f4       	brcc	.+24     	; 0x253a <u8g_page_Next+0x28>
    return 0;
  p->page++;
    2522:	84 81       	ldd	r24, Z+4	; 0x04
    2524:	8f 5f       	subi	r24, 0xFF	; 255
    2526:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    2528:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    252a:	82 0f       	add	r24, r18
  if ( y1 >= p->total_height )
    252c:	89 17       	cp	r24, r25
    252e:	10 f0       	brcs	.+4      	; 0x2534 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    2530:	8f ef       	ldi	r24, 0xFF	; 255
    2532:	89 0f       	add	r24, r25
  }
  p->page_y1 = y1;
    2534:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    253a:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    253c:	08 95       	ret

0000253e <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    253e:	dc 01       	movw	r26, r24
    2540:	16 96       	adiw	r26, 0x06	; 6
    2542:	ed 91       	ld	r30, X+
    2544:	fc 91       	ld	r31, X
    2546:	17 97       	sbiw	r26, 0x07	; 7
    2548:	15 96       	adiw	r26, 0x05	; 5
    254a:	8c 91       	ld	r24, X
    254c:	9f 01       	movw	r18, r30
    254e:	28 0f       	add	r18, r24
    2550:	31 1d       	adc	r19, r1
    2552:	c9 01       	movw	r24, r18
    2554:	11 92       	st	Z+, r1
    2556:	e8 17       	cp	r30, r24
    2558:	f9 07       	cpc	r31, r25
    255a:	e1 f7       	brne	.-8      	; 0x2554 <u8g_pb_Clear+0x16>
    255c:	08 95       	ret

0000255e <u8g_pb_IsYIntersection>:
    255e:	31 e0       	ldi	r19, 0x01	; 1
    2560:	fc 01       	movw	r30, r24
    2562:	23 81       	ldd	r18, Z+3	; 0x03
    2564:	26 17       	cp	r18, r22
    2566:	08 f4       	brcc	.+2      	; 0x256a <u8g_pb_IsYIntersection+0xc>
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	21 e0       	ldi	r18, 0x01	; 1
    256c:	fc 01       	movw	r30, r24
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	48 17       	cp	r20, r24
    2572:	08 f4       	brcc	.+2      	; 0x2576 <u8g_pb_IsYIntersection+0x18>
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	91 e0       	ldi	r25, 0x01	; 1
    2578:	46 17       	cp	r20, r22
    257a:	08 f0       	brcs	.+2      	; 0x257e <u8g_pb_IsYIntersection+0x20>
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	89 2f       	mov	r24, r25
    2580:	83 2b       	or	r24, r19
    2582:	28 23       	and	r18, r24
    2584:	83 2f       	mov	r24, r19
    2586:	89 23       	and	r24, r25
    2588:	82 2b       	or	r24, r18
    258a:	08 95       	ret

0000258c <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    258c:	dc 01       	movw	r26, r24
    258e:	fb 01       	movw	r30, r22
  box->x0 = 0;
    2590:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    2592:	12 96       	adiw	r26, 0x02	; 2
    2594:	8c 91       	ld	r24, X
    2596:	12 97       	sbiw	r26, 0x02	; 2
    2598:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    259a:	15 96       	adiw	r26, 0x05	; 5
    259c:	8c 91       	ld	r24, X
    259e:	15 97       	sbiw	r26, 0x05	; 5
    25a0:	81 50       	subi	r24, 0x01	; 1
    25a2:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    25a4:	13 96       	adiw	r26, 0x03	; 3
    25a6:	8c 91       	ld	r24, X
    25a8:	83 83       	std	Z+3, r24	; 0x03
    25aa:	08 95       	ret

000025ac <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    25ac:	fb 01       	movw	r30, r22
    25ae:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    25b0:	23 81       	ldd	r18, Z+3	; 0x03
    25b2:	21 30       	cpi	r18, 0x01	; 1
    25b4:	19 f0       	breq	.+6      	; 0x25bc <u8g_pb_Is8PixelVisible+0x10>
    25b6:	23 30       	cpi	r18, 0x03	; 3
    25b8:	21 f0       	breq	.+8      	; 0x25c2 <u8g_pb_Is8PixelVisible+0x16>
    25ba:	06 c0       	rjmp	.+12     	; 0x25c8 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    25bc:	48 e0       	ldi	r20, 0x08	; 8
    25be:	43 0f       	add	r20, r19
      break;
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    25c2:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    25c4:	38 50       	subi	r19, 0x08	; 8
      break;
    25c6:	01 c0       	rjmp	.+2      	; 0x25ca <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    25c8:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    25ca:	63 2f       	mov	r22, r19
    25cc:	0e 94 af 12 	call	0x255e	; 0x255e <u8g_pb_IsYIntersection>
}
    25d0:	08 95       	ret

000025d2 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    25d2:	fc 01       	movw	r30, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    25d8:	26 81       	ldd	r18, Z+6	; 0x06
    25da:	37 81       	ldd	r19, Z+7	; 0x07
    25dc:	45 81       	ldd	r20, Z+5	; 0x05
    25de:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <u8g_WriteSequence>
}
    25e2:	08 95       	ret

000025e4 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    25e4:	dc 01       	movw	r26, r24
    25e6:	16 96       	adiw	r26, 0x06	; 6
    25e8:	ed 91       	ld	r30, X+
    25ea:	fc 91       	ld	r31, X
    25ec:	17 97       	sbiw	r26, 0x07	; 7
    25ee:	12 96       	adiw	r26, 0x02	; 2
    25f0:	8c 91       	ld	r24, X
    25f2:	48 1b       	sub	r20, r24
    25f4:	47 70       	andi	r20, 0x07	; 7
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <u8g_pb8v1_set_pixel+0x1c>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	4a 95       	dec	r20
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <u8g_pb8v1_set_pixel+0x18>
    2604:	e6 0f       	add	r30, r22
    2606:	f1 1d       	adc	r31, r1
    2608:	22 23       	and	r18, r18
    260a:	21 f0       	breq	.+8      	; 0x2614 <u8g_pb8v1_set_pixel+0x30>
    260c:	90 81       	ld	r25, Z
    260e:	89 2b       	or	r24, r25
    2610:	80 83       	st	Z, r24
    2612:	08 95       	ret
    2614:	80 95       	com	r24
    2616:	90 81       	ld	r25, Z
    2618:	89 23       	and	r24, r25
    261a:	80 83       	st	Z, r24
    261c:	08 95       	ret

0000261e <u8g_pb8v1_SetPixel>:
    261e:	fb 01       	movw	r30, r22
    2620:	41 81       	ldd	r20, Z+1	; 0x01
    2622:	fc 01       	movw	r30, r24
    2624:	22 81       	ldd	r18, Z+2	; 0x02
    2626:	42 17       	cp	r20, r18
    2628:	70 f0       	brcs	.+28     	; 0x2646 <u8g_pb8v1_SetPixel+0x28>
    262a:	23 81       	ldd	r18, Z+3	; 0x03
    262c:	24 17       	cp	r18, r20
    262e:	58 f0       	brcs	.+22     	; 0x2646 <u8g_pb8v1_SetPixel+0x28>
    2630:	fb 01       	movw	r30, r22
    2632:	30 81       	ld	r19, Z
    2634:	fc 01       	movw	r30, r24
    2636:	25 81       	ldd	r18, Z+5	; 0x05
    2638:	32 17       	cp	r19, r18
    263a:	28 f4       	brcc	.+10     	; 0x2646 <u8g_pb8v1_SetPixel+0x28>
    263c:	fb 01       	movw	r30, r22
    263e:	24 81       	ldd	r18, Z+4	; 0x04
    2640:	63 2f       	mov	r22, r19
    2642:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <u8g_pb8v1_set_pixel>
    2646:	08 95       	ret

00002648 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    2648:	df 92       	push	r13
    264a:	ef 92       	push	r14
    264c:	ff 92       	push	r15
    264e:	0f 93       	push	r16
    2650:	1f 93       	push	r17
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
    2656:	7c 01       	movw	r14, r24
    2658:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    265a:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	49 f0       	breq	.+18     	; 0x2674 <u8g_pb8v1_Set8PixelOpt2+0x2c>
    2662:	28 f0       	brcs	.+10     	; 0x266e <u8g_pb8v1_Set8PixelOpt2+0x26>
    2664:	82 30       	cpi	r24, 0x02	; 2
    2666:	51 f0       	breq	.+20     	; 0x267c <u8g_pb8v1_Set8PixelOpt2+0x34>
    2668:	83 30       	cpi	r24, 0x03	; 3
    266a:	59 f0       	breq	.+22     	; 0x2682 <u8g_pb8v1_Set8PixelOpt2+0x3a>
    266c:	0e c0       	rjmp	.+28     	; 0x268a <u8g_pb8v1_Set8PixelOpt2+0x42>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    266e:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    2670:	01 e0       	ldi	r16, 0x01	; 1
    2672:	0d c0       	rjmp	.+26     	; 0x268e <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 1: dy++; break;
    2674:	dd 24       	eor	r13, r13
    2676:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2678:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    267a:	09 c0       	rjmp	.+18     	; 0x268e <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    267c:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    267e:	0f ef       	ldi	r16, 0xFF	; 255
    2680:	06 c0       	rjmp	.+12     	; 0x268e <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
    2682:	dd 24       	eor	r13, r13
    2684:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2686:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2688:	02 c0       	rjmp	.+4      	; 0x268e <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    268a:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    268c:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    268e:	11 23       	and	r17, r17
    2690:	24 f4       	brge	.+8      	; 0x269a <u8g_pb8v1_Set8PixelOpt2+0x52>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    2692:	be 01       	movw	r22, r28
    2694:	c7 01       	movw	r24, r14
    2696:	0e 94 0f 13 	call	0x261e	; 0x261e <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    269a:	88 81       	ld	r24, Y
    269c:	80 0f       	add	r24, r16
    269e:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	8d 0d       	add	r24, r13
    26a4:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    26a6:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    26a8:	91 f7       	brne	.-28     	; 0x268e <u8g_pb8v1_Set8PixelOpt2+0x46>
  
}
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	08 95       	ret

000026ba <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    26c2:	fb 01       	movw	r30, r22
    26c4:	c2 81       	ldd	r28, Z+2	; 0x02
    26c6:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	fa 01       	movw	r30, r20
    26cc:	74 97       	sbiw	r30, 0x14	; 20
    26ce:	e4 33       	cpi	r30, 0x34	; 52
    26d0:	f1 05       	cpc	r31, r1
    26d2:	c8 f5       	brcc	.+114    	; 0x2746 <u8g_dev_pb8v1_base_fn+0x8c>
    26d4:	89 01       	movw	r16, r18
    26d6:	ec 5c       	subi	r30, 0xCC	; 204
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    26de:	b9 01       	movw	r22, r18
    26e0:	ce 01       	movw	r24, r28
    26e2:	0e 94 d6 12 	call	0x25ac	; 0x25ac <u8g_pb_Is8PixelVisible>
    26e6:	88 23       	and	r24, r24
    26e8:	81 f1       	breq	.+96     	; 0x274a <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    26ea:	b8 01       	movw	r22, r16
    26ec:	ce 01       	movw	r24, r28
    26ee:	0e 94 24 13 	call	0x2648	; 0x2648 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	2b c0       	rjmp	.+86     	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    26f6:	b9 01       	movw	r22, r18
    26f8:	ce 01       	movw	r24, r28
    26fa:	0e 94 0f 13 	call	0x261e	; 0x261e <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    2700:	25 c0       	rjmp	.+74     	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    2702:	ce 01       	movw	r24, r28
    2704:	0e 94 9f 12 	call	0x253e	; 0x253e <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    2708:	ce 01       	movw	r24, r28
    270a:	0e 94 82 12 	call	0x2504	; 0x2504 <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    2710:	1d c0       	rjmp	.+58     	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    2712:	ce 01       	movw	r24, r28
    2714:	0e 94 89 12 	call	0x2512	; 0x2512 <u8g_page_Next>
    2718:	88 23       	and	r24, r24
    271a:	c1 f0       	breq	.+48     	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
        return 0;
      u8g_pb_Clear(pb);
    271c:	ce 01       	movw	r24, r28
    271e:	0e 94 9f 12 	call	0x253e	; 0x253e <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    2724:	13 c0       	rjmp	.+38     	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    2726:	b9 01       	movw	r22, r18
    2728:	ce 01       	movw	r24, r28
    272a:	0e 94 c6 12 	call	0x258c	; 0x258c <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    2730:	0d c0       	rjmp	.+26     	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	f9 01       	movw	r30, r18
    2736:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    273a:	08 c0       	rjmp	.+16     	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	f9 01       	movw	r30, r18
    2740:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    2744:	03 c0       	rjmp	.+6      	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	01 c0       	rjmp	.+2      	; 0x274c <u8g_dev_pb8v1_base_fn+0x92>
  }
  return 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
}
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	08 95       	ret

00002756 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    2756:	08 95       	ret

00002758 <__divmodhi4>:
    2758:	97 fb       	bst	r25, 7
    275a:	07 2e       	mov	r0, r23
    275c:	16 f4       	brtc	.+4      	; 0x2762 <__divmodhi4+0xa>
    275e:	00 94       	com	r0
    2760:	07 d0       	rcall	.+14     	; 0x2770 <__divmodhi4_neg1>
    2762:	77 fd       	sbrc	r23, 7
    2764:	09 d0       	rcall	.+18     	; 0x2778 <__divmodhi4_neg2>
    2766:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodhi4>
    276a:	07 fc       	sbrc	r0, 7
    276c:	05 d0       	rcall	.+10     	; 0x2778 <__divmodhi4_neg2>
    276e:	3e f4       	brtc	.+14     	; 0x277e <__divmodhi4_exit>

00002770 <__divmodhi4_neg1>:
    2770:	90 95       	com	r25
    2772:	81 95       	neg	r24
    2774:	9f 4f       	sbci	r25, 0xFF	; 255
    2776:	08 95       	ret

00002778 <__divmodhi4_neg2>:
    2778:	70 95       	com	r23
    277a:	61 95       	neg	r22
    277c:	7f 4f       	sbci	r23, 0xFF	; 255

0000277e <__divmodhi4_exit>:
    277e:	08 95       	ret

00002780 <__tablejump2__>:
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	05 90       	lpm	r0, Z+
    2786:	f4 91       	lpm	r31, Z
    2788:	e0 2d       	mov	r30, r0
    278a:	09 94       	ijmp

0000278c <__udivmodhi4>:
    278c:	aa 1b       	sub	r26, r26
    278e:	bb 1b       	sub	r27, r27
    2790:	51 e1       	ldi	r21, 0x11	; 17
    2792:	07 c0       	rjmp	.+14     	; 0x27a2 <__udivmodhi4_ep>

00002794 <__udivmodhi4_loop>:
    2794:	aa 1f       	adc	r26, r26
    2796:	bb 1f       	adc	r27, r27
    2798:	a6 17       	cp	r26, r22
    279a:	b7 07       	cpc	r27, r23
    279c:	10 f0       	brcs	.+4      	; 0x27a2 <__udivmodhi4_ep>
    279e:	a6 1b       	sub	r26, r22
    27a0:	b7 0b       	sbc	r27, r23

000027a2 <__udivmodhi4_ep>:
    27a2:	88 1f       	adc	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	5a 95       	dec	r21
    27a8:	a9 f7       	brne	.-22     	; 0x2794 <__udivmodhi4_loop>
    27aa:	80 95       	com	r24
    27ac:	90 95       	com	r25
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	08 95       	ret

000027b4 <itoa>:
    27b4:	45 32       	cpi	r20, 0x25	; 37
    27b6:	51 05       	cpc	r21, r1
    27b8:	20 f4       	brcc	.+8      	; 0x27c2 <itoa+0xe>
    27ba:	42 30       	cpi	r20, 0x02	; 2
    27bc:	10 f0       	brcs	.+4      	; 0x27c2 <itoa+0xe>
    27be:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__itoa_ncheck>
    27c2:	fb 01       	movw	r30, r22
    27c4:	10 82       	st	Z, r1
    27c6:	cb 01       	movw	r24, r22
    27c8:	08 95       	ret

000027ca <__itoa_ncheck>:
    27ca:	bb 27       	eor	r27, r27
    27cc:	4a 30       	cpi	r20, 0x0A	; 10
    27ce:	31 f4       	brne	.+12     	; 0x27dc <__itoa_ncheck+0x12>
    27d0:	99 23       	and	r25, r25
    27d2:	22 f4       	brpl	.+8      	; 0x27dc <__itoa_ncheck+0x12>
    27d4:	bd e2       	ldi	r27, 0x2D	; 45
    27d6:	90 95       	com	r25
    27d8:	81 95       	neg	r24
    27da:	9f 4f       	sbci	r25, 0xFF	; 255
    27dc:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__utoa_common>

000027e0 <__utoa_ncheck>:
    27e0:	bb 27       	eor	r27, r27

000027e2 <__utoa_common>:
    27e2:	fb 01       	movw	r30, r22
    27e4:	55 27       	eor	r21, r21
    27e6:	aa 27       	eor	r26, r26
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	aa 1f       	adc	r26, r26
    27ee:	a4 17       	cp	r26, r20
    27f0:	10 f0       	brcs	.+4      	; 0x27f6 <__utoa_common+0x14>
    27f2:	a4 1b       	sub	r26, r20
    27f4:	83 95       	inc	r24
    27f6:	50 51       	subi	r21, 0x10	; 16
    27f8:	b9 f7       	brne	.-18     	; 0x27e8 <__utoa_common+0x6>
    27fa:	a0 5d       	subi	r26, 0xD0	; 208
    27fc:	aa 33       	cpi	r26, 0x3A	; 58
    27fe:	08 f0       	brcs	.+2      	; 0x2802 <__utoa_common+0x20>
    2800:	a9 5d       	subi	r26, 0xD9	; 217
    2802:	a1 93       	st	Z+, r26
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	79 f7       	brne	.-34     	; 0x27e6 <__utoa_common+0x4>
    2808:	b1 11       	cpse	r27, r1
    280a:	b1 93       	st	Z+, r27
    280c:	11 92       	st	Z+, r1
    280e:	cb 01       	movw	r24, r22
    2810:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <strrev>

00002814 <strrev>:
    2814:	dc 01       	movw	r26, r24
    2816:	fc 01       	movw	r30, r24
    2818:	67 2f       	mov	r22, r23
    281a:	71 91       	ld	r23, Z+
    281c:	77 23       	and	r23, r23
    281e:	e1 f7       	brne	.-8      	; 0x2818 <strrev+0x4>
    2820:	32 97       	sbiw	r30, 0x02	; 2
    2822:	04 c0       	rjmp	.+8      	; 0x282c <strrev+0x18>
    2824:	7c 91       	ld	r23, X
    2826:	6d 93       	st	X+, r22
    2828:	70 83       	st	Z, r23
    282a:	62 91       	ld	r22, -Z
    282c:	ae 17       	cp	r26, r30
    282e:	bf 07       	cpc	r27, r31
    2830:	c8 f3       	brcs	.-14     	; 0x2824 <strrev+0x10>
    2832:	08 95       	ret

00002834 <_exit>:
    2834:	f8 94       	cli

00002836 <__stop_program>:
    2836:	ff cf       	rjmp	.-2      	; 0x2836 <__stop_program>
