
OLEDLib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c1a  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f6  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f9  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000380  00000000  00000000  0000239d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000271d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  78:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_init>:
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
  80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  84:	8d ef       	ldi	r24, 0xFD	; 253
  86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  8a:	08 95       	ret

0000008c <i2c_start>:
  8c:	94 ea       	ldi	r25, 0xA4	; 164
  8e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  92:	4f ef       	ldi	r20, 0xFF	; 255
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	ec eb       	ldi	r30, 0xBC	; 188
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	90 81       	ld	r25, Z
  a0:	99 23       	and	r25, r25
  a2:	34 f0       	brlt	.+12     	; 0xb0 <i2c_start+0x24>
  a4:	41 50       	subi	r20, 0x01	; 1
  a6:	51 09       	sbc	r21, r1
  a8:	61 09       	sbc	r22, r1
  aa:	71 09       	sbc	r23, r1
  ac:	c0 f7       	brcc	.-16     	; 0x9e <i2c_start+0x12>
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <i2c_start+0x2c>
  b0:	45 2b       	or	r20, r21
  b2:	46 2b       	or	r20, r22
  b4:	47 2b       	or	r20, r23
  b6:	41 f1       	breq	.+80     	; 0x108 <i2c_start+0x7c>
  b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	11 f0       	breq	.+4      	; 0xc6 <i2c_start+0x3a>
  c2:	90 31       	cpi	r25, 0x10	; 16
  c4:	19 f5       	brne	.+70     	; 0x10c <i2c_start+0x80>
  c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  ca:	84 e8       	ldi	r24, 0x84	; 132
  cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ec eb       	ldi	r30, 0xBC	; 188
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	20 81       	ld	r18, Z
  de:	22 23       	and	r18, r18
  e0:	2c f0       	brlt	.+10     	; 0xec <i2c_start+0x60>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	a1 09       	sbc	r26, r1
  e6:	b1 09       	sbc	r27, r1
  e8:	c8 f7       	brcc	.-14     	; 0xdc <i2c_start+0x50>
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <i2c_start+0x68>
  ec:	89 2b       	or	r24, r25
  ee:	8a 2b       	or	r24, r26
  f0:	8b 2b       	or	r24, r27
  f2:	71 f0       	breq	.+28     	; 0x110 <i2c_start+0x84>
  f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	98 31       	cpi	r25, 0x18	; 24
  fc:	59 f0       	breq	.+22     	; 0x114 <i2c_start+0x88>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 34       	cpi	r25, 0x40	; 64
 102:	49 f4       	brne	.+18     	; 0x116 <i2c_start+0x8a>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	08 95       	ret
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret

00000118 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 118:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 12a:	ec eb       	ldi	r30, 0xBC	; 188
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	20 81       	ld	r18, Z
 130:	22 23       	and	r18, r18
 132:	2c f0       	brlt	.+10     	; 0x13e <i2c_write+0x26>
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	a1 09       	sbc	r26, r1
 138:	b1 09       	sbc	r27, r1
 13a:	c8 f7       	brcc	.-14     	; 0x12e <i2c_write+0x16>
 13c:	04 c0       	rjmp	.+8      	; 0x146 <i2c_write+0x2e>
	if(i2c_timer == 0)
 13e:	89 2b       	or	r24, r25
 140:	8a 2b       	or	r24, r26
 142:	8b 2b       	or	r24, r27
 144:	41 f0       	breq	.+16     	; 0x156 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 146:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
 14a:	98 7f       	andi	r25, 0xF8	; 248
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	98 32       	cpi	r25, 0x28	; 40
 150:	19 f4       	brne	.+6      	; 0x158 <i2c_write+0x40>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
 156:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 158:	08 95       	ret

0000015a <blinkLed>:
#define SSD1306_I2C_ADDRESS (0b01111000) //0111100 med SA0 = 0, sida 20 i datablad
#define SSD1306_WRITE (SSD1306_I2C_ADDRESS + 0)

void blinkLed(){
	while(1){
		PORTB = 0xff; /*	 Tänd LED på alla PORTB 	*/
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f e5       	ldi	r18, 0x5F	; 95
 160:	3a ee       	ldi	r19, 0xEA	; 234
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	21 50       	subi	r18, 0x01	; 1
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <blinkLed+0xa>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <blinkLed+0x14>
 16e:	00 00       	nop
		_delay_ms(300);
		PORTB = 0x00; /*	 Tänd LED på alla PORTB 	*/
 170:	15 b8       	out	0x05, r1	; 5
 172:	2f e5       	ldi	r18, 0x5F	; 95
 174:	3a ee       	ldi	r19, 0xEA	; 234
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	30 40       	sbci	r19, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <blinkLed+0x1e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <blinkLed+0x28>
 182:	00 00       	nop
 184:	eb cf       	rjmp	.-42     	; 0x15c <blinkLed+0x2>

00000186 <main>:
	}
}

int main(void)
{
	DDRB  = 0xff;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 18a:	15 b8       	out	0x05, r1	; 5
	
	i2c_init();
 18c:	0e 94 40 00 	call	0x80	; 0x80 <i2c_init>
	unsigned char i2cStatus = i2c_start(SSD1306_WRITE);
 190:	88 e7       	ldi	r24, 0x78	; 120
 192:	0e 94 46 00 	call	0x8c	; 0x8c <i2c_start>
		
	if(i2cStatus){
 196:	81 11       	cpse	r24, r1
		blinkLed();
 198:	0e 94 ad 00 	call	0x15a	; 0x15a <blinkLed>
	}
	i2c_write(0xAE);
 19c:	8e ea       	ldi	r24, 0xAE	; 174
 19e:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0x00 | 0x0);            // low col = 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x10 | 0x0);           // hi col = 0
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x40 | 0x0);            // line #0
 1ae:	80 e4       	ldi	r24, 0x40	; 64
 1b0:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0x81);                   // Set Contrast 0x81
 1b4:	81 e8       	ldi	r24, 0x81	; 129
 1b6:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0xCF);
 1ba:	8f ec       	ldi	r24, 0xCF	; 207
 1bc:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 // flips display
 i2c_write(0xA1);                    // Segremap - 0xA1
 1c0:	81 ea       	ldi	r24, 0xA1	; 161
 1c2:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0xC8);                    // COMSCAN DEC 0xC8 C0
 1c6:	88 ec       	ldi	r24, 0xC8	; 200
 1c8:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0xA6);                    // Normal Display 0xA6 (Invert A7)
 1cc:	86 ea       	ldi	r24, 0xA6	; 166
 1ce:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0xA4);                // DISPLAY ALL ON RESUME - 0xA4
 1d2:	84 ea       	ldi	r24, 0xA4	; 164
 1d4:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0xA8);                    // Set Multiplex 0xA8
 1d8:	88 ea       	ldi	r24, 0xA8	; 168
 1da:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x3F);                    // 1/64 Duty Cycle
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0xD3);                    // Set Display Offset 0xD3
 1e4:	83 ed       	ldi	r24, 0xD3	; 211
 1e6:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x0);                     // no offset
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0xD5);                    // Set Display Clk Div 0xD5
 1f0:	85 ed       	ldi	r24, 0xD5	; 213
 1f2:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x80);                    // Recommneded resistor ratio 0x80
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0xD9);                  // Set Precharge 0xd9
 1fc:	89 ed       	ldi	r24, 0xD9	; 217
 1fe:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0xF1);
 202:	81 ef       	ldi	r24, 0xF1	; 241
 204:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0xDA);                    // Set COM Pins0xDA
 208:	8a ed       	ldi	r24, 0xDA	; 218
 20a:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x12);
 20e:	82 e1       	ldi	r24, 0x12	; 18
 210:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0xDB);                 // Set VCOM Detect - 0xDB
 214:	8b ed       	ldi	r24, 0xDB	; 219
 216:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x40);
 21a:	80 e4       	ldi	r24, 0x40	; 64
 21c:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0x20);                    // Set Memory Addressing Mode
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x00);                    // 0x00 - Horizontal
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0x40 | 0x0);              // Set start line at line 0 - 0x40
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 i2c_write(0x8D);                    // Charge Pump -0x8D
 232:	8d e8       	ldi	r24, 0x8D	; 141
 234:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0x14);
 238:	84 e1       	ldi	r24, 0x14	; 20
 23a:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 
 
 i2c_write(0xA4);              //--turn on all pixels - A5. Regular mode A4
 23e:	84 ea       	ldi	r24, 0xA4	; 164
 240:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 i2c_write(0xAF);                //--turn on oled panel - AF
 244:	8f ea       	ldi	r24, 0xAF	; 175
 246:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_write>
 24a:	ff cf       	rjmp	.-2      	; 0x24a <main+0xc4>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
