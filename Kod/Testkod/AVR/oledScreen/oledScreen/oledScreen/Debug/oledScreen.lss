
oledScreen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ec  00800100  000003de  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a70  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f17  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000838  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c8  00000000  00000000  0000229f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00002a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000487  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007fc  00000000  00000000  00003063  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000385f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	16 e0       	ldi	r17, 0x06	; 6
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3e       	cpi	r26, 0xEC	; 236
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  8e:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  9a:	8c e0       	ldi	r24, 0x0C	; 12
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  a0:	08 95       	ret

000000a2 <i2c_start>:
  a2:	94 ea       	ldi	r25, 0xA4	; 164
  a4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  a8:	4f ef       	ldi	r20, 0xFF	; 255
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	99 23       	and	r25, r25
  b8:	34 f0       	brlt	.+12     	; 0xc6 <i2c_start+0x24>
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	51 09       	sbc	r21, r1
  be:	61 09       	sbc	r22, r1
  c0:	71 09       	sbc	r23, r1
  c2:	c0 f7       	brcc	.-16     	; 0xb4 <i2c_start+0x12>
  c4:	04 c0       	rjmp	.+8      	; 0xce <i2c_start+0x2c>
  c6:	45 2b       	or	r20, r21
  c8:	46 2b       	or	r20, r22
  ca:	47 2b       	or	r20, r23
  cc:	41 f1       	breq	.+80     	; 0x11e <i2c_start+0x7c>
  ce:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  d2:	98 7f       	andi	r25, 0xF8	; 248
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_start+0x3a>
  d8:	90 31       	cpi	r25, 0x10	; 16
  da:	19 f5       	brne	.+70     	; 0x122 <i2c_start+0x80>
  dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	20 81       	ld	r18, Z
  f4:	22 23       	and	r18, r18
  f6:	2c f0       	brlt	.+10     	; 0x102 <i2c_start+0x60>
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	a1 09       	sbc	r26, r1
  fc:	b1 09       	sbc	r27, r1
  fe:	c8 f7       	brcc	.-14     	; 0xf2 <i2c_start+0x50>
 100:	04 c0       	rjmp	.+8      	; 0x10a <i2c_start+0x68>
 102:	89 2b       	or	r24, r25
 104:	8a 2b       	or	r24, r26
 106:	8b 2b       	or	r24, r27
 108:	71 f0       	breq	.+28     	; 0x126 <i2c_start+0x84>
 10a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 10e:	98 7f       	andi	r25, 0xF8	; 248
 110:	98 31       	cpi	r25, 0x18	; 24
 112:	59 f0       	breq	.+22     	; 0x12a <i2c_start+0x88>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 34       	cpi	r25, 0x40	; 64
 118:	49 f4       	brne	.+18     	; 0x12c <i2c_start+0x8a>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	08 95       	ret
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret

0000012e <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 12e:	84 e9       	ldi	r24, 0x94	; 148
 130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	20 81       	ld	r18, Z
 13e:	24 ff       	sbrs	r18, 4
 140:	05 c0       	rjmp	.+10     	; 0x14c <i2c_stop+0x1e>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	81 15       	cp	r24, r1
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	92 07       	cpc	r25, r18
 14a:	c1 f7       	brne	.-16     	; 0x13c <i2c_stop+0xe>
 14c:	08 95       	ret

0000014e <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 14e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	20 81       	ld	r18, Z
 166:	22 23       	and	r18, r18
 168:	2c f0       	brlt	.+10     	; 0x174 <i2c_write+0x26>
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	a1 09       	sbc	r26, r1
 16e:	b1 09       	sbc	r27, r1
 170:	c8 f7       	brcc	.-14     	; 0x164 <i2c_write+0x16>
 172:	04 c0       	rjmp	.+8      	; 0x17c <i2c_write+0x2e>
	if(i2c_timer == 0)
 174:	89 2b       	or	r24, r25
 176:	8a 2b       	or	r24, r26
 178:	8b 2b       	or	r24, r27
 17a:	41 f0       	breq	.+16     	; 0x18c <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 17c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 180:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	98 32       	cpi	r25, 0x28	; 40
 186:	19 f4       	brne	.+6      	; 0x18e <i2c_write+0x40>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 18e:	08 95       	ret

00000190 <clearBuffer>:
//void drawPixel(int16_t x, int16_t y, int16_t color){
    buffer[x+(y/8)*128] |= (1 << (y & 7));
}

void clearBuffer(uint8_t *buff){
    memset(buff, 0, ((128 * 64)/8));
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	34 e0       	ldi	r19, 0x04	; 4
 194:	fc 01       	movw	r30, r24
 196:	a9 01       	movw	r20, r18
 198:	11 92       	st	Z+, r1
 19a:	41 50       	subi	r20, 0x01	; 1
 19c:	50 40       	sbci	r21, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <clearBuffer+0x8>
 1a0:	08 95       	ret

000001a2 <drawBuffer>:
}

void drawBuffer(uint8_t column_address, uint8_t page_address, uint8_t *buff){
 1a2:	8f 92       	push	r8
 1a4:	9f 92       	push	r9
 1a6:	af 92       	push	r10
 1a8:	bf 92       	push	r11
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	6a 01       	movw	r12, r20
    i2c_write(0x21);        // column address
 1bc:	81 e2       	ldi	r24, 0x21	; 33
 1be:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0);           // column start address (0 = reset)
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(127);         // column end addres (127 = reset)
 1c8:	8f e7       	ldi	r24, 0x7F	; 127
 1ca:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0x22);        // page address
 1ce:	82 e2       	ldi	r24, 0x22	; 34
 1d0:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0);           // page start address (0 = reset);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(7);           // page end address
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    uint8_t twbrbackup = TWBR;
 1e0:	e8 eb       	ldi	r30, 0xB8	; 184
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 80       	ld	r8, Z
    TWBR = 12;
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	80 83       	st	Z, r24

    for (uint16_t i=0; i<((128*64)/8); i++){
 1ea:	e1 2c       	mov	r14, r1
 1ec:	f1 2c       	mov	r15, r1
                i2c_write(buff[i]);
                i++;
            }
            i--;
            i2c_stop();
            TWBR = twbrbackup;
 1ee:	0f 2e       	mov	r0, r31
 1f0:	f8 eb       	ldi	r31, 0xB8	; 184
 1f2:	af 2e       	mov	r10, r31
 1f4:	b1 2c       	mov	r11, r1
 1f6:	f0 2d       	mov	r31, r0
    for (uint16_t i=0; i<((128*64)/8); i++){
        unsigned char ret = i2c_start(DevSSD1306+I2C_WRITE);   // set device address and write mode
        if ( ret ) {
            /* failed to issue start condition, possibly no device found */
            i2c_stop();
            PORTB=0xff;                            // activate all 8 LED to show error */
 1f8:	99 24       	eor	r9, r9
 1fa:	9a 94       	dec	r9

    uint8_t twbrbackup = TWBR;
    TWBR = 12;

    for (uint16_t i=0; i<((128*64)/8); i++){
        unsigned char ret = i2c_start(DevSSD1306+I2C_WRITE);   // set device address and write mode
 1fc:	88 e7       	ldi	r24, 0x78	; 120
 1fe:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
        if ( ret ) {
 202:	88 23       	and	r24, r24
 204:	21 f0       	breq	.+8      	; 0x20e <drawBuffer+0x6c>
            /* failed to issue start condition, possibly no device found */
            i2c_stop();
 206:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_stop>
            PORTB=0xff;                            // activate all 8 LED to show error */
 20a:	95 b8       	out	0x05, r9	; 5
 20c:	18 c0       	rjmp	.+48     	; 0x23e <drawBuffer+0x9c>
        }
        else {
            i2c_write(0x40);                        // set display RAM display start line register
 20e:	80 e4       	ldi	r24, 0x40	; 64
 210:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
 214:	e6 01       	movw	r28, r12
 216:	ce 0d       	add	r28, r14
 218:	df 1d       	adc	r29, r15
 21a:	87 01       	movw	r16, r14
 21c:	00 5f       	subi	r16, 0xF0	; 240
 21e:	1f 4f       	sbci	r17, 0xFF	; 255
 220:	0c 0d       	add	r16, r12
 222:	1d 1d       	adc	r17, r13
            for (uint8_t x=0; x<16; x++){
                i2c_write(buff[i]);
 224:	89 91       	ld	r24, Y+
 226:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
            i2c_stop();
            PORTB=0xff;                            // activate all 8 LED to show error */
        }
        else {
            i2c_write(0x40);                        // set display RAM display start line register
            for (uint8_t x=0; x<16; x++){
 22a:	c0 17       	cp	r28, r16
 22c:	d1 07       	cpc	r29, r17
 22e:	d1 f7       	brne	.-12     	; 0x224 <drawBuffer+0x82>
                i2c_write(buff[i]);
                i++;
            }
            i--;
 230:	8f e0       	ldi	r24, 0x0F	; 15
 232:	e8 0e       	add	r14, r24
 234:	f1 1c       	adc	r15, r1
            i2c_stop();
 236:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_stop>
            TWBR = twbrbackup;
 23a:	f5 01       	movw	r30, r10
 23c:	80 82       	st	Z, r8
    i2c_write(7);           // page end address

    uint8_t twbrbackup = TWBR;
    TWBR = 12;

    for (uint16_t i=0; i<((128*64)/8); i++){
 23e:	ff ef       	ldi	r31, 0xFF	; 255
 240:	ef 1a       	sub	r14, r31
 242:	ff 0a       	sbc	r15, r31
 244:	e1 14       	cp	r14, r1
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	f8 06       	cpc	r15, r24
 24a:	c0 f2       	brcs	.-80     	; 0x1fc <drawBuffer+0x5a>
            i--;
            i2c_stop();
            TWBR = twbrbackup;
        }
    }
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	bf 90       	pop	r11
 25e:	af 90       	pop	r10
 260:	9f 90       	pop	r9
 262:	8f 90       	pop	r8
 264:	08 95       	ret

00000266 <lcd_draw_char>:

void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff){
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	fa 01       	movw	r30, r20
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	4e 0f       	add	r20, r30
 274:	5f 1f       	adc	r21, r31
 276:	fa 01       	movw	r30, r20
 278:	e0 5a       	subi	r30, 0xA0	; 160
 27a:	fb 4f       	sbci	r31, 0xFB	; 251
    uint8_t ascii_offset = 32;
    for(uint8_t i=0; i<5; i++){
        buff[i+((page*128)+column)] = Ascii_1[letter-ascii_offset][i];
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	40 e8       	ldi	r20, 0x80	; 128
 280:	64 9f       	mul	r22, r20
 282:	80 0d       	add	r24, r0
 284:	91 1d       	adc	r25, r1
 286:	11 24       	eor	r1, r1
 288:	d9 01       	movw	r26, r18
 28a:	a8 0f       	add	r26, r24
 28c:	b9 1f       	adc	r27, r25
 28e:	05 96       	adiw	r24, 0x05	; 5
 290:	28 0f       	add	r18, r24
 292:	39 1f       	adc	r19, r25
 294:	81 91       	ld	r24, Z+
 296:	8d 93       	st	X+, r24
    }
}

void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff){
    uint8_t ascii_offset = 32;
    for(uint8_t i=0; i<5; i++){
 298:	a2 17       	cp	r26, r18
 29a:	b3 07       	cpc	r27, r19
 29c:	d9 f7       	brne	.-10     	; 0x294 <lcd_draw_char+0x2e>
        buff[i+((page*128)+column)] = Ascii_1[letter-ascii_offset][i];
    }
}
 29e:	08 95       	ret

000002a0 <lcd_draw_string>:
void lcd_draw_string(uint8_t column, uint8_t page, char *string, uint8_t *buff){
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	fa 01       	movw	r30, r20
    uint8_t i = 0;
    while(string[0] != 0){
 2ae:	40 81       	ld	r20, Z
 2b0:	44 23       	and	r20, r20
 2b2:	89 f0       	breq	.+34     	; 0x2d6 <lcd_draw_string+0x36>
 2b4:	79 01       	movw	r14, r18
 2b6:	8f 01       	movw	r16, r30
 2b8:	d6 2f       	mov	r29, r22
 2ba:	0f 5f       	subi	r16, 0xFF	; 255
 2bc:	1f 4f       	sbci	r17, 0xFF	; 255
 2be:	c8 2f       	mov	r28, r24
        lcd_draw_char(column+(5*i), page, (string[0]), buff);
 2c0:	97 01       	movw	r18, r14
 2c2:	6d 2f       	mov	r22, r29
 2c4:	8c 2f       	mov	r24, r28
 2c6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_draw_char>
        buff[i+((page*128)+column)] = Ascii_1[letter-ascii_offset][i];
    }
}
void lcd_draw_string(uint8_t column, uint8_t page, char *string, uint8_t *buff){
    uint8_t i = 0;
    while(string[0] != 0){
 2ca:	f8 01       	movw	r30, r16
 2cc:	41 91       	ld	r20, Z+
 2ce:	8f 01       	movw	r16, r30
 2d0:	cb 5f       	subi	r28, 0xFB	; 251
 2d2:	41 11       	cpse	r20, r1
 2d4:	f5 cf       	rjmp	.-22     	; 0x2c0 <lcd_draw_string+0x20>
        lcd_draw_char(column+(5*i), page, (string[0]), buff);
        string++;
        i++;
    }
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	08 95       	ret

000002e4 <main>:

int main(void)
{
    unsigned char ret;

    DDRB  = 0xff;                              // use all pins on port B for output
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;                              // (LED's low & off)
 2e8:	15 b8       	out	0x05, r1	; 5

    i2c_init();                                // init I2C interface
 2ea:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_init>

    /* write 0x75 to eeprom address 0x05 (Byte Write) */
    ret = i2c_start(DevSSD1306+I2C_WRITE);       // set device address and write mode
 2ee:	88 e7       	ldi	r24, 0x78	; 120
 2f0:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
    if ( ret ) {
 2f4:	88 23       	and	r24, r24
 2f6:	29 f0       	breq	.+10     	; 0x302 <main+0x1e>
        /* failed to issue start condition, possibly no device found */
        i2c_stop();
 2f8:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_stop>
        PORTB=0xff;                            // activate all 8 LED to show error */
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	85 b9       	out	0x05, r24	; 5
 300:	6b c0       	rjmp	.+214    	; 0x3d8 <main+0xf4>
    }
    else {
    /* issuing start condition ok, device accessible */
    // Init sequence for 128x64 OLED module
    i2c_write(0xAE);                    // Display Off
 302:	8e ea       	ldi	r24, 0xAE	; 174
 304:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0x00 | 0x0);            // low col = 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x10 | 0x0);           // hi col = 0
 30e:	80 e1       	ldi	r24, 0x10	; 16
 310:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x40 | 0x0);            // line #0
 314:	80 e4       	ldi	r24, 0x40	; 64
 316:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0x81);                   // Set Contrast 0x81
 31a:	81 e8       	ldi	r24, 0x81	; 129
 31c:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0xCF);
 320:	8f ec       	ldi	r24, 0xCF	; 207
 322:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
                                        // flips display
    i2c_write(0xA1);                    // Segremap - 0xA1
 326:	81 ea       	ldi	r24, 0xA1	; 161
 328:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0xC8);                    // COMSCAN DEC 0xC8 C0
 32c:	88 ec       	ldi	r24, 0xC8	; 200
 32e:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0xA6);                    // Normal Display 0xA6 (Invert A7)
 332:	86 ea       	ldi	r24, 0xA6	; 166
 334:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0xA4);                // DISPLAY ALL ON RESUME - 0xA4
 338:	84 ea       	ldi	r24, 0xA4	; 164
 33a:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0xA8);                    // Set Multiplex 0xA8
 33e:	88 ea       	ldi	r24, 0xA8	; 168
 340:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x3F);                    // 1/64 Duty Cycle
 344:	8f e3       	ldi	r24, 0x3F	; 63
 346:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0xD3);                    // Set Display Offset 0xD3
 34a:	83 ed       	ldi	r24, 0xD3	; 211
 34c:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x0);                     // no offset
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0xD5);                    // Set Display Clk Div 0xD5
 356:	85 ed       	ldi	r24, 0xD5	; 213
 358:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x80);                    // Recommneded resistor ratio 0x80
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0xD9);                  // Set Precharge 0xd9
 362:	89 ed       	ldi	r24, 0xD9	; 217
 364:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0xF1);
 368:	81 ef       	ldi	r24, 0xF1	; 241
 36a:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0xDA);                    // Set COM Pins0xDA
 36e:	8a ed       	ldi	r24, 0xDA	; 218
 370:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x12);
 374:	82 e1       	ldi	r24, 0x12	; 18
 376:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0xDB);                 // Set VCOM Detect - 0xDB
 37a:	8b ed       	ldi	r24, 0xDB	; 219
 37c:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x40);
 380:	80 e4       	ldi	r24, 0x40	; 64
 382:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0x20);                    // Set Memory Addressing Mode
 386:	80 e2       	ldi	r24, 0x20	; 32
 388:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x00);                    // 0x00 - Horizontal
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0x40 | 0x0);              // Set start line at line 0 - 0x40
 392:	80 e4       	ldi	r24, 0x40	; 64
 394:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>

    i2c_write(0x8D);                    // Charge Pump -0x8D
 398:	8d e8       	ldi	r24, 0x8D	; 141
 39a:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0x14);
 39e:	84 e1       	ldi	r24, 0x14	; 20
 3a0:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>


    i2c_write(0xA4);              //--turn on all pixels - A5. Regular mode A4
 3a4:	84 ea       	ldi	r24, 0xA4	; 164
 3a6:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    i2c_write(0xAF);                //--turn on oled panel - AF
 3aa:	8f ea       	ldi	r24, 0xAF	; 175
 3ac:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_write>
    //drawBuffer(0,0,buffer);
    //_delay_ms(1000);
    clearBuffer(buffer);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 c8 00 	call	0x190	; 0x190 <clearBuffer>
    ////lcd_draw_char(10, 2, 'B', buffer);
    lcd_draw_string(50, 5, "JOHAN!", buffer);
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	31 e0       	ldi	r19, 0x01	; 1
 3bc:	45 ee       	ldi	r20, 0xE5	; 229
 3be:	56 e0       	ldi	r21, 0x06	; 6
 3c0:	65 e0       	ldi	r22, 0x05	; 5
 3c2:	82 e3       	ldi	r24, 0x32	; 50
 3c4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_draw_string>
    //lcd_draw_string(10, 7, "Elegant Circuits", buffer);
    drawBuffer(0,0, buffer);
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	51 e0       	ldi	r21, 0x01	; 1
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <drawBuffer>
    i2c_stop();
 3d4:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_stop>
    }
    for(;;){
    }
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <main+0xf4>

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
