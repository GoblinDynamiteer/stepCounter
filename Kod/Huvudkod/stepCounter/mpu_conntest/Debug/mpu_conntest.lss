
mpu_conntest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002988  00002a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ff  00800134  00800134  00002a50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000febc  00000000  00000000  000032a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025d9  00000000  00000000  00013164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f56  00000000  00000000  0001573d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a00  00000000  00000000  00019694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039c0  00000000  00000000  0001b094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b191  00000000  00000000  0001ea54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  00029be5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__ctors_end>
       4:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
       8:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
       c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      10:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      14:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      18:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      1c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      20:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      24:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      28:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      2c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      30:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      34:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      38:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      3c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      40:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      44:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      48:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__vector_18>
      4c:	0c 94 96 12 	jmp	0x252c	; 0x252c <__vector_19>
      50:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      54:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      58:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      5c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      60:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      64:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      68:	40 12       	cpse	r4, r16
      6a:	48 12       	cpse	r4, r24
      6c:	62 12       	cpse	r6, r18
      6e:	52 12       	cpse	r5, r18
      70:	62 12       	cpse	r6, r18
      72:	62 12       	cpse	r6, r18
      74:	62 12       	cpse	r6, r18
      76:	62 12       	cpse	r6, r18
      78:	62 12       	cpse	r6, r18
      7a:	62 12       	cpse	r6, r18
      7c:	62 12       	cpse	r6, r18
      7e:	62 12       	cpse	r6, r18
      80:	62 12       	cpse	r6, r18
      82:	62 12       	cpse	r6, r18
      84:	62 12       	cpse	r6, r18
      86:	62 12       	cpse	r6, r18
      88:	62 12       	cpse	r6, r18
      8a:	62 12       	cpse	r6, r18
      8c:	62 12       	cpse	r6, r18
      8e:	62 12       	cpse	r6, r18
      90:	62 12       	cpse	r6, r18
      92:	62 12       	cpse	r6, r18
      94:	62 12       	cpse	r6, r18
      96:	62 12       	cpse	r6, r18
      98:	62 12       	cpse	r6, r18
      9a:	62 12       	cpse	r6, r18
      9c:	62 12       	cpse	r6, r18
      9e:	62 12       	cpse	r6, r18
      a0:	62 12       	cpse	r6, r18
      a2:	62 12       	cpse	r6, r18
      a4:	3a 12       	cpse	r3, r26
      a6:	62 12       	cpse	r6, r18
      a8:	62 12       	cpse	r6, r18
      aa:	62 12       	cpse	r6, r18
      ac:	62 12       	cpse	r6, r18
      ae:	62 12       	cpse	r6, r18
      b0:	62 12       	cpse	r6, r18
      b2:	62 12       	cpse	r6, r18
      b4:	62 12       	cpse	r6, r18
      b6:	2e 12       	cpse	r2, r30
      b8:	62 12       	cpse	r6, r18
      ba:	62 12       	cpse	r6, r18
      bc:	62 12       	cpse	r6, r18
      be:	62 12       	cpse	r6, r18
      c0:	62 12       	cpse	r6, r18
      c2:	62 12       	cpse	r6, r18
      c4:	62 12       	cpse	r6, r18
      c6:	62 12       	cpse	r6, r18
      c8:	62 12       	cpse	r6, r18
      ca:	62 12       	cpse	r6, r18
      cc:	58 12       	cpse	r5, r24
      ce:	5d 12       	cpse	r5, r29

000000d0 <__trampolines_end>:
      d0:	ff e0       	ldi	r31, 0x0F	; 15
      d2:	ff d1       	rcall	.+1022   	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
      d4:	af ff       	.word	0xffaf	; ????
      d6:	32 ff       	sbrs	r19, 2
      d8:	d0 ff       	sbrs	r29, 0
      da:	fe ff       	Address 0x000000da is out of bounds.
.word	0xffff	; ????

000000db <u8g_dev_ssd13xx_sleep_on>:
      db:	ff e0 ff d1 ae ff d0 ff fe                          .........

000000e4 <u8g_dev_ssd1306_128x64_data_start>:
      e4:	ff e0 ff d1 10 00 ff fe                             ........

000000ec <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      ec:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      fc:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     10c:	a6 af ff d0 ff fe                                   ......

00000112 <u8g_font_fub11>:
     112:	00 18 15 ff fc 0b 02 52 05 37 20 ff fd 11 fc 0b     .......R.7 .....
     122:	fd 00 00 00 05 00 00 02 0b 0b 06 02 00 c0 c0 c0     ................
     132:	c0 c0 c0 c0 c0 00 00 c0 06 05 05 08 01 06 cc cc     ................
     142:	cc cc cc 0a 0b 16 0b 01 00 09 80 19 80 19 00 7f     ................
     152:	c0 33 00 32 00 36 00 ff 00 64 00 6c 00 4c 00 08     .3.2.6...d.l.L..
     162:	0e 0e 0a 01 fe 08 3e 7e cb c8 f8 7e 0f 0b cb eb     ......>~...~....
     172:	7e 08 08 0f 0b 16 11 01 00 3c 20 ee 60 c6 40 c6     ~........< .`.@.
     182:	c0 e7 80 7d 7c 03 ee 02 c6 06 c6 04 ee 08 7c 0b     ...}|.........|.
     192:	0b 16 0d 01 00 3e 00 77 00 63 00 77 00 3c 00 7c     .....>.w.c.w.<.|
     1a2:	c0 ee c0 c7 c0 c3 c0 f3 c0 3f e0 02 05 05 07 02     .........?......
     1b2:	06 c0 c0 c0 c0 c0 03 0e 0e 06 01 fd 60 60 60 e0     ............```.
     1c2:	c0 c0 c0 c0 c0 c0 e0 60 60 60 03 0e 0e 07 02 fd     .......```......
     1d2:	c0 c0 c0 60 60 60 60 60 60 60 60 e0 c0 c0 06 05     ...````````.....
     1e2:	05 0a 02 05 78 30 fc 30 78 09 09 12 10 03 00 08     ....x0.0x.......
     1f2:	00 08 00 08 00 08 00 ff 80 08 00 08 00 08 00 08     ................
     202:	00 03 04 04 05 01 fe 60 60 c0 c0 04 02 02 06 01     .......``.......
     212:	03 f0 f0 02 02 02 05 02 00 c0 c0 05 0c 0c 07 01     ................
     222:	ff 18 18 10 30 30 20 20 60 60 40 c0 c0 08 0b 0b     ....00  ``@.....
     232:	09 01 00 3c 66 c3 c3 c3 c3 c3 c3 c3 66 3c 04 0b     ...<f.......f<..
     242:	0b 09 02 00 30 f0 f0 30 30 30 30 30 30 30 30 08     ....0..00000000.
     252:	0b 0b 09 01 00 3e 77 63 03 07 06 1e 3c 70 e0 ff     .....>wc....<p..
     262:	08 0b 0b 09 01 00 7c ee c6 06 3c 06 03 c3 c7 7e     ......|...<....~
     272:	3c 08 0b 0b 09 01 00 0e 1e 1e 36 66 66 c6 ff ff     <.........6ff...
     282:	06 06 08 0b 0b 09 01 00 fe c0 c0 c0 fe e7 03 03     ................
     292:	c7 fe 7c 08 0b 0b 09 01 00 3c 76 43 c0 de e7 c3     ..|......<vC....
     2a2:	c3 c3 66 3c 08 0b 0b 09 01 00 ff 03 07 06 0e 0c     ..f<............
     2b2:	1c 18 38 38 70 08 0b 0b 09 01 00 7e e7 c3 e7 3c     ..88p......~...<
     2c2:	66 c3 c3 c3 e7 3c 08 0b 0b 09 01 00 3c 66 c3 c3     f....<......<f..
     2d2:	e7 7f 03 03 c6 6e 3c 02 08 08 05 02 00 c0 c0 00     .....n<.........
     2e2:	00 00 00 c0 c0 03 0a 0a 05 01 fe 60 60 00 00 00     ...........``...
     2f2:	00 60 60 c0 c0 0a 08 10 10 03 01 00 40 03 80 0c     .``.........@...
     302:	00 70 00 80 00 70 00 0e 00 01 c0 0a 04 08 10 03     .p...p..........
     312:	03 ff c0 00 00 00 00 ff c0 0a 08 10 10 03 01 80     ................
     322:	00 60 00 1c 00 03 80 00 c0 07 00 18 00 e0 00 07     .`..............
     332:	0b 0b 09 01 00 78 ee 86 06 0c 18 30 30 30 00 30     .....x.....000.0
     342:	0f 0e 1c 11 01 fd 07 e0 1e 78 30 1c 67 ec ee e6     .........x0.g...
     352:	cc 66 cc 66 cc 66 cc 66 ef fc 67 b8 30 00 1c 20     .f.f.f.f..g.0.. 
     362:	07 e0 0b 0b 16 0b 00 00 0e 00 0e 00 0f 00 1b 00     ................
     372:	1b 80 39 80 31 80 3f c0 7f c0 60 e0 e0 60 09 0b     ..9.1.?...`..`..
     382:	16 0b 01 00 fe 00 c7 00 c3 00 c3 00 c7 00 fc 00     ................
     392:	c3 00 c1 80 c1 80 c3 80 fe 00 0a 0b 16 0c 01 00     ................
     3a2:	1f 00 73 80 61 c0 c0 00 c0 00 c0 00 c0 00 c1 c0     ..s.a...........
     3b2:	61 c0 73 80 1f 00 09 0b 16 0b 01 00 fc 00 cf 00     a.s.............
     3c2:	c3 00 c1 80 c1 80 c1 80 c1 80 c1 80 c3 00 cf 00     ................
     3d2:	fc 00 08 0b 0b 0a 01 00 ff c0 c0 c0 c0 ff c0 c0     ................
     3e2:	c0 c0 ff 08 0b 0b 09 01 00 ff c0 c0 c0 c0 fe c0     ................
     3f2:	c0 c0 c0 c0 0a 0b 16 0c 01 00 1f 00 3b c0 60 c0     ............;.`.
     402:	e0 00 c0 00 c3 c0 c0 c0 c0 c0 60 c0 39 c0 1f c0     ..........`.9...
     412:	09 0b 16 0b 01 00 c1 80 c1 80 c1 80 c1 80 c1 80     ................
     422:	ff 80 c1 80 c1 80 c1 80 c1 80 c1 80 02 0b 0b 04     ................
     432:	01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 08 0b 0b     ................
     442:	0a 01 00 03 03 03 03 03 03 03 c3 c3 fe 7c 09 0b     .............|..
     452:	16 0b 01 00 c3 00 c7 00 ce 00 dc 00 f8 00 f8 00     ................
     462:	dc 00 ce 00 ce 00 c7 00 c3 80 08 0b 0b 09 01 00     ................
     472:	c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff 0d 0b 16 0f 01     ................
     482:	00 f0 78 f0 78 f8 f8 d8 d8 d8 d8 dd d8 cd 98 cd     ..x.x...........
     492:	98 cf 98 c7 18 c7 18 0a 0b 16 0c 01 00 f0 c0 f0     ................
     4a2:	c0 f8 c0 d8 c0 dc c0 cc c0 ce c0 c6 c0 c7 c0 c3     ................
     4b2:	c0 c3 c0 0b 0b 16 0d 01 00 1f 00 7b c0 60 c0 c0     ...........{.`..
     4c2:	60 c0 60 c0 60 c0 60 c0 60 60 c0 7b c0 1f 00 08     `.`.`.`.``.{....
     4d2:	0b 0b 0a 01 00 fc c7 c3 c3 c7 fe c0 c0 c0 c0 c0     ................
     4e2:	0c 0b 16 0e 01 00 1f 00 7b 80 60 c0 c0 60 c0 60     ........{.`..`.`
     4f2:	c0 60 c0 60 c0 60 60 c0 7b c0 1f f0 09 0b 16 0b     .`.`.``.{.......
     502:	01 00 fe 00 c7 80 c1 80 c1 80 c3 00 fe 00 c3 00     ................
     512:	c1 80 c1 80 c1 80 c1 80 09 0b 16 0b 01 00 3e 00     ..............>.
     522:	77 00 c1 80 e0 00 f8 00 7f 00 0f 80 01 80 c1 80     w...............
     532:	77 00 3e 00 09 0b 16 0b 01 00 ff 80 0c 00 0c 00     w.>.............
     542:	0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
     552:	0a 0b 16 0c 01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     562:	c0 c0 c0 c0 c0 c0 e1 c0 73 80 3e 00 0b 0b 16 0c     ........s.>.....
     572:	00 00 e0 60 60 60 70 e0 30 c0 31 c0 39 80 19 80     ...```p.0.1.9...
     582:	1f 80 1f 00 0f 00 0e 00 10 0b 16 10 00 00 e1 87     ................
     592:	63 c6 63 c6 63 c6 77 ce 36 6c 36 6c 36 6c 3c 3c     c.c.c.w.6l6l6l<<
     5a2:	1c 38 1c 38 0b 0b 16 0b 00 00 70 c0 31 c0 3b 80     .8.8......p.1.;.
     5b2:	1f 00 0e 00 0e 00 1f 00 1b 00 33 80 71 c0 e0 e0     ..........3.q...
     5c2:	0a 0b 16 0a 00 00 e1 c0 71 80 33 80 3b 00 1f 00     ........q.3.;...
     5d2:	1e 00 0c 00 0c 00 0c 00 0c 00 0c 00 08 0b 0b 0a     ................
     5e2:	01 00 ff 07 06 0e 1c 18 38 70 60 c0 ff 04 0e 0e     ........8p`.....
     5f2:	06 01 fd f0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     602:	f0 05 0c 0c 07 01 ff 80 c0 c0 40 60 60 20 30 30     ..........@`` 00
     612:	10 10 18 04 0e 0e 07 01 fd f0 30 30 30 30 30 30     ..........000000
     622:	30 30 30 30 30 30 f0 08 0a 0a 10 04 00 10 18 18     000000..........
     632:	24 24 24 42 42 81 81 08 01 01 08 00 fe ff 03 03     $$$BB...........
     642:	03 04 00 09 c0 40 20 07 08 08 09 01 00 3c 6e 06     .....@ ......<n.
     652:	7e e6 c6 ee 76 08 0b 0b 0a 01 00 c0 c0 c0 dc f6     ~...v...........
     662:	c7 c3 c3 c3 e6 dc 07 08 08 09 01 00 3c 6e c6 c0     ............<n..
     672:	c0 c6 ee 3c 08 0b 0b 0a 01 00 03 03 03 3b 6f e3     ...<.........;o.
     682:	c3 c3 c3 67 3b 07 08 08 09 01 00 3c 6e c6 fe c0     ...g;......<n...
     692:	c6 6e 3c 05 0b 0b 07 01 00 38 30 30 f8 30 30 30     .n<......800.000
     6a2:	30 30 30 30 08 0b 0b 0a 01 fd 3b 6f e3 c3 c3 c3     0000......;o....
     6b2:	67 3b 03 67 3c 07 0b 0b 09 01 00 c0 c0 c0 dc ee     g;.g<...........
     6c2:	c6 c6 c6 c6 c6 c6 02 0b 0b 04 01 00 c0 c0 00 c0     ................
     6d2:	c0 c0 c0 c0 c0 c0 c0 03 0e 0e 05 01 fd 60 60 00     .............``.
     6e2:	60 60 60 60 60 60 60 60 60 e0 e0 07 0b 0b 09 01     `````````.......
     6f2:	00 c0 c0 c0 ce dc d8 f0 d8 dc cc c6 02 0b 0b 04     ................
     702:	01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 0c 08 10     ................
     712:	0e 01 00 dc e0 ef 70 c6 30 c6 30 c6 30 c6 30 c6     ......p.0.0.0.0.
     722:	30 c6 30 07 08 08 09 01 00 dc ee c6 c6 c6 c6 c6     0.0.............
     732:	c6 08 08 08 0a 01 00 3c 66 c3 c3 c3 c3 66 3c 08     .......<f....f<.
     742:	0b 0b 0a 01 fd dc e6 c3 c3 c3 c7 f6 dc c0 c0 c0     ................
     752:	08 0b 0b 0a 01 fd 3b 67 c3 c3 c3 c3 6f 3b 03 03     ......;g....o;..
     762:	03 05 08 08 07 01 00 d8 f0 c0 c0 c0 c0 c0 c0 07     ................
     772:	08 08 09 01 00 7c ee c0 f8 1e c6 ee 7c 06 0a 0a     .....|......|...
     782:	08 01 00 30 30 fc 30 30 30 30 30 38 1c 07 08 08     ...00.000008....
     792:	09 01 00 c6 c6 c6 c6 c6 c6 ee 76 08 08 08 09 00     ..........v.....
     7a2:	00 e3 63 67 76 36 3c 1c 1c 0d 08 10 0e 00 00 e7     ..cgv6<.........
     7b2:	18 67 98 67 98 6f b0 3d f0 3c f0 3c f0 38 e0 08     .g.g.o.=.<.<.8..
     7c2:	08 08 09 00 00 63 76 3e 1c 3c 3e 67 e3 08 0b 0b     .....cv>.<>g....
     7d2:	09 00 fd e3 63 77 36 36 3e 1c 1c 18 18 38 06 08     ....cw66>....8..
     7e2:	08 08 01 00 fc 0c 18 38 70 60 c0 fc 06 0f 0f 08     .......8p`......
     7f2:	01 fc 1c 38 30 30 30 30 70 c0 60 30 30 30 30 30     ...80000p.`00000
     802:	1c 01 10 10 05 02 fc 80 80 80 80 80 80 80 80 80     ................
     812:	80 80 80 80 80 80 80 06 0f 0f 08 01 fc e0 70 30     ..............p0
     822:	30 30 30 18 0c 18 30 30 30 30 30 f0 08 02 02 09     000...00000.....
     832:	00 03 79 df ff ff ff ff ff ff ff ff ff ff ff ff     ..y.............
     842:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     852:	ff ff ff ff ff 00 00 00 05 00 00 02 0b 0b 06 02     ................
     862:	fd c0 00 00 c0 c0 c0 c0 c0 c0 c0 c0 07 0c 0c 09     ................
     872:	01 fe 04 04 3c 6e ce d0 d0 d6 6e 3c 20 40 08 0b     ....<n....n< @..
     882:	0b 0a 01 00 3e 77 60 60 fc 60 60 60 60 60 ff 09     ....>w``.`````..
     892:	08 10 0a 01 02 80 80 5d 00 22 00 41 00 41 00 22     .......].".A.A."
     8a2:	00 5d 00 80 80 09 0b 16 0b 01 00 c3 80 63 00 67     .]...........c.g
     8b2:	00 f7 80 3e 00 3c 00 ff 80 18 00 18 00 18 00 18     ...>.<..........
     8c2:	00 01 0e 0e 05 02 fd 80 80 80 80 80 80 00 00 80     ................
     8d2:	80 80 80 80 80 06 0e 0e 08 01 fd 78 ec c0 e0 78     ...........x...x
     8e2:	7c cc cc f8 78 1c 0c 9c f8 05 01 01 05 00 0a d8     |...x...........
     8f2:	0c 0b 16 0e 01 00 1f 80 39 c0 6f 60 d9 b0 98 10     ........9.o`....
     902:	98 10 99 90 8f 10 40 20 30 c0 1f 80 05 08 08 07     ......@ 0.......
     912:	01 03 70 d8 78 d8 d8 78 00 f8 08 06 06 0a 01 01     ..p.x..x........
     922:	67 66 ee ce 66 67 09 04 08 0a 00 03 ff 80 00 80     gf..fg..........
     932:	00 80 00 80 ff 0c 0b 16 0e 01 00 1f 80 39 c0 6f     .............9.o
     942:	60 c9 b0 88 90 8f 10 89 90 88 90 48 a0 30 c0 1f     `..........H.0..
     952:	80 05 01 01 05 00 0a f8 04 04 04 06 01 07 60 d0     ..............`.
     962:	90 f0 09 0a 14 10 03 00 08 00 08 00 08 00 ff 80     ................
     972:	08 00 08 00 08 00 00 00 00 00 ff 80 05 06 06 07     ................
     982:	01 05 70 d8 18 30 c0 f8 05 07 07 07 01 04 70 d8     ..p..0........p.
     992:	18 70 18 d8 70 03 03 03 04 01 09 60 c0 80 ff 07     .p..p......`....
     9a2:	0e 0e 09 01 fd 7e f4 f4 f4 f4 74 14 14 14 14 14     .....~....t.....
     9b2:	14 14 14 02 02 02 04 01 04 c0 c0 04 04 04 03 00     ................
     9c2:	fc 40 30 b0 e0 03 06 06 05 01 05 60 e0 60 60 60     .@0........`.```
     9d2:	60 06 08 08 08 01 03 78 fc cc cc cc 78 00 fc 08     `......x....x...
     9e2:	06 06 0a 01 01 cc 66 67 67 66 cc 0c 0b 16 0d 01     ......fggf......
     9f2:	00 e0 80 61 80 63 00 63 00 66 00 6c e0 0c e0 19     ...a.c.c.f.l....
     a02:	e0 19 60 33 f0 60 60 0b 0b 16 0d 01 00 61 00 e3     ..`3.``......a..
     a12:	00 62 00 66 00 64 00 6d e0 1b 60 18 60 31 c0 23     .b.f.d.m..`.`1.#
     a22:	00 63 e0 0c 0b 16 0d 01 00 78 c0 d8 80 71 80 d9     .c.......x...q..
     a32:	00 73 00 06 60 04 e0 0d e0 19 60 19 f0 30 60 07     .s..`.....`..0`.
     a42:	0b 0b 09 01 fd 18 00 18 18 38 70 e0 c0 c2 fe 3c     .........8p....<
     a52:	0b 10 20 0b 00 00 18 00 0c 00 04 00 00 00 00 00     .. .............
     a62:	0e 00 0e 00 0f 00 1b 00 1b 80 39 80 31 80 3f c0     ..........9.1.?.
     a72:	7f c0 60 e0 e0 60 0b 10 20 0b 00 00 03 00 02 00     ..`..`.. .......
     a82:	04 00 00 00 00 00 0e 00 0e 00 0f 00 1b 00 1b 80     ................
     a92:	39 80 31 80 3f c0 7f c0 60 e0 e0 60 0b 10 20 0b     9.1.?...`..`.. .
     aa2:	00 00 06 00 0e 00 19 00 00 00 00 00 0e 00 0e 00     ................
     ab2:	0f 00 1b 00 1b 80 39 80 31 80 3f c0 7f c0 60 e0     ......9.1.?...`.
     ac2:	e0 60 0b 0f 1e 0b 00 00 0d 00 17 00 00 00 00 00     .`..............
     ad2:	0e 00 0e 00 0f 00 1b 00 1b 80 39 80 31 80 3f c0     ..........9.1.?.
     ae2:	7f c0 60 e0 e0 60 0b 0f 1e 0b 00 00 1b 00 00 00     ..`..`..........
     af2:	00 00 00 00 0e 00 0e 00 0f 00 1b 00 1b 00 3b 80     ..............;.
     b02:	31 80 3f c0 7f c0 60 e0 e0 60 0a 11 22 0c 01 00     1.?...`..`.."...
     b12:	0c 00 12 00 12 00 1e 00 00 00 00 00 0c 00 1e 00     ................
     b22:	1e 00 3f 00 33 00 33 00 63 80 7f 80 ff c0 c0 c0     ..?.3.3.c.......
     b32:	c0 c0 0f 0b 16 10 00 00 03 fe 07 80 07 80 0d 80     ................
     b42:	1d 80 19 fe 39 80 3f 80 61 80 61 80 c1 fe 0a 0f     ....9.?.a.a.....
     b52:	1e 0c 01 fc 1f 00 77 80 61 c0 c0 00 c0 00 c0 00     ......w.a.......
     b62:	c0 00 c1 c0 61 c0 73 80 3e 00 08 00 0e 00 02 00     ....a.s.>.......
     b72:	1c 00 08 10 10 0a 01 00 60 30 18 00 00 ff c0 c0     ........`0......
     b82:	c0 c0 ff c0 c0 c0 c0 ff 08 10 10 0a 01 00 0c 08     ................
     b92:	10 00 00 ff c0 c0 c0 c0 ff c0 c0 c0 c0 ff 08 10     ................
     ba2:	10 0a 01 00 18 3c 24 00 00 ff c0 c0 c0 c0 ff c0     .....<$.........
     bb2:	c0 c0 c0 ff 08 0f 0f 0a 01 00 66 00 00 00 ff c0     ..........f.....
     bc2:	c0 c0 c0 ff c0 c0 c0 c0 ff 04 10 10 04 ff 00 c0     ................
     bd2:	60 30 00 00 30 30 30 30 30 30 30 30 30 30 30 04     `0..00000000000.
     be2:	10 10 04 01 00 70 60 c0 00 00 c0 c0 c0 c0 c0 c0     .....p`.........
     bf2:	c0 c0 c0 c0 c0 04 10 10 04 00 00 60 f0 90 00 00     ...........`....
     c02:	60 60 60 60 60 60 60 60 60 60 60 05 0f 0f 05 00     ```````````.....
     c12:	00 d8 00 00 00 30 30 30 30 30 30 30 30 30 30 30     .....00000000000
     c22:	0b 0b 16 0c 00 00 7f 00 63 80 60 c0 60 e0 60 60     ........c.`.`.``
     c32:	fc 60 60 60 60 e0 60 c0 63 80 7f 00 0a 0f 1e 0c     .````.`.c.......
     c42:	01 00 19 00 16 00 00 00 00 00 f0 c0 f0 c0 f8 c0     ................
     c52:	d8 c0 dc c0 cc c0 ce c0 c6 c0 c7 c0 c3 c0 c3 c0     ................
     c62:	0b 10 20 0d 01 00 18 00 08 00 0c 00 00 00 00 00     .. .............
     c72:	1f 00 7b c0 60 c0 c0 60 c0 60 c0 60 c0 60 c0 60     ..{.`..`.`.`.`.`
     c82:	60 c0 7b c0 1f 00 0b 10 20 0d 01 00 03 00 02 00     `.{..... .......
     c92:	04 00 00 00 00 00 1f 00 7b c0 60 c0 c0 60 c0 60     ........{.`..`.`
     ca2:	c0 60 c0 60 c0 60 60 c0 7b c0 1f 00 0b 10 20 0d     .`.`.``.{..... .
     cb2:	01 00 0e 00 1b 00 11 00 00 00 00 00 1f 00 7b c0     ..............{.
     cc2:	60 c0 c0 60 c0 60 c0 60 c0 60 c0 60 60 c0 7b c0     `..`.`.`.`.``.{.
     cd2:	1f 00 0b 0f 1e 0d 01 00 1f 00 00 00 00 00 00 00     ................
     ce2:	1f 00 7b c0 60 c0 c0 60 c0 60 c0 60 c0 60 e0 e0     ..{.`..`.`.`.`..
     cf2:	60 c0 7f c0 1f 00 0b 0f 1e 0d 01 00 1b 00 00 00     `...............
     d02:	00 00 00 00 1f 00 7b c0 60 c0 c0 60 c0 60 c0 60     ......{.`..`.`.`
     d12:	c0 60 c0 60 60 c0 7b c0 1f 00 08 08 08 10 04 00     .`.``.{.........
     d22:	81 c3 66 18 18 24 42 81 0b 0b 16 0d 01 00 1f a0     ..f..$B.........
     d32:	3b c0 60 c0 c1 60 c2 60 c4 60 c8 60 d0 60 e0 c0     ;.`..`.`.`.`.`..
     d42:	7b 80 bf 00 0a 10 20 0c 01 00 30 00 18 00 08 00     {..... ...0.....
     d52:	00 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     d62:	c0 c0 c0 c0 e1 c0 7f 80 3e 00 0a 10 20 0c 01 00     ........>... ...
     d72:	03 00 06 00 04 00 00 00 00 00 c0 c0 c0 c0 c0 c0     ................
     d82:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 e1 c0 7f 80 3e 00     ..............>.
     d92:	0a 10 20 0c 01 00 1c 00 1e 00 33 00 00 00 00 00     .. .......3.....
     da2:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     db2:	e1 c0 7f 80 3e 00 0a 0f 1e 0c 01 00 33 00 00 00     ....>.......3...
     dc2:	00 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     dd2:	c0 c0 c0 c0 e1 c0 73 80 3e 00 0a 10 20 0a 00 00     ......s.>... ...
     de2:	06 00 06 00 04 00 00 00 00 00 e1 c0 71 80 33 80     ............q.3.
     df2:	3b 00 1f 00 1e 00 0c 00 0c 00 0c 00 0c 00 0c 00     ;...............
     e02:	08 0b 0b 0a 01 00 c0 c0 fe c7 c3 c3 c7 fe c0 c0     ................
     e12:	c0 08 0b 0b 0a 01 00 7c ee c6 ce dc d8 ce c7 c3     .......|........
     e22:	db de 07 0c 0c 09 01 00 60 30 10 00 3c 6e 06 7e     ........`0..<n.~
     e32:	e6 c6 ee 76 07 0c 0c 09 01 00 0c 18 10 00 3c 6e     ...v..........<n
     e42:	06 7e e6 c6 ee 76 07 0c 0c 09 01 00 38 2c 44 00     .~...v......8,D.
     e52:	3c 6e 06 7e e6 c6 ee 76 07 0b 0b 09 01 00 3c 00     <n.~...v......<.
     e62:	00 3c 6e 06 7e e6 c6 ee 76 07 0b 0b 09 01 00 6c     .<n.~...v......l
     e72:	00 00 3c e6 06 7e e6 c6 ee 76 07 0d 0d 09 01 00     ..<..~...v......
     e82:	18 24 24 3c 00 3c 66 06 7e e6 c6 ee 7e 0d 08 10     .$$<.<f.~...~...
     e92:	0f 01 00 3c e0 67 b0 07 18 7f f8 e7 00 c7 18 ed     ...<.g..........
     ea2:	b8 78 f0 07 0c 0c 09 01 fc 3c 6e c6 c0 c0 c6 6e     .x.......<n....n
     eb2:	3c 10 1c 04 38 07 0d 0d 09 01 00 60 20 30 10 00     <...8......` 0..
     ec2:	3c 6e c6 fe c0 c6 6e 3c 07 0d 0d 09 01 00 0c 0c     <n....n<........
     ed2:	18 10 00 3c 6e c6 fe c0 c6 6e 3c 07 0d 0d 09 01     ...<n....n<.....
     ee2:	00 18 38 2c 44 00 3c 6e c6 fe c0 c6 6e 3c 07 0c     ..8,D.<n....n<..
     ef2:	0c 09 01 00 6c 00 00 00 3c 6e c6 fe c0 ce 6e 3c     ....l...<n....n<
     f02:	03 0c 0c 04 00 00 c0 60 20 00 60 60 60 60 60 60     .......` .``````
     f12:	60 60 03 0c 0c 04 01 00 60 c0 80 00 c0 c0 c0 c0     ``......`.......
     f22:	c0 c0 c0 c0 05 0c 0c 04 00 00 60 d0 88 00 60 60     ..........`...``
     f32:	60 60 60 60 60 60 05 0b 0b 05 00 00 d8 00 00 30     ``````.........0
     f42:	30 30 30 30 30 30 30 08 0b 0b 0a 01 00 33 1c 66     0000000......3.f
     f52:	3e 67 c3 c3 c3 c3 67 3c 07 0b 0b 09 01 00 3c 00     >g....g<......<.
     f62:	00 dc ee c6 c6 c6 c6 c6 c6 08 0d 0d 0a 01 00 60     ...............`
     f72:	30 10 08 00 3c 66 c3 c3 c3 c3 66 3c 08 0d 0d 0a     0...<f....f<....
     f82:	01 00 06 0c 08 10 00 3c 66 c3 c3 c3 c3 66 3c 08     .......<f....f<.
     f92:	0d 0d 0a 01 00 18 1c 24 22 00 3c 66 c3 c3 c3 c3     .......$".<f....
     fa2:	66 3c 08 0b 0b 0a 01 00 3c 00 00 3c 66 c3 c3 c3     f<......<..<f...
     fb2:	c3 66 3c 08 0c 0c 0a 01 00 66 00 00 00 3c 66 c3     .f<......f...<f.
     fc2:	c3 c3 c3 66 3c 0a 06 0c 10 03 02 0c 00 00 00 ff     ...f<...........
     fd2:	c0 00 00 00 00 0c 00 08 0a 0a 0a 01 ff 01 3e 66     ..............>f
     fe2:	cf cb d3 e3 76 fc 80 07 0c 0c 09 01 00 60 30 10     ....v........`0.
     ff2:	00 c6 c6 c6 c6 c6 c6 ee 76 07 0c 0c 09 01 00 0c     ........v.......
    1002:	18 10 00 c6 c6 c6 c6 c6 c6 ee 76 07 0c 0c 09 01     ..........v.....
    1012:	00 38 28 44 00 c6 c6 c6 c6 c6 c6 ee 76 07 0b 0b     .8(D........v...
    1022:	09 01 00 6c 00 00 c6 c6 c6 c6 c6 c6 ee 76 09 10     ...l.........v..
    1032:	20 09 00 fd 07 00 06 00 0c 00 08 00 00 00 63 80      .............c.
    1042:	63 00 73 00 36 00 36 00 1e 00 1c 00 1c 00 1c 00     c.s.6.6.........
    1052:	f8 00 70 00 08 0e 0e 0a 01 fd c0 c0 c0 dc e6 c3     ..p.............
    1062:	c3 c3 c7 e6 dc c0 c0 c0 08 0e 0e 09 01 fd 6c 00     ..............l.
    1072:	00 c7 c6 ee 6c 6c 3c 38 38 38 30 30                 ....ll<88800

0000107e <__ctors_end>:
    107e:	11 24       	eor	r1, r1
    1080:	1f be       	out	0x3f, r1	; 63
    1082:	cf ef       	ldi	r28, 0xFF	; 255
    1084:	d8 e0       	ldi	r29, 0x08	; 8
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	cd bf       	out	0x3d, r28	; 61

0000108a <__do_copy_data>:
    108a:	11 e0       	ldi	r17, 0x01	; 1
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b1 e0       	ldi	r27, 0x01	; 1
    1090:	e8 e8       	ldi	r30, 0x88	; 136
    1092:	f9 e2       	ldi	r31, 0x29	; 41
    1094:	02 c0       	rjmp	.+4      	; 0x109a <__do_copy_data+0x10>
    1096:	05 90       	lpm	r0, Z+
    1098:	0d 92       	st	X+, r0
    109a:	a4 33       	cpi	r26, 0x34	; 52
    109c:	b1 07       	cpc	r27, r17
    109e:	d9 f7       	brne	.-10     	; 0x1096 <__do_copy_data+0xc>

000010a0 <__do_clear_bss>:
    10a0:	22 e0       	ldi	r18, 0x02	; 2
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b1 e0       	ldi	r27, 0x01	; 1
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <.do_clear_bss_start>

000010a8 <.do_clear_bss_loop>:
    10a8:	1d 92       	st	X+, r1

000010aa <.do_clear_bss_start>:
    10aa:	a3 33       	cpi	r26, 0x33	; 51
    10ac:	b2 07       	cpc	r27, r18
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <.do_clear_bss_loop>
    10b0:	0e 94 8c 09 	call	0x1318	; 0x1318 <main>
    10b4:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <_exit>

000010b8 <__bad_interrupt>:
    10b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000010bc <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    10bc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10c0:	88 e4       	ldi	r24, 0x48	; 72
    10c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    10c6:	08 95       	ret

000010c8 <i2c_start>:
    10c8:	94 ea       	ldi	r25, 0xA4	; 164
    10ca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10ce:	4f ef       	ldi	r20, 0xFF	; 255
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	ec eb       	ldi	r30, 0xBC	; 188
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	90 81       	ld	r25, Z
    10dc:	99 23       	and	r25, r25
    10de:	34 f0       	brlt	.+12     	; 0x10ec <i2c_start+0x24>
    10e0:	41 50       	subi	r20, 0x01	; 1
    10e2:	51 09       	sbc	r21, r1
    10e4:	61 09       	sbc	r22, r1
    10e6:	71 09       	sbc	r23, r1
    10e8:	c0 f7       	brcc	.-16     	; 0x10da <i2c_start+0x12>
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <i2c_start+0x2c>
    10ec:	45 2b       	or	r20, r21
    10ee:	46 2b       	or	r20, r22
    10f0:	47 2b       	or	r20, r23
    10f2:	41 f1       	breq	.+80     	; 0x1144 <i2c_start+0x7c>
    10f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10f8:	98 7f       	andi	r25, 0xF8	; 248
    10fa:	98 30       	cpi	r25, 0x08	; 8
    10fc:	11 f0       	breq	.+4      	; 0x1102 <i2c_start+0x3a>
    10fe:	90 31       	cpi	r25, 0x10	; 16
    1100:	19 f5       	brne	.+70     	; 0x1148 <i2c_start+0x80>
    1102:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1106:	84 e8       	ldi	r24, 0x84	; 132
    1108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ec eb       	ldi	r30, 0xBC	; 188
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	20 81       	ld	r18, Z
    111a:	22 23       	and	r18, r18
    111c:	2c f0       	brlt	.+10     	; 0x1128 <i2c_start+0x60>
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	a1 09       	sbc	r26, r1
    1122:	b1 09       	sbc	r27, r1
    1124:	c8 f7       	brcc	.-14     	; 0x1118 <i2c_start+0x50>
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <i2c_start+0x68>
    1128:	89 2b       	or	r24, r25
    112a:	8a 2b       	or	r24, r26
    112c:	8b 2b       	or	r24, r27
    112e:	71 f0       	breq	.+28     	; 0x114c <i2c_start+0x84>
    1130:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1134:	98 7f       	andi	r25, 0xF8	; 248
    1136:	98 31       	cpi	r25, 0x18	; 24
    1138:	59 f0       	breq	.+22     	; 0x1150 <i2c_start+0x88>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 34       	cpi	r25, 0x40	; 64
    113e:	49 f4       	brne	.+18     	; 0x1152 <i2c_start+0x8a>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	08 95       	ret
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	08 95       	ret
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	08 95       	ret
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret

00001154 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1154:	84 e9       	ldi	r24, 0x94	; 148
    1156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	ec eb       	ldi	r30, 0xBC	; 188
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	20 81       	ld	r18, Z
    1164:	24 ff       	sbrs	r18, 4
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <i2c_stop+0x1e>
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	81 15       	cp	r24, r1
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	92 07       	cpc	r25, r18
    1170:	c1 f7       	brne	.-16     	; 0x1162 <i2c_stop+0xe>
    1172:	08 95       	ret

00001174 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1174:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1178:	84 e8       	ldi	r24, 0x84	; 132
    117a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a0 e0       	ldi	r26, 0x00	; 0
    1184:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1186:	ec eb       	ldi	r30, 0xBC	; 188
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	20 81       	ld	r18, Z
    118c:	22 23       	and	r18, r18
    118e:	2c f0       	brlt	.+10     	; 0x119a <i2c_write+0x26>
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	a1 09       	sbc	r26, r1
    1194:	b1 09       	sbc	r27, r1
    1196:	c8 f7       	brcc	.-14     	; 0x118a <i2c_write+0x16>
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <i2c_write+0x2e>
	if(i2c_timer == 0)
    119a:	89 2b       	or	r24, r25
    119c:	8a 2b       	or	r24, r26
    119e:	8b 2b       	or	r24, r27
    11a0:	41 f0       	breq	.+16     	; 0x11b2 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    11a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    11a6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	98 32       	cpi	r25, 0x28	; 40
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <i2c_write+0x40>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    11b4:	08 95       	ret

000011b6 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    11b6:	84 ec       	ldi	r24, 0xC4	; 196
    11b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    11c4:	ec eb       	ldi	r30, 0xBC	; 188
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	20 81       	ld	r18, Z
    11ca:	22 23       	and	r18, r18
    11cc:	2c f0       	brlt	.+10     	; 0x11d8 <i2c_readAck+0x22>
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	a1 09       	sbc	r26, r1
    11d2:	b1 09       	sbc	r27, r1
    11d4:	c8 f7       	brcc	.-14     	; 0x11c8 <i2c_readAck+0x12>
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    11d8:	89 2b       	or	r24, r25
    11da:	8a 2b       	or	r24, r26
    11dc:	8b 2b       	or	r24, r27
    11de:	19 f0       	breq	.+6      	; 0x11e6 <i2c_readAck+0x30>
		return 0;

    return TWDR;
    11e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    11e4:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    11e6:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    11e8:	08 95       	ret

000011ea <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    11ea:	84 e8       	ldi	r24, 0x84	; 132
    11ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    11f8:	ec eb       	ldi	r30, 0xBC	; 188
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	20 81       	ld	r18, Z
    11fe:	22 23       	and	r18, r18
    1200:	2c f0       	brlt	.+10     	; 0x120c <i2c_readNak+0x22>
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	a1 09       	sbc	r26, r1
    1206:	b1 09       	sbc	r27, r1
    1208:	c8 f7       	brcc	.-14     	; 0x11fc <i2c_readNak+0x12>
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    120c:	89 2b       	or	r24, r25
    120e:	8a 2b       	or	r24, r26
    1210:	8b 2b       	or	r24, r27
    1212:	19 f0       	breq	.+6      	; 0x121a <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    1214:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1218:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    121a:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    121c:	08 95       	ret

0000121e <getAcc>:
		//drawSteps(xOffset);
		_delay_ms(5);
	}
}

double getAcc(int addr){
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	c8 2f       	mov	r28, r24
	int16_t ret = 0;
	uint8_t buffer[2]; //För att hålla två bytes med i2c_readAck
	i2c_start(MPU6050_ADDR | I2C_WRITE);
    1224:	80 ed       	ldi	r24, 0xD0	; 208
    1226:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
	i2c_write(addr);
    122a:	8c 2f       	mov	r24, r28
    122c:	0e 94 ba 08 	call	0x1174	; 0x1174 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1230:	85 e3       	ldi	r24, 0x35	; 53
    1232:	8a 95       	dec	r24
    1234:	f1 f7       	brne	.-4      	; 0x1232 <getAcc+0x14>
    1236:	00 00       	nop
	_delay_us(10);
	//read data
	i2c_start(MPU6050_ADDR | I2C_READ);
    1238:	81 ed       	ldi	r24, 0xD1	; 209
    123a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
	buffer[0] = i2c_readAck();
    123e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <i2c_readAck>
    1242:	d8 2f       	mov	r29, r24
	buffer[1] = i2c_readNak();
    1244:	0e 94 f5 08 	call	0x11ea	; 0x11ea <i2c_readNak>
    1248:	c8 2f       	mov	r28, r24
	i2c_stop();
    124a:	0e 94 aa 08 	call	0x1154	; 0x1154 <i2c_stop>
	//ret = (((int16_t)buffer[0]) << 8) | buffer[1];
	ret = fabs((((int16_t)buffer[0]) << 8) | buffer[1]);
    124e:	6c 2f       	mov	r22, r28
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	7d 2b       	or	r23, r29
    1254:	07 2e       	mov	r0, r23
    1256:	00 0c       	add	r0, r0
    1258:	88 0b       	sbc	r24, r24
    125a:	99 0b       	sbc	r25, r25
    125c:	0e 94 65 13 	call	0x26ca	; 0x26ca <__floatsisf>
    1260:	9f 77       	andi	r25, 0x7F	; 127
    1262:	0e 94 2d 13 	call	0x265a	; 0x265a <__fixsfsi>
	//return fabs(ret) / 1000;
	return (double)(ret)/MPU6050_AGAIN; //Konverterar till g?
    1266:	07 2e       	mov	r0, r23
    1268:	00 0c       	add	r0, r0
    126a:	88 0b       	sbc	r24, r24
    126c:	99 0b       	sbc	r25, r25
    126e:	0e 94 65 13 	call	0x26ca	; 0x26ca <__floatsisf>
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e8       	ldi	r20, 0x80	; 128
    1278:	58 e3       	ldi	r21, 0x38	; 56
    127a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__mulsf3>
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <drawSteps>:

void drawSteps(uint16_t steps){
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	00 d0       	rcall	.+0      	; 0x128a <drawSteps+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <drawSteps+0x8>
    128c:	00 d0       	rcall	.+0      	; 0x128e <drawSteps+0xa>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
	char counterString[6] = "\0";
    1292:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <u8g_dev_ssd1306_128x64_i2c_pb+0x8>
    1296:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <u8g_dev_ssd1306_128x64_i2c_pb+0x9>
    129a:	3a 83       	std	Y+2, r19	; 0x02
    129c:	29 83       	std	Y+1, r18	; 0x01
    129e:	1b 82       	std	Y+3, r1	; 0x03
    12a0:	1c 82       	std	Y+4, r1	; 0x04
    12a2:	1d 82       	std	Y+5, r1	; 0x05
    12a4:	1e 82       	std	Y+6, r1	; 0x06
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    12a6:	4a e0       	ldi	r20, 0x0A	; 10
    12a8:	be 01       	movw	r22, r28
    12aa:	6f 5f       	subi	r22, 0xFF	; 255
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	0e 94 8d 14 	call	0x291a	; 0x291a <__itoa_ncheck>
	itoa(steps, counterString, 10);
	u8g_FirstPage(&u8g);
    12b2:	8c ef       	ldi	r24, 0xFC	; 252
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 1a 11 	call	0x2234	; 0x2234 <u8g_FirstPage>
	do{
		u8g_DrawStr(&u8g, 2, 16, counterString);
    12ba:	9e 01       	movw	r18, r28
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	40 e1       	ldi	r20, 0x10	; 16
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	8c ef       	ldi	r24, 0xFC	; 252
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <u8g_DrawStr>
	}while(u8g_NextPage(&u8g));
    12cc:	8c ef       	ldi	r24, 0xFC	; 252
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	0e 94 20 11 	call	0x2240	; 0x2240 <u8g_NextPage>
    12d4:	81 11       	cpse	r24, r1
    12d6:	f1 cf       	rjmp	.-30     	; 0x12ba <drawSteps+0x36>
}
    12d8:	26 96       	adiw	r28, 0x06	; 6
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <drawString>:

void drawString(char * string){
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
	u8g_FirstPage(&u8g);
    12f0:	8c ef       	ldi	r24, 0xFC	; 252
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	0e 94 1a 11 	call	0x2234	; 0x2234 <u8g_FirstPage>
	do{
		u8g_DrawStr(&u8g, 2, 16*2, string);
    12f8:	9e 01       	movw	r18, r28
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	8c ef       	ldi	r24, 0xFC	; 252
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <u8g_DrawStr>
	}while(u8g_NextPage(&u8g));
    1306:	8c ef       	ldi	r24, 0xFC	; 252
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 20 11 	call	0x2240	; 0x2240 <u8g_NextPage>
    130e:	81 11       	cpse	r24, r1
    1310:	f3 cf       	rjmp	.-26     	; 0x12f8 <drawString+0xe>
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <main>:
void drawString(char * string);
void drawAccData(double x, double y, double z);
void getAccOffset(double *ox, double *oy, double *oz);

int main(void) {
	u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	71 e0       	ldi	r23, 0x01	; 1
    131e:	8c ef       	ldi	r24, 0xFC	; 252
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 04 11 	call	0x2208	; 0x2208 <u8g_InitI2C>
	u8g_SetFont(&u8g, u8g_font_fub11);
    1326:	62 e1       	ldi	r22, 0x12	; 18
    1328:	71 e0       	ldi	r23, 0x01	; 1
    132a:	8c ef       	ldi	r24, 0xFC	; 252
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <u8g_SetFont>
	double combinedAcc = 0;
	double accX = 0.0, accY = 0.0, accZ = 0.0;
	double xOffset = 0.0, yOffset = 0.0, zOffset = 0.0;
	uint16_t steps = 0;
	//getAccOffset(&xOffset, &yOffset, &zOffset);
	sei();
    1332:	78 94       	sei
	DDRB |= (1 << PB0);
    1334:	20 9a       	sbi	0x04, 0	; 4
	/*	 Init MPU 6050	*/
	mpu6050_init();
    1336:	0e 94 ef 0a 	call	0x15de	; 0x15de <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	80 e7       	ldi	r24, 0x70	; 112
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	80 40       	sbci	r24, 0x00	; 0
    1344:	90 40       	sbci	r25, 0x00	; 0
    1346:	e1 f7       	brne	.-8      	; 0x1340 <main+0x28>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <main+0x32>
    134a:	00 00       	nop
	_delay_ms(50);
	drawString("Idle");
    134c:	84 e1       	ldi	r24, 0x14	; 20
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	0e 94 75 09 	call	0x12ea	; 0x12ea <drawString>
	u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
	u8g_SetFont(&u8g, u8g_font_fub11);
	double combinedAcc = 0;
	double accX = 0.0, accY = 0.0, accZ = 0.0;
	double xOffset = 0.0, yOffset = 0.0, zOffset = 0.0;
	uint16_t steps = 0;
    1354:	c0 e0       	ldi	r28, 0x00	; 0
    1356:	d0 e0       	ldi	r29, 0x00	; 0
		accY = getAcc(Y) - yOffset;
		accZ = getAcc(Z) - zOffset;
		combinedAcc = (accX + accY + accZ);
		if(combinedAcc > STEP_ACC_TRIGGER){
			steps++;
			PORTB= 0b00000001;
    1358:	11 e0       	ldi	r17, 0x01	; 1
	/*	 Init MPU 6050	*/
	mpu6050_init();
	_delay_ms(50);
	drawString("Idle");
	while(1) {
		accX = getAcc(X) - xOffset; 
    135a:	8b e3       	ldi	r24, 0x3B	; 59
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
    1362:	2b 01       	movw	r4, r22
    1364:	3c 01       	movw	r6, r24
		accY = getAcc(Y) - yOffset;
    1366:	8d e3       	ldi	r24, 0x3D	; 61
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
    136e:	4b 01       	movw	r8, r22
    1370:	5c 01       	movw	r10, r24
		accZ = getAcc(Z) - zOffset;
    1372:	8f e3       	ldi	r24, 0x3F	; 63
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
    137a:	6b 01       	movw	r12, r22
    137c:	7c 01       	movw	r14, r24
		combinedAcc = (accX + accY + accZ);
    137e:	a5 01       	movw	r20, r10
    1380:	94 01       	movw	r18, r8
    1382:	c3 01       	movw	r24, r6
    1384:	b2 01       	movw	r22, r4
    1386:	0e 94 c1 12 	call	0x2582	; 0x2582 <__addsf3>
    138a:	9b 01       	movw	r18, r22
    138c:	ac 01       	movw	r20, r24
    138e:	c7 01       	movw	r24, r14
    1390:	b6 01       	movw	r22, r12
    1392:	0e 94 c1 12 	call	0x2582	; 0x2582 <__addsf3>
		if(combinedAcc > STEP_ACC_TRIGGER){
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e4       	ldi	r20, 0x40	; 64
    139c:	50 e4       	ldi	r21, 0x40	; 64
    139e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__gesf2>
    13a2:	18 16       	cp	r1, r24
    13a4:	64 f4       	brge	.+24     	; 0x13be <main+0xa6>
			steps++;
    13a6:	21 96       	adiw	r28, 0x01	; 1
			PORTB= 0b00000001;
    13a8:	15 b9       	out	0x05, r17	; 5
			drawSteps(steps);
    13aa:	ce 01       	movw	r24, r28
    13ac:	0e 94 42 09 	call	0x1284	; 0x1284 <drawSteps>
    13b0:	8f e3       	ldi	r24, 0x3F	; 63
    13b2:	9c e9       	ldi	r25, 0x9C	; 156
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <main+0x9c>
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <main+0xa2>
    13ba:	00 00       	nop
			_delay_ms(10);
			PORTB= 0b00000000;
    13bc:	15 b8       	out	0x05, r1	; 5
    13be:	8f e1       	ldi	r24, 0x1F	; 31
    13c0:	9e e4       	ldi	r25, 0x4E	; 78
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <main+0xaa>
    13c6:	00 c0       	rjmp	.+0      	; 0x13c8 <main+0xb0>
    13c8:	00 00       	nop
    13ca:	c7 cf       	rjmp	.-114    	; 0x135a <main+0x42>

000013cc <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	66 23       	and	r22, r22
    13e0:	b9 f1       	breq	.+110    	; 0x1450 <mpu6050_readBytes+0x84>
    13e2:	c5 2f       	mov	r28, r21
    13e4:	d4 2f       	mov	r29, r20
    13e6:	d6 2e       	mov	r13, r22
    13e8:	18 2f       	mov	r17, r24
    13ea:	80 ed       	ldi	r24, 0xD0	; 208
    13ec:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
    13f0:	81 2f       	mov	r24, r17
    13f2:	0e 94 ba 08 	call	0x1174	; 0x1174 <i2c_write>
    13f6:	85 e3       	ldi	r24, 0x35	; 53
    13f8:	8a 95       	dec	r24
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <mpu6050_readBytes+0x2c>
    13fc:	00 00       	nop
    13fe:	81 ed       	ldi	r24, 0xD1	; 209
    1400:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
    1404:	0d 2f       	mov	r16, r29
    1406:	1c 2f       	mov	r17, r28
    1408:	ee 24       	eor	r14, r14
    140a:	ea 94       	dec	r14
    140c:	ed 0c       	add	r14, r13
    140e:	f1 2c       	mov	r15, r1
    1410:	ef ef       	ldi	r30, 0xFF	; 255
    1412:	ee 1a       	sub	r14, r30
    1414:	fe 0a       	sbc	r15, r30
    1416:	c0 e0       	ldi	r28, 0x00	; 0
    1418:	d0 e0       	ldi	r29, 0x00	; 0
    141a:	ad 2c       	mov	r10, r13
    141c:	b1 2c       	mov	r11, r1
    141e:	f1 e0       	ldi	r31, 0x01	; 1
    1420:	af 1a       	sub	r10, r31
    1422:	b1 08       	sbc	r11, r1
    1424:	ca 15       	cp	r28, r10
    1426:	db 05       	cpc	r29, r11
    1428:	29 f4       	brne	.+10     	; 0x1434 <mpu6050_readBytes+0x68>
    142a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <i2c_readNak>
    142e:	f8 01       	movw	r30, r16
    1430:	80 83       	st	Z, r24
    1432:	04 c0       	rjmp	.+8      	; 0x143c <mpu6050_readBytes+0x70>
    1434:	0e 94 db 08 	call	0x11b6	; 0x11b6 <i2c_readAck>
    1438:	f8 01       	movw	r30, r16
    143a:	80 83       	st	Z, r24
    143c:	21 96       	adiw	r28, 0x01	; 1
    143e:	0f 5f       	subi	r16, 0xFF	; 255
    1440:	1f 4f       	sbci	r17, 0xFF	; 255
    1442:	ce 15       	cp	r28, r14
    1444:	df 05       	cpc	r29, r15
    1446:	71 f7       	brne	.-36     	; 0x1424 <mpu6050_readBytes+0x58>
    1448:	cd 2d       	mov	r28, r13
    144a:	0e 94 aa 08 	call	0x1154	; 0x1154 <i2c_stop>
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <mpu6050_readBytes+0x86>
    1450:	c0 e0       	ldi	r28, 0x00	; 0
    1452:	8c 2f       	mov	r24, r28
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	08 95       	ret

00001468 <mpu6050_readByte>:
    1468:	ab 01       	movw	r20, r22
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <mpu6050_readBytes>
    1470:	08 95       	ret

00001472 <mpu6050_writeBytes>:
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	66 23       	and	r22, r22
    1480:	d1 f0       	breq	.+52     	; 0x14b6 <mpu6050_writeBytes+0x44>
    1482:	7a 01       	movw	r14, r20
    1484:	16 2f       	mov	r17, r22
    1486:	c8 2f       	mov	r28, r24
    1488:	80 ed       	ldi	r24, 0xD0	; 208
    148a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
    148e:	8c 2f       	mov	r24, r28
    1490:	0e 94 ba 08 	call	0x1174	; 0x1174 <i2c_write>
    1494:	e7 01       	movw	r28, r14
    1496:	6f ef       	ldi	r22, 0xFF	; 255
    1498:	61 0f       	add	r22, r17
    149a:	06 2f       	mov	r16, r22
    149c:	10 e0       	ldi	r17, 0x00	; 0
    149e:	0f 5f       	subi	r16, 0xFF	; 255
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	0e 0d       	add	r16, r14
    14a4:	1f 1d       	adc	r17, r15
    14a6:	89 91       	ld	r24, Y+
    14a8:	0e 94 ba 08 	call	0x1174	; 0x1174 <i2c_write>
    14ac:	c0 17       	cp	r28, r16
    14ae:	d1 07       	cpc	r29, r17
    14b0:	d1 f7       	brne	.-12     	; 0x14a6 <mpu6050_writeBytes+0x34>
    14b2:	0e 94 aa 08 	call	0x1154	; 0x1154 <i2c_stop>
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	08 95       	ret

000014c4 <mpu6050_writeByte>:
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	1f 92       	push	r1
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	69 83       	std	Y+1, r22	; 0x01
    14d0:	ae 01       	movw	r20, r28
    14d2:	4f 5f       	subi	r20, 0xFF	; 255
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	0e 94 39 0a 	call	0x1472	; 0x1472 <mpu6050_writeBytes>
    14dc:	0f 90       	pop	r0
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <mpu6050_writeBits>:
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	1f 92       	push	r1
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	44 23       	and	r20, r20
    14f8:	89 f1       	breq	.+98     	; 0x155c <mpu6050_writeBits+0x78>
    14fa:	f2 2e       	mov	r15, r18
    14fc:	14 2f       	mov	r17, r20
    14fe:	06 2f       	mov	r16, r22
    1500:	e8 2e       	mov	r14, r24
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	be 01       	movw	r22, r28
    1506:	6f 5f       	subi	r22, 0xFF	; 255
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	0e 94 34 0a 	call	0x1468	; 0x1468 <mpu6050_readByte>
    150e:	88 23       	and	r24, r24
    1510:	29 f1       	breq	.+74     	; 0x155c <mpu6050_writeBits+0x78>
    1512:	40 2f       	mov	r20, r16
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	41 1b       	sub	r20, r17
    1518:	51 09       	sbc	r21, r1
    151a:	4f 5f       	subi	r20, 0xFF	; 255
    151c:	5f 4f       	sbci	r21, 0xFF	; 255
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <mpu6050_writeBits+0x44>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	1a 95       	dec	r17
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <mpu6050_writeBits+0x40>
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	04 2e       	mov	r0, r20
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <mpu6050_writeBits+0x52>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <mpu6050_writeBits+0x4e>
    153a:	2f 2d       	mov	r18, r15
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <mpu6050_writeBits+0x60>
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	4a 95       	dec	r20
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <mpu6050_writeBits+0x5c>
    1548:	68 2f       	mov	r22, r24
    154a:	60 95       	com	r22
    154c:	99 81       	ldd	r25, Y+1	; 0x01
    154e:	69 23       	and	r22, r25
    1550:	82 23       	and	r24, r18
    1552:	68 2b       	or	r22, r24
    1554:	69 83       	std	Y+1, r22	; 0x01
    1556:	8e 2d       	mov	r24, r14
    1558:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <mpu6050_writeByte>
    155c:	0f 90       	pop	r0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	08 95       	ret

0000156c <mpu6050_writeBit>:
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	1f 92       	push	r1
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	18 2f       	mov	r17, r24
    157e:	06 2f       	mov	r16, r22
    1580:	f4 2e       	mov	r15, r20
    1582:	be 01       	movw	r22, r28
    1584:	6f 5f       	subi	r22, 0xFF	; 255
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	0e 94 34 0a 	call	0x1468	; 0x1468 <mpu6050_readByte>
    158c:	ff 20       	and	r15, r15
    158e:	59 f0       	breq	.+22     	; 0x15a6 <mpu6050_writeBit+0x3a>
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	b9 01       	movw	r22, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <mpu6050_writeBit+0x30>
    1598:	66 0f       	add	r22, r22
    159a:	77 1f       	adc	r23, r23
    159c:	0a 95       	dec	r16
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <mpu6050_writeBit+0x2c>
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	68 2b       	or	r22, r24
    15a4:	0b c0       	rjmp	.+22     	; 0x15bc <mpu6050_writeBit+0x50>
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	b9 01       	movw	r22, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <mpu6050_writeBit+0x46>
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	0a 95       	dec	r16
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <mpu6050_writeBit+0x42>
    15b6:	60 95       	com	r22
    15b8:	99 81       	ldd	r25, Y+1	; 0x01
    15ba:	69 23       	and	r22, r25
    15bc:	69 83       	std	Y+1, r22	; 0x01
    15be:	81 2f       	mov	r24, r17
    15c0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <mpu6050_writeByte>
    15c4:	0f 90       	pop	r0
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	08 95       	ret

000015d2 <mpu6050_setSleepDisabled>:
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	66 e0       	ldi	r22, 0x06	; 6
    15d6:	8b e6       	ldi	r24, 0x6B	; 107
    15d8:	0e 94 b6 0a 	call	0x156c	; 0x156c <mpu6050_writeBit>
    15dc:	08 95       	ret

000015de <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    15de:	0e 94 5e 08 	call	0x10bc	; 0x10bc <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15e2:	25 e3       	ldi	r18, 0x35	; 53
    15e4:	2a 95       	dec	r18
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <mpu6050_init+0x6>
    15e8:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	91 ee       	ldi	r25, 0xE1	; 225
    15ee:	24 e0       	ldi	r18, 0x04	; 4
    15f0:	81 50       	subi	r24, 0x01	; 1
    15f2:	90 40       	sbci	r25, 0x00	; 0
    15f4:	20 40       	sbci	r18, 0x00	; 0
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <mpu6050_init+0x12>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <mpu6050_init+0x1c>
    15fa:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    15fc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <mpu6050_setSleepDisabled>
    1600:	8f e3       	ldi	r24, 0x3F	; 63
    1602:	9c e9       	ldi	r25, 0x9C	; 156
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <mpu6050_init+0x26>
    1608:	00 c0       	rjmp	.+0      	; 0x160a <mpu6050_init+0x2c>
    160a:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    160c:	21 e0       	ldi	r18, 0x01	; 1
    160e:	43 e0       	ldi	r20, 0x03	; 3
    1610:	62 e0       	ldi	r22, 0x02	; 2
    1612:	8b e6       	ldi	r24, 0x6B	; 107
    1614:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1618:	23 e0       	ldi	r18, 0x03	; 3
    161a:	43 e0       	ldi	r20, 0x03	; 3
    161c:	62 e0       	ldi	r22, 0x02	; 2
    161e:	8a e1       	ldi	r24, 0x1A	; 26
    1620:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1624:	64 e0       	ldi	r22, 0x04	; 4
    1626:	89 e1       	ldi	r24, 0x19	; 25
    1628:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    162c:	23 e0       	ldi	r18, 0x03	; 3
    162e:	42 e0       	ldi	r20, 0x02	; 2
    1630:	64 e0       	ldi	r22, 0x04	; 4
    1632:	8b e1       	ldi	r24, 0x1B	; 27
    1634:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	42 e0       	ldi	r20, 0x02	; 2
    163c:	64 e0       	ldi	r22, 0x04	; 4
    163e:	8c e1       	ldi	r24, 0x1C	; 28
    1640:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <mpu6050_writeBits>
    1644:	08 95       	ret

00001646 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1646:	0f 93       	push	r16
    1648:	fc 01       	movw	r30, r24
    164a:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    164c:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    164e:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1650:	96 a9       	ldd	r25, Z+54	; 0x36
    1652:	94 17       	cp	r25, r20
    1654:	38 f0       	brcs	.+14     	; 0x1664 <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    1656:	08 17       	cp	r16, r24
    1658:	68 f4       	brcc	.+26     	; 0x1674 <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	04 17       	cp	r16, r20
    165e:	40 f0       	brcs	.+16     	; 0x1670 <u8g_IsBBXIntersection+0x2a>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1664:	08 17       	cp	r16, r24
    1666:	d0 f0       	brcs	.+52     	; 0x169c <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	04 17       	cp	r16, r20
    166c:	08 f0       	brcs	.+2      	; 0x1670 <u8g_IsBBXIntersection+0x2a>
    166e:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1670:	88 23       	and	r24, r24
    1672:	c9 f0       	breq	.+50     	; 0x16a6 <u8g_IsBBXIntersection+0x60>
    1674:	21 50       	subi	r18, 0x01	; 1
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    1676:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    1678:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    167a:	95 a9       	ldd	r25, Z+53	; 0x35
    167c:	96 17       	cp	r25, r22
    167e:	38 f0       	brcs	.+14     	; 0x168e <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    1680:	28 17       	cp	r18, r24
    1682:	70 f4       	brcc	.+28     	; 0x16a0 <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	26 17       	cp	r18, r22
    1688:	70 f0       	brcs	.+28     	; 0x16a6 <u8g_IsBBXIntersection+0x60>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	0c c0       	rjmp	.+24     	; 0x16a6 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    168e:	28 17       	cp	r18, r24
    1690:	48 f0       	brcs	.+18     	; 0x16a4 <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	26 17       	cp	r18, r22
    1696:	38 f0       	brcs	.+14     	; 0x16a6 <u8g_IsBBXIntersection+0x60>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    16a4:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    16a6:	0f 91       	pop	r16
    16a8:	08 95       	ret

000016aa <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    16aa:	db 01       	movw	r26, r22
    16ac:	14 96       	adiw	r26, 0x04	; 4
    16ae:	ed 91       	ld	r30, X+
    16b0:	fc 91       	ld	r31, X
    16b2:	15 97       	sbiw	r26, 0x05	; 5
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	09 95       	icall
    16bc:	08 95       	ret

000016be <u8g_SetChipSelect>:
    16be:	db 01       	movw	r26, r22
    16c0:	14 96       	adiw	r26, 0x04	; 4
    16c2:	ed 91       	ld	r30, X+
    16c4:	fc 91       	ld	r31, X
    16c6:	15 97       	sbiw	r26, 0x05	; 5
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	63 e0       	ldi	r22, 0x03	; 3
    16ce:	09 95       	icall
    16d0:	08 95       	ret

000016d2 <u8g_SetResetLow>:
    16d2:	db 01       	movw	r26, r22
    16d4:	14 96       	adiw	r26, 0x04	; 4
    16d6:	ed 91       	ld	r30, X+
    16d8:	fc 91       	ld	r31, X
    16da:	15 97       	sbiw	r26, 0x05	; 5
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	64 e0       	ldi	r22, 0x04	; 4
    16e4:	09 95       	icall
    16e6:	08 95       	ret

000016e8 <u8g_SetResetHigh>:
    16e8:	db 01       	movw	r26, r22
    16ea:	14 96       	adiw	r26, 0x04	; 4
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	15 97       	sbiw	r26, 0x05	; 5
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	64 e0       	ldi	r22, 0x04	; 4
    16fa:	09 95       	icall
    16fc:	08 95       	ret

000016fe <u8g_SetAddress>:
    16fe:	db 01       	movw	r26, r22
    1700:	14 96       	adiw	r26, 0x04	; 4
    1702:	ed 91       	ld	r30, X+
    1704:	fc 91       	ld	r31, X
    1706:	15 97       	sbiw	r26, 0x05	; 5
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	09 95       	icall
    1710:	08 95       	ret

00001712 <u8g_WriteByte>:
    1712:	db 01       	movw	r26, r22
    1714:	14 96       	adiw	r26, 0x04	; 4
    1716:	ed 91       	ld	r30, X+
    1718:	fc 91       	ld	r31, X
    171a:	15 97       	sbiw	r26, 0x05	; 5
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	65 e0       	ldi	r22, 0x05	; 5
    1722:	09 95       	icall
    1724:	08 95       	ret

00001726 <u8g_WriteSequence>:
    1726:	db 01       	movw	r26, r22
    1728:	14 96       	adiw	r26, 0x04	; 4
    172a:	ed 91       	ld	r30, X+
    172c:	fc 91       	ld	r31, X
    172e:	15 97       	sbiw	r26, 0x05	; 5
    1730:	66 e0       	ldi	r22, 0x06	; 6
    1732:	09 95       	icall
    1734:	08 95       	ret

00001736 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    1736:	af 92       	push	r10
    1738:	bf 92       	push	r11
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	6c 01       	movw	r12, r24
    174c:	7b 01       	movw	r14, r22
    174e:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    1750:	d0 e0       	ldi	r29, 0x00	; 0
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1752:	b1 2c       	mov	r11, r1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1754:	aa 24       	eor	r10, r10
    1756:	a3 94       	inc	r10
{
  uint8_t is_escape = 0;
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    1758:	f8 01       	movw	r30, r16
    175a:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    175c:	d1 11       	cpse	r29, r1
    175e:	0b c0       	rjmp	.+22     	; 0x1776 <u8g_WriteEscSeqP+0x40>
    {
      if ( value != 255 )
    1760:	cf 3f       	cpi	r28, 0xFF	; 255
    1762:	09 f4       	brne	.+2      	; 0x1766 <u8g_WriteEscSeqP+0x30>
    1764:	4a c0       	rjmp	.+148    	; 0x17fa <u8g_WriteEscSeqP+0xc4>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1766:	4c 2f       	mov	r20, r28
    1768:	b7 01       	movw	r22, r14
    176a:	c6 01       	movw	r24, r12
    176c:	0e 94 89 0b 	call	0x1712	; 0x1712 <u8g_WriteByte>
    1770:	81 11       	cpse	r24, r1
    1772:	48 c0       	rjmp	.+144    	; 0x1804 <u8g_WriteEscSeqP+0xce>
    1774:	4b c0       	rjmp	.+150    	; 0x180c <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1776:	cf 3f       	cpi	r28, 0xFF	; 255
    1778:	51 f4       	brne	.+20     	; 0x178e <u8g_WriteEscSeqP+0x58>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    177a:	4f ef       	ldi	r20, 0xFF	; 255
    177c:	b7 01       	movw	r22, r14
    177e:	c6 01       	movw	r24, r12
    1780:	0e 94 89 0b 	call	0x1712	; 0x1712 <u8g_WriteByte>
    1784:	88 23       	and	r24, r24
    1786:	09 f4       	brne	.+2      	; 0x178a <u8g_WriteEscSeqP+0x54>
    1788:	41 c0       	rjmp	.+130    	; 0x180c <u8g_WriteEscSeqP+0xd6>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    178a:	db 2d       	mov	r29, r11
    178c:	3b c0       	rjmp	.+118    	; 0x1804 <u8g_WriteEscSeqP+0xce>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    178e:	ce 3f       	cpi	r28, 0xFE	; 254
    1790:	e1 f1       	breq	.+120    	; 0x180a <u8g_WriteEscSeqP+0xd4>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1792:	c0 3f       	cpi	r28, 0xF0	; 240
    1794:	a0 f5       	brcc	.+104    	; 0x17fe <u8g_WriteEscSeqP+0xc8>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1796:	c0 3e       	cpi	r28, 0xE0	; 224
    1798:	40 f0       	brcs	.+16     	; 0x17aa <u8g_WriteEscSeqP+0x74>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    179a:	4c 2f       	mov	r20, r28
    179c:	4f 70       	andi	r20, 0x0F	; 15
    179e:	b7 01       	movw	r22, r14
    17a0:	c6 01       	movw	r24, r12
    17a2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    17a6:	db 2d       	mov	r29, r11
    17a8:	2d c0       	rjmp	.+90     	; 0x1804 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    17aa:	c0 3d       	cpi	r28, 0xD0	; 208
    17ac:	40 f0       	brcs	.+16     	; 0x17be <u8g_WriteEscSeqP+0x88>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    17ae:	4c 2f       	mov	r20, r28
    17b0:	4f 70       	andi	r20, 0x0F	; 15
    17b2:	b7 01       	movw	r22, r14
    17b4:	c6 01       	movw	r24, r12
    17b6:	0e 94 5f 0b 	call	0x16be	; 0x16be <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    17ba:	db 2d       	mov	r29, r11
    17bc:	23 c0       	rjmp	.+70     	; 0x1804 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    17be:	c0 3c       	cpi	r28, 0xC0	; 192
    17c0:	a0 f0       	brcs	.+40     	; 0x17ea <u8g_WriteEscSeqP+0xb4>
      {
        u8g_SetResetLow(u8g, dev);
    17c2:	b7 01       	movw	r22, r14
    17c4:	c6 01       	movw	r24, r12
    17c6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    17ca:	c2 95       	swap	r28
    17cc:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
    17ce:	ce 5f       	subi	r28, 0xFE	; 254
        u8g_Delay(value);
    17d0:	d0 e0       	ldi	r29, 0x00	; 0
    17d2:	ce 01       	movw	r24, r28
    17d4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    17d8:	b7 01       	movw	r22, r14
    17da:	c6 01       	movw	r24, r12
    17dc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <u8g_SetResetHigh>
        u8g_Delay(value);
    17e0:	ce 01       	movw	r24, r28
    17e2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    17e6:	db 2d       	mov	r29, r11
    17e8:	0d c0       	rjmp	.+26     	; 0x1804 <u8g_WriteEscSeqP+0xce>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    17ea:	cc 23       	and	r28, r28
    17ec:	54 f0       	brlt	.+20     	; 0x1802 <u8g_WriteEscSeqP+0xcc>
      {
        u8g_Delay(value);
    17ee:	8c 2f       	mov	r24, r28
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g_Delay>
      }
      is_escape = 0;
    17f6:	db 2d       	mov	r29, r11
    17f8:	05 c0       	rjmp	.+10     	; 0x1804 <u8g_WriteEscSeqP+0xce>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    17fa:	da 2d       	mov	r29, r10
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    17fe:	db 2d       	mov	r29, r11
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <u8g_WriteEscSeqP+0xce>
    1802:	db 2d       	mov	r29, r11
    }
    esc_seq++;
    1804:	0f 5f       	subi	r16, 0xFF	; 255
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    1808:	a7 cf       	rjmp	.-178    	; 0x1758 <u8g_WriteEscSeqP+0x22>
  return 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	08 95       	ret

00001822 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    1826:	fc 01       	movw	r30, r24
    1828:	23 a5       	ldd	r18, Z+43	; 0x2b
    182a:	22 23       	and	r18, r18
    182c:	b1 f0       	breq	.+44     	; 0x185a <u8g_com_arduino_ssd_start_sequence+0x38>
    182e:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    1830:	88 e7       	ldi	r24, 0x78	; 120
    1832:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <u8g_i2c_start>
    1836:	88 23       	and	r24, r24
    1838:	89 f0       	breq	.+34     	; 0x185c <u8g_com_arduino_ssd_start_sequence+0x3a>
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    183a:	8e a1       	ldd	r24, Y+38	; 0x26
    183c:	81 11       	cpse	r24, r1
    183e:	05 c0       	rjmp	.+10     	; 0x184a <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    1840:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <u8g_i2c_send_byte>
    1844:	81 11       	cpse	r24, r1
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <u8g_com_arduino_ssd_start_sequence+0x32>
    1848:	09 c0       	rjmp	.+18     	; 0x185c <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    184a:	80 e4       	ldi	r24, 0x40	; 64
    184c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <u8g_i2c_send_byte>
    1850:	88 23       	and	r24, r24
    1852:	21 f0       	breq	.+8      	; 0x185c <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    1854:	1b a6       	std	Y+43, r1	; 0x2b
  return 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	01 c0       	rjmp	.+2      	; 0x185c <u8g_com_arduino_ssd_start_sequence+0x3a>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    1862:	cf 92       	push	r12
    1864:	df 92       	push	r13
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	e4 2e       	mov	r14, r20
    1872:	89 01       	movw	r16, r18
  switch(msg)
    1874:	63 30       	cpi	r22, 0x03	; 3
    1876:	b1 f0       	breq	.+44     	; 0x18a4 <u8g_com_arduino_ssd_i2c_fn+0x42>
    1878:	30 f4       	brcc	.+12     	; 0x1886 <u8g_com_arduino_ssd_i2c_fn+0x24>
    187a:	61 30       	cpi	r22, 0x01	; 1
    187c:	69 f0       	breq	.+26     	; 0x1898 <u8g_com_arduino_ssd_i2c_fn+0x36>
    187e:	62 30       	cpi	r22, 0x02	; 2
    1880:	09 f4       	brne	.+2      	; 0x1884 <u8g_com_arduino_ssd_i2c_fn+0x22>
    1882:	6f c0       	rjmp	.+222    	; 0x1962 <u8g_com_arduino_ssd_i2c_fn+0x100>
    1884:	74 c0       	rjmp	.+232    	; 0x196e <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1886:	66 30       	cpi	r22, 0x06	; 6
    1888:	41 f1       	breq	.+80     	; 0x18da <u8g_com_arduino_ssd_i2c_fn+0x78>
    188a:	67 30       	cpi	r22, 0x07	; 7
    188c:	09 f4       	brne	.+2      	; 0x1890 <u8g_com_arduino_ssd_i2c_fn+0x2e>
    188e:	48 c0       	rjmp	.+144    	; 0x1920 <u8g_com_arduino_ssd_i2c_fn+0xbe>
    1890:	65 30       	cpi	r22, 0x05	; 5
    1892:	09 f0       	breq	.+2      	; 0x1896 <u8g_com_arduino_ssd_i2c_fn+0x34>
    1894:	6c c0       	rjmp	.+216    	; 0x196e <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1896:	10 c0       	rjmp	.+32     	; 0x18b8 <u8g_com_arduino_ssd_i2c_fn+0x56>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    1898:	fc 01       	movw	r30, r24
    189a:	86 a5       	ldd	r24, Z+46	; 0x2e
    189c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <u8g_i2c_init>
      }
      */
#endif
      break;
  }
  return 1;
    18a0:	c1 e0       	ldi	r28, 0x01	; 1
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);

      break;
    18a2:	6a c0       	rjmp	.+212    	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    18a4:	fc 01       	movw	r30, r24
    18a6:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    18a8:	21 e0       	ldi	r18, 0x01	; 1
    18aa:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    18ac:	41 11       	cpse	r20, r1
    18ae:	61 c0       	rjmp	.+194    	; 0x1972 <u8g_com_arduino_ssd_i2c_fn+0x110>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    18b0:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <u8g_i2c_stop>
      }
      */
#endif
      break;
  }
  return 1;
    18b4:	c1 e0       	ldi	r28, 0x01	; 1
    18b6:	60 c0       	rjmp	.+192    	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    18b8:	0e 94 11 0c 	call	0x1822	; 0x1822 <u8g_com_arduino_ssd_start_sequence>
    18bc:	c8 2f       	mov	r28, r24
    18be:	81 11       	cpse	r24, r1
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <u8g_com_arduino_ssd_i2c_fn+0x66>
	return u8g_i2c_stop(), 0;
    18c2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <u8g_i2c_stop>
    18c6:	58 c0       	rjmp	.+176    	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    18c8:	8e 2d       	mov	r24, r14
    18ca:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <u8g_i2c_send_byte>
    18ce:	c8 2f       	mov	r28, r24
    18d0:	81 11       	cpse	r24, r1
    18d2:	51 c0       	rjmp	.+162    	; 0x1976 <u8g_com_arduino_ssd_i2c_fn+0x114>
	return u8g_i2c_stop(), 0;
    18d4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <u8g_i2c_stop>
    18d8:	4f c0       	rjmp	.+158    	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    18da:	0e 94 11 0c 	call	0x1822	; 0x1822 <u8g_com_arduino_ssd_start_sequence>
    18de:	c8 2f       	mov	r28, r24
    18e0:	88 23       	and	r24, r24
    18e2:	21 f0       	breq	.+8      	; 0x18ec <u8g_com_arduino_ssd_i2c_fn+0x8a>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    18e4:	e1 10       	cpse	r14, r1
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <u8g_com_arduino_ssd_i2c_fn+0x90>
      }
      */
#endif
      break;
  }
  return 1;
    18e8:	c1 e0       	ldi	r28, 0x01	; 1
    18ea:	46 c0       	rjmp	.+140    	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    18ec:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <u8g_i2c_stop>
    18f0:	43 c0       	rjmp	.+134    	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
    18f2:	68 01       	movw	r12, r16
    18f4:	ea 94       	dec	r14
    18f6:	8e 2d       	mov	r24, r14
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	08 0f       	add	r16, r24
    18fe:	19 1f       	adc	r17, r25
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    1900:	f6 01       	movw	r30, r12
    1902:	81 91       	ld	r24, Z+
    1904:	6f 01       	movw	r12, r30
    1906:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <u8g_i2c_send_byte>
    190a:	c8 2f       	mov	r28, r24
    190c:	81 11       	cpse	r24, r1
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <u8g_com_arduino_ssd_i2c_fn+0xb4>
	    return u8g_i2c_stop(), 0;
    1910:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <u8g_i2c_stop>
    1914:	31 c0       	rjmp	.+98     	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1916:	c0 16       	cp	r12, r16
    1918:	d1 06       	cpc	r13, r17
    191a:	91 f7       	brne	.-28     	; 0x1900 <u8g_com_arduino_ssd_i2c_fn+0x9e>
      }
      */
#endif
      break;
  }
  return 1;
    191c:	c1 e0       	ldi	r28, 0x01	; 1
    191e:	2c c0       	rjmp	.+88     	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1920:	0e 94 11 0c 	call	0x1822	; 0x1822 <u8g_com_arduino_ssd_start_sequence>
    1924:	c8 2f       	mov	r28, r24
    1926:	88 23       	and	r24, r24
    1928:	21 f0       	breq	.+8      	; 0x1932 <u8g_com_arduino_ssd_i2c_fn+0xd0>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    192a:	e1 10       	cpse	r14, r1
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <u8g_com_arduino_ssd_i2c_fn+0xd6>
      }
      */
#endif
      break;
  }
  return 1;
    192e:	c1 e0       	ldi	r28, 0x01	; 1
    1930:	23 c0       	rjmp	.+70     	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1932:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <u8g_i2c_stop>
    1936:	20 c0       	rjmp	.+64     	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1938:	ea 94       	dec	r14
    193a:	f1 2c       	mov	r15, r1
    193c:	ff ef       	ldi	r31, 0xFF	; 255
    193e:	ef 1a       	sub	r14, r31
    1940:	ff 0a       	sbc	r15, r31
    1942:	e0 0e       	add	r14, r16
    1944:	f1 1e       	adc	r15, r17
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    1946:	f8 01       	movw	r30, r16
    1948:	84 91       	lpm	r24, Z
    194a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <u8g_i2c_send_byte>
    194e:	c8 2f       	mov	r28, r24
    1950:	88 23       	and	r24, r24
    1952:	91 f0       	breq	.+36     	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
	    return 0;
          ptr++;
    1954:	0f 5f       	subi	r16, 0xFF	; 255
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1958:	0e 15       	cp	r16, r14
    195a:	1f 05       	cpc	r17, r15
    195c:	a1 f7       	brne	.-24     	; 0x1946 <u8g_com_arduino_ssd_i2c_fn+0xe4>
      }
      */
#endif
      break;
  }
  return 1;
    195e:	c1 e0       	ldi	r28, 0x01	; 1
    1960:	0b c0       	rjmp	.+22     	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    1962:	fc 01       	movw	r30, r24
    1964:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    1966:	21 e0       	ldi	r18, 0x01	; 1
    1968:	23 a7       	std	Z+43, r18	; 0x2b
      }
      */
#endif
      break;
  }
  return 1;
    196a:	c1 e0       	ldi	r28, 0x01	; 1
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
  }
  return 1;
    196e:	c1 e0       	ldi	r28, 0x01	; 1
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1972:	c1 e0       	ldi	r28, 0x01	; 1
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1976:	c1 e0       	ldi	r28, 0x01	; 1
}
    1978:	8c 2f       	mov	r24, r28
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	df 90       	pop	r13
    1986:	cf 90       	pop	r12
    1988:	08 95       	ret

0000198a <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    198a:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <u8g_i2c_err_code>
    198e:	91 11       	cpse	r25, r1
    1990:	04 c0       	rjmp	.+8      	; 0x199a <u8g_i2c_set_error+0x10>
    1992:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <u8g_i2c_err_code>
    1996:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <__data_end>
    199a:	08 95       	ret

0000199c <u8g_i2c_clear_error>:
    199c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <u8g_i2c_err_code>
    19a0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
    19a4:	08 95       	ret

000019a6 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    19a6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u8g_i2c_opt>
  TWSR = 0;
    19aa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    19ae:	84 ff       	sbrs	r24, 4
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <u8g_i2c_init+0x14>
  {
    TWBR = F_CPU/(2*400000)-8;
    19b2:	8c e0       	ldi	r24, 0x0C	; 12
    19b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <u8g_i2c_init+0x1a>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    19ba:	88 e4       	ldi	r24, 0x48	; 72
    19bc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    19c0:	0e 94 ce 0c 	call	0x199c	; 0x199c <u8g_i2c_clear_error>
    19c4:	08 95       	ret

000019c6 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <u8g_i2c_wait+0x8>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    19d2:	20 ed       	ldi	r18, 0xD0	; 208
    19d4:	37 e0       	ldi	r19, 0x07	; 7
    19d6:	3a 83       	std	Y+2, r19	; 0x02
    19d8:	29 83       	std	Y+1, r18	; 0x01
  while( !(TWCR & mask) )
    19da:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    19de:	98 23       	and	r25, r24
    19e0:	01 f5       	brne	.+64     	; 0x1a22 <u8g_i2c_wait+0x5c>
  {
      if ( cnt == 0 )
    19e2:	29 81       	ldd	r18, Y+1	; 0x01
    19e4:	3a 81       	ldd	r19, Y+2	; 0x02
    19e6:	23 2b       	or	r18, r19
    19e8:	39 f0       	breq	.+14     	; 0x19f8 <u8g_i2c_wait+0x32>
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    19ea:	ec eb       	ldi	r30, 0xBC	; 188
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	0e c0       	rjmp	.+28     	; 0x1a0c <u8g_i2c_wait+0x46>
  {
      if ( cnt == 0 )
    19f0:	29 81       	ldd	r18, Y+1	; 0x01
    19f2:	3a 81       	ldd	r19, Y+2	; 0x02
    19f4:	23 2b       	or	r18, r19
    19f6:	51 f4       	brne	.+20     	; 0x1a0c <u8g_i2c_wait+0x46>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    19f8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    19fc:	18 2f       	mov	r17, r24
    19fe:	12 70       	andi	r17, 0x02	; 2
    1a00:	81 fd       	sbrc	r24, 1
    1a02:	11 c0       	rjmp	.+34     	; 0x1a26 <u8g_i2c_wait+0x60>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	0e 94 c5 0c 	call	0x198a	; 0x198a <u8g_i2c_set_error>
	  return 0; /* error */
    1a0a:	0e c0       	rjmp	.+28     	; 0x1a28 <u8g_i2c_wait+0x62>
	}
      }
      cnt--;
    1a0c:	29 81       	ldd	r18, Y+1	; 0x01
    1a0e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a10:	21 50       	subi	r18, 0x01	; 1
    1a12:	31 09       	sbc	r19, r1
    1a14:	3a 83       	std	Y+2, r19	; 0x02
    1a16:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1a18:	90 81       	ld	r25, Z
    1a1a:	98 23       	and	r25, r24
    1a1c:	49 f3       	breq	.-46     	; 0x19f0 <u8g_i2c_wait+0x2a>
	  return 0; /* error */
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
    1a1e:	11 e0       	ldi	r17, 0x01	; 1
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <u8g_i2c_wait+0x62>
    1a22:	11 e0       	ldi	r17, 0x01	; 1
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <u8g_i2c_wait+0x62>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    1a26:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    1a28:	81 2f       	mov	r24, r17
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	08 95       	ret

00001a36 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	d8 2f       	mov	r29, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    1a3c:	94 ea       	ldi	r25, 0xA4	; 164
    1a3e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	80 e8       	ldi	r24, 0x80	; 128
    1a46:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <u8g_i2c_wait>
    1a4a:	c8 2f       	mov	r28, r24
    1a4c:	88 23       	and	r24, r24
    1a4e:	61 f1       	breq	.+88     	; 0x1aa8 <u8g_i2c_start+0x72>
    return 0;
  
  status = TW_STATUS;
    1a50:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1a54:	98 7f       	andi	r25, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    1a56:	98 30       	cpi	r25, 0x08	; 8
    1a58:	41 f0       	breq	.+16     	; 0x1a6a <u8g_i2c_start+0x34>
    1a5a:	90 31       	cpi	r25, 0x10	; 16
    1a5c:	31 f0       	breq	.+12     	; 0x1a6a <u8g_i2c_start+0x34>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	0e 94 c5 0c 	call	0x198a	; 0x198a <u8g_i2c_set_error>
    return 0;
    1a66:	c0 e0       	ldi	r28, 0x00	; 0
    1a68:	1f c0       	rjmp	.+62     	; 0x1aa8 <u8g_i2c_start+0x72>
  }

  /* set slave address */  
  TWDR = sla;
    1a6a:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1a6e:	84 e8       	ldi	r24, 0x84	; 132
    1a70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	80 e8       	ldi	r24, 0x80	; 128
    1a78:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <u8g_i2c_wait>
    1a7c:	c8 2f       	mov	r28, r24
    1a7e:	88 23       	and	r24, r24
    1a80:	99 f0       	breq	.+38     	; 0x1aa8 <u8g_i2c_start+0x72>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1a82:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    1a86:	c8 2f       	mov	r28, r24
    1a88:	c2 70       	andi	r28, 0x02	; 2
    1a8a:	81 fd       	sbrc	r24, 1
    1a8c:	0a c0       	rjmp	.+20     	; 0x1aa2 <u8g_i2c_start+0x6c>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    1a8e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1a92:	88 7f       	andi	r24, 0xF8	; 248
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    1a94:	88 31       	cpi	r24, 0x18	; 24
    1a96:	39 f0       	breq	.+14     	; 0x1aa6 <u8g_i2c_start+0x70>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    1a98:	62 e0       	ldi	r22, 0x02	; 2
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	0e 94 c5 0c 	call	0x198a	; 0x198a <u8g_i2c_set_error>
      return 0;
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <u8g_i2c_start+0x72>
    }
  }

   return 1;
    1aa2:	c1 e0       	ldi	r28, 0x01	; 1
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <u8g_i2c_start+0x72>
    1aa6:	c1 e0       	ldi	r28, 0x01	; 1
}
    1aa8:	8c 2f       	mov	r24, r28
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    1ab0:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    1ab2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1ab6:	84 e8       	ldi	r24, 0x84	; 132
    1ab8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    1abc:	63 e0       	ldi	r22, 0x03	; 3
    1abe:	80 e8       	ldi	r24, 0x80	; 128
    1ac0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <u8g_i2c_wait>
    1ac4:	c8 2f       	mov	r28, r24
    1ac6:	88 23       	and	r24, r24
    1ac8:	99 f0       	breq	.+38     	; 0x1af0 <u8g_i2c_send_byte+0x40>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1aca:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    1ace:	c8 2f       	mov	r28, r24
    1ad0:	c2 70       	andi	r28, 0x02	; 2
    1ad2:	81 fd       	sbrc	r24, 1
    1ad4:	0a c0       	rjmp	.+20     	; 0x1aea <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    1ad6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1ada:	88 7f       	andi	r24, 0xF8	; 248
    if ( status != TW_MT_DATA_ACK )
    1adc:	88 32       	cpi	r24, 0x28	; 40
    1ade:	39 f0       	breq	.+14     	; 0x1aee <u8g_i2c_send_byte+0x3e>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    1ae0:	63 e0       	ldi	r22, 0x03	; 3
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	0e 94 c5 0c 	call	0x198a	; 0x198a <u8g_i2c_set_error>
      return 0;
    1ae8:	03 c0       	rjmp	.+6      	; 0x1af0 <u8g_i2c_send_byte+0x40>
    }
  }

  return 1;  
    1aea:	c1 e0       	ldi	r28, 0x01	; 1
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <u8g_i2c_send_byte+0x40>
    1aee:	c1 e0       	ldi	r28, 0x01	; 1
}
    1af0:	8c 2f       	mov	r24, r28
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    1af6:	84 e9       	ldi	r24, 0x94	; 148
    1af8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    1afc:	64 e0       	ldi	r22, 0x04	; 4
    1afe:	80 e1       	ldi	r24, 0x10	; 16
    1b00:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <u8g_i2c_wait>
    1b04:	08 95       	ret

00001b06 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	39 f0       	breq	.+14     	; 0x1b18 <u8g_Delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b0a:	2e e9       	ldi	r18, 0x9E	; 158
    1b0c:	3f e0       	ldi	r19, 0x0F	; 15
    1b0e:	f9 01       	movw	r30, r18
    1b10:	31 97       	sbiw	r30, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1b14:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1b16:	d9 f7       	brne	.-10     	; 0x1b0e <u8g_Delay+0x8>
    1b18:	08 95       	ret

00001b1a <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	7c 01       	movw	r14, r24
    1b2e:	8b 01       	movw	r16, r22
    1b30:	c4 2f       	mov	r28, r20
    1b32:	69 01       	movw	r12, r18
  switch(msg)
    1b34:	40 31       	cpi	r20, 0x10	; 16
    1b36:	99 f1       	breq	.+102    	; 0x1b9e <u8g_dev_ssd1306_128x64_fn+0x84>
    1b38:	18 f4       	brcc	.+6      	; 0x1b40 <u8g_dev_ssd1306_128x64_fn+0x26>
    1b3a:	4a 30       	cpi	r20, 0x0A	; 10
    1b3c:	31 f0       	breq	.+12     	; 0x1b4a <u8g_dev_ssd1306_128x64_fn+0x30>
    1b3e:	3b c0       	rjmp	.+118    	; 0x1bb6 <u8g_dev_ssd1306_128x64_fn+0x9c>
    1b40:	41 31       	cpi	r20, 0x11	; 17
    1b42:	99 f1       	breq	.+102    	; 0x1baa <u8g_dev_ssd1306_128x64_fn+0x90>
    1b44:	45 31       	cpi	r20, 0x15	; 21
    1b46:	59 f0       	breq	.+22     	; 0x1b5e <u8g_dev_ssd1306_128x64_fn+0x44>
    1b48:	36 c0       	rjmp	.+108    	; 0x1bb6 <u8g_dev_ssd1306_128x64_fn+0x9c>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    1b4a:	42 e0       	ldi	r20, 0x02	; 2
    1b4c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    1b50:	4c ee       	ldi	r20, 0xEC	; 236
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	b8 01       	movw	r22, r16
    1b56:	c7 01       	movw	r24, r14
    1b58:	0e 94 9b 0b 	call	0x1736	; 0x1736 <u8g_WriteEscSeqP>
      break;
    1b5c:	2c c0       	rjmp	.+88     	; 0x1bb6 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1b5e:	fb 01       	movw	r30, r22
    1b60:	a2 80       	ldd	r10, Z+2	; 0x02
    1b62:	b3 80       	ldd	r11, Z+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    1b64:	44 ee       	ldi	r20, 0xE4	; 228
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	0e 94 9b 0b 	call	0x1736	; 0x1736 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    1b6c:	f5 01       	movw	r30, r10
    1b6e:	44 81       	ldd	r20, Z+4	; 0x04
    1b70:	40 6b       	ori	r20, 0xB0	; 176
    1b72:	b8 01       	movw	r22, r16
    1b74:	c7 01       	movw	r24, r14
    1b76:	0e 94 89 0b 	call	0x1712	; 0x1712 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	b8 01       	movw	r22, r16
    1b7e:	c7 01       	movw	r24, r14
    1b80:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    1b84:	a8 01       	movw	r20, r16
    1b86:	b7 01       	movw	r22, r14
    1b88:	c5 01       	movw	r24, r10
    1b8a:	0e 94 a8 11 	call	0x2350	; 0x2350 <u8g_pb_WriteBuffer>
    1b8e:	88 23       	and	r24, r24
    1b90:	c1 f0       	breq	.+48     	; 0x1bc2 <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	b8 01       	movw	r22, r16
    1b96:	c7 01       	movw	r24, r14
    1b98:	0e 94 5f 0b 	call	0x16be	; 0x16be <u8g_SetChipSelect>
      }
      break;
    1b9c:	0c c0       	rjmp	.+24     	; 0x1bb6 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    1b9e:	4b ed       	ldi	r20, 0xDB	; 219
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <u8g_WriteEscSeqP>
      return 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	0c c0       	rjmp	.+24     	; 0x1bc2 <u8g_dev_ssd1306_128x64_fn+0xa8>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    1baa:	40 ed       	ldi	r20, 0xD0	; 208
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	0e 94 9b 0b 	call	0x1736	; 0x1736 <u8g_WriteEscSeqP>
      return 1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	06 c0       	rjmp	.+12     	; 0x1bc2 <u8g_dev_ssd1306_128x64_fn+0xa8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    1bb6:	96 01       	movw	r18, r12
    1bb8:	4c 2f       	mov	r20, r28
    1bba:	b8 01       	movw	r22, r16
    1bbc:	c7 01       	movw	r24, r14
    1bbe:	0e 94 1c 12 	call	0x2438	; 0x2438 <u8g_dev_pb8v1_base_fn>
}
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	ff 90       	pop	r15
    1bca:	ef 90       	pop	r14
    1bcc:	df 90       	pop	r13
    1bce:	cf 90       	pop	r12
    1bd0:	bf 90       	pop	r11
    1bd2:	af 90       	pop	r10
    1bd4:	08 95       	ret

00001bd6 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	e6 0f       	add	r30, r22
    1bda:	f1 1d       	adc	r31, r1
    1bdc:	84 91       	lpm	r24, Z
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	98 2f       	mov	r25, r24
    1be2:	88 27       	eor	r24, r24
    1be4:	31 96       	adiw	r30, 0x01	; 1
    1be6:	e4 91       	lpm	r30, Z
    1be8:	8e 0f       	add	r24, r30
    1bea:	91 1d       	adc	r25, r1
    1bec:	08 95       	ret

00001bee <u8g_font_GetFormat>:
    1bee:	fc 01       	movw	r30, r24
    1bf0:	84 91       	lpm	r24, Z
    1bf2:	08 95       	ret

00001bf4 <u8g_font_GetFontGlyphStructureSize>:
    1bf4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <u8g_font_GetFormat>
    1bf8:	88 23       	and	r24, r24
    1bfa:	21 f0       	breq	.+8      	; 0x1c04 <u8g_font_GetFontGlyphStructureSize+0x10>
    1bfc:	82 30       	cpi	r24, 0x02	; 2
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <u8g_font_GetFontGlyphStructureSize+0x10>
    1c00:	83 e0       	ldi	r24, 0x03	; 3
    1c02:	08 95       	ret
    1c04:	86 e0       	ldi	r24, 0x06	; 6
    1c06:	08 95       	ret

00001c08 <u8g_font_calc_vref_font>:
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	08 95       	ret

00001c0c <u8g_font_GetEncoding65Pos>:
    1c0c:	66 e0       	ldi	r22, 0x06	; 6
    1c0e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <u8g_font_get_word>
    1c12:	08 95       	ret

00001c14 <u8g_font_GetEncoding97Pos>:
    1c14:	68 e0       	ldi	r22, 0x08	; 8
    1c16:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <u8g_font_get_word>
    1c1a:	08 95       	ret

00001c1c <u8g_font_GetFontStartEncoding>:
    1c1c:	0a 96       	adiw	r24, 0x0a	; 10
    1c1e:	fc 01       	movw	r30, r24
    1c20:	84 91       	lpm	r24, Z
    1c22:	08 95       	ret

00001c24 <u8g_font_GetFontEndEncoding>:
    1c24:	0b 96       	adiw	r24, 0x0b	; 11
    1c26:	fc 01       	movw	r30, r24
    1c28:	84 91       	lpm	r24, Z
    1c2a:	08 95       	ret

00001c2c <u8g_GetGlyph>:
    1c2c:	af 92       	push	r10
    1c2e:	bf 92       	push	r11
    1c30:	cf 92       	push	r12
    1c32:	df 92       	push	r13
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	7c 01       	movw	r14, r24
    1c42:	b6 2e       	mov	r11, r22
    1c44:	dc 01       	movw	r26, r24
    1c46:	14 96       	adiw	r26, 0x04	; 4
    1c48:	cd 91       	ld	r28, X+
    1c4a:	dc 91       	ld	r29, X
    1c4c:	15 97       	sbiw	r26, 0x05	; 5
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <u8g_font_GetFormat>
    1c54:	18 2f       	mov	r17, r24
    1c56:	f7 01       	movw	r30, r14
    1c58:	84 81       	ldd	r24, Z+4	; 0x04
    1c5a:	95 81       	ldd	r25, Z+5	; 0x05
    1c5c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <u8g_font_GetFontGlyphStructureSize>
    1c60:	d8 2e       	mov	r13, r24
    1c62:	11 30       	cpi	r17, 0x01	; 1
    1c64:	29 f4       	brne	.+10     	; 0x1c70 <u8g_GetGlyph+0x44>
    1c66:	0f 2e       	mov	r0, r31
    1c68:	ff e0       	ldi	r31, 0x0F	; 15
    1c6a:	af 2e       	mov	r10, r31
    1c6c:	f0 2d       	mov	r31, r0
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <u8g_GetGlyph+0x48>
    1c70:	aa 24       	eor	r10, r10
    1c72:	aa 94       	dec	r10
    1c74:	d7 01       	movw	r26, r14
    1c76:	14 96       	adiw	r26, 0x04	; 4
    1c78:	8d 91       	ld	r24, X+
    1c7a:	9c 91       	ld	r25, X
    1c7c:	15 97       	sbiw	r26, 0x05	; 5
    1c7e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <u8g_font_GetFontStartEncoding>
    1c82:	18 2f       	mov	r17, r24
    1c84:	f7 01       	movw	r30, r14
    1c86:	84 81       	ldd	r24, Z+4	; 0x04
    1c88:	95 81       	ldd	r25, Z+5	; 0x05
    1c8a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <u8g_font_GetFontEndEncoding>
    1c8e:	08 2f       	mov	r16, r24
    1c90:	d7 01       	movw	r26, r14
    1c92:	14 96       	adiw	r26, 0x04	; 4
    1c94:	8d 91       	ld	r24, X+
    1c96:	9c 91       	ld	r25, X
    1c98:	15 97       	sbiw	r26, 0x05	; 5
    1c9a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <u8g_font_GetEncoding97Pos>
    1c9e:	b0 e6       	ldi	r27, 0x60	; 96
    1ca0:	bb 15       	cp	r27, r11
    1ca2:	30 f4       	brcc	.+12     	; 0x1cb0 <u8g_GetGlyph+0x84>
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	21 f0       	breq	.+8      	; 0x1cb0 <u8g_GetGlyph+0x84>
    1ca8:	c8 0f       	add	r28, r24
    1caa:	d9 1f       	adc	r29, r25
    1cac:	11 e6       	ldi	r17, 0x61	; 97
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <u8g_GetGlyph+0xa2>
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	84 81       	ldd	r24, Z+4	; 0x04
    1cb4:	95 81       	ldd	r25, Z+5	; 0x05
    1cb6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <u8g_font_GetEncoding65Pos>
    1cba:	f0 e4       	ldi	r31, 0x40	; 64
    1cbc:	fb 15       	cp	r31, r11
    1cbe:	30 f4       	brcc	.+12     	; 0x1ccc <u8g_GetGlyph+0xa0>
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	21 f0       	breq	.+8      	; 0x1ccc <u8g_GetGlyph+0xa0>
    1cc4:	c8 0f       	add	r28, r24
    1cc6:	d9 1f       	adc	r29, r25
    1cc8:	11 e4       	ldi	r17, 0x41	; 65
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <u8g_GetGlyph+0xa2>
    1ccc:	61 96       	adiw	r28, 0x11	; 17
    1cce:	0b 15       	cp	r16, r11
    1cd0:	90 f4       	brcc	.+36     	; 0x1cf6 <u8g_GetGlyph+0xca>
    1cd2:	d7 01       	movw	r26, r14
    1cd4:	50 96       	adiw	r26, 0x10	; 16
    1cd6:	1c 92       	st	X, r1
    1cd8:	50 97       	sbiw	r26, 0x10	; 16
    1cda:	53 96       	adiw	r26, 0x13	; 19
    1cdc:	1c 92       	st	X, r1
    1cde:	53 97       	sbiw	r26, 0x13	; 19
    1ce0:	54 96       	adiw	r26, 0x14	; 20
    1ce2:	1c 92       	st	X, r1
    1ce4:	54 97       	sbiw	r26, 0x14	; 20
    1ce6:	51 96       	adiw	r26, 0x11	; 17
    1ce8:	1c 92       	st	X, r1
    1cea:	51 97       	sbiw	r26, 0x11	; 17
    1cec:	52 96       	adiw	r26, 0x12	; 18
    1cee:	1c 92       	st	X, r1
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	75 c0       	rjmp	.+234    	; 0x1de0 <u8g_GetGlyph+0x1b4>
    1cf6:	01 17       	cp	r16, r17
    1cf8:	08 f4       	brcc	.+2      	; 0x1cfc <u8g_GetGlyph+0xd0>
    1cfa:	6a c0       	rjmp	.+212    	; 0x1dd0 <u8g_GetGlyph+0x1a4>
    1cfc:	2d 2d       	mov	r18, r13
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	6e 01       	movw	r12, r28
    1d02:	fe 01       	movw	r30, r28
    1d04:	94 91       	lpm	r25, Z
    1d06:	9f 3f       	cpi	r25, 0xFF	; 255
    1d08:	11 f4       	brne	.+4      	; 0x1d0e <u8g_GetGlyph+0xe2>
    1d0a:	21 96       	adiw	r28, 0x01	; 1
    1d0c:	5d c0       	rjmp	.+186    	; 0x1dc8 <u8g_GetGlyph+0x19c>
    1d0e:	1b 11       	cpse	r17, r11
    1d10:	52 c0       	rjmp	.+164    	; 0x1db6 <u8g_GetGlyph+0x18a>
    1d12:	8e 01       	movw	r16, r28
    1d14:	d7 01       	movw	r26, r14
    1d16:	14 96       	adiw	r26, 0x04	; 4
    1d18:	8d 91       	ld	r24, X+
    1d1a:	9c 91       	ld	r25, X
    1d1c:	15 97       	sbiw	r26, 0x05	; 5
    1d1e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <u8g_font_GetFormat>
    1d22:	88 23       	and	r24, r24
    1d24:	11 f0       	breq	.+4      	; 0x1d2a <u8g_GetGlyph+0xfe>
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	f1 f4       	brne	.+60     	; 0x1d66 <u8g_GetGlyph+0x13a>
    1d2a:	f6 01       	movw	r30, r12
    1d2c:	c4 90       	lpm	r12, Z
    1d2e:	d7 01       	movw	r26, r14
    1d30:	53 96       	adiw	r26, 0x13	; 19
    1d32:	cc 92       	st	X, r12
    1d34:	53 97       	sbiw	r26, 0x13	; 19
    1d36:	f8 01       	movw	r30, r16
    1d38:	31 96       	adiw	r30, 0x01	; 1
    1d3a:	e4 91       	lpm	r30, Z
    1d3c:	54 96       	adiw	r26, 0x14	; 20
    1d3e:	ec 93       	st	X, r30
    1d40:	54 97       	sbiw	r26, 0x14	; 20
    1d42:	f8 01       	movw	r30, r16
    1d44:	33 96       	adiw	r30, 0x03	; 3
    1d46:	e4 91       	lpm	r30, Z
    1d48:	50 96       	adiw	r26, 0x10	; 16
    1d4a:	ec 93       	st	X, r30
    1d4c:	50 97       	sbiw	r26, 0x10	; 16
    1d4e:	f8 01       	movw	r30, r16
    1d50:	34 96       	adiw	r30, 0x04	; 4
    1d52:	e4 91       	lpm	r30, Z
    1d54:	51 96       	adiw	r26, 0x11	; 17
    1d56:	ec 93       	st	X, r30
    1d58:	51 97       	sbiw	r26, 0x11	; 17
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	35 96       	adiw	r30, 0x05	; 5
    1d5e:	e4 91       	lpm	r30, Z
    1d60:	52 96       	adiw	r26, 0x12	; 18
    1d62:	ec 93       	st	X, r30
    1d64:	25 c0       	rjmp	.+74     	; 0x1db0 <u8g_GetGlyph+0x184>
    1d66:	fe 01       	movw	r30, r28
    1d68:	84 91       	lpm	r24, Z
    1d6a:	98 2f       	mov	r25, r24
    1d6c:	9f 70       	andi	r25, 0x0F	; 15
    1d6e:	92 50       	subi	r25, 0x02	; 2
    1d70:	d7 01       	movw	r26, r14
    1d72:	52 96       	adiw	r26, 0x12	; 18
    1d74:	9c 93       	st	X, r25
    1d76:	52 97       	sbiw	r26, 0x12	; 18
    1d78:	c8 2e       	mov	r12, r24
    1d7a:	c6 94       	lsr	r12
    1d7c:	c6 94       	lsr	r12
    1d7e:	c6 94       	lsr	r12
    1d80:	c6 94       	lsr	r12
    1d82:	51 96       	adiw	r26, 0x11	; 17
    1d84:	cc 92       	st	X, r12
    1d86:	51 97       	sbiw	r26, 0x11	; 17
    1d88:	fe 01       	movw	r30, r28
    1d8a:	31 96       	adiw	r30, 0x01	; 1
    1d8c:	e4 91       	lpm	r30, Z
    1d8e:	8e 2f       	mov	r24, r30
    1d90:	8f 70       	andi	r24, 0x0F	; 15
    1d92:	54 96       	adiw	r26, 0x14	; 20
    1d94:	8c 93       	st	X, r24
    1d96:	54 97       	sbiw	r26, 0x14	; 20
    1d98:	e2 95       	swap	r30
    1d9a:	ef 70       	andi	r30, 0x0F	; 15
    1d9c:	53 96       	adiw	r26, 0x13	; 19
    1d9e:	ec 93       	st	X, r30
    1da0:	53 97       	sbiw	r26, 0x13	; 19
    1da2:	fe 01       	movw	r30, r28
    1da4:	32 96       	adiw	r30, 0x02	; 2
    1da6:	e4 91       	lpm	r30, Z
    1da8:	e2 95       	swap	r30
    1daa:	ef 70       	andi	r30, 0x0F	; 15
    1dac:	50 96       	adiw	r26, 0x10	; 16
    1dae:	ec 93       	st	X, r30
    1db0:	8c 2f       	mov	r24, r28
    1db2:	9d 2f       	mov	r25, r29
    1db4:	15 c0       	rjmp	.+42     	; 0x1de0 <u8g_GetGlyph+0x1b4>
    1db6:	fe 01       	movw	r30, r28
    1db8:	32 96       	adiw	r30, 0x02	; 2
    1dba:	e4 91       	lpm	r30, Z
    1dbc:	ea 21       	and	r30, r10
    1dbe:	c9 01       	movw	r24, r18
    1dc0:	8e 0f       	add	r24, r30
    1dc2:	91 1d       	adc	r25, r1
    1dc4:	c8 0f       	add	r28, r24
    1dc6:	d9 1f       	adc	r29, r25
    1dc8:	10 17       	cp	r17, r16
    1dca:	11 f0       	breq	.+4      	; 0x1dd0 <u8g_GetGlyph+0x1a4>
    1dcc:	1f 5f       	subi	r17, 0xFF	; 255
    1dce:	98 cf       	rjmp	.-208    	; 0x1d00 <u8g_GetGlyph+0xd4>
    1dd0:	f7 01       	movw	r30, r14
    1dd2:	10 8a       	std	Z+16, r1	; 0x10
    1dd4:	13 8a       	std	Z+19, r1	; 0x13
    1dd6:	14 8a       	std	Z+20, r1	; 0x14
    1dd8:	11 8a       	std	Z+17, r1	; 0x11
    1dda:	12 8a       	std	Z+18, r1	; 0x12
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	cf 90       	pop	r12
    1df0:	bf 90       	pop	r11
    1df2:	af 90       	pop	r10
    1df4:	08 95       	ret

00001df6 <u8g_draw_glyph>:
    1df6:	6f 92       	push	r6
    1df8:	7f 92       	push	r7
    1dfa:	8f 92       	push	r8
    1dfc:	9f 92       	push	r9
    1dfe:	af 92       	push	r10
    1e00:	bf 92       	push	r11
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	5c 01       	movw	r10, r24
    1e14:	16 2f       	mov	r17, r22
    1e16:	64 2e       	mov	r6, r20
    1e18:	62 2f       	mov	r22, r18
    1e1a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <u8g_GetGlyph>
    1e1e:	6c 01       	movw	r12, r24
    1e20:	89 2b       	or	r24, r25
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <u8g_draw_glyph+0x30>
    1e24:	48 c0       	rjmp	.+144    	; 0x1eb6 <u8g_draw_glyph+0xc0>
    1e26:	f5 01       	movw	r30, r10
    1e28:	84 81       	ldd	r24, Z+4	; 0x04
    1e2a:	95 81       	ldd	r25, Z+5	; 0x05
    1e2c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <u8g_font_GetFontGlyphStructureSize>
    1e30:	98 2e       	mov	r9, r24
    1e32:	f5 01       	movw	r30, r10
    1e34:	d3 89       	ldd	r29, Z+19	; 0x13
    1e36:	c4 89       	ldd	r28, Z+20	; 0x14
    1e38:	71 88       	ldd	r7, Z+17	; 0x11
    1e3a:	71 0e       	add	r7, r17
    1e3c:	92 89       	ldd	r25, Z+18	; 0x12
    1e3e:	69 1a       	sub	r6, r25
    1e40:	f6 2c       	mov	r15, r6
    1e42:	fc 1a       	sub	r15, r28
    1e44:	0c 2f       	mov	r16, r28
    1e46:	2d 2f       	mov	r18, r29
    1e48:	4f 2d       	mov	r20, r15
    1e4a:	67 2d       	mov	r22, r7
    1e4c:	c5 01       	movw	r24, r10
    1e4e:	0e 94 23 0b 	call	0x1646	; 0x1646 <u8g_IsBBXIntersection>
    1e52:	81 11       	cpse	r24, r1
    1e54:	03 c0       	rjmp	.+6      	; 0x1e5c <u8g_draw_glyph+0x66>
    1e56:	f5 01       	movw	r30, r10
    1e58:	80 89       	ldd	r24, Z+16	; 0x10
    1e5a:	2e c0       	rjmp	.+92     	; 0x1eb8 <u8g_draw_glyph+0xc2>
    1e5c:	d9 5f       	subi	r29, 0xF9	; 249
    1e5e:	ed 2e       	mov	r14, r29
    1e60:	e6 94       	lsr	r14
    1e62:	e6 94       	lsr	r14
    1e64:	e6 94       	lsr	r14
    1e66:	cc 23       	and	r28, r28
    1e68:	19 f1       	breq	.+70     	; 0x1eb0 <u8g_draw_glyph+0xba>
    1e6a:	e6 01       	movw	r28, r12
    1e6c:	c9 0d       	add	r28, r9
    1e6e:	d1 1d       	adc	r29, r1
    1e70:	88 24       	eor	r8, r8
    1e72:	8a 94       	dec	r8
    1e74:	8e 0c       	add	r8, r14
    1e76:	91 2c       	mov	r9, r1
    1e78:	ff ef       	ldi	r31, 0xFF	; 255
    1e7a:	8f 1a       	sub	r8, r31
    1e7c:	9f 0a       	sbc	r9, r31
    1e7e:	11 c0       	rjmp	.+34     	; 0x1ea2 <u8g_draw_glyph+0xac>
    1e80:	fe 01       	movw	r30, r28
    1e82:	04 91       	lpm	r16, Z
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	4f 2d       	mov	r20, r15
    1e88:	61 2f       	mov	r22, r17
    1e8a:	c5 01       	movw	r24, r10
    1e8c:	0e 94 30 11 	call	0x2260	; 0x2260 <u8g_Draw8Pixel>
    1e90:	21 96       	adiw	r28, 0x01	; 1
    1e92:	18 5f       	subi	r17, 0xF8	; 248
    1e94:	cc 15       	cp	r28, r12
    1e96:	dd 05       	cpc	r29, r13
    1e98:	99 f7       	brne	.-26     	; 0x1e80 <u8g_draw_glyph+0x8a>
    1e9a:	e6 01       	movw	r28, r12
    1e9c:	f3 94       	inc	r15
    1e9e:	f6 14       	cp	r15, r6
    1ea0:	39 f0       	breq	.+14     	; 0x1eb0 <u8g_draw_glyph+0xba>
    1ea2:	ee 20       	and	r14, r14
    1ea4:	d9 f3       	breq	.-10     	; 0x1e9c <u8g_draw_glyph+0xa6>
    1ea6:	6e 01       	movw	r12, r28
    1ea8:	c8 0c       	add	r12, r8
    1eaa:	d9 1c       	adc	r13, r9
    1eac:	17 2d       	mov	r17, r7
    1eae:	e8 cf       	rjmp	.-48     	; 0x1e80 <u8g_draw_glyph+0x8a>
    1eb0:	f5 01       	movw	r30, r10
    1eb2:	80 89       	ldd	r24, Z+16	; 0x10
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <u8g_draw_glyph+0xc2>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	df 90       	pop	r13
    1ec6:	cf 90       	pop	r12
    1ec8:	bf 90       	pop	r11
    1eca:	af 90       	pop	r10
    1ecc:	9f 90       	pop	r9
    1ece:	8f 90       	pop	r8
    1ed0:	7f 90       	pop	r7
    1ed2:	6f 90       	pop	r6
    1ed4:	08 95       	ret

00001ed6 <u8g_DrawStr>:
    1ed6:	cf 92       	push	r12
    1ed8:	df 92       	push	r13
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	6c 01       	movw	r12, r24
    1ee6:	c6 2f       	mov	r28, r22
    1ee8:	f4 2e       	mov	r15, r20
    1eea:	89 01       	movw	r16, r18
    1eec:	dc 01       	movw	r26, r24
    1eee:	55 96       	adiw	r26, 0x15	; 21
    1ef0:	ed 91       	ld	r30, X+
    1ef2:	fc 91       	ld	r31, X
    1ef4:	56 97       	sbiw	r26, 0x16	; 22
    1ef6:	09 95       	icall
    1ef8:	f8 0e       	add	r15, r24
    1efa:	f8 01       	movw	r30, r16
    1efc:	20 81       	ld	r18, Z
    1efe:	22 23       	and	r18, r18
    1f00:	81 f0       	breq	.+32     	; 0x1f22 <u8g_DrawStr+0x4c>
    1f02:	0f 5f       	subi	r16, 0xFF	; 255
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	d0 e0       	ldi	r29, 0x00	; 0
    1f08:	4f 2d       	mov	r20, r15
    1f0a:	6c 2f       	mov	r22, r28
    1f0c:	c6 01       	movw	r24, r12
    1f0e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <u8g_draw_glyph>
    1f12:	c8 0f       	add	r28, r24
    1f14:	d8 0f       	add	r29, r24
    1f16:	d8 01       	movw	r26, r16
    1f18:	2d 91       	ld	r18, X+
    1f1a:	8d 01       	movw	r16, r26
    1f1c:	21 11       	cpse	r18, r1
    1f1e:	f4 cf       	rjmp	.-24     	; 0x1f08 <u8g_DrawStr+0x32>
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <u8g_DrawStr+0x4e>
    1f22:	d0 e0       	ldi	r29, 0x00	; 0
    1f24:	8d 2f       	mov	r24, r29
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	ff 90       	pop	r15
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	08 95       	ret

00001f36 <u8g_UpdateRefHeight>:
    1f36:	dc 01       	movw	r26, r24
    1f38:	14 96       	adiw	r26, 0x04	; 4
    1f3a:	8d 91       	ld	r24, X+
    1f3c:	9c 91       	ld	r25, X
    1f3e:	15 97       	sbiw	r26, 0x05	; 5
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <u8g_UpdateRefHeight+0x10>
    1f44:	4d c0       	rjmp	.+154    	; 0x1fe0 <u8g_UpdateRefHeight+0xaa>
    1f46:	57 96       	adiw	r26, 0x17	; 23
    1f48:	2c 91       	ld	r18, X
    1f4a:	57 97       	sbiw	r26, 0x17	; 23
    1f4c:	21 11       	cpse	r18, r1
    1f4e:	0d c0       	rjmp	.+26     	; 0x1f6a <u8g_UpdateRefHeight+0x34>
    1f50:	fc 01       	movw	r30, r24
    1f52:	35 96       	adiw	r30, 0x05	; 5
    1f54:	e4 91       	lpm	r30, Z
    1f56:	58 96       	adiw	r26, 0x18	; 24
    1f58:	ec 93       	st	X, r30
    1f5a:	58 97       	sbiw	r26, 0x18	; 24
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	3c 96       	adiw	r30, 0x0c	; 12
    1f60:	e4 91       	lpm	r30, Z
    1f62:	59 96       	adiw	r26, 0x19	; 25
    1f64:	ec 93       	st	X, r30
    1f66:	59 97       	sbiw	r26, 0x19	; 25
    1f68:	1b c0       	rjmp	.+54     	; 0x1fa0 <u8g_UpdateRefHeight+0x6a>
    1f6a:	21 30       	cpi	r18, 0x01	; 1
    1f6c:	69 f4       	brne	.+26     	; 0x1f88 <u8g_UpdateRefHeight+0x52>
    1f6e:	fc 01       	movw	r30, r24
    1f70:	3f 96       	adiw	r30, 0x0f	; 15
    1f72:	e4 91       	lpm	r30, Z
    1f74:	58 96       	adiw	r26, 0x18	; 24
    1f76:	ec 93       	st	X, r30
    1f78:	58 97       	sbiw	r26, 0x18	; 24
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	70 96       	adiw	r30, 0x10	; 16
    1f7e:	e4 91       	lpm	r30, Z
    1f80:	59 96       	adiw	r26, 0x19	; 25
    1f82:	ec 93       	st	X, r30
    1f84:	59 97       	sbiw	r26, 0x19	; 25
    1f86:	0c c0       	rjmp	.+24     	; 0x1fa0 <u8g_UpdateRefHeight+0x6a>
    1f88:	fc 01       	movw	r30, r24
    1f8a:	3d 96       	adiw	r30, 0x0d	; 13
    1f8c:	e4 91       	lpm	r30, Z
    1f8e:	58 96       	adiw	r26, 0x18	; 24
    1f90:	ec 93       	st	X, r30
    1f92:	58 97       	sbiw	r26, 0x18	; 24
    1f94:	fc 01       	movw	r30, r24
    1f96:	3e 96       	adiw	r30, 0x0e	; 14
    1f98:	e4 91       	lpm	r30, Z
    1f9a:	59 96       	adiw	r26, 0x19	; 25
    1f9c:	ec 93       	st	X, r30
    1f9e:	59 97       	sbiw	r26, 0x19	; 25
    1fa0:	58 96       	adiw	r26, 0x18	; 24
    1fa2:	8c 91       	ld	r24, X
    1fa4:	58 97       	sbiw	r26, 0x18	; 24
    1fa6:	08 2e       	mov	r0, r24
    1fa8:	00 0c       	add	r0, r0
    1faa:	99 0b       	sbc	r25, r25
    1fac:	59 96       	adiw	r26, 0x19	; 25
    1fae:	2c 91       	ld	r18, X
    1fb0:	59 97       	sbiw	r26, 0x19	; 25
    1fb2:	82 1b       	sub	r24, r18
    1fb4:	91 09       	sbc	r25, r1
    1fb6:	27 fd       	sbrc	r18, 7
    1fb8:	93 95       	inc	r25
    1fba:	5a 96       	adiw	r26, 0x1a	; 26
    1fbc:	2c 91       	ld	r18, X
    1fbe:	5a 97       	sbiw	r26, 0x1a	; 26
    1fc0:	20 34       	cpi	r18, 0x40	; 64
    1fc2:	61 f0       	breq	.+24     	; 0x1fdc <u8g_UpdateRefHeight+0xa6>
    1fc4:	82 9f       	mul	r24, r18
    1fc6:	c0 01       	movw	r24, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	00 24       	eor	r0, r0
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	00 1c       	adc	r0, r0
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	00 1c       	adc	r0, r0
    1fd8:	89 2f       	mov	r24, r25
    1fda:	90 2d       	mov	r25, r0
    1fdc:	5b 96       	adiw	r26, 0x1b	; 27
    1fde:	8c 93       	st	X, r24
    1fe0:	08 95       	ret

00001fe2 <u8g_SetFontPosBaseline>:
    1fe2:	24 e0       	ldi	r18, 0x04	; 4
    1fe4:	3e e0       	ldi	r19, 0x0E	; 14
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	36 8b       	std	Z+22, r19	; 0x16
    1fea:	25 8b       	std	Z+21, r18	; 0x15
    1fec:	08 95       	ret

00001fee <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
  if ( u8g->font != font )
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	24 81       	ldd	r18, Z+4	; 0x04
    1ff6:	35 81       	ldd	r19, Z+5	; 0x05
    1ff8:	26 17       	cp	r18, r22
    1ffa:	37 07       	cpc	r19, r23
    1ffc:	49 f0       	breq	.+18     	; 0x2010 <u8g_SetFont+0x22>
    1ffe:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    2000:	75 83       	std	Z+5, r23	; 0x05
    2002:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    2004:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2008:	84 e0       	ldi	r24, 0x04	; 4
    200a:	9e e0       	ldi	r25, 0x0E	; 14
    200c:	9e 8b       	std	Y+22, r25	; 0x16
    200e:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	08 95       	ret

00002016 <u8g_init_data>:
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	ec 01       	movw	r28, r24
    201e:	1d 82       	std	Y+5, r1	; 0x05
    2020:	1c 82       	std	Y+4, r1	; 0x04
    2022:	1f 82       	std	Y+7, r1	; 0x07
    2024:	1e 82       	std	Y+6, r1	; 0x06
    2026:	19 86       	std	Y+9, r1	; 0x09
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	88 87       	std	Y+8, r24	; 0x08
    202c:	82 e2       	ldi	r24, 0x22	; 34
    202e:	8a 87       	std	Y+10, r24	; 0x0a
    2030:	1f 86       	std	Y+15, r1	; 0x0f
    2032:	1e 86       	std	Y+14, r1	; 0x0e
    2034:	fe 01       	movw	r30, r28
    2036:	b3 96       	adiw	r30, 0x23	; 35
    2038:	9e 01       	movw	r18, r28
    203a:	2f 5c       	subi	r18, 0xCF	; 207
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	8f ef       	ldi	r24, 0xFF	; 255
    2040:	81 93       	st	Z+, r24
    2042:	e2 17       	cp	r30, r18
    2044:	f3 07       	cpc	r31, r19
    2046:	e1 f7       	brne	.-8      	; 0x2040 <u8g_init_data+0x2a>
    2048:	11 e0       	ldi	r17, 0x01	; 1
    204a:	18 a3       	std	Y+32, r17	; 0x20
    204c:	ce 01       	movw	r24, r28
    204e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <u8g_SetFontPosBaseline>
    2052:	1f 8b       	std	Y+23, r17	; 0x17
    2054:	18 8e       	std	Y+24, r1	; 0x18
    2056:	19 8e       	std	Y+25, r1	; 0x19
    2058:	80 e4       	ldi	r24, 0x40	; 64
    205a:	8a 8f       	std	Y+26, r24	; 0x1a
    205c:	1b 8e       	std	Y+27, r1	; 0x1b
    205e:	8a e6       	ldi	r24, 0x6A	; 106
    2060:	92 e1       	ldi	r25, 0x12	; 18
    2062:	9a ab       	std	Y+50, r25	; 0x32
    2064:	89 ab       	std	Y+49, r24	; 0x31
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	08 95       	ret

0000206e <u8g_call_dev_fn>:
    206e:	db 01       	movw	r26, r22
    2070:	ed 91       	ld	r30, X+
    2072:	fc 91       	ld	r31, X
    2074:	09 95       	icall
    2076:	08 95       	ret

00002078 <u8g_InitLL>:
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	ec 01       	movw	r28, r24
    2082:	8b 01       	movw	r16, r22
    2084:	e9 a9       	ldd	r30, Y+49	; 0x31
    2086:	fa a9       	ldd	r31, Y+50	; 0x32
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	09 95       	icall
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a e0       	ldi	r20, 0x0A	; 10
    2092:	b8 01       	movw	r22, r16
    2094:	ce 01       	movw	r24, r28
    2096:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    209a:	18 2f       	mov	r17, r24
    209c:	e9 a9       	ldd	r30, Y+49	; 0x31
    209e:	fa a9       	ldd	r31, Y+50	; 0x32
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	09 95       	icall
    20a4:	e9 a9       	ldd	r30, Y+49	; 0x31
    20a6:	fa a9       	ldd	r31, Y+50	; 0x32
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	09 95       	icall
    20ac:	81 2f       	mov	r24, r17
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	08 95       	ret

000020b8 <u8g_FirstPageLL>:
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	ec 01       	movw	r28, r24
    20c2:	8b 01       	movw	r16, r22
    20c4:	e9 a9       	ldd	r30, Y+49	; 0x31
    20c6:	fa a9       	ldd	r31, Y+50	; 0x32
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	09 95       	icall
    20cc:	e9 a9       	ldd	r30, Y+49	; 0x31
    20ce:	fa a9       	ldd	r31, Y+50	; 0x32
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	09 95       	icall
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	44 e1       	ldi	r20, 0x14	; 20
    20da:	b8 01       	movw	r22, r16
    20dc:	ce 01       	movw	r24, r28
    20de:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    20e2:	9e 01       	movw	r18, r28
    20e4:	2d 5c       	subi	r18, 0xCD	; 205
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	47 e1       	ldi	r20, 0x17	; 23
    20ea:	b8 01       	movw	r22, r16
    20ec:	ce 01       	movw	r24, r28
    20ee:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    20f2:	e9 a9       	ldd	r30, Y+49	; 0x31
    20f4:	fa a9       	ldd	r31, Y+50	; 0x32
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	09 95       	icall
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	08 95       	ret

00002104 <u8g_NextPageLL>:
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	ec 01       	movw	r28, r24
    2110:	7b 01       	movw	r14, r22
    2112:	e9 a9       	ldd	r30, Y+49	; 0x31
    2114:	fa a9       	ldd	r31, Y+50	; 0x32
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	09 95       	icall
    211a:	e9 a9       	ldd	r30, Y+49	; 0x31
    211c:	fa a9       	ldd	r31, Y+50	; 0x32
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	09 95       	icall
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	45 e1       	ldi	r20, 0x15	; 21
    2128:	b7 01       	movw	r22, r14
    212a:	ce 01       	movw	r24, r28
    212c:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    2130:	18 2f       	mov	r17, r24
    2132:	88 23       	and	r24, r24
    2134:	41 f0       	breq	.+16     	; 0x2146 <u8g_NextPageLL+0x42>
    2136:	9e 01       	movw	r18, r28
    2138:	2d 5c       	subi	r18, 0xCD	; 205
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	47 e1       	ldi	r20, 0x17	; 23
    213e:	b7 01       	movw	r22, r14
    2140:	ce 01       	movw	r24, r28
    2142:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    2146:	e9 a9       	ldd	r30, Y+49	; 0x31
    2148:	fa a9       	ldd	r31, Y+50	; 0x32
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	09 95       	icall
    214e:	81 2f       	mov	r24, r17
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
    2156:	ff 90       	pop	r15
    2158:	ef 90       	pop	r14
    215a:	08 95       	ret

0000215c <u8g_GetWidthLL>:
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	1f 92       	push	r1
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	9e 01       	movw	r18, r28
    2168:	2f 5f       	subi	r18, 0xFF	; 255
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	46 e4       	ldi	r20, 0x46	; 70
    216e:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	0f 90       	pop	r0
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	08 95       	ret

0000217c <u8g_GetHeightLL>:
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	1f 92       	push	r1
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	9e 01       	movw	r18, r28
    2188:	2f 5f       	subi	r18, 0xFF	; 255
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	47 e4       	ldi	r20, 0x47	; 71
    218e:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	0f 90       	pop	r0
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

0000219c <u8g_GetModeLL>:
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	48 e4       	ldi	r20, 0x48	; 72
    21a2:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    21a6:	08 95       	ret

000021a8 <u8g_UpdateDimension>:
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	ec 01       	movw	r28, r24
    21ae:	6a 81       	ldd	r22, Y+2	; 0x02
    21b0:	7b 81       	ldd	r23, Y+3	; 0x03
    21b2:	0e 94 ae 10 	call	0x215c	; 0x215c <u8g_GetWidthLL>
    21b6:	88 83       	st	Y, r24
    21b8:	6a 81       	ldd	r22, Y+2	; 0x02
    21ba:	7b 81       	ldd	r23, Y+3	; 0x03
    21bc:	ce 01       	movw	r24, r28
    21be:	0e 94 be 10 	call	0x217c	; 0x217c <u8g_GetHeightLL>
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	6a 81       	ldd	r22, Y+2	; 0x02
    21c6:	7b 81       	ldd	r23, Y+3	; 0x03
    21c8:	ce 01       	movw	r24, r28
    21ca:	0e 94 ce 10 	call	0x219c	; 0x219c <u8g_GetModeLL>
    21ce:	8b 87       	std	Y+11, r24	; 0x0b
    21d0:	9e 01       	movw	r18, r28
    21d2:	2d 5c       	subi	r18, 0xCD	; 205
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	6a 81       	ldd	r22, Y+2	; 0x02
    21d8:	7b 81       	ldd	r23, Y+3	; 0x03
    21da:	47 e1       	ldi	r20, 0x17	; 23
    21dc:	ce 01       	movw	r24, r28
    21de:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	08 95       	ret

000021e8 <u8g_Begin>:
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	ec 01       	movw	r28, r24
    21ee:	6a 81       	ldd	r22, Y+2	; 0x02
    21f0:	7b 81       	ldd	r23, Y+3	; 0x03
    21f2:	0e 94 3c 10 	call	0x2078	; 0x2078 <u8g_InitLL>
    21f6:	88 23       	and	r24, r24
    21f8:	21 f0       	breq	.+8      	; 0x2202 <u8g_Begin+0x1a>
    21fa:	ce 01       	movw	r24, r28
    21fc:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <u8g_UpdateDimension>
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	08 95       	ret

00002208 <u8g_InitI2C>:
    2208:	ef 92       	push	r14
    220a:	ff 92       	push	r15
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	ec 01       	movw	r28, r24
    2214:	7b 01       	movw	r14, r22
    2216:	14 2f       	mov	r17, r20
    2218:	0e 94 0b 10 	call	0x2016	; 0x2016 <u8g_init_data>
    221c:	fb 82       	std	Y+3, r15	; 0x03
    221e:	ea 82       	std	Y+2, r14	; 0x02
    2220:	1e a7       	std	Y+46, r17	; 0x2e
    2222:	ce 01       	movw	r24, r28
    2224:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <u8g_Begin>
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	08 95       	ret

00002234 <u8g_FirstPage>:
    2234:	fc 01       	movw	r30, r24
    2236:	62 81       	ldd	r22, Z+2	; 0x02
    2238:	73 81       	ldd	r23, Z+3	; 0x03
    223a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <u8g_FirstPageLL>
    223e:	08 95       	ret

00002240 <u8g_NextPage>:
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	ec 01       	movw	r28, r24
    2246:	ee 85       	ldd	r30, Y+14	; 0x0e
    2248:	ff 85       	ldd	r31, Y+15	; 0x0f
    224a:	30 97       	sbiw	r30, 0x00	; 0
    224c:	09 f0       	breq	.+2      	; 0x2250 <u8g_NextPage+0x10>
    224e:	09 95       	icall
    2250:	6a 81       	ldd	r22, Y+2	; 0x02
    2252:	7b 81       	ldd	r23, Y+3	; 0x03
    2254:	ce 01       	movw	r24, r28
    2256:	0e 94 82 10 	call	0x2104	; 0x2104 <u8g_NextPageLL>
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    2260:	0f 93       	push	r16
    2262:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    2268:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    226a:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    226c:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    226e:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    2270:	9f 01       	movw	r18, r30
    2272:	24 5e       	subi	r18, 0xE4	; 228
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    2276:	4b e3       	ldi	r20, 0x3B	; 59
    2278:	bc 01       	movw	r22, r24
    227a:	cf 01       	movw	r24, r30
    227c:	0e 94 37 10 	call	0x206e	; 0x206e <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    2280:	0f 91       	pop	r16
    2282:	08 95       	ret

00002284 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    2284:	fc 01       	movw	r30, r24
    2286:	12 82       	std	Z+2, r1	; 0x02
    2288:	80 81       	ld	r24, Z
    228a:	81 50       	subi	r24, 0x01	; 1
    228c:	83 83       	std	Z+3, r24	; 0x03
    228e:	14 82       	std	Z+4, r1	; 0x04
    2290:	08 95       	ret

00002292 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    2292:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    2294:	90 81       	ld	r25, Z
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	89 0f       	add	r24, r25
    229a:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    229c:	21 81       	ldd	r18, Z+1	; 0x01
    229e:	82 17       	cp	r24, r18
    22a0:	60 f4       	brcc	.+24     	; 0x22ba <u8g_page_Next+0x28>
    return 0;
  p->page++;
    22a2:	84 81       	ldd	r24, Z+4	; 0x04
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    22a8:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    22aa:	98 0f       	add	r25, r24
  if ( y1 >= p->total_height )
    22ac:	92 17       	cp	r25, r18
    22ae:	10 f0       	brcs	.+4      	; 0x22b4 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    22b0:	9f ef       	ldi	r25, 0xFF	; 255
    22b2:	92 0f       	add	r25, r18
  }
  p->page_y1 = y1;
    22b4:	93 83       	std	Z+3, r25	; 0x03
  
  return 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    22bc:	08 95       	ret

000022be <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    22be:	dc 01       	movw	r26, r24
    22c0:	16 96       	adiw	r26, 0x06	; 6
    22c2:	ed 91       	ld	r30, X+
    22c4:	fc 91       	ld	r31, X
    22c6:	17 97       	sbiw	r26, 0x07	; 7
    22c8:	15 96       	adiw	r26, 0x05	; 5
    22ca:	8c 91       	ld	r24, X
    22cc:	9f 01       	movw	r18, r30
    22ce:	28 0f       	add	r18, r24
    22d0:	31 1d       	adc	r19, r1
    22d2:	c9 01       	movw	r24, r18
    22d4:	11 92       	st	Z+, r1
    22d6:	e8 17       	cp	r30, r24
    22d8:	f9 07       	cpc	r31, r25
    22da:	e1 f7       	brne	.-8      	; 0x22d4 <u8g_pb_Clear+0x16>
    22dc:	08 95       	ret

000022de <u8g_pb_IsYIntersection>:
    22de:	fc 01       	movw	r30, r24
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	83 81       	ldd	r24, Z+3	; 0x03
    22e4:	86 17       	cp	r24, r22
    22e6:	08 f4       	brcc	.+2      	; 0x22ea <u8g_pb_IsYIntersection+0xc>
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	31 e0       	ldi	r19, 0x01	; 1
    22ec:	46 17       	cp	r20, r22
    22ee:	08 f0       	brcs	.+2      	; 0x22f2 <u8g_pb_IsYIntersection+0x14>
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	83 2f       	mov	r24, r19
    22f4:	89 2b       	or	r24, r25
    22f6:	21 e0       	ldi	r18, 0x01	; 1
    22f8:	52 81       	ldd	r21, Z+2	; 0x02
    22fa:	45 17       	cp	r20, r21
    22fc:	08 f4       	brcc	.+2      	; 0x2300 <u8g_pb_IsYIntersection+0x22>
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	28 23       	and	r18, r24
    2302:	83 2f       	mov	r24, r19
    2304:	89 23       	and	r24, r25
    2306:	82 2b       	or	r24, r18
    2308:	08 95       	ret

0000230a <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    230a:	dc 01       	movw	r26, r24
    230c:	fb 01       	movw	r30, r22
  box->x0 = 0;
    230e:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    2310:	12 96       	adiw	r26, 0x02	; 2
    2312:	8c 91       	ld	r24, X
    2314:	12 97       	sbiw	r26, 0x02	; 2
    2316:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    2318:	15 96       	adiw	r26, 0x05	; 5
    231a:	8c 91       	ld	r24, X
    231c:	15 97       	sbiw	r26, 0x05	; 5
    231e:	81 50       	subi	r24, 0x01	; 1
    2320:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    2322:	13 96       	adiw	r26, 0x03	; 3
    2324:	8c 91       	ld	r24, X
    2326:	83 83       	std	Z+3, r24	; 0x03
    2328:	08 95       	ret

0000232a <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    232a:	fb 01       	movw	r30, r22
    232c:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    232e:	23 81       	ldd	r18, Z+3	; 0x03
    2330:	21 30       	cpi	r18, 0x01	; 1
    2332:	19 f0       	breq	.+6      	; 0x233a <u8g_pb_Is8PixelVisible+0x10>
    2334:	23 30       	cpi	r18, 0x03	; 3
    2336:	21 f0       	breq	.+8      	; 0x2340 <u8g_pb_Is8PixelVisible+0x16>
    2338:	06 c0       	rjmp	.+12     	; 0x2346 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    233a:	48 e0       	ldi	r20, 0x08	; 8
    233c:	43 0f       	add	r20, r19
      break;
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2340:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    2342:	38 50       	subi	r19, 0x08	; 8
      break;
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2346:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    2348:	63 2f       	mov	r22, r19
    234a:	0e 94 6f 11 	call	0x22de	; 0x22de <u8g_pb_IsYIntersection>
}
    234e:	08 95       	ret

00002350 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    2350:	fc 01       	movw	r30, r24
    2352:	cb 01       	movw	r24, r22
    2354:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    2356:	26 81       	ldd	r18, Z+6	; 0x06
    2358:	37 81       	ldd	r19, Z+7	; 0x07
    235a:	45 81       	ldd	r20, Z+5	; 0x05
    235c:	0e 94 93 0b 	call	0x1726	; 0x1726 <u8g_WriteSequence>
}
    2360:	08 95       	ret

00002362 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    2362:	dc 01       	movw	r26, r24
    2364:	16 96       	adiw	r26, 0x06	; 6
    2366:	ed 91       	ld	r30, X+
    2368:	fc 91       	ld	r31, X
    236a:	17 97       	sbiw	r26, 0x07	; 7
    236c:	12 96       	adiw	r26, 0x02	; 2
    236e:	8c 91       	ld	r24, X
    2370:	48 1b       	sub	r20, r24
    2372:	47 70       	andi	r20, 0x07	; 7
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	02 c0       	rjmp	.+4      	; 0x237e <u8g_pb8v1_set_pixel+0x1c>
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	4a 95       	dec	r20
    2380:	e2 f7       	brpl	.-8      	; 0x237a <u8g_pb8v1_set_pixel+0x18>
    2382:	e6 0f       	add	r30, r22
    2384:	f1 1d       	adc	r31, r1
    2386:	22 23       	and	r18, r18
    2388:	21 f0       	breq	.+8      	; 0x2392 <u8g_pb8v1_set_pixel+0x30>
    238a:	90 81       	ld	r25, Z
    238c:	89 2b       	or	r24, r25
    238e:	80 83       	st	Z, r24
    2390:	08 95       	ret
    2392:	80 95       	com	r24
    2394:	90 81       	ld	r25, Z
    2396:	89 23       	and	r24, r25
    2398:	80 83       	st	Z, r24
    239a:	08 95       	ret

0000239c <u8g_pb8v1_SetPixel>:
    239c:	fb 01       	movw	r30, r22
    239e:	41 81       	ldd	r20, Z+1	; 0x01
    23a0:	fc 01       	movw	r30, r24
    23a2:	22 81       	ldd	r18, Z+2	; 0x02
    23a4:	42 17       	cp	r20, r18
    23a6:	70 f0       	brcs	.+28     	; 0x23c4 <u8g_pb8v1_SetPixel+0x28>
    23a8:	23 81       	ldd	r18, Z+3	; 0x03
    23aa:	24 17       	cp	r18, r20
    23ac:	58 f0       	brcs	.+22     	; 0x23c4 <u8g_pb8v1_SetPixel+0x28>
    23ae:	fb 01       	movw	r30, r22
    23b0:	30 81       	ld	r19, Z
    23b2:	fc 01       	movw	r30, r24
    23b4:	25 81       	ldd	r18, Z+5	; 0x05
    23b6:	32 17       	cp	r19, r18
    23b8:	28 f4       	brcc	.+10     	; 0x23c4 <u8g_pb8v1_SetPixel+0x28>
    23ba:	fb 01       	movw	r30, r22
    23bc:	24 81       	ldd	r18, Z+4	; 0x04
    23be:	63 2f       	mov	r22, r19
    23c0:	0e 94 b1 11 	call	0x2362	; 0x2362 <u8g_pb8v1_set_pixel>
    23c4:	08 95       	ret

000023c6 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    23c6:	df 92       	push	r13
    23c8:	ef 92       	push	r14
    23ca:	ff 92       	push	r15
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	7c 01       	movw	r14, r24
    23d6:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    23d8:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	49 f0       	breq	.+18     	; 0x23f2 <u8g_pb8v1_Set8PixelOpt2+0x2c>
    23e0:	28 f0       	brcs	.+10     	; 0x23ec <u8g_pb8v1_Set8PixelOpt2+0x26>
    23e2:	82 30       	cpi	r24, 0x02	; 2
    23e4:	51 f0       	breq	.+20     	; 0x23fa <u8g_pb8v1_Set8PixelOpt2+0x34>
    23e6:	83 30       	cpi	r24, 0x03	; 3
    23e8:	59 f0       	breq	.+22     	; 0x2400 <u8g_pb8v1_Set8PixelOpt2+0x3a>
    23ea:	0e c0       	rjmp	.+28     	; 0x2408 <u8g_pb8v1_Set8PixelOpt2+0x42>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    23ec:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    23ee:	01 e0       	ldi	r16, 0x01	; 1
    23f0:	0d c0       	rjmp	.+26     	; 0x240c <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 1: dy++; break;
    23f2:	dd 24       	eor	r13, r13
    23f4:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    23f6:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    23f8:	09 c0       	rjmp	.+18     	; 0x240c <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    23fa:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    23fc:	0f ef       	ldi	r16, 0xFF	; 255
    23fe:	06 c0       	rjmp	.+12     	; 0x240c <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
    2400:	dd 24       	eor	r13, r13
    2402:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2404:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2406:	02 c0       	rjmp	.+4      	; 0x240c <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2408:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    240a:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    240c:	11 23       	and	r17, r17
    240e:	24 f4       	brge	.+8      	; 0x2418 <u8g_pb8v1_Set8PixelOpt2+0x52>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    2410:	be 01       	movw	r22, r28
    2412:	c7 01       	movw	r24, r14
    2414:	0e 94 ce 11 	call	0x239c	; 0x239c <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2418:	98 81       	ld	r25, Y
    241a:	90 0f       	add	r25, r16
    241c:	98 83       	st	Y, r25
    arg_pixel->y += dy;
    241e:	99 81       	ldd	r25, Y+1	; 0x01
    2420:	9d 0d       	add	r25, r13
    2422:	99 83       	std	Y+1, r25	; 0x01
    pixel <<= 1;
    2424:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    2426:	91 f7       	brne	.-28     	; 0x240c <u8g_pb8v1_Set8PixelOpt2+0x46>
  
}
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	1f 91       	pop	r17
    242e:	0f 91       	pop	r16
    2430:	ff 90       	pop	r15
    2432:	ef 90       	pop	r14
    2434:	df 90       	pop	r13
    2436:	08 95       	ret

00002438 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    2440:	fb 01       	movw	r30, r22
    2442:	c2 81       	ldd	r28, Z+2	; 0x02
    2444:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	fa 01       	movw	r30, r20
    244a:	74 97       	sbiw	r30, 0x14	; 20
    244c:	e4 33       	cpi	r30, 0x34	; 52
    244e:	f1 05       	cpc	r31, r1
    2450:	c8 f5       	brcc	.+114    	; 0x24c4 <u8g_dev_pb8v1_base_fn+0x8c>
    2452:	89 01       	movw	r16, r18
    2454:	ec 5c       	subi	r30, 0xCC	; 204
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	0c 94 87 14 	jmp	0x290e	; 0x290e <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    245c:	b9 01       	movw	r22, r18
    245e:	ce 01       	movw	r24, r28
    2460:	0e 94 95 11 	call	0x232a	; 0x232a <u8g_pb_Is8PixelVisible>
    2464:	88 23       	and	r24, r24
    2466:	81 f1       	breq	.+96     	; 0x24c8 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    2468:	b8 01       	movw	r22, r16
    246a:	ce 01       	movw	r24, r28
    246c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	2b c0       	rjmp	.+86     	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    2474:	b9 01       	movw	r22, r18
    2476:	ce 01       	movw	r24, r28
    2478:	0e 94 ce 11 	call	0x239c	; 0x239c <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    247c:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    247e:	25 c0       	rjmp	.+74     	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    2480:	ce 01       	movw	r24, r28
    2482:	0e 94 5f 11 	call	0x22be	; 0x22be <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    2486:	ce 01       	movw	r24, r28
    2488:	0e 94 42 11 	call	0x2284	; 0x2284 <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    248e:	1d c0       	rjmp	.+58     	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    2490:	ce 01       	movw	r24, r28
    2492:	0e 94 49 11 	call	0x2292	; 0x2292 <u8g_page_Next>
    2496:	88 23       	and	r24, r24
    2498:	c1 f0       	breq	.+48     	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
        return 0;
      u8g_pb_Clear(pb);
    249a:	ce 01       	movw	r24, r28
    249c:	0e 94 5f 11 	call	0x22be	; 0x22be <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    24a2:	13 c0       	rjmp	.+38     	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    24a4:	b9 01       	movw	r22, r18
    24a6:	ce 01       	movw	r24, r28
    24a8:	0e 94 85 11 	call	0x230a	; 0x230a <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    24ae:	0d c0       	rjmp	.+26     	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	f9 01       	movw	r30, r18
    24b4:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    24b8:	08 c0       	rjmp	.+16     	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	f9 01       	movw	r30, r18
    24be:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    24c2:	03 c0       	rjmp	.+6      	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <u8g_dev_pb8v1_base_fn+0x92>
  }
  return 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
}
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	08 95       	ret

000024d4 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    24d4:	08 95       	ret

000024d6 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    24d6:	1f 92       	push	r1
    24d8:	0f 92       	push	r0
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	0f 92       	push	r0
    24de:	11 24       	eor	r1, r1
    24e0:	2f 93       	push	r18
    24e2:	8f 93       	push	r24
    24e4:	9f 93       	push	r25
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    24ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    24ee:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    24f2:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    24f4:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <UART_RxHead>
    24f8:	ef 5f       	subi	r30, 0xFF	; 255
    24fa:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    24fc:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <UART_RxTail>
    2500:	e9 17       	cp	r30, r25
    2502:	39 f0       	breq	.+14     	; 0x2512 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    2504:	e0 93 b9 01 	sts	0x01B9, r30	; 0x8001b9 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	e4 54       	subi	r30, 0x44	; 68
    250c:	fe 4f       	sbci	r31, 0xFE	; 254
    250e:	20 83       	st	Z, r18
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2512:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    2514:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <UART_LastRxError>
}
    2518:	ff 91       	pop	r31
    251a:	ef 91       	pop	r30
    251c:	9f 91       	pop	r25
    251e:	8f 91       	pop	r24
    2520:	2f 91       	pop	r18
    2522:	0f 90       	pop	r0
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	0f 90       	pop	r0
    2528:	1f 90       	pop	r1
    252a:	18 95       	reti

0000252c <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    252c:	1f 92       	push	r1
    252e:	0f 92       	push	r0
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	0f 92       	push	r0
    2534:	11 24       	eor	r1, r1
    2536:	8f 93       	push	r24
    2538:	9f 93       	push	r25
    253a:	ef 93       	push	r30
    253c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    253e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <UART_TxHead>
    2542:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <UART_TxTail>
    2546:	98 17       	cp	r25, r24
    2548:	69 f0       	breq	.+26     	; 0x2564 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    254a:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <UART_TxTail>
    254e:	ef 5f       	subi	r30, 0xFF	; 255
    2550:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    2552:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	e4 52       	subi	r30, 0x24	; 36
    255a:	fe 4f       	sbci	r31, 0xFE	; 254
    255c:	80 81       	ld	r24, Z
    255e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2562:	05 c0       	rjmp	.+10     	; 0x256e <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2564:	e1 ec       	ldi	r30, 0xC1	; 193
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	8f 7d       	andi	r24, 0xDF	; 223
    256c:	80 83       	st	Z, r24
    }
}
    256e:	ff 91       	pop	r31
    2570:	ef 91       	pop	r30
    2572:	9f 91       	pop	r25
    2574:	8f 91       	pop	r24
    2576:	0f 90       	pop	r0
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	0f 90       	pop	r0
    257c:	1f 90       	pop	r1
    257e:	18 95       	reti

00002580 <__subsf3>:
    2580:	50 58       	subi	r21, 0x80	; 128

00002582 <__addsf3>:
    2582:	bb 27       	eor	r27, r27
    2584:	aa 27       	eor	r26, r26
    2586:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__addsf3x>
    258a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__fp_round>
    258e:	0e 94 a9 13 	call	0x2752	; 0x2752 <__fp_pscA>
    2592:	38 f0       	brcs	.+14     	; 0x25a2 <__addsf3+0x20>
    2594:	0e 94 b0 13 	call	0x2760	; 0x2760 <__fp_pscB>
    2598:	20 f0       	brcs	.+8      	; 0x25a2 <__addsf3+0x20>
    259a:	39 f4       	brne	.+14     	; 0x25aa <__addsf3+0x28>
    259c:	9f 3f       	cpi	r25, 0xFF	; 255
    259e:	19 f4       	brne	.+6      	; 0x25a6 <__addsf3+0x24>
    25a0:	26 f4       	brtc	.+8      	; 0x25aa <__addsf3+0x28>
    25a2:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__fp_nan>
    25a6:	0e f4       	brtc	.+2      	; 0x25aa <__addsf3+0x28>
    25a8:	e0 95       	com	r30
    25aa:	e7 fb       	bst	r30, 7
    25ac:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__fp_inf>

000025b0 <__addsf3x>:
    25b0:	e9 2f       	mov	r30, r25
    25b2:	0e 94 c8 13 	call	0x2790	; 0x2790 <__fp_split3>
    25b6:	58 f3       	brcs	.-42     	; 0x258e <__addsf3+0xc>
    25b8:	ba 17       	cp	r27, r26
    25ba:	62 07       	cpc	r22, r18
    25bc:	73 07       	cpc	r23, r19
    25be:	84 07       	cpc	r24, r20
    25c0:	95 07       	cpc	r25, r21
    25c2:	20 f0       	brcs	.+8      	; 0x25cc <__addsf3x+0x1c>
    25c4:	79 f4       	brne	.+30     	; 0x25e4 <__addsf3x+0x34>
    25c6:	a6 f5       	brtc	.+104    	; 0x2630 <__addsf3x+0x80>
    25c8:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_zero>
    25cc:	0e f4       	brtc	.+2      	; 0x25d0 <__addsf3x+0x20>
    25ce:	e0 95       	com	r30
    25d0:	0b 2e       	mov	r0, r27
    25d2:	ba 2f       	mov	r27, r26
    25d4:	a0 2d       	mov	r26, r0
    25d6:	0b 01       	movw	r0, r22
    25d8:	b9 01       	movw	r22, r18
    25da:	90 01       	movw	r18, r0
    25dc:	0c 01       	movw	r0, r24
    25de:	ca 01       	movw	r24, r20
    25e0:	a0 01       	movw	r20, r0
    25e2:	11 24       	eor	r1, r1
    25e4:	ff 27       	eor	r31, r31
    25e6:	59 1b       	sub	r21, r25
    25e8:	99 f0       	breq	.+38     	; 0x2610 <__addsf3x+0x60>
    25ea:	59 3f       	cpi	r21, 0xF9	; 249
    25ec:	50 f4       	brcc	.+20     	; 0x2602 <__addsf3x+0x52>
    25ee:	50 3e       	cpi	r21, 0xE0	; 224
    25f0:	68 f1       	brcs	.+90     	; 0x264c <__addsf3x+0x9c>
    25f2:	1a 16       	cp	r1, r26
    25f4:	f0 40       	sbci	r31, 0x00	; 0
    25f6:	a2 2f       	mov	r26, r18
    25f8:	23 2f       	mov	r18, r19
    25fa:	34 2f       	mov	r19, r20
    25fc:	44 27       	eor	r20, r20
    25fe:	58 5f       	subi	r21, 0xF8	; 248
    2600:	f3 cf       	rjmp	.-26     	; 0x25e8 <__addsf3x+0x38>
    2602:	46 95       	lsr	r20
    2604:	37 95       	ror	r19
    2606:	27 95       	ror	r18
    2608:	a7 95       	ror	r26
    260a:	f0 40       	sbci	r31, 0x00	; 0
    260c:	53 95       	inc	r21
    260e:	c9 f7       	brne	.-14     	; 0x2602 <__addsf3x+0x52>
    2610:	7e f4       	brtc	.+30     	; 0x2630 <__addsf3x+0x80>
    2612:	1f 16       	cp	r1, r31
    2614:	ba 0b       	sbc	r27, r26
    2616:	62 0b       	sbc	r22, r18
    2618:	73 0b       	sbc	r23, r19
    261a:	84 0b       	sbc	r24, r20
    261c:	ba f0       	brmi	.+46     	; 0x264c <__addsf3x+0x9c>
    261e:	91 50       	subi	r25, 0x01	; 1
    2620:	a1 f0       	breq	.+40     	; 0x264a <__addsf3x+0x9a>
    2622:	ff 0f       	add	r31, r31
    2624:	bb 1f       	adc	r27, r27
    2626:	66 1f       	adc	r22, r22
    2628:	77 1f       	adc	r23, r23
    262a:	88 1f       	adc	r24, r24
    262c:	c2 f7       	brpl	.-16     	; 0x261e <__addsf3x+0x6e>
    262e:	0e c0       	rjmp	.+28     	; 0x264c <__addsf3x+0x9c>
    2630:	ba 0f       	add	r27, r26
    2632:	62 1f       	adc	r22, r18
    2634:	73 1f       	adc	r23, r19
    2636:	84 1f       	adc	r24, r20
    2638:	48 f4       	brcc	.+18     	; 0x264c <__addsf3x+0x9c>
    263a:	87 95       	ror	r24
    263c:	77 95       	ror	r23
    263e:	67 95       	ror	r22
    2640:	b7 95       	ror	r27
    2642:	f7 95       	ror	r31
    2644:	9e 3f       	cpi	r25, 0xFE	; 254
    2646:	08 f0       	brcs	.+2      	; 0x264a <__addsf3x+0x9a>
    2648:	b0 cf       	rjmp	.-160    	; 0x25aa <__addsf3+0x28>
    264a:	93 95       	inc	r25
    264c:	88 0f       	add	r24, r24
    264e:	08 f0       	brcs	.+2      	; 0x2652 <__addsf3x+0xa2>
    2650:	99 27       	eor	r25, r25
    2652:	ee 0f       	add	r30, r30
    2654:	97 95       	ror	r25
    2656:	87 95       	ror	r24
    2658:	08 95       	ret

0000265a <__fixsfsi>:
    265a:	0e 94 34 13 	call	0x2668	; 0x2668 <__fixunssfsi>
    265e:	68 94       	set
    2660:	b1 11       	cpse	r27, r1
    2662:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__fp_szero>
    2666:	08 95       	ret

00002668 <__fixunssfsi>:
    2668:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__fp_splitA>
    266c:	88 f0       	brcs	.+34     	; 0x2690 <__fixunssfsi+0x28>
    266e:	9f 57       	subi	r25, 0x7F	; 127
    2670:	98 f0       	brcs	.+38     	; 0x2698 <__fixunssfsi+0x30>
    2672:	b9 2f       	mov	r27, r25
    2674:	99 27       	eor	r25, r25
    2676:	b7 51       	subi	r27, 0x17	; 23
    2678:	b0 f0       	brcs	.+44     	; 0x26a6 <__fixunssfsi+0x3e>
    267a:	e1 f0       	breq	.+56     	; 0x26b4 <__fixunssfsi+0x4c>
    267c:	66 0f       	add	r22, r22
    267e:	77 1f       	adc	r23, r23
    2680:	88 1f       	adc	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	1a f0       	brmi	.+6      	; 0x268c <__fixunssfsi+0x24>
    2686:	ba 95       	dec	r27
    2688:	c9 f7       	brne	.-14     	; 0x267c <__fixunssfsi+0x14>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <__fixunssfsi+0x4c>
    268c:	b1 30       	cpi	r27, 0x01	; 1
    268e:	91 f0       	breq	.+36     	; 0x26b4 <__fixunssfsi+0x4c>
    2690:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__fp_zero>
    2694:	b1 e0       	ldi	r27, 0x01	; 1
    2696:	08 95       	ret
    2698:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_zero>
    269c:	67 2f       	mov	r22, r23
    269e:	78 2f       	mov	r23, r24
    26a0:	88 27       	eor	r24, r24
    26a2:	b8 5f       	subi	r27, 0xF8	; 248
    26a4:	39 f0       	breq	.+14     	; 0x26b4 <__fixunssfsi+0x4c>
    26a6:	b9 3f       	cpi	r27, 0xF9	; 249
    26a8:	cc f3       	brlt	.-14     	; 0x269c <__fixunssfsi+0x34>
    26aa:	86 95       	lsr	r24
    26ac:	77 95       	ror	r23
    26ae:	67 95       	ror	r22
    26b0:	b3 95       	inc	r27
    26b2:	d9 f7       	brne	.-10     	; 0x26aa <__fixunssfsi+0x42>
    26b4:	3e f4       	brtc	.+14     	; 0x26c4 <__fixunssfsi+0x5c>
    26b6:	90 95       	com	r25
    26b8:	80 95       	com	r24
    26ba:	70 95       	com	r23
    26bc:	61 95       	neg	r22
    26be:	7f 4f       	sbci	r23, 0xFF	; 255
    26c0:	8f 4f       	sbci	r24, 0xFF	; 255
    26c2:	9f 4f       	sbci	r25, 0xFF	; 255
    26c4:	08 95       	ret

000026c6 <__floatunsisf>:
    26c6:	e8 94       	clt
    26c8:	09 c0       	rjmp	.+18     	; 0x26dc <__floatsisf+0x12>

000026ca <__floatsisf>:
    26ca:	97 fb       	bst	r25, 7
    26cc:	3e f4       	brtc	.+14     	; 0x26dc <__floatsisf+0x12>
    26ce:	90 95       	com	r25
    26d0:	80 95       	com	r24
    26d2:	70 95       	com	r23
    26d4:	61 95       	neg	r22
    26d6:	7f 4f       	sbci	r23, 0xFF	; 255
    26d8:	8f 4f       	sbci	r24, 0xFF	; 255
    26da:	9f 4f       	sbci	r25, 0xFF	; 255
    26dc:	99 23       	and	r25, r25
    26de:	a9 f0       	breq	.+42     	; 0x270a <__floatsisf+0x40>
    26e0:	f9 2f       	mov	r31, r25
    26e2:	96 e9       	ldi	r25, 0x96	; 150
    26e4:	bb 27       	eor	r27, r27
    26e6:	93 95       	inc	r25
    26e8:	f6 95       	lsr	r31
    26ea:	87 95       	ror	r24
    26ec:	77 95       	ror	r23
    26ee:	67 95       	ror	r22
    26f0:	b7 95       	ror	r27
    26f2:	f1 11       	cpse	r31, r1
    26f4:	f8 cf       	rjmp	.-16     	; 0x26e6 <__floatsisf+0x1c>
    26f6:	fa f4       	brpl	.+62     	; 0x2736 <__floatsisf+0x6c>
    26f8:	bb 0f       	add	r27, r27
    26fa:	11 f4       	brne	.+4      	; 0x2700 <__floatsisf+0x36>
    26fc:	60 ff       	sbrs	r22, 0
    26fe:	1b c0       	rjmp	.+54     	; 0x2736 <__floatsisf+0x6c>
    2700:	6f 5f       	subi	r22, 0xFF	; 255
    2702:	7f 4f       	sbci	r23, 0xFF	; 255
    2704:	8f 4f       	sbci	r24, 0xFF	; 255
    2706:	9f 4f       	sbci	r25, 0xFF	; 255
    2708:	16 c0       	rjmp	.+44     	; 0x2736 <__floatsisf+0x6c>
    270a:	88 23       	and	r24, r24
    270c:	11 f0       	breq	.+4      	; 0x2712 <__floatsisf+0x48>
    270e:	96 e9       	ldi	r25, 0x96	; 150
    2710:	11 c0       	rjmp	.+34     	; 0x2734 <__floatsisf+0x6a>
    2712:	77 23       	and	r23, r23
    2714:	21 f0       	breq	.+8      	; 0x271e <__floatsisf+0x54>
    2716:	9e e8       	ldi	r25, 0x8E	; 142
    2718:	87 2f       	mov	r24, r23
    271a:	76 2f       	mov	r23, r22
    271c:	05 c0       	rjmp	.+10     	; 0x2728 <__floatsisf+0x5e>
    271e:	66 23       	and	r22, r22
    2720:	71 f0       	breq	.+28     	; 0x273e <__floatsisf+0x74>
    2722:	96 e8       	ldi	r25, 0x86	; 134
    2724:	86 2f       	mov	r24, r22
    2726:	70 e0       	ldi	r23, 0x00	; 0
    2728:	60 e0       	ldi	r22, 0x00	; 0
    272a:	2a f0       	brmi	.+10     	; 0x2736 <__floatsisf+0x6c>
    272c:	9a 95       	dec	r25
    272e:	66 0f       	add	r22, r22
    2730:	77 1f       	adc	r23, r23
    2732:	88 1f       	adc	r24, r24
    2734:	da f7       	brpl	.-10     	; 0x272c <__floatsisf+0x62>
    2736:	88 0f       	add	r24, r24
    2738:	96 95       	lsr	r25
    273a:	87 95       	ror	r24
    273c:	97 f9       	bld	r25, 7
    273e:	08 95       	ret

00002740 <__fp_inf>:
    2740:	97 f9       	bld	r25, 7
    2742:	9f 67       	ori	r25, 0x7F	; 127
    2744:	80 e8       	ldi	r24, 0x80	; 128
    2746:	70 e0       	ldi	r23, 0x00	; 0
    2748:	60 e0       	ldi	r22, 0x00	; 0
    274a:	08 95       	ret

0000274c <__fp_nan>:
    274c:	9f ef       	ldi	r25, 0xFF	; 255
    274e:	80 ec       	ldi	r24, 0xC0	; 192
    2750:	08 95       	ret

00002752 <__fp_pscA>:
    2752:	00 24       	eor	r0, r0
    2754:	0a 94       	dec	r0
    2756:	16 16       	cp	r1, r22
    2758:	17 06       	cpc	r1, r23
    275a:	18 06       	cpc	r1, r24
    275c:	09 06       	cpc	r0, r25
    275e:	08 95       	ret

00002760 <__fp_pscB>:
    2760:	00 24       	eor	r0, r0
    2762:	0a 94       	dec	r0
    2764:	12 16       	cp	r1, r18
    2766:	13 06       	cpc	r1, r19
    2768:	14 06       	cpc	r1, r20
    276a:	05 06       	cpc	r0, r21
    276c:	08 95       	ret

0000276e <__fp_round>:
    276e:	09 2e       	mov	r0, r25
    2770:	03 94       	inc	r0
    2772:	00 0c       	add	r0, r0
    2774:	11 f4       	brne	.+4      	; 0x277a <__fp_round+0xc>
    2776:	88 23       	and	r24, r24
    2778:	52 f0       	brmi	.+20     	; 0x278e <__fp_round+0x20>
    277a:	bb 0f       	add	r27, r27
    277c:	40 f4       	brcc	.+16     	; 0x278e <__fp_round+0x20>
    277e:	bf 2b       	or	r27, r31
    2780:	11 f4       	brne	.+4      	; 0x2786 <__fp_round+0x18>
    2782:	60 ff       	sbrs	r22, 0
    2784:	04 c0       	rjmp	.+8      	; 0x278e <__fp_round+0x20>
    2786:	6f 5f       	subi	r22, 0xFF	; 255
    2788:	7f 4f       	sbci	r23, 0xFF	; 255
    278a:	8f 4f       	sbci	r24, 0xFF	; 255
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	08 95       	ret

00002790 <__fp_split3>:
    2790:	57 fd       	sbrc	r21, 7
    2792:	90 58       	subi	r25, 0x80	; 128
    2794:	44 0f       	add	r20, r20
    2796:	55 1f       	adc	r21, r21
    2798:	59 f0       	breq	.+22     	; 0x27b0 <__fp_splitA+0x10>
    279a:	5f 3f       	cpi	r21, 0xFF	; 255
    279c:	71 f0       	breq	.+28     	; 0x27ba <__fp_splitA+0x1a>
    279e:	47 95       	ror	r20

000027a0 <__fp_splitA>:
    27a0:	88 0f       	add	r24, r24
    27a2:	97 fb       	bst	r25, 7
    27a4:	99 1f       	adc	r25, r25
    27a6:	61 f0       	breq	.+24     	; 0x27c0 <__fp_splitA+0x20>
    27a8:	9f 3f       	cpi	r25, 0xFF	; 255
    27aa:	79 f0       	breq	.+30     	; 0x27ca <__fp_splitA+0x2a>
    27ac:	87 95       	ror	r24
    27ae:	08 95       	ret
    27b0:	12 16       	cp	r1, r18
    27b2:	13 06       	cpc	r1, r19
    27b4:	14 06       	cpc	r1, r20
    27b6:	55 1f       	adc	r21, r21
    27b8:	f2 cf       	rjmp	.-28     	; 0x279e <__fp_split3+0xe>
    27ba:	46 95       	lsr	r20
    27bc:	f1 df       	rcall	.-30     	; 0x27a0 <__fp_splitA>
    27be:	08 c0       	rjmp	.+16     	; 0x27d0 <__fp_splitA+0x30>
    27c0:	16 16       	cp	r1, r22
    27c2:	17 06       	cpc	r1, r23
    27c4:	18 06       	cpc	r1, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	f1 cf       	rjmp	.-30     	; 0x27ac <__fp_splitA+0xc>
    27ca:	86 95       	lsr	r24
    27cc:	71 05       	cpc	r23, r1
    27ce:	61 05       	cpc	r22, r1
    27d0:	08 94       	sec
    27d2:	08 95       	ret

000027d4 <__fp_zero>:
    27d4:	e8 94       	clt

000027d6 <__fp_szero>:
    27d6:	bb 27       	eor	r27, r27
    27d8:	66 27       	eor	r22, r22
    27da:	77 27       	eor	r23, r23
    27dc:	cb 01       	movw	r24, r22
    27de:	97 f9       	bld	r25, 7
    27e0:	08 95       	ret

000027e2 <__gesf2>:
    27e2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__fp_cmp>
    27e6:	08 f4       	brcc	.+2      	; 0x27ea <__gesf2+0x8>
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	08 95       	ret

000027ec <__mulsf3>:
    27ec:	0e 94 09 14 	call	0x2812	; 0x2812 <__mulsf3x>
    27f0:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__fp_round>
    27f4:	0e 94 a9 13 	call	0x2752	; 0x2752 <__fp_pscA>
    27f8:	38 f0       	brcs	.+14     	; 0x2808 <__mulsf3+0x1c>
    27fa:	0e 94 b0 13 	call	0x2760	; 0x2760 <__fp_pscB>
    27fe:	20 f0       	brcs	.+8      	; 0x2808 <__mulsf3+0x1c>
    2800:	95 23       	and	r25, r21
    2802:	11 f0       	breq	.+4      	; 0x2808 <__mulsf3+0x1c>
    2804:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__fp_inf>
    2808:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__fp_nan>
    280c:	11 24       	eor	r1, r1
    280e:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__fp_szero>

00002812 <__mulsf3x>:
    2812:	0e 94 c8 13 	call	0x2790	; 0x2790 <__fp_split3>
    2816:	70 f3       	brcs	.-36     	; 0x27f4 <__mulsf3+0x8>

00002818 <__mulsf3_pse>:
    2818:	95 9f       	mul	r25, r21
    281a:	c1 f3       	breq	.-16     	; 0x280c <__mulsf3+0x20>
    281c:	95 0f       	add	r25, r21
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	55 1f       	adc	r21, r21
    2822:	62 9f       	mul	r22, r18
    2824:	f0 01       	movw	r30, r0
    2826:	72 9f       	mul	r23, r18
    2828:	bb 27       	eor	r27, r27
    282a:	f0 0d       	add	r31, r0
    282c:	b1 1d       	adc	r27, r1
    282e:	63 9f       	mul	r22, r19
    2830:	aa 27       	eor	r26, r26
    2832:	f0 0d       	add	r31, r0
    2834:	b1 1d       	adc	r27, r1
    2836:	aa 1f       	adc	r26, r26
    2838:	64 9f       	mul	r22, r20
    283a:	66 27       	eor	r22, r22
    283c:	b0 0d       	add	r27, r0
    283e:	a1 1d       	adc	r26, r1
    2840:	66 1f       	adc	r22, r22
    2842:	82 9f       	mul	r24, r18
    2844:	22 27       	eor	r18, r18
    2846:	b0 0d       	add	r27, r0
    2848:	a1 1d       	adc	r26, r1
    284a:	62 1f       	adc	r22, r18
    284c:	73 9f       	mul	r23, r19
    284e:	b0 0d       	add	r27, r0
    2850:	a1 1d       	adc	r26, r1
    2852:	62 1f       	adc	r22, r18
    2854:	83 9f       	mul	r24, r19
    2856:	a0 0d       	add	r26, r0
    2858:	61 1d       	adc	r22, r1
    285a:	22 1f       	adc	r18, r18
    285c:	74 9f       	mul	r23, r20
    285e:	33 27       	eor	r19, r19
    2860:	a0 0d       	add	r26, r0
    2862:	61 1d       	adc	r22, r1
    2864:	23 1f       	adc	r18, r19
    2866:	84 9f       	mul	r24, r20
    2868:	60 0d       	add	r22, r0
    286a:	21 1d       	adc	r18, r1
    286c:	82 2f       	mov	r24, r18
    286e:	76 2f       	mov	r23, r22
    2870:	6a 2f       	mov	r22, r26
    2872:	11 24       	eor	r1, r1
    2874:	9f 57       	subi	r25, 0x7F	; 127
    2876:	50 40       	sbci	r21, 0x00	; 0
    2878:	9a f0       	brmi	.+38     	; 0x28a0 <__mulsf3_pse+0x88>
    287a:	f1 f0       	breq	.+60     	; 0x28b8 <__mulsf3_pse+0xa0>
    287c:	88 23       	and	r24, r24
    287e:	4a f0       	brmi	.+18     	; 0x2892 <__mulsf3_pse+0x7a>
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	bb 1f       	adc	r27, r27
    2886:	66 1f       	adc	r22, r22
    2888:	77 1f       	adc	r23, r23
    288a:	88 1f       	adc	r24, r24
    288c:	91 50       	subi	r25, 0x01	; 1
    288e:	50 40       	sbci	r21, 0x00	; 0
    2890:	a9 f7       	brne	.-22     	; 0x287c <__mulsf3_pse+0x64>
    2892:	9e 3f       	cpi	r25, 0xFE	; 254
    2894:	51 05       	cpc	r21, r1
    2896:	80 f0       	brcs	.+32     	; 0x28b8 <__mulsf3_pse+0xa0>
    2898:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__fp_inf>
    289c:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__fp_szero>
    28a0:	5f 3f       	cpi	r21, 0xFF	; 255
    28a2:	e4 f3       	brlt	.-8      	; 0x289c <__mulsf3_pse+0x84>
    28a4:	98 3e       	cpi	r25, 0xE8	; 232
    28a6:	d4 f3       	brlt	.-12     	; 0x289c <__mulsf3_pse+0x84>
    28a8:	86 95       	lsr	r24
    28aa:	77 95       	ror	r23
    28ac:	67 95       	ror	r22
    28ae:	b7 95       	ror	r27
    28b0:	f7 95       	ror	r31
    28b2:	e7 95       	ror	r30
    28b4:	9f 5f       	subi	r25, 0xFF	; 255
    28b6:	c1 f7       	brne	.-16     	; 0x28a8 <__mulsf3_pse+0x90>
    28b8:	fe 2b       	or	r31, r30
    28ba:	88 0f       	add	r24, r24
    28bc:	91 1d       	adc	r25, r1
    28be:	96 95       	lsr	r25
    28c0:	87 95       	ror	r24
    28c2:	97 f9       	bld	r25, 7
    28c4:	08 95       	ret

000028c6 <__fp_cmp>:
    28c6:	99 0f       	add	r25, r25
    28c8:	00 08       	sbc	r0, r0
    28ca:	55 0f       	add	r21, r21
    28cc:	aa 0b       	sbc	r26, r26
    28ce:	e0 e8       	ldi	r30, 0x80	; 128
    28d0:	fe ef       	ldi	r31, 0xFE	; 254
    28d2:	16 16       	cp	r1, r22
    28d4:	17 06       	cpc	r1, r23
    28d6:	e8 07       	cpc	r30, r24
    28d8:	f9 07       	cpc	r31, r25
    28da:	c0 f0       	brcs	.+48     	; 0x290c <__fp_cmp+0x46>
    28dc:	12 16       	cp	r1, r18
    28de:	13 06       	cpc	r1, r19
    28e0:	e4 07       	cpc	r30, r20
    28e2:	f5 07       	cpc	r31, r21
    28e4:	98 f0       	brcs	.+38     	; 0x290c <__fp_cmp+0x46>
    28e6:	62 1b       	sub	r22, r18
    28e8:	73 0b       	sbc	r23, r19
    28ea:	84 0b       	sbc	r24, r20
    28ec:	95 0b       	sbc	r25, r21
    28ee:	39 f4       	brne	.+14     	; 0x28fe <__fp_cmp+0x38>
    28f0:	0a 26       	eor	r0, r26
    28f2:	61 f0       	breq	.+24     	; 0x290c <__fp_cmp+0x46>
    28f4:	23 2b       	or	r18, r19
    28f6:	24 2b       	or	r18, r20
    28f8:	25 2b       	or	r18, r21
    28fa:	21 f4       	brne	.+8      	; 0x2904 <__fp_cmp+0x3e>
    28fc:	08 95       	ret
    28fe:	0a 26       	eor	r0, r26
    2900:	09 f4       	brne	.+2      	; 0x2904 <__fp_cmp+0x3e>
    2902:	a1 40       	sbci	r26, 0x01	; 1
    2904:	a6 95       	lsr	r26
    2906:	8f ef       	ldi	r24, 0xFF	; 255
    2908:	81 1d       	adc	r24, r1
    290a:	81 1d       	adc	r24, r1
    290c:	08 95       	ret

0000290e <__tablejump2__>:
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	05 90       	lpm	r0, Z+
    2914:	f4 91       	lpm	r31, Z
    2916:	e0 2d       	mov	r30, r0
    2918:	09 94       	ijmp

0000291a <__itoa_ncheck>:
    291a:	bb 27       	eor	r27, r27
    291c:	4a 30       	cpi	r20, 0x0A	; 10
    291e:	31 f4       	brne	.+12     	; 0x292c <__itoa_ncheck+0x12>
    2920:	99 23       	and	r25, r25
    2922:	22 f4       	brpl	.+8      	; 0x292c <__itoa_ncheck+0x12>
    2924:	bd e2       	ldi	r27, 0x2D	; 45
    2926:	90 95       	com	r25
    2928:	81 95       	neg	r24
    292a:	9f 4f       	sbci	r25, 0xFF	; 255
    292c:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__utoa_common>

00002930 <__utoa_ncheck>:
    2930:	bb 27       	eor	r27, r27

00002932 <__utoa_common>:
    2932:	fb 01       	movw	r30, r22
    2934:	55 27       	eor	r21, r21
    2936:	aa 27       	eor	r26, r26
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	aa 1f       	adc	r26, r26
    293e:	a4 17       	cp	r26, r20
    2940:	10 f0       	brcs	.+4      	; 0x2946 <__utoa_common+0x14>
    2942:	a4 1b       	sub	r26, r20
    2944:	83 95       	inc	r24
    2946:	50 51       	subi	r21, 0x10	; 16
    2948:	b9 f7       	brne	.-18     	; 0x2938 <__utoa_common+0x6>
    294a:	a0 5d       	subi	r26, 0xD0	; 208
    294c:	aa 33       	cpi	r26, 0x3A	; 58
    294e:	08 f0       	brcs	.+2      	; 0x2952 <__utoa_common+0x20>
    2950:	a9 5d       	subi	r26, 0xD9	; 217
    2952:	a1 93       	st	Z+, r26
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	79 f7       	brne	.-34     	; 0x2936 <__utoa_common+0x4>
    2958:	b1 11       	cpse	r27, r1
    295a:	b1 93       	st	Z+, r27
    295c:	11 92       	st	Z+, r1
    295e:	cb 01       	movw	r24, r22
    2960:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <strrev>

00002964 <strrev>:
    2964:	dc 01       	movw	r26, r24
    2966:	fc 01       	movw	r30, r24
    2968:	67 2f       	mov	r22, r23
    296a:	71 91       	ld	r23, Z+
    296c:	77 23       	and	r23, r23
    296e:	e1 f7       	brne	.-8      	; 0x2968 <strrev+0x4>
    2970:	32 97       	sbiw	r30, 0x02	; 2
    2972:	04 c0       	rjmp	.+8      	; 0x297c <strrev+0x18>
    2974:	7c 91       	ld	r23, X
    2976:	6d 93       	st	X+, r22
    2978:	70 83       	st	Z, r23
    297a:	62 91       	ld	r22, -Z
    297c:	ae 17       	cp	r26, r30
    297e:	bf 07       	cpc	r27, r31
    2980:	c8 f3       	brcs	.-14     	; 0x2974 <strrev+0x10>
    2982:	08 95       	ret

00002984 <_exit>:
    2984:	f8 94       	cli

00002986 <__stop_program>:
    2986:	ff cf       	rjmp	.-2      	; 0x2986 <__stop_program>
