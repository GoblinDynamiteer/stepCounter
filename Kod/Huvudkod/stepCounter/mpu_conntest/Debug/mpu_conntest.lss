
mpu_conntest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000031ba  0000324e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ff  00800134  00800134  00003282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fe9b  00000000  00000000  00003adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025b2  00000000  00000000  00013977  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f30  00000000  00000000  00015f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a10  00000000  00000000  00019e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039c0  00000000  00000000  0001b86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b179  00000000  00000000  0001f22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  0002a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__ctors_end>
       4:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
       8:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
       c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      10:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      14:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      18:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      1c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      20:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      24:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      28:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      2c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      30:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      34:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      38:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      3c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      40:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      44:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      48:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__vector_18>
      4c:	0c 94 15 14 	jmp	0x282a	; 0x282a <__vector_19>
      50:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      54:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      58:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      5c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      60:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      64:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__bad_interrupt>
      68:	bf 13       	cpse	r27, r31
      6a:	c7 13       	cpse	r28, r23
      6c:	e1 13       	cpse	r30, r17
      6e:	d1 13       	cpse	r29, r17
      70:	e1 13       	cpse	r30, r17
      72:	e1 13       	cpse	r30, r17
      74:	e1 13       	cpse	r30, r17
      76:	e1 13       	cpse	r30, r17
      78:	e1 13       	cpse	r30, r17
      7a:	e1 13       	cpse	r30, r17
      7c:	e1 13       	cpse	r30, r17
      7e:	e1 13       	cpse	r30, r17
      80:	e1 13       	cpse	r30, r17
      82:	e1 13       	cpse	r30, r17
      84:	e1 13       	cpse	r30, r17
      86:	e1 13       	cpse	r30, r17
      88:	e1 13       	cpse	r30, r17
      8a:	e1 13       	cpse	r30, r17
      8c:	e1 13       	cpse	r30, r17
      8e:	e1 13       	cpse	r30, r17
      90:	e1 13       	cpse	r30, r17
      92:	e1 13       	cpse	r30, r17
      94:	e1 13       	cpse	r30, r17
      96:	e1 13       	cpse	r30, r17
      98:	e1 13       	cpse	r30, r17
      9a:	e1 13       	cpse	r30, r17
      9c:	e1 13       	cpse	r30, r17
      9e:	e1 13       	cpse	r30, r17
      a0:	e1 13       	cpse	r30, r17
      a2:	e1 13       	cpse	r30, r17
      a4:	b9 13       	cpse	r27, r25
      a6:	e1 13       	cpse	r30, r17
      a8:	e1 13       	cpse	r30, r17
      aa:	e1 13       	cpse	r30, r17
      ac:	e1 13       	cpse	r30, r17
      ae:	e1 13       	cpse	r30, r17
      b0:	e1 13       	cpse	r30, r17
      b2:	e1 13       	cpse	r30, r17
      b4:	e1 13       	cpse	r30, r17
      b6:	ad 13       	cpse	r26, r29
      b8:	e1 13       	cpse	r30, r17
      ba:	e1 13       	cpse	r30, r17
      bc:	e1 13       	cpse	r30, r17
      be:	e1 13       	cpse	r30, r17
      c0:	e1 13       	cpse	r30, r17
      c2:	e1 13       	cpse	r30, r17
      c4:	e1 13       	cpse	r30, r17
      c6:	e1 13       	cpse	r30, r17
      c8:	e1 13       	cpse	r30, r17
      ca:	e1 13       	cpse	r30, r17
      cc:	d7 13       	cpse	r29, r23
      ce:	dc 13       	cpse	r29, r28

000000d0 <__trampolines_end>:
      d0:	00 40       	sbci	r16, 0x00	; 0
      d2:	7a 10       	cpse	r7, r10
      d4:	f3 5a       	subi	r31, 0xA3	; 163
      d6:	00 a0       	ldd	r0, Z+32	; 0x20
      d8:	72 4e       	sbci	r23, 0xE2	; 226
      da:	18 09       	sbc	r17, r8
      dc:	00 10       	cpse	r0, r0
      de:	a5 d4       	rcall	.+2378   	; 0xa2a <__stack+0x12b>
      e0:	e8 00       	.word	0x00e8	; ????
      e2:	00 e8       	ldi	r16, 0x80	; 128
      e4:	76 48       	sbci	r23, 0x86	; 134
      e6:	17 00       	.word	0x0017	; ????
      e8:	00 e4       	ldi	r16, 0x40	; 64
      ea:	0b 54       	subi	r16, 0x4B	; 75
      ec:	02 00       	.word	0x0002	; ????
      ee:	00 ca       	rjmp	.-3072   	; 0xfffff4f0 <__eeprom_end+0xff7ef4f0>
      f0:	9a 3b       	cpi	r25, 0xBA	; 186
      f2:	00 00       	nop
      f4:	00 e1       	ldi	r16, 0x10	; 16
      f6:	f5 05       	cpc	r31, r5
      f8:	00 00       	nop
      fa:	80 96       	adiw	r24, 0x20	; 32
      fc:	98 00       	.word	0x0098	; ????
      fe:	00 00       	nop
     100:	40 42       	sbci	r20, 0x20	; 32
     102:	0f 00       	.word	0x000f	; ????
     104:	00 00       	nop
     106:	a0 86       	std	Z+8, r10	; 0x08
     108:	01 00       	.word	0x0001	; ????
     10a:	00 00       	nop
     10c:	10 27       	eor	r17, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	e8 03       	fmulsu	r22, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	64 00       	.word	0x0064	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	0a 00       	.word	0x000a	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	01 00       	.word	0x0001	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	2c 76       	andi	r18, 0x6C	; 108
     12c:	d8 88       	ldd	r13, Y+16	; 0x10
     12e:	dc 67       	ori	r29, 0x7C	; 124
     130:	4f 08       	sbc	r4, r15
     132:	23 df       	rcall	.-442    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     134:	c1 df       	rcall	.-126    	; 0xb8 <__SREG__+0x79>
     136:	ae 59       	subi	r26, 0x9E	; 158
     138:	e1 b1       	in	r30, 0x01	; 1
     13a:	b7 96       	adiw	r30, 0x27	; 39
     13c:	e5 e3       	ldi	r30, 0x35	; 53
     13e:	e4 53       	subi	r30, 0x34	; 52
     140:	c6 3a       	cpi	r28, 0xA6	; 166
     142:	e6 51       	subi	r30, 0x16	; 22
     144:	99 76       	andi	r25, 0x69	; 105
     146:	96 e8       	ldi	r25, 0x86	; 134
     148:	e6 c2       	rjmp	.+1484   	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     14a:	84 26       	eor	r8, r20
     14c:	eb 89       	ldd	r30, Y+19	; 0x13
     14e:	8c 9b       	sbis	0x11, 4	; 17
     150:	62 ed       	ldi	r22, 0xD2	; 210
     152:	40 7c       	andi	r20, 0xC0	; 192
     154:	6f fc       	.word	0xfc6f	; ????
     156:	ef bc       	out	0x2f, r14	; 47
     158:	9c 9f       	mul	r25, r28
     15a:	40 f2       	brcs	.-112    	; 0xec <__trampolines_end+0x1c>
     15c:	ba a5       	ldd	r27, Y+42	; 0x2a
     15e:	6f a5       	ldd	r22, Y+47	; 0x2f
     160:	f4 90       	lpm	r15, Z
     162:	05 5a       	subi	r16, 0xA5	; 165
     164:	2a f7       	brpl	.-54     	; 0x130 <__trampolines_end+0x60>
     166:	5c 93       	st	X, r21
     168:	6b 6c       	ori	r22, 0xCB	; 203
     16a:	f9 67       	ori	r31, 0x79	; 121
     16c:	6d c1       	rjmp	.+730    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     16e:	1b fc       	.word	0xfc1b	; ????
     170:	e0 e4       	ldi	r30, 0x40	; 64
     172:	0d 47       	sbci	r16, 0x7D	; 125
     174:	fe f5       	brtc	.+126    	; 0x1f4 <u8g_dev_ssd1306_128x64_adafruit2_init_seq+0xe>
     176:	20 e6       	ldi	r18, 0x60	; 96
     178:	b5 00       	.word	0x00b5	; ????
     17a:	d0 ed       	ldi	r29, 0xD0	; 208
     17c:	90 2e       	mov	r9, r16
     17e:	03 00       	.word	0x0003	; ????
     180:	94 35       	cpi	r25, 0x54	; 84
     182:	77 05       	cpc	r23, r7
     184:	00 80       	ld	r0, Z
     186:	84 1e       	adc	r8, r20
     188:	08 00       	.word	0x0008	; ????
     18a:	00 20       	and	r0, r0
     18c:	4e 0a       	sbc	r4, r30
     18e:	00 00       	nop
     190:	00 c8       	rjmp	.-4096   	; 0xfffff192 <__eeprom_end+0xff7ef192>
     192:	0c 33       	cpi	r16, 0x3C	; 60
     194:	33 33       	cpi	r19, 0x33	; 51
     196:	33 0f       	add	r19, r19
     198:	98 6e       	ori	r25, 0xE8	; 232
     19a:	12 83       	std	Z+2, r17	; 0x02
     19c:	11 41       	sbci	r17, 0x11	; 17
     19e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a0:	21 14       	cp	r2, r1
     1a2:	89 3b       	cpi	r24, 0xB9	; 185
     1a4:	e6 55       	subi	r30, 0x56	; 86
     1a6:	16 cf       	rjmp	.-468    	; 0xffffffd4 <__eeprom_end+0xff7effd4>
     1a8:	fe e6       	ldi	r31, 0x6E	; 110
     1aa:	db 18       	sub	r13, r11
     1ac:	d1 84       	ldd	r13, Z+9	; 0x09
     1ae:	4b 38       	cpi	r20, 0x8B	; 139
     1b0:	1b f7       	brvc	.-58     	; 0x178 <__trampolines_end+0xa8>
     1b2:	7c 1d       	adc	r23, r12
     1b4:	90 1d       	adc	r25, r0
     1b6:	a4 bb       	out	0x14, r26	; 20
     1b8:	e4 24       	eor	r14, r4
     1ba:	20 32       	cpi	r18, 0x20	; 32
     1bc:	84 72       	andi	r24, 0x24	; 36
     1be:	5e 22       	and	r5, r30
     1c0:	81 00       	.word	0x0081	; ????
     1c2:	c9 f1       	breq	.+114    	; 0x236 <u8g_font_fub11+0x2a>
     1c4:	24 ec       	ldi	r18, 0xC4	; 196
     1c6:	a1 e5       	ldi	r26, 0x51	; 81
     1c8:	3d 27       	eor	r19, r29

000001ca <u8g_dev_ssd13xx_sleep_off>:
     1ca:	ff e0 ff d1 af ff 32 ff d0 ff fe                    ......2....

000001d5 <u8g_dev_ssd13xx_sleep_on>:
     1d5:	ff e0 ff d1 ae ff d0 ff fe                          .........

000001de <u8g_dev_ssd1306_128x64_data_start>:
     1de:	ff e0 ff d1 10 00 ff fe                             ........

000001e6 <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
     1e6:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
     1f6:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     206:	a6 af ff d0 ff fe                                   ......

0000020c <u8g_font_fub11>:
     20c:	00 18 15 ff fc 0b 02 52 05 37 20 ff fd 11 fc 0b     .......R.7 .....
     21c:	fd 00 00 00 05 00 00 02 0b 0b 06 02 00 c0 c0 c0     ................
     22c:	c0 c0 c0 c0 c0 00 00 c0 06 05 05 08 01 06 cc cc     ................
     23c:	cc cc cc 0a 0b 16 0b 01 00 09 80 19 80 19 00 7f     ................
     24c:	c0 33 00 32 00 36 00 ff 00 64 00 6c 00 4c 00 08     .3.2.6...d.l.L..
     25c:	0e 0e 0a 01 fe 08 3e 7e cb c8 f8 7e 0f 0b cb eb     ......>~...~....
     26c:	7e 08 08 0f 0b 16 11 01 00 3c 20 ee 60 c6 40 c6     ~........< .`.@.
     27c:	c0 e7 80 7d 7c 03 ee 02 c6 06 c6 04 ee 08 7c 0b     ...}|.........|.
     28c:	0b 16 0d 01 00 3e 00 77 00 63 00 77 00 3c 00 7c     .....>.w.c.w.<.|
     29c:	c0 ee c0 c7 c0 c3 c0 f3 c0 3f e0 02 05 05 07 02     .........?......
     2ac:	06 c0 c0 c0 c0 c0 03 0e 0e 06 01 fd 60 60 60 e0     ............```.
     2bc:	c0 c0 c0 c0 c0 c0 e0 60 60 60 03 0e 0e 07 02 fd     .......```......
     2cc:	c0 c0 c0 60 60 60 60 60 60 60 60 e0 c0 c0 06 05     ...````````.....
     2dc:	05 0a 02 05 78 30 fc 30 78 09 09 12 10 03 00 08     ....x0.0x.......
     2ec:	00 08 00 08 00 08 00 ff 80 08 00 08 00 08 00 08     ................
     2fc:	00 03 04 04 05 01 fe 60 60 c0 c0 04 02 02 06 01     .......``.......
     30c:	03 f0 f0 02 02 02 05 02 00 c0 c0 05 0c 0c 07 01     ................
     31c:	ff 18 18 10 30 30 20 20 60 60 40 c0 c0 08 0b 0b     ....00  ``@.....
     32c:	09 01 00 3c 66 c3 c3 c3 c3 c3 c3 c3 66 3c 04 0b     ...<f.......f<..
     33c:	0b 09 02 00 30 f0 f0 30 30 30 30 30 30 30 30 08     ....0..00000000.
     34c:	0b 0b 09 01 00 3e 77 63 03 07 06 1e 3c 70 e0 ff     .....>wc....<p..
     35c:	08 0b 0b 09 01 00 7c ee c6 06 3c 06 03 c3 c7 7e     ......|...<....~
     36c:	3c 08 0b 0b 09 01 00 0e 1e 1e 36 66 66 c6 ff ff     <.........6ff...
     37c:	06 06 08 0b 0b 09 01 00 fe c0 c0 c0 fe e7 03 03     ................
     38c:	c7 fe 7c 08 0b 0b 09 01 00 3c 76 43 c0 de e7 c3     ..|......<vC....
     39c:	c3 c3 66 3c 08 0b 0b 09 01 00 ff 03 07 06 0e 0c     ..f<............
     3ac:	1c 18 38 38 70 08 0b 0b 09 01 00 7e e7 c3 e7 3c     ..88p......~...<
     3bc:	66 c3 c3 c3 e7 3c 08 0b 0b 09 01 00 3c 66 c3 c3     f....<......<f..
     3cc:	e7 7f 03 03 c6 6e 3c 02 08 08 05 02 00 c0 c0 00     .....n<.........
     3dc:	00 00 00 c0 c0 03 0a 0a 05 01 fe 60 60 00 00 00     ...........``...
     3ec:	00 60 60 c0 c0 0a 08 10 10 03 01 00 40 03 80 0c     .``.........@...
     3fc:	00 70 00 80 00 70 00 0e 00 01 c0 0a 04 08 10 03     .p...p..........
     40c:	03 ff c0 00 00 00 00 ff c0 0a 08 10 10 03 01 80     ................
     41c:	00 60 00 1c 00 03 80 00 c0 07 00 18 00 e0 00 07     .`..............
     42c:	0b 0b 09 01 00 78 ee 86 06 0c 18 30 30 30 00 30     .....x.....000.0
     43c:	0f 0e 1c 11 01 fd 07 e0 1e 78 30 1c 67 ec ee e6     .........x0.g...
     44c:	cc 66 cc 66 cc 66 cc 66 ef fc 67 b8 30 00 1c 20     .f.f.f.f..g.0.. 
     45c:	07 e0 0b 0b 16 0b 00 00 0e 00 0e 00 0f 00 1b 00     ................
     46c:	1b 80 39 80 31 80 3f c0 7f c0 60 e0 e0 60 09 0b     ..9.1.?...`..`..
     47c:	16 0b 01 00 fe 00 c7 00 c3 00 c3 00 c7 00 fc 00     ................
     48c:	c3 00 c1 80 c1 80 c3 80 fe 00 0a 0b 16 0c 01 00     ................
     49c:	1f 00 73 80 61 c0 c0 00 c0 00 c0 00 c0 00 c1 c0     ..s.a...........
     4ac:	61 c0 73 80 1f 00 09 0b 16 0b 01 00 fc 00 cf 00     a.s.............
     4bc:	c3 00 c1 80 c1 80 c1 80 c1 80 c1 80 c3 00 cf 00     ................
     4cc:	fc 00 08 0b 0b 0a 01 00 ff c0 c0 c0 c0 ff c0 c0     ................
     4dc:	c0 c0 ff 08 0b 0b 09 01 00 ff c0 c0 c0 c0 fe c0     ................
     4ec:	c0 c0 c0 c0 0a 0b 16 0c 01 00 1f 00 3b c0 60 c0     ............;.`.
     4fc:	e0 00 c0 00 c3 c0 c0 c0 c0 c0 60 c0 39 c0 1f c0     ..........`.9...
     50c:	09 0b 16 0b 01 00 c1 80 c1 80 c1 80 c1 80 c1 80     ................
     51c:	ff 80 c1 80 c1 80 c1 80 c1 80 c1 80 02 0b 0b 04     ................
     52c:	01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 08 0b 0b     ................
     53c:	0a 01 00 03 03 03 03 03 03 03 c3 c3 fe 7c 09 0b     .............|..
     54c:	16 0b 01 00 c3 00 c7 00 ce 00 dc 00 f8 00 f8 00     ................
     55c:	dc 00 ce 00 ce 00 c7 00 c3 80 08 0b 0b 09 01 00     ................
     56c:	c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff 0d 0b 16 0f 01     ................
     57c:	00 f0 78 f0 78 f8 f8 d8 d8 d8 d8 dd d8 cd 98 cd     ..x.x...........
     58c:	98 cf 98 c7 18 c7 18 0a 0b 16 0c 01 00 f0 c0 f0     ................
     59c:	c0 f8 c0 d8 c0 dc c0 cc c0 ce c0 c6 c0 c7 c0 c3     ................
     5ac:	c0 c3 c0 0b 0b 16 0d 01 00 1f 00 7b c0 60 c0 c0     ...........{.`..
     5bc:	60 c0 60 c0 60 c0 60 c0 60 60 c0 7b c0 1f 00 08     `.`.`.`.``.{....
     5cc:	0b 0b 0a 01 00 fc c7 c3 c3 c7 fe c0 c0 c0 c0 c0     ................
     5dc:	0c 0b 16 0e 01 00 1f 00 7b 80 60 c0 c0 60 c0 60     ........{.`..`.`
     5ec:	c0 60 c0 60 c0 60 60 c0 7b c0 1f f0 09 0b 16 0b     .`.`.``.{.......
     5fc:	01 00 fe 00 c7 80 c1 80 c1 80 c3 00 fe 00 c3 00     ................
     60c:	c1 80 c1 80 c1 80 c1 80 09 0b 16 0b 01 00 3e 00     ..............>.
     61c:	77 00 c1 80 e0 00 f8 00 7f 00 0f 80 01 80 c1 80     w...............
     62c:	77 00 3e 00 09 0b 16 0b 01 00 ff 80 0c 00 0c 00     w.>.............
     63c:	0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
     64c:	0a 0b 16 0c 01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     65c:	c0 c0 c0 c0 c0 c0 e1 c0 73 80 3e 00 0b 0b 16 0c     ........s.>.....
     66c:	00 00 e0 60 60 60 70 e0 30 c0 31 c0 39 80 19 80     ...```p.0.1.9...
     67c:	1f 80 1f 00 0f 00 0e 00 10 0b 16 10 00 00 e1 87     ................
     68c:	63 c6 63 c6 63 c6 77 ce 36 6c 36 6c 36 6c 3c 3c     c.c.c.w.6l6l6l<<
     69c:	1c 38 1c 38 0b 0b 16 0b 00 00 70 c0 31 c0 3b 80     .8.8......p.1.;.
     6ac:	1f 00 0e 00 0e 00 1f 00 1b 00 33 80 71 c0 e0 e0     ..........3.q...
     6bc:	0a 0b 16 0a 00 00 e1 c0 71 80 33 80 3b 00 1f 00     ........q.3.;...
     6cc:	1e 00 0c 00 0c 00 0c 00 0c 00 0c 00 08 0b 0b 0a     ................
     6dc:	01 00 ff 07 06 0e 1c 18 38 70 60 c0 ff 04 0e 0e     ........8p`.....
     6ec:	06 01 fd f0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     6fc:	f0 05 0c 0c 07 01 ff 80 c0 c0 40 60 60 20 30 30     ..........@`` 00
     70c:	10 10 18 04 0e 0e 07 01 fd f0 30 30 30 30 30 30     ..........000000
     71c:	30 30 30 30 30 30 f0 08 0a 0a 10 04 00 10 18 18     000000..........
     72c:	24 24 24 42 42 81 81 08 01 01 08 00 fe ff 03 03     $$$BB...........
     73c:	03 04 00 09 c0 40 20 07 08 08 09 01 00 3c 6e 06     .....@ ......<n.
     74c:	7e e6 c6 ee 76 08 0b 0b 0a 01 00 c0 c0 c0 dc f6     ~...v...........
     75c:	c7 c3 c3 c3 e6 dc 07 08 08 09 01 00 3c 6e c6 c0     ............<n..
     76c:	c0 c6 ee 3c 08 0b 0b 0a 01 00 03 03 03 3b 6f e3     ...<.........;o.
     77c:	c3 c3 c3 67 3b 07 08 08 09 01 00 3c 6e c6 fe c0     ...g;......<n...
     78c:	c6 6e 3c 05 0b 0b 07 01 00 38 30 30 f8 30 30 30     .n<......800.000
     79c:	30 30 30 30 08 0b 0b 0a 01 fd 3b 6f e3 c3 c3 c3     0000......;o....
     7ac:	67 3b 03 67 3c 07 0b 0b 09 01 00 c0 c0 c0 dc ee     g;.g<...........
     7bc:	c6 c6 c6 c6 c6 c6 02 0b 0b 04 01 00 c0 c0 00 c0     ................
     7cc:	c0 c0 c0 c0 c0 c0 c0 03 0e 0e 05 01 fd 60 60 00     .............``.
     7dc:	60 60 60 60 60 60 60 60 60 e0 e0 07 0b 0b 09 01     `````````.......
     7ec:	00 c0 c0 c0 ce dc d8 f0 d8 dc cc c6 02 0b 0b 04     ................
     7fc:	01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 0c 08 10     ................
     80c:	0e 01 00 dc e0 ef 70 c6 30 c6 30 c6 30 c6 30 c6     ......p.0.0.0.0.
     81c:	30 c6 30 07 08 08 09 01 00 dc ee c6 c6 c6 c6 c6     0.0.............
     82c:	c6 08 08 08 0a 01 00 3c 66 c3 c3 c3 c3 66 3c 08     .......<f....f<.
     83c:	0b 0b 0a 01 fd dc e6 c3 c3 c3 c7 f6 dc c0 c0 c0     ................
     84c:	08 0b 0b 0a 01 fd 3b 67 c3 c3 c3 c3 6f 3b 03 03     ......;g....o;..
     85c:	03 05 08 08 07 01 00 d8 f0 c0 c0 c0 c0 c0 c0 07     ................
     86c:	08 08 09 01 00 7c ee c0 f8 1e c6 ee 7c 06 0a 0a     .....|......|...
     87c:	08 01 00 30 30 fc 30 30 30 30 30 38 1c 07 08 08     ...00.000008....
     88c:	09 01 00 c6 c6 c6 c6 c6 c6 ee 76 08 08 08 09 00     ..........v.....
     89c:	00 e3 63 67 76 36 3c 1c 1c 0d 08 10 0e 00 00 e7     ..cgv6<.........
     8ac:	18 67 98 67 98 6f b0 3d f0 3c f0 3c f0 38 e0 08     .g.g.o.=.<.<.8..
     8bc:	08 08 09 00 00 63 76 3e 1c 3c 3e 67 e3 08 0b 0b     .....cv>.<>g....
     8cc:	09 00 fd e3 63 77 36 36 3e 1c 1c 18 18 38 06 08     ....cw66>....8..
     8dc:	08 08 01 00 fc 0c 18 38 70 60 c0 fc 06 0f 0f 08     .......8p`......
     8ec:	01 fc 1c 38 30 30 30 30 70 c0 60 30 30 30 30 30     ...80000p.`00000
     8fc:	1c 01 10 10 05 02 fc 80 80 80 80 80 80 80 80 80     ................
     90c:	80 80 80 80 80 80 80 06 0f 0f 08 01 fc e0 70 30     ..............p0
     91c:	30 30 30 18 0c 18 30 30 30 30 30 f0 08 02 02 09     000...00000.....
     92c:	00 03 79 df ff ff ff ff ff ff ff ff ff ff ff ff     ..y.............
     93c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     94c:	ff ff ff ff ff 00 00 00 05 00 00 02 0b 0b 06 02     ................
     95c:	fd c0 00 00 c0 c0 c0 c0 c0 c0 c0 c0 07 0c 0c 09     ................
     96c:	01 fe 04 04 3c 6e ce d0 d0 d6 6e 3c 20 40 08 0b     ....<n....n< @..
     97c:	0b 0a 01 00 3e 77 60 60 fc 60 60 60 60 60 ff 09     ....>w``.`````..
     98c:	08 10 0a 01 02 80 80 5d 00 22 00 41 00 41 00 22     .......].".A.A."
     99c:	00 5d 00 80 80 09 0b 16 0b 01 00 c3 80 63 00 67     .]...........c.g
     9ac:	00 f7 80 3e 00 3c 00 ff 80 18 00 18 00 18 00 18     ...>.<..........
     9bc:	00 01 0e 0e 05 02 fd 80 80 80 80 80 80 00 00 80     ................
     9cc:	80 80 80 80 80 06 0e 0e 08 01 fd 78 ec c0 e0 78     ...........x...x
     9dc:	7c cc cc f8 78 1c 0c 9c f8 05 01 01 05 00 0a d8     |...x...........
     9ec:	0c 0b 16 0e 01 00 1f 80 39 c0 6f 60 d9 b0 98 10     ........9.o`....
     9fc:	98 10 99 90 8f 10 40 20 30 c0 1f 80 05 08 08 07     ......@ 0.......
     a0c:	01 03 70 d8 78 d8 d8 78 00 f8 08 06 06 0a 01 01     ..p.x..x........
     a1c:	67 66 ee ce 66 67 09 04 08 0a 00 03 ff 80 00 80     gf..fg..........
     a2c:	00 80 00 80 ff 0c 0b 16 0e 01 00 1f 80 39 c0 6f     .............9.o
     a3c:	60 c9 b0 88 90 8f 10 89 90 88 90 48 a0 30 c0 1f     `..........H.0..
     a4c:	80 05 01 01 05 00 0a f8 04 04 04 06 01 07 60 d0     ..............`.
     a5c:	90 f0 09 0a 14 10 03 00 08 00 08 00 08 00 ff 80     ................
     a6c:	08 00 08 00 08 00 00 00 00 00 ff 80 05 06 06 07     ................
     a7c:	01 05 70 d8 18 30 c0 f8 05 07 07 07 01 04 70 d8     ..p..0........p.
     a8c:	18 70 18 d8 70 03 03 03 04 01 09 60 c0 80 ff 07     .p..p......`....
     a9c:	0e 0e 09 01 fd 7e f4 f4 f4 f4 74 14 14 14 14 14     .....~....t.....
     aac:	14 14 14 02 02 02 04 01 04 c0 c0 04 04 04 03 00     ................
     abc:	fc 40 30 b0 e0 03 06 06 05 01 05 60 e0 60 60 60     .@0........`.```
     acc:	60 06 08 08 08 01 03 78 fc cc cc cc 78 00 fc 08     `......x....x...
     adc:	06 06 0a 01 01 cc 66 67 67 66 cc 0c 0b 16 0d 01     ......fggf......
     aec:	00 e0 80 61 80 63 00 63 00 66 00 6c e0 0c e0 19     ...a.c.c.f.l....
     afc:	e0 19 60 33 f0 60 60 0b 0b 16 0d 01 00 61 00 e3     ..`3.``......a..
     b0c:	00 62 00 66 00 64 00 6d e0 1b 60 18 60 31 c0 23     .b.f.d.m..`.`1.#
     b1c:	00 63 e0 0c 0b 16 0d 01 00 78 c0 d8 80 71 80 d9     .c.......x...q..
     b2c:	00 73 00 06 60 04 e0 0d e0 19 60 19 f0 30 60 07     .s..`.....`..0`.
     b3c:	0b 0b 09 01 fd 18 00 18 18 38 70 e0 c0 c2 fe 3c     .........8p....<
     b4c:	0b 10 20 0b 00 00 18 00 0c 00 04 00 00 00 00 00     .. .............
     b5c:	0e 00 0e 00 0f 00 1b 00 1b 80 39 80 31 80 3f c0     ..........9.1.?.
     b6c:	7f c0 60 e0 e0 60 0b 10 20 0b 00 00 03 00 02 00     ..`..`.. .......
     b7c:	04 00 00 00 00 00 0e 00 0e 00 0f 00 1b 00 1b 80     ................
     b8c:	39 80 31 80 3f c0 7f c0 60 e0 e0 60 0b 10 20 0b     9.1.?...`..`.. .
     b9c:	00 00 06 00 0e 00 19 00 00 00 00 00 0e 00 0e 00     ................
     bac:	0f 00 1b 00 1b 80 39 80 31 80 3f c0 7f c0 60 e0     ......9.1.?...`.
     bbc:	e0 60 0b 0f 1e 0b 00 00 0d 00 17 00 00 00 00 00     .`..............
     bcc:	0e 00 0e 00 0f 00 1b 00 1b 80 39 80 31 80 3f c0     ..........9.1.?.
     bdc:	7f c0 60 e0 e0 60 0b 0f 1e 0b 00 00 1b 00 00 00     ..`..`..........
     bec:	00 00 00 00 0e 00 0e 00 0f 00 1b 00 1b 00 3b 80     ..............;.
     bfc:	31 80 3f c0 7f c0 60 e0 e0 60 0a 11 22 0c 01 00     1.?...`..`.."...
     c0c:	0c 00 12 00 12 00 1e 00 00 00 00 00 0c 00 1e 00     ................
     c1c:	1e 00 3f 00 33 00 33 00 63 80 7f 80 ff c0 c0 c0     ..?.3.3.c.......
     c2c:	c0 c0 0f 0b 16 10 00 00 03 fe 07 80 07 80 0d 80     ................
     c3c:	1d 80 19 fe 39 80 3f 80 61 80 61 80 c1 fe 0a 0f     ....9.?.a.a.....
     c4c:	1e 0c 01 fc 1f 00 77 80 61 c0 c0 00 c0 00 c0 00     ......w.a.......
     c5c:	c0 00 c1 c0 61 c0 73 80 3e 00 08 00 0e 00 02 00     ....a.s.>.......
     c6c:	1c 00 08 10 10 0a 01 00 60 30 18 00 00 ff c0 c0     ........`0......
     c7c:	c0 c0 ff c0 c0 c0 c0 ff 08 10 10 0a 01 00 0c 08     ................
     c8c:	10 00 00 ff c0 c0 c0 c0 ff c0 c0 c0 c0 ff 08 10     ................
     c9c:	10 0a 01 00 18 3c 24 00 00 ff c0 c0 c0 c0 ff c0     .....<$.........
     cac:	c0 c0 c0 ff 08 0f 0f 0a 01 00 66 00 00 00 ff c0     ..........f.....
     cbc:	c0 c0 c0 ff c0 c0 c0 c0 ff 04 10 10 04 ff 00 c0     ................
     ccc:	60 30 00 00 30 30 30 30 30 30 30 30 30 30 30 04     `0..00000000000.
     cdc:	10 10 04 01 00 70 60 c0 00 00 c0 c0 c0 c0 c0 c0     .....p`.........
     cec:	c0 c0 c0 c0 c0 04 10 10 04 00 00 60 f0 90 00 00     ...........`....
     cfc:	60 60 60 60 60 60 60 60 60 60 60 05 0f 0f 05 00     ```````````.....
     d0c:	00 d8 00 00 00 30 30 30 30 30 30 30 30 30 30 30     .....00000000000
     d1c:	0b 0b 16 0c 00 00 7f 00 63 80 60 c0 60 e0 60 60     ........c.`.`.``
     d2c:	fc 60 60 60 60 e0 60 c0 63 80 7f 00 0a 0f 1e 0c     .````.`.c.......
     d3c:	01 00 19 00 16 00 00 00 00 00 f0 c0 f0 c0 f8 c0     ................
     d4c:	d8 c0 dc c0 cc c0 ce c0 c6 c0 c7 c0 c3 c0 c3 c0     ................
     d5c:	0b 10 20 0d 01 00 18 00 08 00 0c 00 00 00 00 00     .. .............
     d6c:	1f 00 7b c0 60 c0 c0 60 c0 60 c0 60 c0 60 c0 60     ..{.`..`.`.`.`.`
     d7c:	60 c0 7b c0 1f 00 0b 10 20 0d 01 00 03 00 02 00     `.{..... .......
     d8c:	04 00 00 00 00 00 1f 00 7b c0 60 c0 c0 60 c0 60     ........{.`..`.`
     d9c:	c0 60 c0 60 c0 60 60 c0 7b c0 1f 00 0b 10 20 0d     .`.`.``.{..... .
     dac:	01 00 0e 00 1b 00 11 00 00 00 00 00 1f 00 7b c0     ..............{.
     dbc:	60 c0 c0 60 c0 60 c0 60 c0 60 c0 60 60 c0 7b c0     `..`.`.`.`.``.{.
     dcc:	1f 00 0b 0f 1e 0d 01 00 1f 00 00 00 00 00 00 00     ................
     ddc:	1f 00 7b c0 60 c0 c0 60 c0 60 c0 60 c0 60 e0 e0     ..{.`..`.`.`.`..
     dec:	60 c0 7f c0 1f 00 0b 0f 1e 0d 01 00 1b 00 00 00     `...............
     dfc:	00 00 00 00 1f 00 7b c0 60 c0 c0 60 c0 60 c0 60     ......{.`..`.`.`
     e0c:	c0 60 c0 60 60 c0 7b c0 1f 00 08 08 08 10 04 00     .`.``.{.........
     e1c:	81 c3 66 18 18 24 42 81 0b 0b 16 0d 01 00 1f a0     ..f..$B.........
     e2c:	3b c0 60 c0 c1 60 c2 60 c4 60 c8 60 d0 60 e0 c0     ;.`..`.`.`.`.`..
     e3c:	7b 80 bf 00 0a 10 20 0c 01 00 30 00 18 00 08 00     {..... ...0.....
     e4c:	00 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e5c:	c0 c0 c0 c0 e1 c0 7f 80 3e 00 0a 10 20 0c 01 00     ........>... ...
     e6c:	03 00 06 00 04 00 00 00 00 00 c0 c0 c0 c0 c0 c0     ................
     e7c:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 e1 c0 7f 80 3e 00     ..............>.
     e8c:	0a 10 20 0c 01 00 1c 00 1e 00 33 00 00 00 00 00     .. .......3.....
     e9c:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     eac:	e1 c0 7f 80 3e 00 0a 0f 1e 0c 01 00 33 00 00 00     ....>.......3...
     ebc:	00 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     ecc:	c0 c0 c0 c0 e1 c0 73 80 3e 00 0a 10 20 0a 00 00     ......s.>... ...
     edc:	06 00 06 00 04 00 00 00 00 00 e1 c0 71 80 33 80     ............q.3.
     eec:	3b 00 1f 00 1e 00 0c 00 0c 00 0c 00 0c 00 0c 00     ;...............
     efc:	08 0b 0b 0a 01 00 c0 c0 fe c7 c3 c3 c7 fe c0 c0     ................
     f0c:	c0 08 0b 0b 0a 01 00 7c ee c6 ce dc d8 ce c7 c3     .......|........
     f1c:	db de 07 0c 0c 09 01 00 60 30 10 00 3c 6e 06 7e     ........`0..<n.~
     f2c:	e6 c6 ee 76 07 0c 0c 09 01 00 0c 18 10 00 3c 6e     ...v..........<n
     f3c:	06 7e e6 c6 ee 76 07 0c 0c 09 01 00 38 2c 44 00     .~...v......8,D.
     f4c:	3c 6e 06 7e e6 c6 ee 76 07 0b 0b 09 01 00 3c 00     <n.~...v......<.
     f5c:	00 3c 6e 06 7e e6 c6 ee 76 07 0b 0b 09 01 00 6c     .<n.~...v......l
     f6c:	00 00 3c e6 06 7e e6 c6 ee 76 07 0d 0d 09 01 00     ..<..~...v......
     f7c:	18 24 24 3c 00 3c 66 06 7e e6 c6 ee 7e 0d 08 10     .$$<.<f.~...~...
     f8c:	0f 01 00 3c e0 67 b0 07 18 7f f8 e7 00 c7 18 ed     ...<.g..........
     f9c:	b8 78 f0 07 0c 0c 09 01 fc 3c 6e c6 c0 c0 c6 6e     .x.......<n....n
     fac:	3c 10 1c 04 38 07 0d 0d 09 01 00 60 20 30 10 00     <...8......` 0..
     fbc:	3c 6e c6 fe c0 c6 6e 3c 07 0d 0d 09 01 00 0c 0c     <n....n<........
     fcc:	18 10 00 3c 6e c6 fe c0 c6 6e 3c 07 0d 0d 09 01     ...<n....n<.....
     fdc:	00 18 38 2c 44 00 3c 6e c6 fe c0 c6 6e 3c 07 0c     ..8,D.<n....n<..
     fec:	0c 09 01 00 6c 00 00 00 3c 6e c6 fe c0 ce 6e 3c     ....l...<n....n<
     ffc:	03 0c 0c 04 00 00 c0 60 20 00 60 60 60 60 60 60     .......` .``````
    100c:	60 60 03 0c 0c 04 01 00 60 c0 80 00 c0 c0 c0 c0     ``......`.......
    101c:	c0 c0 c0 c0 05 0c 0c 04 00 00 60 d0 88 00 60 60     ..........`...``
    102c:	60 60 60 60 60 60 05 0b 0b 05 00 00 d8 00 00 30     ``````.........0
    103c:	30 30 30 30 30 30 30 08 0b 0b 0a 01 00 33 1c 66     0000000......3.f
    104c:	3e 67 c3 c3 c3 c3 67 3c 07 0b 0b 09 01 00 3c 00     >g....g<......<.
    105c:	00 dc ee c6 c6 c6 c6 c6 c6 08 0d 0d 0a 01 00 60     ...............`
    106c:	30 10 08 00 3c 66 c3 c3 c3 c3 66 3c 08 0d 0d 0a     0...<f....f<....
    107c:	01 00 06 0c 08 10 00 3c 66 c3 c3 c3 c3 66 3c 08     .......<f....f<.
    108c:	0d 0d 0a 01 00 18 1c 24 22 00 3c 66 c3 c3 c3 c3     .......$".<f....
    109c:	66 3c 08 0b 0b 0a 01 00 3c 00 00 3c 66 c3 c3 c3     f<......<..<f...
    10ac:	c3 66 3c 08 0c 0c 0a 01 00 66 00 00 00 3c 66 c3     .f<......f...<f.
    10bc:	c3 c3 c3 66 3c 0a 06 0c 10 03 02 0c 00 00 00 ff     ...f<...........
    10cc:	c0 00 00 00 00 0c 00 08 0a 0a 0a 01 ff 01 3e 66     ..............>f
    10dc:	cf cb d3 e3 76 fc 80 07 0c 0c 09 01 00 60 30 10     ....v........`0.
    10ec:	00 c6 c6 c6 c6 c6 c6 ee 76 07 0c 0c 09 01 00 0c     ........v.......
    10fc:	18 10 00 c6 c6 c6 c6 c6 c6 ee 76 07 0c 0c 09 01     ..........v.....
    110c:	00 38 28 44 00 c6 c6 c6 c6 c6 c6 ee 76 07 0b 0b     .8(D........v...
    111c:	09 01 00 6c 00 00 c6 c6 c6 c6 c6 c6 ee 76 09 10     ...l.........v..
    112c:	20 09 00 fd 07 00 06 00 0c 00 08 00 00 00 63 80      .............c.
    113c:	63 00 73 00 36 00 36 00 1e 00 1c 00 1c 00 1c 00     c.s.6.6.........
    114c:	f8 00 70 00 08 0e 0e 0a 01 fd c0 c0 c0 dc e6 c3     ..p.............
    115c:	c3 c3 c7 e6 dc c0 c0 c0 08 0e 0e 09 01 fd 6c 00     ..............l.
    116c:	00 c7 c6 ee 6c 6c 3c 38 38 38 30 30                 ....ll<88800

00001178 <__ctors_end>:
    1178:	11 24       	eor	r1, r1
    117a:	1f be       	out	0x3f, r1	; 63
    117c:	cf ef       	ldi	r28, 0xFF	; 255
    117e:	d8 e0       	ldi	r29, 0x08	; 8
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	cd bf       	out	0x3d, r28	; 61

00001184 <__do_copy_data>:
    1184:	11 e0       	ldi	r17, 0x01	; 1
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	b1 e0       	ldi	r27, 0x01	; 1
    118a:	ea eb       	ldi	r30, 0xBA	; 186
    118c:	f1 e3       	ldi	r31, 0x31	; 49
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <__do_copy_data+0x10>
    1190:	05 90       	lpm	r0, Z+
    1192:	0d 92       	st	X+, r0
    1194:	a4 33       	cpi	r26, 0x34	; 52
    1196:	b1 07       	cpc	r27, r17
    1198:	d9 f7       	brne	.-10     	; 0x1190 <__do_copy_data+0xc>

0000119a <__do_clear_bss>:
    119a:	22 e0       	ldi	r18, 0x02	; 2
    119c:	a4 e3       	ldi	r26, 0x34	; 52
    119e:	b1 e0       	ldi	r27, 0x01	; 1
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <.do_clear_bss_start>

000011a2 <.do_clear_bss_loop>:
    11a2:	1d 92       	st	X+, r1

000011a4 <.do_clear_bss_start>:
    11a4:	a3 33       	cpi	r26, 0x33	; 51
    11a6:	b2 07       	cpc	r27, r18
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <.do_clear_bss_loop>
    11aa:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <main>
    11ae:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <_exit>

000011b2 <__bad_interrupt>:
    11b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000011b6 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    11b6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    11ba:	80 e2       	ldi	r24, 0x20	; 32
    11bc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    11c0:	08 95       	ret

000011c2 <i2c_start>:
    11c2:	94 ea       	ldi	r25, 0xA4	; 164
    11c4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    11c8:	4f ef       	ldi	r20, 0xFF	; 255
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	ec eb       	ldi	r30, 0xBC	; 188
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	90 81       	ld	r25, Z
    11d6:	99 23       	and	r25, r25
    11d8:	34 f0       	brlt	.+12     	; 0x11e6 <i2c_start+0x24>
    11da:	41 50       	subi	r20, 0x01	; 1
    11dc:	51 09       	sbc	r21, r1
    11de:	61 09       	sbc	r22, r1
    11e0:	71 09       	sbc	r23, r1
    11e2:	c0 f7       	brcc	.-16     	; 0x11d4 <i2c_start+0x12>
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <i2c_start+0x2c>
    11e6:	45 2b       	or	r20, r21
    11e8:	46 2b       	or	r20, r22
    11ea:	47 2b       	or	r20, r23
    11ec:	41 f1       	breq	.+80     	; 0x123e <i2c_start+0x7c>
    11ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    11f2:	98 7f       	andi	r25, 0xF8	; 248
    11f4:	98 30       	cpi	r25, 0x08	; 8
    11f6:	11 f0       	breq	.+4      	; 0x11fc <i2c_start+0x3a>
    11f8:	90 31       	cpi	r25, 0x10	; 16
    11fa:	19 f5       	brne	.+70     	; 0x1242 <i2c_start+0x80>
    11fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1200:	84 e8       	ldi	r24, 0x84	; 132
    1202:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 e0       	ldi	r26, 0x00	; 0
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ec eb       	ldi	r30, 0xBC	; 188
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	20 81       	ld	r18, Z
    1214:	22 23       	and	r18, r18
    1216:	2c f0       	brlt	.+10     	; 0x1222 <i2c_start+0x60>
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	a1 09       	sbc	r26, r1
    121c:	b1 09       	sbc	r27, r1
    121e:	c8 f7       	brcc	.-14     	; 0x1212 <i2c_start+0x50>
    1220:	04 c0       	rjmp	.+8      	; 0x122a <i2c_start+0x68>
    1222:	89 2b       	or	r24, r25
    1224:	8a 2b       	or	r24, r26
    1226:	8b 2b       	or	r24, r27
    1228:	71 f0       	breq	.+28     	; 0x1246 <i2c_start+0x84>
    122a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    122e:	98 7f       	andi	r25, 0xF8	; 248
    1230:	98 31       	cpi	r25, 0x18	; 24
    1232:	59 f0       	breq	.+22     	; 0x124a <i2c_start+0x88>
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 34       	cpi	r25, 0x40	; 64
    1238:	49 f4       	brne	.+18     	; 0x124c <i2c_start+0x8a>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	08 95       	ret
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	08 95       	ret
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	08 95       	ret
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	08 95       	ret
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	08 95       	ret

0000124e <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    124e:	84 e9       	ldi	r24, 0x94	; 148
    1250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	ec eb       	ldi	r30, 0xBC	; 188
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	20 81       	ld	r18, Z
    125e:	24 ff       	sbrs	r18, 4
    1260:	05 c0       	rjmp	.+10     	; 0x126c <i2c_stop+0x1e>
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	81 15       	cp	r24, r1
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	92 07       	cpc	r25, r18
    126a:	c1 f7       	brne	.-16     	; 0x125c <i2c_stop+0xe>
    126c:	08 95       	ret

0000126e <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    126e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1272:	84 e8       	ldi	r24, 0x84	; 132
    1274:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1280:	ec eb       	ldi	r30, 0xBC	; 188
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	20 81       	ld	r18, Z
    1286:	22 23       	and	r18, r18
    1288:	2c f0       	brlt	.+10     	; 0x1294 <i2c_write+0x26>
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	a1 09       	sbc	r26, r1
    128e:	b1 09       	sbc	r27, r1
    1290:	c8 f7       	brcc	.-14     	; 0x1284 <i2c_write+0x16>
    1292:	04 c0       	rjmp	.+8      	; 0x129c <i2c_write+0x2e>
	if(i2c_timer == 0)
    1294:	89 2b       	or	r24, r25
    1296:	8a 2b       	or	r24, r26
    1298:	8b 2b       	or	r24, r27
    129a:	41 f0       	breq	.+16     	; 0x12ac <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    129c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12a0:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	98 32       	cpi	r25, 0x28	; 40
    12a6:	19 f4       	brne	.+6      	; 0x12ae <i2c_write+0x40>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    12ae:	08 95       	ret

000012b0 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    12b0:	84 ec       	ldi	r24, 0xC4	; 196
    12b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a0 e0       	ldi	r26, 0x00	; 0
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    12be:	ec eb       	ldi	r30, 0xBC	; 188
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	20 81       	ld	r18, Z
    12c4:	22 23       	and	r18, r18
    12c6:	2c f0       	brlt	.+10     	; 0x12d2 <i2c_readAck+0x22>
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	a1 09       	sbc	r26, r1
    12cc:	b1 09       	sbc	r27, r1
    12ce:	c8 f7       	brcc	.-14     	; 0x12c2 <i2c_readAck+0x12>
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    12d2:	89 2b       	or	r24, r25
    12d4:	8a 2b       	or	r24, r26
    12d6:	8b 2b       	or	r24, r27
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <i2c_readAck+0x30>
		return 0;

    return TWDR;
    12da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    12de:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    12e0:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    12e2:	08 95       	ret

000012e4 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    12e4:	84 e8       	ldi	r24, 0x84	; 132
    12e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    12f2:	ec eb       	ldi	r30, 0xBC	; 188
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	20 81       	ld	r18, Z
    12f8:	22 23       	and	r18, r18
    12fa:	2c f0       	brlt	.+10     	; 0x1306 <i2c_readNak+0x22>
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	a1 09       	sbc	r26, r1
    1300:	b1 09       	sbc	r27, r1
    1302:	c8 f7       	brcc	.-14     	; 0x12f6 <i2c_readNak+0x12>
    1304:	04 c0       	rjmp	.+8      	; 0x130e <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    1306:	89 2b       	or	r24, r25
    1308:	8a 2b       	or	r24, r26
    130a:	8b 2b       	or	r24, r27
    130c:	19 f0       	breq	.+6      	; 0x1314 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    130e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1312:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1314:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    1316:	08 95       	ret

00001318 <getAcc>:
	itoa(steps, counterString, 10);
	u8g_FirstPage(&u8g);
	do{
		u8g_DrawStr(&u8g, 2, 16, counterString);
	}while(u8g_NextPage(&u8g));
}
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	c8 2f       	mov	r28, r24
    131e:	80 ed       	ldi	r24, 0xD0	; 208
    1320:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <i2c_start>
    1324:	8c 2f       	mov	r24, r28
    1326:	0e 94 37 09 	call	0x126e	; 0x126e <i2c_write>
    132a:	8a e1       	ldi	r24, 0x1A	; 26
    132c:	8a 95       	dec	r24
    132e:	f1 f7       	brne	.-4      	; 0x132c <getAcc+0x14>
    1330:	00 c0       	rjmp	.+0      	; 0x1332 <getAcc+0x1a>
    1332:	81 ed       	ldi	r24, 0xD1	; 209
    1334:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <i2c_start>
    1338:	0e 94 58 09 	call	0x12b0	; 0x12b0 <i2c_readAck>
    133c:	d8 2f       	mov	r29, r24
    133e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <i2c_readNak>
    1342:	c8 2f       	mov	r28, r24
    1344:	0e 94 27 09 	call	0x124e	; 0x124e <i2c_stop>
    1348:	6c 2f       	mov	r22, r28
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	7d 2b       	or	r23, r29
    134e:	07 2e       	mov	r0, r23
    1350:	00 0c       	add	r0, r0
    1352:	88 0b       	sbc	r24, r24
    1354:	99 0b       	sbc	r25, r25
    1356:	0e 94 56 15 	call	0x2aac	; 0x2aac <__floatsisf>
    135a:	9f 77       	andi	r25, 0x7F	; 127
    135c:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__fixsfsi>
    1360:	07 2e       	mov	r0, r23
    1362:	00 0c       	add	r0, r0
    1364:	88 0b       	sbc	r24, r24
    1366:	99 0b       	sbc	r25, r25
    1368:	0e 94 56 15 	call	0x2aac	; 0x2aac <__floatsisf>
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	58 e3       	ldi	r21, 0x38	; 56
    1374:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__mulsf3>
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <drawString>:

void drawString(char * string){
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	ec 01       	movw	r28, r24
	u8g_FirstPage(&u8g);
    1384:	8c ef       	ldi	r24, 0xFC	; 252
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	0e 94 99 12 	call	0x2532	; 0x2532 <u8g_FirstPage>
	do{
		u8g_DrawStr(&u8g, 2, 16*2, string);
    138c:	9e 01       	movw	r18, r28
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	62 e0       	ldi	r22, 0x02	; 2
    1392:	8c ef       	ldi	r24, 0xFC	; 252
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_DrawStr>
	}while(u8g_NextPage(&u8g));
    139a:	8c ef       	ldi	r24, 0xFC	; 252
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	0e 94 9f 12 	call	0x253e	; 0x253e <u8g_NextPage>
    13a2:	81 11       	cpse	r24, r1
    13a4:	f3 cf       	rjmp	.-26     	; 0x138c <drawString+0xe>
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <drawAccData>:

void drawAccData(double x, double y, double z){
    13ac:	8f 92       	push	r8
    13ae:	9f 92       	push	r9
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	2f 97       	sbiw	r28, 0x0f	; 15
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	49 01       	movw	r8, r18
    13d6:	5a 01       	movw	r10, r20
    13d8:	67 01       	movw	r12, r14
    13da:	78 01       	movw	r14, r16
	char ax[5] = "\0";
    13dc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <u8g_dev_ssd1306_128x64_i2c_pb+0x8>
    13e0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <u8g_dev_ssd1306_128x64_i2c_pb+0x9>
    13e4:	3a 83       	std	Y+2, r19	; 0x02
    13e6:	29 83       	std	Y+1, r18	; 0x01
    13e8:	1b 82       	std	Y+3, r1	; 0x03
    13ea:	1c 82       	std	Y+4, r1	; 0x04
    13ec:	1d 82       	std	Y+5, r1	; 0x05
	char ay[5] = "\0";
    13ee:	3f 83       	std	Y+7, r19	; 0x07
    13f0:	2e 83       	std	Y+6, r18	; 0x06
    13f2:	18 86       	std	Y+8, r1	; 0x08
    13f4:	19 86       	std	Y+9, r1	; 0x09
    13f6:	1a 86       	std	Y+10, r1	; 0x0a
	char az[5] = "\0";
    13f8:	3c 87       	std	Y+12, r19	; 0x0c
    13fa:	2b 87       	std	Y+11, r18	; 0x0b
    13fc:	1d 86       	std	Y+13, r1	; 0x0d
    13fe:	1e 86       	std	Y+14, r1	; 0x0e
    1400:	1f 86       	std	Y+15, r1	; 0x0f
	dtostrf(x,1,3,ax);
    1402:	8e 01       	movw	r16, r28
    1404:	0f 5f       	subi	r16, 0xFF	; 255
    1406:	1f 4f       	sbci	r17, 0xFF	; 255
    1408:	23 e0       	ldi	r18, 0x03	; 3
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	0e 94 55 16 	call	0x2caa	; 0x2caa <dtostrf>
	dtostrf(y,1,3,ay);
    1410:	0b 5f       	subi	r16, 0xFB	; 251
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	23 e0       	ldi	r18, 0x03	; 3
    1416:	41 e0       	ldi	r20, 0x01	; 1
    1418:	c5 01       	movw	r24, r10
    141a:	b4 01       	movw	r22, r8
    141c:	0e 94 55 16 	call	0x2caa	; 0x2caa <dtostrf>
	dtostrf(z,1,3,az);
    1420:	0b 5f       	subi	r16, 0xFB	; 251
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	23 e0       	ldi	r18, 0x03	; 3
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	c7 01       	movw	r24, r14
    142a:	b6 01       	movw	r22, r12
    142c:	0e 94 55 16 	call	0x2caa	; 0x2caa <dtostrf>
	//itoa(x, ax, 10);
	//itoa(y, ay, 10);
	//itoa(z, az, 10);
	u8g_FirstPage(&u8g);
    1430:	8c ef       	ldi	r24, 0xFC	; 252
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	0e 94 99 12 	call	0x2532	; 0x2532 <u8g_FirstPage>
	do{
		u8g_DrawStr(&u8g, 2, 16, ax);
    1438:	9e 01       	movw	r18, r28
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	40 e1       	ldi	r20, 0x10	; 16
    1440:	62 e0       	ldi	r22, 0x02	; 2
    1442:	8c ef       	ldi	r24, 0xFC	; 252
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 2, 16*2 + 1, ay);
    144a:	9e 01       	movw	r18, r28
    144c:	2a 5f       	subi	r18, 0xFA	; 250
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	41 e2       	ldi	r20, 0x21	; 33
    1452:	62 e0       	ldi	r22, 0x02	; 2
    1454:	8c ef       	ldi	r24, 0xFC	; 252
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 2, 16*3 + 2, az);
    145c:	9e 01       	movw	r18, r28
    145e:	25 5f       	subi	r18, 0xF5	; 245
    1460:	3f 4f       	sbci	r19, 0xFF	; 255
    1462:	42 e3       	ldi	r20, 0x32	; 50
    1464:	62 e0       	ldi	r22, 0x02	; 2
    1466:	8c ef       	ldi	r24, 0xFC	; 252
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_DrawStr>
	}while(u8g_NextPage(&u8g));
    146e:	8c ef       	ldi	r24, 0xFC	; 252
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 9f 12 	call	0x253e	; 0x253e <u8g_NextPage>
    1476:	81 11       	cpse	r24, r1
    1478:	df cf       	rjmp	.-66     	; 0x1438 <drawAccData+0x8c>
}
    147a:	2f 96       	adiw	r28, 0x0f	; 15
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	bf 90       	pop	r11
    1498:	af 90       	pop	r10
    149a:	9f 90       	pop	r9
    149c:	8f 90       	pop	r8
    149e:	08 95       	ret

000014a0 <getAccOffset>:

void getAccOffset(double *ox, double *oy, double *oz){
    14a0:	2f 92       	push	r2
    14a2:	3f 92       	push	r3
    14a4:	4f 92       	push	r4
    14a6:	5f 92       	push	r5
    14a8:	6f 92       	push	r6
    14aa:	7f 92       	push	r7
    14ac:	8f 92       	push	r8
    14ae:	9f 92       	push	r9
    14b0:	af 92       	push	r10
    14b2:	bf 92       	push	r11
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <getAccOffset+0x26>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <getAccOffset+0x28>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	8c 01       	movw	r16, r24
    14ce:	1b 01       	movw	r2, r22
    14d0:	5a 83       	std	Y+2, r21	; 0x02
    14d2:	49 83       	std	Y+1, r20	; 0x01
	double accX = 0, accY = 0, accZ = 0;
	drawString("Calibrating...");
    14d4:	84 e1       	ldi	r24, 0x14	; 20
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	0e 94 bf 09 	call	0x137e	; 0x137e <drawString>
    14dc:	8a e0       	ldi	r24, 0x0A	; 10
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
		u8g_DrawStr(&u8g, 2, 16*3 + 2, az);
	}while(u8g_NextPage(&u8g));
}

void getAccOffset(double *ox, double *oy, double *oz){
	double accX = 0, accY = 0, accZ = 0;
    14e4:	c1 2c       	mov	r12, r1
    14e6:	d1 2c       	mov	r13, r1
    14e8:	76 01       	movw	r14, r12
    14ea:	46 01       	movw	r8, r12
    14ec:	57 01       	movw	r10, r14
    14ee:	26 01       	movw	r4, r12
    14f0:	37 01       	movw	r6, r14
	drawString("Calibrating...");
	for(int i = 0; i < OFFSET_NUM; i++){
		accX += getAcc(X);
    14f2:	8b e3       	ldi	r24, 0x3B	; 59
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 8c 09 	call	0x1318	; 0x1318 <getAcc>
    14fa:	9b 01       	movw	r18, r22
    14fc:	ac 01       	movw	r20, r24
    14fe:	c3 01       	movw	r24, r6
    1500:	b2 01       	movw	r22, r4
    1502:	0e 94 40 14 	call	0x2880	; 0x2880 <__addsf3>
    1506:	2b 01       	movw	r4, r22
    1508:	3c 01       	movw	r6, r24
		accY += getAcc(Y); 
    150a:	8d e3       	ldi	r24, 0x3D	; 61
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 8c 09 	call	0x1318	; 0x1318 <getAcc>
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	c5 01       	movw	r24, r10
    1518:	b4 01       	movw	r22, r8
    151a:	0e 94 40 14 	call	0x2880	; 0x2880 <__addsf3>
    151e:	4b 01       	movw	r8, r22
    1520:	5c 01       	movw	r10, r24
		accZ += getAcc(Z); 
    1522:	8f e3       	ldi	r24, 0x3F	; 63
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 8c 09 	call	0x1318	; 0x1318 <getAcc>
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	c7 01       	movw	r24, r14
    1530:	b6 01       	movw	r22, r12
    1532:	0e 94 40 14 	call	0x2880	; 0x2880 <__addsf3>
    1536:	6b 01       	movw	r12, r22
    1538:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    153a:	ef e1       	ldi	r30, 0x1F	; 31
    153c:	fe e4       	ldi	r31, 0x4E	; 78
    153e:	31 97       	sbiw	r30, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <getAccOffset+0x9e>
    1542:	00 c0       	rjmp	.+0      	; 0x1544 <getAccOffset+0xa4>
    1544:	00 00       	nop
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
}

void getAccOffset(double *ox, double *oy, double *oz){
	double accX = 0, accY = 0, accZ = 0;
	drawString("Calibrating...");
	for(int i = 0; i < OFFSET_NUM; i++){
    1550:	89 2b       	or	r24, r25
    1552:	79 f6       	brne	.-98     	; 0x14f2 <getAccOffset+0x52>
		accX += getAcc(X);
		accY += getAcc(Y); 
		accZ += getAcc(Z); 
		_delay_ms(10);
	}
	*ox = (double)(accX / OFFSET_NUM);
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	c3 01       	movw	r24, r6
    155e:	b2 01       	movw	r22, r4
    1560:	0e 94 ac 14 	call	0x2958	; 0x2958 <__divsf3>
    1564:	f8 01       	movw	r30, r16
    1566:	60 83       	st	Z, r22
    1568:	71 83       	std	Z+1, r23	; 0x01
    156a:	82 83       	std	Z+2, r24	; 0x02
    156c:	93 83       	std	Z+3, r25	; 0x03
	*oy = (double)(accY / OFFSET_NUM);
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	c5 01       	movw	r24, r10
    1578:	b4 01       	movw	r22, r8
    157a:	0e 94 ac 14 	call	0x2958	; 0x2958 <__divsf3>
    157e:	f1 01       	movw	r30, r2
    1580:	60 83       	st	Z, r22
    1582:	71 83       	std	Z+1, r23	; 0x01
    1584:	82 83       	std	Z+2, r24	; 0x02
    1586:	93 83       	std	Z+3, r25	; 0x03
	*oz = (double)(accZ / OFFSET_NUM);
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	c7 01       	movw	r24, r14
    1592:	b6 01       	movw	r22, r12
    1594:	0e 94 ac 14 	call	0x2958	; 0x2958 <__divsf3>
    1598:	e9 81       	ldd	r30, Y+1	; 0x01
    159a:	fa 81       	ldd	r31, Y+2	; 0x02
    159c:	60 83       	st	Z, r22
    159e:	71 83       	std	Z+1, r23	; 0x01
    15a0:	82 83       	std	Z+2, r24	; 0x02
    15a2:	93 83       	std	Z+3, r25	; 0x03
	drawString("Calib. done");
    15a4:	83 e2       	ldi	r24, 0x23	; 35
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 bf 09 	call	0x137e	; 0x137e <drawString>
    15ac:	ff ef       	ldi	r31, 0xFF	; 255
    15ae:	24 e3       	ldi	r18, 0x34	; 52
    15b0:	8c e0       	ldi	r24, 0x0C	; 12
    15b2:	f1 50       	subi	r31, 0x01	; 1
    15b4:	20 40       	sbci	r18, 0x00	; 0
    15b6:	80 40       	sbci	r24, 0x00	; 0
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <getAccOffset+0x112>
    15ba:	00 c0       	rjmp	.+0      	; 0x15bc <getAccOffset+0x11c>
    15bc:	00 00       	nop
	_delay_ms(500);
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	bf 90       	pop	r11
    15d8:	af 90       	pop	r10
    15da:	9f 90       	pop	r9
    15dc:	8f 90       	pop	r8
    15de:	7f 90       	pop	r7
    15e0:	6f 90       	pop	r6
    15e2:	5f 90       	pop	r5
    15e4:	4f 90       	pop	r4
    15e6:	3f 90       	pop	r3
    15e8:	2f 90       	pop	r2
    15ea:	08 95       	ret

000015ec <main>:
void drawSteps(uint16_t steps);
void drawString(char * string);
void drawAccData(double x, double y, double z);
void getAccOffset(double *ox, double *oy, double *oz);

int main(void) {
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	60 97       	sbiw	r28, 0x10	; 16
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
	u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	71 e0       	ldi	r23, 0x01	; 1
    1606:	8c ef       	ldi	r24, 0xFC	; 252
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 83 12 	call	0x2506	; 0x2506 <u8g_InitI2C>
	u8g_SetFont(&u8g, u8g_font_fub11);
    160e:	6c e0       	ldi	r22, 0x0C	; 12
    1610:	72 e0       	ldi	r23, 0x02	; 2
    1612:	8c ef       	ldi	r24, 0xFC	; 252
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	0e 94 76 11 	call	0x22ec	; 0x22ec <u8g_SetFont>
	double combinedAcc = 0;
	double accX = 0.0, accY = 0.0, accZ = 0.0;
	double xOffset = 0.0, yOffset = 0.0, zOffset = 0.0;
    161a:	19 82       	std	Y+1, r1	; 0x01
    161c:	1a 82       	std	Y+2, r1	; 0x02
    161e:	1b 82       	std	Y+3, r1	; 0x03
    1620:	1c 82       	std	Y+4, r1	; 0x04
    1622:	1d 82       	std	Y+5, r1	; 0x05
    1624:	1e 82       	std	Y+6, r1	; 0x06
    1626:	1f 82       	std	Y+7, r1	; 0x07
    1628:	18 86       	std	Y+8, r1	; 0x08
    162a:	19 86       	std	Y+9, r1	; 0x09
    162c:	1a 86       	std	Y+10, r1	; 0x0a
    162e:	1b 86       	std	Y+11, r1	; 0x0b
    1630:	1c 86       	std	Y+12, r1	; 0x0c
	uint16_t steps = 0;
	getAccOffset(&xOffset, &yOffset, &zOffset);
    1632:	ae 01       	movw	r20, r28
    1634:	47 5f       	subi	r20, 0xF7	; 247
    1636:	5f 4f       	sbci	r21, 0xFF	; 255
    1638:	be 01       	movw	r22, r28
    163a:	6b 5f       	subi	r22, 0xFB	; 251
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	ce 01       	movw	r24, r28
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <getAccOffset>
	sei();
    1646:	78 94       	sei
	DDRB |= (1 << PB0);
    1648:	20 9a       	sbi	0x04, 0	; 4
	/*	 Init MPU 6050	*/
	mpu6050_init();
    164a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <mpu6050_init>
    164e:	2f e7       	ldi	r18, 0x7F	; 127
    1650:	88 e3       	ldi	r24, 0x38	; 56
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	21 50       	subi	r18, 0x01	; 1
    1656:	80 40       	sbci	r24, 0x00	; 0
    1658:	90 40       	sbci	r25, 0x00	; 0
    165a:	e1 f7       	brne	.-8      	; 0x1654 <main+0x68>
    165c:	00 c0       	rjmp	.+0      	; 0x165e <main+0x72>
    165e:	00 00       	nop
	_delay_ms(50);
	drawString("Idle");
    1660:	8f e2       	ldi	r24, 0x2F	; 47
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 bf 09 	call	0x137e	; 0x137e <drawString>
	while(1) {
		accX = getAcc(X) - xOffset; 
    1668:	8b e3       	ldi	r24, 0x3B	; 59
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 8c 09 	call	0x1318	; 0x1318 <getAcc>
    1670:	29 81       	ldd	r18, Y+1	; 0x01
    1672:	3a 81       	ldd	r19, Y+2	; 0x02
    1674:	4b 81       	ldd	r20, Y+3	; 0x03
    1676:	5c 81       	ldd	r21, Y+4	; 0x04
    1678:	0e 94 3f 14 	call	0x287e	; 0x287e <__subsf3>
    167c:	6d 87       	std	Y+13, r22	; 0x0d
    167e:	7e 87       	std	Y+14, r23	; 0x0e
    1680:	8f 87       	std	Y+15, r24	; 0x0f
    1682:	98 8b       	std	Y+16, r25	; 0x10
		accY = getAcc(Y) - yOffset;
    1684:	8d e3       	ldi	r24, 0x3D	; 61
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 8c 09 	call	0x1318	; 0x1318 <getAcc>
    168c:	2d 81       	ldd	r18, Y+5	; 0x05
    168e:	3e 81       	ldd	r19, Y+6	; 0x06
    1690:	4f 81       	ldd	r20, Y+7	; 0x07
    1692:	58 85       	ldd	r21, Y+8	; 0x08
    1694:	0e 94 3f 14 	call	0x287e	; 0x287e <__subsf3>
    1698:	2b 01       	movw	r4, r22
    169a:	3c 01       	movw	r6, r24
		accZ = getAcc(Z) - zOffset;
    169c:	8f e3       	ldi	r24, 0x3F	; 63
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 8c 09 	call	0x1318	; 0x1318 <getAcc>
    16a4:	29 85       	ldd	r18, Y+9	; 0x09
    16a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16a8:	4b 85       	ldd	r20, Y+11	; 0x0b
    16aa:	5c 85       	ldd	r21, Y+12	; 0x0c
    16ac:	0e 94 3f 14 	call	0x287e	; 0x287e <__subsf3>
    16b0:	4b 01       	movw	r8, r22
    16b2:	5c 01       	movw	r10, r24
		combinedAcc = (accX + accY + accZ);
		//drawAccData(accX, accY, accZ);
		while(1){
			drawAccData(accX, accY, accZ);
    16b4:	85 01       	movw	r16, r10
    16b6:	74 01       	movw	r14, r8
    16b8:	a3 01       	movw	r20, r6
    16ba:	92 01       	movw	r18, r4
    16bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    16be:	7e 85       	ldd	r23, Y+14	; 0x0e
    16c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c2:	98 89       	ldd	r25, Y+16	; 0x10
    16c4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <drawAccData>
		}
    16c8:	f5 cf       	rjmp	.-22     	; 0x16b4 <main+0xc8>

000016ca <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
    16ca:	af 92       	push	r10
    16cc:	bf 92       	push	r11
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	66 23       	and	r22, r22
    16de:	b9 f1       	breq	.+110    	; 0x174e <mpu6050_readBytes+0x84>
    16e0:	c5 2f       	mov	r28, r21
    16e2:	d4 2f       	mov	r29, r20
    16e4:	d6 2e       	mov	r13, r22
    16e6:	18 2f       	mov	r17, r24
    16e8:	80 ed       	ldi	r24, 0xD0	; 208
    16ea:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <i2c_start>
    16ee:	81 2f       	mov	r24, r17
    16f0:	0e 94 37 09 	call	0x126e	; 0x126e <i2c_write>
    16f4:	8a e1       	ldi	r24, 0x1A	; 26
    16f6:	8a 95       	dec	r24
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <mpu6050_readBytes+0x2c>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <mpu6050_readBytes+0x32>
    16fc:	81 ed       	ldi	r24, 0xD1	; 209
    16fe:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <i2c_start>
    1702:	0d 2f       	mov	r16, r29
    1704:	1c 2f       	mov	r17, r28
    1706:	ee 24       	eor	r14, r14
    1708:	ea 94       	dec	r14
    170a:	ed 0c       	add	r14, r13
    170c:	f1 2c       	mov	r15, r1
    170e:	ef ef       	ldi	r30, 0xFF	; 255
    1710:	ee 1a       	sub	r14, r30
    1712:	fe 0a       	sbc	r15, r30
    1714:	c0 e0       	ldi	r28, 0x00	; 0
    1716:	d0 e0       	ldi	r29, 0x00	; 0
    1718:	ad 2c       	mov	r10, r13
    171a:	b1 2c       	mov	r11, r1
    171c:	f1 e0       	ldi	r31, 0x01	; 1
    171e:	af 1a       	sub	r10, r31
    1720:	b1 08       	sbc	r11, r1
    1722:	ca 15       	cp	r28, r10
    1724:	db 05       	cpc	r29, r11
    1726:	29 f4       	brne	.+10     	; 0x1732 <mpu6050_readBytes+0x68>
    1728:	0e 94 72 09 	call	0x12e4	; 0x12e4 <i2c_readNak>
    172c:	f8 01       	movw	r30, r16
    172e:	80 83       	st	Z, r24
    1730:	04 c0       	rjmp	.+8      	; 0x173a <mpu6050_readBytes+0x70>
    1732:	0e 94 58 09 	call	0x12b0	; 0x12b0 <i2c_readAck>
    1736:	f8 01       	movw	r30, r16
    1738:	80 83       	st	Z, r24
    173a:	21 96       	adiw	r28, 0x01	; 1
    173c:	0f 5f       	subi	r16, 0xFF	; 255
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	ce 15       	cp	r28, r14
    1742:	df 05       	cpc	r29, r15
    1744:	71 f7       	brne	.-36     	; 0x1722 <mpu6050_readBytes+0x58>
    1746:	cd 2d       	mov	r28, r13
    1748:	0e 94 27 09 	call	0x124e	; 0x124e <i2c_stop>
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <mpu6050_readBytes+0x86>
    174e:	c0 e0       	ldi	r28, 0x00	; 0
    1750:	8c 2f       	mov	r24, r28
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	bf 90       	pop	r11
    1762:	af 90       	pop	r10
    1764:	08 95       	ret

00001766 <mpu6050_readByte>:
    1766:	ab 01       	movw	r20, r22
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <mpu6050_readBytes>
    176e:	08 95       	ret

00001770 <mpu6050_writeBytes>:
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	66 23       	and	r22, r22
    177e:	d1 f0       	breq	.+52     	; 0x17b4 <mpu6050_writeBytes+0x44>
    1780:	7a 01       	movw	r14, r20
    1782:	16 2f       	mov	r17, r22
    1784:	c8 2f       	mov	r28, r24
    1786:	80 ed       	ldi	r24, 0xD0	; 208
    1788:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <i2c_start>
    178c:	8c 2f       	mov	r24, r28
    178e:	0e 94 37 09 	call	0x126e	; 0x126e <i2c_write>
    1792:	e7 01       	movw	r28, r14
    1794:	6f ef       	ldi	r22, 0xFF	; 255
    1796:	61 0f       	add	r22, r17
    1798:	06 2f       	mov	r16, r22
    179a:	10 e0       	ldi	r17, 0x00	; 0
    179c:	0f 5f       	subi	r16, 0xFF	; 255
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	0e 0d       	add	r16, r14
    17a2:	1f 1d       	adc	r17, r15
    17a4:	89 91       	ld	r24, Y+
    17a6:	0e 94 37 09 	call	0x126e	; 0x126e <i2c_write>
    17aa:	c0 17       	cp	r28, r16
    17ac:	d1 07       	cpc	r29, r17
    17ae:	d1 f7       	brne	.-12     	; 0x17a4 <mpu6050_writeBytes+0x34>
    17b0:	0e 94 27 09 	call	0x124e	; 0x124e <i2c_stop>
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	08 95       	ret

000017c2 <mpu6050_writeByte>:
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	1f 92       	push	r1
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	69 83       	std	Y+1, r22	; 0x01
    17ce:	ae 01       	movw	r20, r28
    17d0:	4f 5f       	subi	r20, 0xFF	; 255
    17d2:	5f 4f       	sbci	r21, 0xFF	; 255
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <mpu6050_writeBytes>
    17da:	0f 90       	pop	r0
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	08 95       	ret

000017e2 <mpu6050_writeBits>:
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	1f 92       	push	r1
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	44 23       	and	r20, r20
    17f6:	89 f1       	breq	.+98     	; 0x185a <mpu6050_writeBits+0x78>
    17f8:	f2 2e       	mov	r15, r18
    17fa:	14 2f       	mov	r17, r20
    17fc:	06 2f       	mov	r16, r22
    17fe:	e8 2e       	mov	r14, r24
    1800:	19 82       	std	Y+1, r1	; 0x01
    1802:	be 01       	movw	r22, r28
    1804:	6f 5f       	subi	r22, 0xFF	; 255
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	0e 94 b3 0b 	call	0x1766	; 0x1766 <mpu6050_readByte>
    180c:	88 23       	and	r24, r24
    180e:	29 f1       	breq	.+74     	; 0x185a <mpu6050_writeBits+0x78>
    1810:	40 2f       	mov	r20, r16
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	41 1b       	sub	r20, r17
    1816:	51 09       	sbc	r21, r1
    1818:	4f 5f       	subi	r20, 0xFF	; 255
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <mpu6050_writeBits+0x44>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	1a 95       	dec	r17
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <mpu6050_writeBits+0x40>
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	04 2e       	mov	r0, r20
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <mpu6050_writeBits+0x52>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <mpu6050_writeBits+0x4e>
    1838:	2f 2d       	mov	r18, r15
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <mpu6050_writeBits+0x60>
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	4a 95       	dec	r20
    1844:	e2 f7       	brpl	.-8      	; 0x183e <mpu6050_writeBits+0x5c>
    1846:	68 2f       	mov	r22, r24
    1848:	60 95       	com	r22
    184a:	99 81       	ldd	r25, Y+1	; 0x01
    184c:	69 23       	and	r22, r25
    184e:	82 23       	and	r24, r18
    1850:	68 2b       	or	r22, r24
    1852:	69 83       	std	Y+1, r22	; 0x01
    1854:	8e 2d       	mov	r24, r14
    1856:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <mpu6050_writeByte>
    185a:	0f 90       	pop	r0
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	08 95       	ret

0000186a <mpu6050_writeBit>:
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	1f 92       	push	r1
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	18 2f       	mov	r17, r24
    187c:	06 2f       	mov	r16, r22
    187e:	f4 2e       	mov	r15, r20
    1880:	be 01       	movw	r22, r28
    1882:	6f 5f       	subi	r22, 0xFF	; 255
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	0e 94 b3 0b 	call	0x1766	; 0x1766 <mpu6050_readByte>
    188a:	ff 20       	and	r15, r15
    188c:	59 f0       	breq	.+22     	; 0x18a4 <mpu6050_writeBit+0x3a>
    188e:	21 e0       	ldi	r18, 0x01	; 1
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	b9 01       	movw	r22, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <mpu6050_writeBit+0x30>
    1896:	66 0f       	add	r22, r22
    1898:	77 1f       	adc	r23, r23
    189a:	0a 95       	dec	r16
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <mpu6050_writeBit+0x2c>
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	68 2b       	or	r22, r24
    18a2:	0b c0       	rjmp	.+22     	; 0x18ba <mpu6050_writeBit+0x50>
    18a4:	21 e0       	ldi	r18, 0x01	; 1
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	b9 01       	movw	r22, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <mpu6050_writeBit+0x46>
    18ac:	66 0f       	add	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	0a 95       	dec	r16
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <mpu6050_writeBit+0x42>
    18b4:	60 95       	com	r22
    18b6:	99 81       	ldd	r25, Y+1	; 0x01
    18b8:	69 23       	and	r22, r25
    18ba:	69 83       	std	Y+1, r22	; 0x01
    18bc:	81 2f       	mov	r24, r17
    18be:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <mpu6050_writeByte>
    18c2:	0f 90       	pop	r0
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	08 95       	ret

000018d0 <mpu6050_setSleepDisabled>:
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	66 e0       	ldi	r22, 0x06	; 6
    18d4:	8b e6       	ldi	r24, 0x6B	; 107
    18d6:	0e 94 35 0c 	call	0x186a	; 0x186a <mpu6050_writeBit>
    18da:	08 95       	ret

000018dc <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    18dc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18e0:	2a e1       	ldi	r18, 0x1A	; 26
    18e2:	2a 95       	dec	r18
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <mpu6050_init+0x6>
    18e6:	00 c0       	rjmp	.+0      	; 0x18e8 <mpu6050_init+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	90 e7       	ldi	r25, 0x70	; 112
    18ec:	22 e0       	ldi	r18, 0x02	; 2
    18ee:	81 50       	subi	r24, 0x01	; 1
    18f0:	90 40       	sbci	r25, 0x00	; 0
    18f2:	20 40       	sbci	r18, 0x00	; 0
    18f4:	e1 f7       	brne	.-8      	; 0x18ee <mpu6050_init+0x12>
    18f6:	00 c0       	rjmp	.+0      	; 0x18f8 <mpu6050_init+0x1c>
    18f8:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    18fa:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <mpu6050_setSleepDisabled>
    18fe:	8f e1       	ldi	r24, 0x1F	; 31
    1900:	9e e4       	ldi	r25, 0x4E	; 78
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <mpu6050_init+0x26>
    1906:	00 c0       	rjmp	.+0      	; 0x1908 <mpu6050_init+0x2c>
    1908:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    190a:	21 e0       	ldi	r18, 0x01	; 1
    190c:	43 e0       	ldi	r20, 0x03	; 3
    190e:	62 e0       	ldi	r22, 0x02	; 2
    1910:	8b e6       	ldi	r24, 0x6B	; 107
    1912:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1916:	23 e0       	ldi	r18, 0x03	; 3
    1918:	43 e0       	ldi	r20, 0x03	; 3
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	8a e1       	ldi	r24, 0x1A	; 26
    191e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1922:	64 e0       	ldi	r22, 0x04	; 4
    1924:	89 e1       	ldi	r24, 0x19	; 25
    1926:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    192a:	23 e0       	ldi	r18, 0x03	; 3
    192c:	42 e0       	ldi	r20, 0x02	; 2
    192e:	64 e0       	ldi	r22, 0x04	; 4
    1930:	8b e1       	ldi	r24, 0x1B	; 27
    1932:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	42 e0       	ldi	r20, 0x02	; 2
    193a:	64 e0       	ldi	r22, 0x04	; 4
    193c:	8c e1       	ldi	r24, 0x1C	; 28
    193e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <mpu6050_writeBits>
    1942:	08 95       	ret

00001944 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1944:	0f 93       	push	r16
    1946:	fc 01       	movw	r30, r24
    1948:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    194a:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    194c:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    194e:	96 a9       	ldd	r25, Z+54	; 0x36
    1950:	94 17       	cp	r25, r20
    1952:	38 f0       	brcs	.+14     	; 0x1962 <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    1954:	08 17       	cp	r16, r24
    1956:	68 f4       	brcc	.+26     	; 0x1972 <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	04 17       	cp	r16, r20
    195c:	40 f0       	brcs	.+16     	; 0x196e <u8g_IsBBXIntersection+0x2a>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	06 c0       	rjmp	.+12     	; 0x196e <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1962:	08 17       	cp	r16, r24
    1964:	d0 f0       	brcs	.+52     	; 0x199a <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	04 17       	cp	r16, r20
    196a:	08 f0       	brcs	.+2      	; 0x196e <u8g_IsBBXIntersection+0x2a>
    196c:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    196e:	88 23       	and	r24, r24
    1970:	c9 f0       	breq	.+50     	; 0x19a4 <u8g_IsBBXIntersection+0x60>
    1972:	21 50       	subi	r18, 0x01	; 1
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    1974:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    1976:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1978:	95 a9       	ldd	r25, Z+53	; 0x35
    197a:	96 17       	cp	r25, r22
    197c:	38 f0       	brcs	.+14     	; 0x198c <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    197e:	28 17       	cp	r18, r24
    1980:	70 f4       	brcc	.+28     	; 0x199e <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	26 17       	cp	r18, r22
    1986:	70 f0       	brcs	.+28     	; 0x19a4 <u8g_IsBBXIntersection+0x60>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	0c c0       	rjmp	.+24     	; 0x19a4 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    198c:	28 17       	cp	r18, r24
    198e:	48 f0       	brcs	.+18     	; 0x19a2 <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	26 17       	cp	r18, r22
    1994:	38 f0       	brcs	.+14     	; 0x19a4 <u8g_IsBBXIntersection+0x60>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	05 c0       	rjmp	.+10     	; 0x19a4 <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    19a2:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    19a4:	0f 91       	pop	r16
    19a6:	08 95       	ret

000019a8 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    19a8:	db 01       	movw	r26, r22
    19aa:	14 96       	adiw	r26, 0x04	; 4
    19ac:	ed 91       	ld	r30, X+
    19ae:	fc 91       	ld	r31, X
    19b0:	15 97       	sbiw	r26, 0x05	; 5
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	09 95       	icall
    19ba:	08 95       	ret

000019bc <u8g_SetChipSelect>:
    19bc:	db 01       	movw	r26, r22
    19be:	14 96       	adiw	r26, 0x04	; 4
    19c0:	ed 91       	ld	r30, X+
    19c2:	fc 91       	ld	r31, X
    19c4:	15 97       	sbiw	r26, 0x05	; 5
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	63 e0       	ldi	r22, 0x03	; 3
    19cc:	09 95       	icall
    19ce:	08 95       	ret

000019d0 <u8g_SetResetLow>:
    19d0:	db 01       	movw	r26, r22
    19d2:	14 96       	adiw	r26, 0x04	; 4
    19d4:	ed 91       	ld	r30, X+
    19d6:	fc 91       	ld	r31, X
    19d8:	15 97       	sbiw	r26, 0x05	; 5
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	64 e0       	ldi	r22, 0x04	; 4
    19e2:	09 95       	icall
    19e4:	08 95       	ret

000019e6 <u8g_SetResetHigh>:
    19e6:	db 01       	movw	r26, r22
    19e8:	14 96       	adiw	r26, 0x04	; 4
    19ea:	ed 91       	ld	r30, X+
    19ec:	fc 91       	ld	r31, X
    19ee:	15 97       	sbiw	r26, 0x05	; 5
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	41 e0       	ldi	r20, 0x01	; 1
    19f6:	64 e0       	ldi	r22, 0x04	; 4
    19f8:	09 95       	icall
    19fa:	08 95       	ret

000019fc <u8g_SetAddress>:
    19fc:	db 01       	movw	r26, r22
    19fe:	14 96       	adiw	r26, 0x04	; 4
    1a00:	ed 91       	ld	r30, X+
    1a02:	fc 91       	ld	r31, X
    1a04:	15 97       	sbiw	r26, 0x05	; 5
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	62 e0       	ldi	r22, 0x02	; 2
    1a0c:	09 95       	icall
    1a0e:	08 95       	ret

00001a10 <u8g_WriteByte>:
    1a10:	db 01       	movw	r26, r22
    1a12:	14 96       	adiw	r26, 0x04	; 4
    1a14:	ed 91       	ld	r30, X+
    1a16:	fc 91       	ld	r31, X
    1a18:	15 97       	sbiw	r26, 0x05	; 5
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	65 e0       	ldi	r22, 0x05	; 5
    1a20:	09 95       	icall
    1a22:	08 95       	ret

00001a24 <u8g_WriteSequence>:
    1a24:	db 01       	movw	r26, r22
    1a26:	14 96       	adiw	r26, 0x04	; 4
    1a28:	ed 91       	ld	r30, X+
    1a2a:	fc 91       	ld	r31, X
    1a2c:	15 97       	sbiw	r26, 0x05	; 5
    1a2e:	66 e0       	ldi	r22, 0x06	; 6
    1a30:	09 95       	icall
    1a32:	08 95       	ret

00001a34 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    1a34:	af 92       	push	r10
    1a36:	bf 92       	push	r11
    1a38:	cf 92       	push	r12
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	6c 01       	movw	r12, r24
    1a4a:	7b 01       	movw	r14, r22
    1a4c:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    1a4e:	d0 e0       	ldi	r29, 0x00	; 0
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1a50:	b1 2c       	mov	r11, r1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1a52:	aa 24       	eor	r10, r10
    1a54:	a3 94       	inc	r10
{
  uint8_t is_escape = 0;
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    1a56:	f8 01       	movw	r30, r16
    1a58:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    1a5a:	d1 11       	cpse	r29, r1
    1a5c:	0b c0       	rjmp	.+22     	; 0x1a74 <u8g_WriteEscSeqP+0x40>
    {
      if ( value != 255 )
    1a5e:	cf 3f       	cpi	r28, 0xFF	; 255
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <u8g_WriteEscSeqP+0x30>
    1a62:	4a c0       	rjmp	.+148    	; 0x1af8 <u8g_WriteEscSeqP+0xc4>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1a64:	4c 2f       	mov	r20, r28
    1a66:	b7 01       	movw	r22, r14
    1a68:	c6 01       	movw	r24, r12
    1a6a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <u8g_WriteByte>
    1a6e:	81 11       	cpse	r24, r1
    1a70:	48 c0       	rjmp	.+144    	; 0x1b02 <u8g_WriteEscSeqP+0xce>
    1a72:	4b c0       	rjmp	.+150    	; 0x1b0a <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1a74:	cf 3f       	cpi	r28, 0xFF	; 255
    1a76:	51 f4       	brne	.+20     	; 0x1a8c <u8g_WriteEscSeqP+0x58>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1a78:	4f ef       	ldi	r20, 0xFF	; 255
    1a7a:	b7 01       	movw	r22, r14
    1a7c:	c6 01       	movw	r24, r12
    1a7e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <u8g_WriteByte>
    1a82:	88 23       	and	r24, r24
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <u8g_WriteEscSeqP+0x54>
    1a86:	41 c0       	rjmp	.+130    	; 0x1b0a <u8g_WriteEscSeqP+0xd6>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1a88:	db 2d       	mov	r29, r11
    1a8a:	3b c0       	rjmp	.+118    	; 0x1b02 <u8g_WriteEscSeqP+0xce>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    1a8c:	ce 3f       	cpi	r28, 0xFE	; 254
    1a8e:	e1 f1       	breq	.+120    	; 0x1b08 <u8g_WriteEscSeqP+0xd4>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1a90:	c0 3f       	cpi	r28, 0xF0	; 240
    1a92:	a0 f5       	brcc	.+104    	; 0x1afc <u8g_WriteEscSeqP+0xc8>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1a94:	c0 3e       	cpi	r28, 0xE0	; 224
    1a96:	40 f0       	brcs	.+16     	; 0x1aa8 <u8g_WriteEscSeqP+0x74>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    1a98:	4c 2f       	mov	r20, r28
    1a9a:	4f 70       	andi	r20, 0x0F	; 15
    1a9c:	b7 01       	movw	r22, r14
    1a9e:	c6 01       	movw	r24, r12
    1aa0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1aa4:	db 2d       	mov	r29, r11
    1aa6:	2d c0       	rjmp	.+90     	; 0x1b02 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    1aa8:	c0 3d       	cpi	r28, 0xD0	; 208
    1aaa:	40 f0       	brcs	.+16     	; 0x1abc <u8g_WriteEscSeqP+0x88>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    1aac:	4c 2f       	mov	r20, r28
    1aae:	4f 70       	andi	r20, 0x0F	; 15
    1ab0:	b7 01       	movw	r22, r14
    1ab2:	c6 01       	movw	r24, r12
    1ab4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1ab8:	db 2d       	mov	r29, r11
    1aba:	23 c0       	rjmp	.+70     	; 0x1b02 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    1abc:	c0 3c       	cpi	r28, 0xC0	; 192
    1abe:	a0 f0       	brcs	.+40     	; 0x1ae8 <u8g_WriteEscSeqP+0xb4>
      {
        u8g_SetResetLow(u8g, dev);
    1ac0:	b7 01       	movw	r22, r14
    1ac2:	c6 01       	movw	r24, r12
    1ac4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    1ac8:	c2 95       	swap	r28
    1aca:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
    1acc:	ce 5f       	subi	r28, 0xFE	; 254
        u8g_Delay(value);
    1ace:	d0 e0       	ldi	r29, 0x00	; 0
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    1ad6:	b7 01       	movw	r22, r14
    1ad8:	c6 01       	movw	r24, r12
    1ada:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <u8g_SetResetHigh>
        u8g_Delay(value);
    1ade:	ce 01       	movw	r24, r28
    1ae0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1ae4:	db 2d       	mov	r29, r11
    1ae6:	0d c0       	rjmp	.+26     	; 0x1b02 <u8g_WriteEscSeqP+0xce>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    1ae8:	cc 23       	and	r28, r28
    1aea:	54 f0       	brlt	.+20     	; 0x1b00 <u8g_WriteEscSeqP+0xcc>
      {
        u8g_Delay(value);
    1aec:	8c 2f       	mov	r24, r28
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <u8g_Delay>
      }
      is_escape = 0;
    1af4:	db 2d       	mov	r29, r11
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <u8g_WriteEscSeqP+0xce>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1af8:	da 2d       	mov	r29, r10
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1afc:	db 2d       	mov	r29, r11
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <u8g_WriteEscSeqP+0xce>
    1b00:	db 2d       	mov	r29, r11
    }
    esc_seq++;
    1b02:	0f 5f       	subi	r16, 0xFF	; 255
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    1b06:	a7 cf       	rjmp	.-178    	; 0x1a56 <u8g_WriteEscSeqP+0x22>
  return 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
}
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	bf 90       	pop	r11
    1b1c:	af 90       	pop	r10
    1b1e:	08 95       	ret

00001b20 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    1b24:	fc 01       	movw	r30, r24
    1b26:	23 a5       	ldd	r18, Z+43	; 0x2b
    1b28:	22 23       	and	r18, r18
    1b2a:	b1 f0       	breq	.+44     	; 0x1b58 <u8g_com_arduino_ssd_start_sequence+0x38>
    1b2c:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    1b2e:	88 e7       	ldi	r24, 0x78	; 120
    1b30:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <u8g_i2c_start>
    1b34:	88 23       	and	r24, r24
    1b36:	89 f0       	breq	.+34     	; 0x1b5a <u8g_com_arduino_ssd_start_sequence+0x3a>
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    1b38:	8e a1       	ldd	r24, Y+38	; 0x26
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    1b3e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <u8g_i2c_send_byte>
    1b42:	81 11       	cpse	r24, r1
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <u8g_com_arduino_ssd_start_sequence+0x32>
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    1b48:	80 e4       	ldi	r24, 0x40	; 64
    1b4a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <u8g_i2c_send_byte>
    1b4e:	88 23       	and	r24, r24
    1b50:	21 f0       	breq	.+8      	; 0x1b5a <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    1b52:	1b a6       	std	Y+43, r1	; 0x2b
  return 1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <u8g_com_arduino_ssd_start_sequence+0x3a>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	e4 2e       	mov	r14, r20
    1b70:	89 01       	movw	r16, r18
  switch(msg)
    1b72:	63 30       	cpi	r22, 0x03	; 3
    1b74:	b1 f0       	breq	.+44     	; 0x1ba2 <u8g_com_arduino_ssd_i2c_fn+0x42>
    1b76:	30 f4       	brcc	.+12     	; 0x1b84 <u8g_com_arduino_ssd_i2c_fn+0x24>
    1b78:	61 30       	cpi	r22, 0x01	; 1
    1b7a:	69 f0       	breq	.+26     	; 0x1b96 <u8g_com_arduino_ssd_i2c_fn+0x36>
    1b7c:	62 30       	cpi	r22, 0x02	; 2
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <u8g_com_arduino_ssd_i2c_fn+0x22>
    1b80:	6f c0       	rjmp	.+222    	; 0x1c60 <u8g_com_arduino_ssd_i2c_fn+0x100>
    1b82:	74 c0       	rjmp	.+232    	; 0x1c6c <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1b84:	66 30       	cpi	r22, 0x06	; 6
    1b86:	41 f1       	breq	.+80     	; 0x1bd8 <u8g_com_arduino_ssd_i2c_fn+0x78>
    1b88:	67 30       	cpi	r22, 0x07	; 7
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <u8g_com_arduino_ssd_i2c_fn+0x2e>
    1b8c:	48 c0       	rjmp	.+144    	; 0x1c1e <u8g_com_arduino_ssd_i2c_fn+0xbe>
    1b8e:	65 30       	cpi	r22, 0x05	; 5
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <u8g_com_arduino_ssd_i2c_fn+0x34>
    1b92:	6c c0       	rjmp	.+216    	; 0x1c6c <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1b94:	10 c0       	rjmp	.+32     	; 0x1bb6 <u8g_com_arduino_ssd_i2c_fn+0x56>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    1b96:	fc 01       	movw	r30, r24
    1b98:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b9a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <u8g_i2c_init>
      }
      */
#endif
      break;
  }
  return 1;
    1b9e:	c1 e0       	ldi	r28, 0x01	; 1
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);

      break;
    1ba0:	6a c0       	rjmp	.+212    	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    1ba6:	21 e0       	ldi	r18, 0x01	; 1
    1ba8:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    1baa:	41 11       	cpse	r20, r1
    1bac:	61 c0       	rjmp	.+194    	; 0x1c70 <u8g_com_arduino_ssd_i2c_fn+0x110>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    1bae:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <u8g_i2c_stop>
      }
      */
#endif
      break;
  }
  return 1;
    1bb2:	c1 e0       	ldi	r28, 0x01	; 1
    1bb4:	60 c0       	rjmp	.+192    	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1bb6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <u8g_com_arduino_ssd_start_sequence>
    1bba:	c8 2f       	mov	r28, r24
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <u8g_com_arduino_ssd_i2c_fn+0x66>
	return u8g_i2c_stop(), 0;
    1bc0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <u8g_i2c_stop>
    1bc4:	58 c0       	rjmp	.+176    	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    1bc6:	8e 2d       	mov	r24, r14
    1bc8:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <u8g_i2c_send_byte>
    1bcc:	c8 2f       	mov	r28, r24
    1bce:	81 11       	cpse	r24, r1
    1bd0:	51 c0       	rjmp	.+162    	; 0x1c74 <u8g_com_arduino_ssd_i2c_fn+0x114>
	return u8g_i2c_stop(), 0;
    1bd2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <u8g_i2c_stop>
    1bd6:	4f c0       	rjmp	.+158    	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1bd8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <u8g_com_arduino_ssd_start_sequence>
    1bdc:	c8 2f       	mov	r28, r24
    1bde:	88 23       	and	r24, r24
    1be0:	21 f0       	breq	.+8      	; 0x1bea <u8g_com_arduino_ssd_i2c_fn+0x8a>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1be2:	e1 10       	cpse	r14, r1
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <u8g_com_arduino_ssd_i2c_fn+0x90>
      }
      */
#endif
      break;
  }
  return 1;
    1be6:	c1 e0       	ldi	r28, 0x01	; 1
    1be8:	46 c0       	rjmp	.+140    	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1bea:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <u8g_i2c_stop>
    1bee:	43 c0       	rjmp	.+134    	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1bf0:	68 01       	movw	r12, r16
    1bf2:	ea 94       	dec	r14
    1bf4:	8e 2d       	mov	r24, r14
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	08 0f       	add	r16, r24
    1bfc:	19 1f       	adc	r17, r25
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    1bfe:	f6 01       	movw	r30, r12
    1c00:	81 91       	ld	r24, Z+
    1c02:	6f 01       	movw	r12, r30
    1c04:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <u8g_i2c_send_byte>
    1c08:	c8 2f       	mov	r28, r24
    1c0a:	81 11       	cpse	r24, r1
    1c0c:	03 c0       	rjmp	.+6      	; 0x1c14 <u8g_com_arduino_ssd_i2c_fn+0xb4>
	    return u8g_i2c_stop(), 0;
    1c0e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <u8g_i2c_stop>
    1c12:	31 c0       	rjmp	.+98     	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1c14:	c0 16       	cp	r12, r16
    1c16:	d1 06       	cpc	r13, r17
    1c18:	91 f7       	brne	.-28     	; 0x1bfe <u8g_com_arduino_ssd_i2c_fn+0x9e>
      }
      */
#endif
      break;
  }
  return 1;
    1c1a:	c1 e0       	ldi	r28, 0x01	; 1
    1c1c:	2c c0       	rjmp	.+88     	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1c1e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <u8g_com_arduino_ssd_start_sequence>
    1c22:	c8 2f       	mov	r28, r24
    1c24:	88 23       	and	r24, r24
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <u8g_com_arduino_ssd_i2c_fn+0xd0>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1c28:	e1 10       	cpse	r14, r1
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <u8g_com_arduino_ssd_i2c_fn+0xd6>
      }
      */
#endif
      break;
  }
  return 1;
    1c2c:	c1 e0       	ldi	r28, 0x01	; 1
    1c2e:	23 c0       	rjmp	.+70     	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1c30:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <u8g_i2c_stop>
    1c34:	20 c0       	rjmp	.+64     	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1c36:	ea 94       	dec	r14
    1c38:	f1 2c       	mov	r15, r1
    1c3a:	ff ef       	ldi	r31, 0xFF	; 255
    1c3c:	ef 1a       	sub	r14, r31
    1c3e:	ff 0a       	sbc	r15, r31
    1c40:	e0 0e       	add	r14, r16
    1c42:	f1 1e       	adc	r15, r17
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    1c44:	f8 01       	movw	r30, r16
    1c46:	84 91       	lpm	r24, Z
    1c48:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <u8g_i2c_send_byte>
    1c4c:	c8 2f       	mov	r28, r24
    1c4e:	88 23       	and	r24, r24
    1c50:	91 f0       	breq	.+36     	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
	    return 0;
          ptr++;
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1c56:	0e 15       	cp	r16, r14
    1c58:	1f 05       	cpc	r17, r15
    1c5a:	a1 f7       	brne	.-24     	; 0x1c44 <u8g_com_arduino_ssd_i2c_fn+0xe4>
      }
      */
#endif
      break;
  }
  return 1;
    1c5c:	c1 e0       	ldi	r28, 0x01	; 1
    1c5e:	0b c0       	rjmp	.+22     	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    1c60:	fc 01       	movw	r30, r24
    1c62:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    1c64:	21 e0       	ldi	r18, 0x01	; 1
    1c66:	23 a7       	std	Z+43, r18	; 0x2b
      }
      */
#endif
      break;
  }
  return 1;
    1c68:	c1 e0       	ldi	r28, 0x01	; 1
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
  }
  return 1;
    1c6c:	c1 e0       	ldi	r28, 0x01	; 1
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1c70:	c1 e0       	ldi	r28, 0x01	; 1
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1c74:	c1 e0       	ldi	r28, 0x01	; 1
}
    1c76:	8c 2f       	mov	r24, r28
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	ff 90       	pop	r15
    1c80:	ef 90       	pop	r14
    1c82:	df 90       	pop	r13
    1c84:	cf 90       	pop	r12
    1c86:	08 95       	ret

00001c88 <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    1c88:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <u8g_i2c_err_code>
    1c8c:	91 11       	cpse	r25, r1
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <u8g_i2c_set_error+0x10>
    1c90:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <u8g_i2c_err_code>
    1c94:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <__data_end>
    1c98:	08 95       	ret

00001c9a <u8g_i2c_clear_error>:
    1c9a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <u8g_i2c_err_code>
    1c9e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
    1ca2:	08 95       	ret

00001ca4 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    1ca4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u8g_i2c_opt>
  TWSR = 0;
    1ca8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    1cac:	84 ff       	sbrs	r24, 4
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <u8g_i2c_init+0x14>
  {
    TWBR = F_CPU/(2*400000)-8;
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <u8g_i2c_init+0x1a>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    1cb8:	80 e2       	ldi	r24, 0x20	; 32
    1cba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    1cbe:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <u8g_i2c_clear_error>
    1cc2:	08 95       	ret

00001cc4 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <u8g_i2c_wait+0x8>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    1cd0:	20 ed       	ldi	r18, 0xD0	; 208
    1cd2:	37 e0       	ldi	r19, 0x07	; 7
    1cd4:	3a 83       	std	Y+2, r19	; 0x02
    1cd6:	29 83       	std	Y+1, r18	; 0x01
  while( !(TWCR & mask) )
    1cd8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1cdc:	98 23       	and	r25, r24
    1cde:	01 f5       	brne	.+64     	; 0x1d20 <u8g_i2c_wait+0x5c>
  {
      if ( cnt == 0 )
    1ce0:	29 81       	ldd	r18, Y+1	; 0x01
    1ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce4:	23 2b       	or	r18, r19
    1ce6:	39 f0       	breq	.+14     	; 0x1cf6 <u8g_i2c_wait+0x32>
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1ce8:	ec eb       	ldi	r30, 0xBC	; 188
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	0e c0       	rjmp	.+28     	; 0x1d0a <u8g_i2c_wait+0x46>
  {
      if ( cnt == 0 )
    1cee:	29 81       	ldd	r18, Y+1	; 0x01
    1cf0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf2:	23 2b       	or	r18, r19
    1cf4:	51 f4       	brne	.+20     	; 0x1d0a <u8g_i2c_wait+0x46>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1cf6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    1cfa:	18 2f       	mov	r17, r24
    1cfc:	12 70       	andi	r17, 0x02	; 2
    1cfe:	81 fd       	sbrc	r24, 1
    1d00:	11 c0       	rjmp	.+34     	; 0x1d24 <u8g_i2c_wait+0x60>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <u8g_i2c_set_error>
	  return 0; /* error */
    1d08:	0e c0       	rjmp	.+28     	; 0x1d26 <u8g_i2c_wait+0x62>
	}
      }
      cnt--;
    1d0a:	29 81       	ldd	r18, Y+1	; 0x01
    1d0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d0e:	21 50       	subi	r18, 0x01	; 1
    1d10:	31 09       	sbc	r19, r1
    1d12:	3a 83       	std	Y+2, r19	; 0x02
    1d14:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1d16:	90 81       	ld	r25, Z
    1d18:	98 23       	and	r25, r24
    1d1a:	49 f3       	breq	.-46     	; 0x1cee <u8g_i2c_wait+0x2a>
	  return 0; /* error */
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
    1d1c:	11 e0       	ldi	r17, 0x01	; 1
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <u8g_i2c_wait+0x62>
    1d20:	11 e0       	ldi	r17, 0x01	; 1
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <u8g_i2c_wait+0x62>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    1d24:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    1d26:	81 2f       	mov	r24, r17
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	08 95       	ret

00001d34 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	d8 2f       	mov	r29, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    1d3a:	94 ea       	ldi	r25, 0xA4	; 164
    1d3c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	80 e8       	ldi	r24, 0x80	; 128
    1d44:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <u8g_i2c_wait>
    1d48:	c8 2f       	mov	r28, r24
    1d4a:	88 23       	and	r24, r24
    1d4c:	61 f1       	breq	.+88     	; 0x1da6 <u8g_i2c_start+0x72>
    return 0;
  
  status = TW_STATUS;
    1d4e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1d52:	98 7f       	andi	r25, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    1d54:	98 30       	cpi	r25, 0x08	; 8
    1d56:	41 f0       	breq	.+16     	; 0x1d68 <u8g_i2c_start+0x34>
    1d58:	90 31       	cpi	r25, 0x10	; 16
    1d5a:	31 f0       	breq	.+12     	; 0x1d68 <u8g_i2c_start+0x34>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    1d5c:	61 e0       	ldi	r22, 0x01	; 1
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <u8g_i2c_set_error>
    return 0;
    1d64:	c0 e0       	ldi	r28, 0x00	; 0
    1d66:	1f c0       	rjmp	.+62     	; 0x1da6 <u8g_i2c_start+0x72>
  }

  /* set slave address */  
  TWDR = sla;
    1d68:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1d6c:	84 e8       	ldi	r24, 0x84	; 132
    1d6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    1d72:	62 e0       	ldi	r22, 0x02	; 2
    1d74:	80 e8       	ldi	r24, 0x80	; 128
    1d76:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <u8g_i2c_wait>
    1d7a:	c8 2f       	mov	r28, r24
    1d7c:	88 23       	and	r24, r24
    1d7e:	99 f0       	breq	.+38     	; 0x1da6 <u8g_i2c_start+0x72>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1d80:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    1d84:	c8 2f       	mov	r28, r24
    1d86:	c2 70       	andi	r28, 0x02	; 2
    1d88:	81 fd       	sbrc	r24, 1
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <u8g_i2c_start+0x6c>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    1d8c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1d90:	88 7f       	andi	r24, 0xF8	; 248
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    1d92:	88 31       	cpi	r24, 0x18	; 24
    1d94:	39 f0       	breq	.+14     	; 0x1da4 <u8g_i2c_start+0x70>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    1d96:	62 e0       	ldi	r22, 0x02	; 2
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <u8g_i2c_set_error>
      return 0;
    1d9e:	03 c0       	rjmp	.+6      	; 0x1da6 <u8g_i2c_start+0x72>
    }
  }

   return 1;
    1da0:	c1 e0       	ldi	r28, 0x01	; 1
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <u8g_i2c_start+0x72>
    1da4:	c1 e0       	ldi	r28, 0x01	; 1
}
    1da6:	8c 2f       	mov	r24, r28
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    1dae:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    1db0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1db4:	84 e8       	ldi	r24, 0x84	; 132
    1db6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    1dba:	63 e0       	ldi	r22, 0x03	; 3
    1dbc:	80 e8       	ldi	r24, 0x80	; 128
    1dbe:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <u8g_i2c_wait>
    1dc2:	c8 2f       	mov	r28, r24
    1dc4:	88 23       	and	r24, r24
    1dc6:	99 f0       	breq	.+38     	; 0x1dee <u8g_i2c_send_byte+0x40>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1dc8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    1dcc:	c8 2f       	mov	r28, r24
    1dce:	c2 70       	andi	r28, 0x02	; 2
    1dd0:	81 fd       	sbrc	r24, 1
    1dd2:	0a c0       	rjmp	.+20     	; 0x1de8 <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    1dd4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1dd8:	88 7f       	andi	r24, 0xF8	; 248
    if ( status != TW_MT_DATA_ACK )
    1dda:	88 32       	cpi	r24, 0x28	; 40
    1ddc:	39 f0       	breq	.+14     	; 0x1dec <u8g_i2c_send_byte+0x3e>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    1dde:	63 e0       	ldi	r22, 0x03	; 3
    1de0:	82 e0       	ldi	r24, 0x02	; 2
    1de2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <u8g_i2c_set_error>
      return 0;
    1de6:	03 c0       	rjmp	.+6      	; 0x1dee <u8g_i2c_send_byte+0x40>
    }
  }

  return 1;  
    1de8:	c1 e0       	ldi	r28, 0x01	; 1
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <u8g_i2c_send_byte+0x40>
    1dec:	c1 e0       	ldi	r28, 0x01	; 1
}
    1dee:	8c 2f       	mov	r24, r28
    1df0:	cf 91       	pop	r28
    1df2:	08 95       	ret

00001df4 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    1df4:	84 e9       	ldi	r24, 0x94	; 148
    1df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    1dfa:	64 e0       	ldi	r22, 0x04	; 4
    1dfc:	80 e1       	ldi	r24, 0x10	; 16
    1dfe:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <u8g_i2c_wait>
    1e02:	08 95       	ret

00001e04 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	39 f0       	breq	.+14     	; 0x1e16 <u8g_Delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e08:	2e ec       	ldi	r18, 0xCE	; 206
    1e0a:	37 e0       	ldi	r19, 0x07	; 7
    1e0c:	f9 01       	movw	r30, r18
    1e0e:	31 97       	sbiw	r30, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1e12:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1e14:	d9 f7       	brne	.-10     	; 0x1e0c <u8g_Delay+0x8>
    1e16:	08 95       	ret

00001e18 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1e18:	af 92       	push	r10
    1e1a:	bf 92       	push	r11
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	7c 01       	movw	r14, r24
    1e2c:	8b 01       	movw	r16, r22
    1e2e:	c4 2f       	mov	r28, r20
    1e30:	69 01       	movw	r12, r18
  switch(msg)
    1e32:	40 31       	cpi	r20, 0x10	; 16
    1e34:	99 f1       	breq	.+102    	; 0x1e9c <u8g_dev_ssd1306_128x64_fn+0x84>
    1e36:	18 f4       	brcc	.+6      	; 0x1e3e <u8g_dev_ssd1306_128x64_fn+0x26>
    1e38:	4a 30       	cpi	r20, 0x0A	; 10
    1e3a:	31 f0       	breq	.+12     	; 0x1e48 <u8g_dev_ssd1306_128x64_fn+0x30>
    1e3c:	3b c0       	rjmp	.+118    	; 0x1eb4 <u8g_dev_ssd1306_128x64_fn+0x9c>
    1e3e:	41 31       	cpi	r20, 0x11	; 17
    1e40:	99 f1       	breq	.+102    	; 0x1ea8 <u8g_dev_ssd1306_128x64_fn+0x90>
    1e42:	45 31       	cpi	r20, 0x15	; 21
    1e44:	59 f0       	breq	.+22     	; 0x1e5c <u8g_dev_ssd1306_128x64_fn+0x44>
    1e46:	36 c0       	rjmp	.+108    	; 0x1eb4 <u8g_dev_ssd1306_128x64_fn+0x9c>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    1e48:	42 e0       	ldi	r20, 0x02	; 2
    1e4a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    1e4e:	46 ee       	ldi	r20, 0xE6	; 230
    1e50:	51 e0       	ldi	r21, 0x01	; 1
    1e52:	b8 01       	movw	r22, r16
    1e54:	c7 01       	movw	r24, r14
    1e56:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <u8g_WriteEscSeqP>
      break;
    1e5a:	2c c0       	rjmp	.+88     	; 0x1eb4 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1e5c:	fb 01       	movw	r30, r22
    1e5e:	a2 80       	ldd	r10, Z+2	; 0x02
    1e60:	b3 80       	ldd	r11, Z+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    1e62:	4e ed       	ldi	r20, 0xDE	; 222
    1e64:	51 e0       	ldi	r21, 0x01	; 1
    1e66:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    1e6a:	f5 01       	movw	r30, r10
    1e6c:	44 81       	ldd	r20, Z+4	; 0x04
    1e6e:	40 6b       	ori	r20, 0xB0	; 176
    1e70:	b8 01       	movw	r22, r16
    1e72:	c7 01       	movw	r24, r14
    1e74:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	b8 01       	movw	r22, r16
    1e7c:	c7 01       	movw	r24, r14
    1e7e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    1e82:	a8 01       	movw	r20, r16
    1e84:	b7 01       	movw	r22, r14
    1e86:	c5 01       	movw	r24, r10
    1e88:	0e 94 27 13 	call	0x264e	; 0x264e <u8g_pb_WriteBuffer>
    1e8c:	88 23       	and	r24, r24
    1e8e:	c1 f0       	breq	.+48     	; 0x1ec0 <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	b8 01       	movw	r22, r16
    1e94:	c7 01       	movw	r24, r14
    1e96:	0e 94 de 0c 	call	0x19bc	; 0x19bc <u8g_SetChipSelect>
      }
      break;
    1e9a:	0c c0       	rjmp	.+24     	; 0x1eb4 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    1e9c:	45 ed       	ldi	r20, 0xD5	; 213
    1e9e:	51 e0       	ldi	r21, 0x01	; 1
    1ea0:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <u8g_WriteEscSeqP>
      return 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	0c c0       	rjmp	.+24     	; 0x1ec0 <u8g_dev_ssd1306_128x64_fn+0xa8>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    1ea8:	4a ec       	ldi	r20, 0xCA	; 202
    1eaa:	51 e0       	ldi	r21, 0x01	; 1
    1eac:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <u8g_WriteEscSeqP>
      return 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	06 c0       	rjmp	.+12     	; 0x1ec0 <u8g_dev_ssd1306_128x64_fn+0xa8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    1eb4:	96 01       	movw	r18, r12
    1eb6:	4c 2f       	mov	r20, r28
    1eb8:	b8 01       	movw	r22, r16
    1eba:	c7 01       	movw	r24, r14
    1ebc:	0e 94 9b 13 	call	0x2736	; 0x2736 <u8g_dev_pb8v1_base_fn>
}
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
    1ece:	bf 90       	pop	r11
    1ed0:	af 90       	pop	r10
    1ed2:	08 95       	ret

00001ed4 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	e6 0f       	add	r30, r22
    1ed8:	f1 1d       	adc	r31, r1
    1eda:	84 91       	lpm	r24, Z
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	98 2f       	mov	r25, r24
    1ee0:	88 27       	eor	r24, r24
    1ee2:	31 96       	adiw	r30, 0x01	; 1
    1ee4:	e4 91       	lpm	r30, Z
    1ee6:	8e 0f       	add	r24, r30
    1ee8:	91 1d       	adc	r25, r1
    1eea:	08 95       	ret

00001eec <u8g_font_GetFormat>:
    1eec:	fc 01       	movw	r30, r24
    1eee:	84 91       	lpm	r24, Z
    1ef0:	08 95       	ret

00001ef2 <u8g_font_GetFontGlyphStructureSize>:
    1ef2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <u8g_font_GetFormat>
    1ef6:	88 23       	and	r24, r24
    1ef8:	21 f0       	breq	.+8      	; 0x1f02 <u8g_font_GetFontGlyphStructureSize+0x10>
    1efa:	82 30       	cpi	r24, 0x02	; 2
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <u8g_font_GetFontGlyphStructureSize+0x10>
    1efe:	83 e0       	ldi	r24, 0x03	; 3
    1f00:	08 95       	ret
    1f02:	86 e0       	ldi	r24, 0x06	; 6
    1f04:	08 95       	ret

00001f06 <u8g_font_calc_vref_font>:
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	08 95       	ret

00001f0a <u8g_font_GetEncoding65Pos>:
    1f0a:	66 e0       	ldi	r22, 0x06	; 6
    1f0c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <u8g_font_get_word>
    1f10:	08 95       	ret

00001f12 <u8g_font_GetEncoding97Pos>:
    1f12:	68 e0       	ldi	r22, 0x08	; 8
    1f14:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <u8g_font_get_word>
    1f18:	08 95       	ret

00001f1a <u8g_font_GetFontStartEncoding>:
    1f1a:	0a 96       	adiw	r24, 0x0a	; 10
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	84 91       	lpm	r24, Z
    1f20:	08 95       	ret

00001f22 <u8g_font_GetFontEndEncoding>:
    1f22:	0b 96       	adiw	r24, 0x0b	; 11
    1f24:	fc 01       	movw	r30, r24
    1f26:	84 91       	lpm	r24, Z
    1f28:	08 95       	ret

00001f2a <u8g_GetGlyph>:
    1f2a:	af 92       	push	r10
    1f2c:	bf 92       	push	r11
    1f2e:	cf 92       	push	r12
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	7c 01       	movw	r14, r24
    1f40:	b6 2e       	mov	r11, r22
    1f42:	dc 01       	movw	r26, r24
    1f44:	14 96       	adiw	r26, 0x04	; 4
    1f46:	cd 91       	ld	r28, X+
    1f48:	dc 91       	ld	r29, X
    1f4a:	15 97       	sbiw	r26, 0x05	; 5
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <u8g_font_GetFormat>
    1f52:	18 2f       	mov	r17, r24
    1f54:	f7 01       	movw	r30, r14
    1f56:	84 81       	ldd	r24, Z+4	; 0x04
    1f58:	95 81       	ldd	r25, Z+5	; 0x05
    1f5a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <u8g_font_GetFontGlyphStructureSize>
    1f5e:	d8 2e       	mov	r13, r24
    1f60:	11 30       	cpi	r17, 0x01	; 1
    1f62:	29 f4       	brne	.+10     	; 0x1f6e <u8g_GetGlyph+0x44>
    1f64:	0f 2e       	mov	r0, r31
    1f66:	ff e0       	ldi	r31, 0x0F	; 15
    1f68:	af 2e       	mov	r10, r31
    1f6a:	f0 2d       	mov	r31, r0
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <u8g_GetGlyph+0x48>
    1f6e:	aa 24       	eor	r10, r10
    1f70:	aa 94       	dec	r10
    1f72:	d7 01       	movw	r26, r14
    1f74:	14 96       	adiw	r26, 0x04	; 4
    1f76:	8d 91       	ld	r24, X+
    1f78:	9c 91       	ld	r25, X
    1f7a:	15 97       	sbiw	r26, 0x05	; 5
    1f7c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <u8g_font_GetFontStartEncoding>
    1f80:	18 2f       	mov	r17, r24
    1f82:	f7 01       	movw	r30, r14
    1f84:	84 81       	ldd	r24, Z+4	; 0x04
    1f86:	95 81       	ldd	r25, Z+5	; 0x05
    1f88:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <u8g_font_GetFontEndEncoding>
    1f8c:	08 2f       	mov	r16, r24
    1f8e:	d7 01       	movw	r26, r14
    1f90:	14 96       	adiw	r26, 0x04	; 4
    1f92:	8d 91       	ld	r24, X+
    1f94:	9c 91       	ld	r25, X
    1f96:	15 97       	sbiw	r26, 0x05	; 5
    1f98:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <u8g_font_GetEncoding97Pos>
    1f9c:	b0 e6       	ldi	r27, 0x60	; 96
    1f9e:	bb 15       	cp	r27, r11
    1fa0:	30 f4       	brcc	.+12     	; 0x1fae <u8g_GetGlyph+0x84>
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	21 f0       	breq	.+8      	; 0x1fae <u8g_GetGlyph+0x84>
    1fa6:	c8 0f       	add	r28, r24
    1fa8:	d9 1f       	adc	r29, r25
    1faa:	11 e6       	ldi	r17, 0x61	; 97
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <u8g_GetGlyph+0xa2>
    1fae:	f7 01       	movw	r30, r14
    1fb0:	84 81       	ldd	r24, Z+4	; 0x04
    1fb2:	95 81       	ldd	r25, Z+5	; 0x05
    1fb4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <u8g_font_GetEncoding65Pos>
    1fb8:	f0 e4       	ldi	r31, 0x40	; 64
    1fba:	fb 15       	cp	r31, r11
    1fbc:	30 f4       	brcc	.+12     	; 0x1fca <u8g_GetGlyph+0xa0>
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	21 f0       	breq	.+8      	; 0x1fca <u8g_GetGlyph+0xa0>
    1fc2:	c8 0f       	add	r28, r24
    1fc4:	d9 1f       	adc	r29, r25
    1fc6:	11 e4       	ldi	r17, 0x41	; 65
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <u8g_GetGlyph+0xa2>
    1fca:	61 96       	adiw	r28, 0x11	; 17
    1fcc:	0b 15       	cp	r16, r11
    1fce:	90 f4       	brcc	.+36     	; 0x1ff4 <u8g_GetGlyph+0xca>
    1fd0:	d7 01       	movw	r26, r14
    1fd2:	50 96       	adiw	r26, 0x10	; 16
    1fd4:	1c 92       	st	X, r1
    1fd6:	50 97       	sbiw	r26, 0x10	; 16
    1fd8:	53 96       	adiw	r26, 0x13	; 19
    1fda:	1c 92       	st	X, r1
    1fdc:	53 97       	sbiw	r26, 0x13	; 19
    1fde:	54 96       	adiw	r26, 0x14	; 20
    1fe0:	1c 92       	st	X, r1
    1fe2:	54 97       	sbiw	r26, 0x14	; 20
    1fe4:	51 96       	adiw	r26, 0x11	; 17
    1fe6:	1c 92       	st	X, r1
    1fe8:	51 97       	sbiw	r26, 0x11	; 17
    1fea:	52 96       	adiw	r26, 0x12	; 18
    1fec:	1c 92       	st	X, r1
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	75 c0       	rjmp	.+234    	; 0x20de <u8g_GetGlyph+0x1b4>
    1ff4:	01 17       	cp	r16, r17
    1ff6:	08 f4       	brcc	.+2      	; 0x1ffa <u8g_GetGlyph+0xd0>
    1ff8:	6a c0       	rjmp	.+212    	; 0x20ce <u8g_GetGlyph+0x1a4>
    1ffa:	2d 2d       	mov	r18, r13
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	6e 01       	movw	r12, r28
    2000:	fe 01       	movw	r30, r28
    2002:	94 91       	lpm	r25, Z
    2004:	9f 3f       	cpi	r25, 0xFF	; 255
    2006:	11 f4       	brne	.+4      	; 0x200c <u8g_GetGlyph+0xe2>
    2008:	21 96       	adiw	r28, 0x01	; 1
    200a:	5d c0       	rjmp	.+186    	; 0x20c6 <u8g_GetGlyph+0x19c>
    200c:	1b 11       	cpse	r17, r11
    200e:	52 c0       	rjmp	.+164    	; 0x20b4 <u8g_GetGlyph+0x18a>
    2010:	8e 01       	movw	r16, r28
    2012:	d7 01       	movw	r26, r14
    2014:	14 96       	adiw	r26, 0x04	; 4
    2016:	8d 91       	ld	r24, X+
    2018:	9c 91       	ld	r25, X
    201a:	15 97       	sbiw	r26, 0x05	; 5
    201c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <u8g_font_GetFormat>
    2020:	88 23       	and	r24, r24
    2022:	11 f0       	breq	.+4      	; 0x2028 <u8g_GetGlyph+0xfe>
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	f1 f4       	brne	.+60     	; 0x2064 <u8g_GetGlyph+0x13a>
    2028:	f6 01       	movw	r30, r12
    202a:	c4 90       	lpm	r12, Z
    202c:	d7 01       	movw	r26, r14
    202e:	53 96       	adiw	r26, 0x13	; 19
    2030:	cc 92       	st	X, r12
    2032:	53 97       	sbiw	r26, 0x13	; 19
    2034:	f8 01       	movw	r30, r16
    2036:	31 96       	adiw	r30, 0x01	; 1
    2038:	e4 91       	lpm	r30, Z
    203a:	54 96       	adiw	r26, 0x14	; 20
    203c:	ec 93       	st	X, r30
    203e:	54 97       	sbiw	r26, 0x14	; 20
    2040:	f8 01       	movw	r30, r16
    2042:	33 96       	adiw	r30, 0x03	; 3
    2044:	e4 91       	lpm	r30, Z
    2046:	50 96       	adiw	r26, 0x10	; 16
    2048:	ec 93       	st	X, r30
    204a:	50 97       	sbiw	r26, 0x10	; 16
    204c:	f8 01       	movw	r30, r16
    204e:	34 96       	adiw	r30, 0x04	; 4
    2050:	e4 91       	lpm	r30, Z
    2052:	51 96       	adiw	r26, 0x11	; 17
    2054:	ec 93       	st	X, r30
    2056:	51 97       	sbiw	r26, 0x11	; 17
    2058:	f8 01       	movw	r30, r16
    205a:	35 96       	adiw	r30, 0x05	; 5
    205c:	e4 91       	lpm	r30, Z
    205e:	52 96       	adiw	r26, 0x12	; 18
    2060:	ec 93       	st	X, r30
    2062:	25 c0       	rjmp	.+74     	; 0x20ae <u8g_GetGlyph+0x184>
    2064:	fe 01       	movw	r30, r28
    2066:	84 91       	lpm	r24, Z
    2068:	98 2f       	mov	r25, r24
    206a:	9f 70       	andi	r25, 0x0F	; 15
    206c:	92 50       	subi	r25, 0x02	; 2
    206e:	d7 01       	movw	r26, r14
    2070:	52 96       	adiw	r26, 0x12	; 18
    2072:	9c 93       	st	X, r25
    2074:	52 97       	sbiw	r26, 0x12	; 18
    2076:	c8 2e       	mov	r12, r24
    2078:	c6 94       	lsr	r12
    207a:	c6 94       	lsr	r12
    207c:	c6 94       	lsr	r12
    207e:	c6 94       	lsr	r12
    2080:	51 96       	adiw	r26, 0x11	; 17
    2082:	cc 92       	st	X, r12
    2084:	51 97       	sbiw	r26, 0x11	; 17
    2086:	fe 01       	movw	r30, r28
    2088:	31 96       	adiw	r30, 0x01	; 1
    208a:	e4 91       	lpm	r30, Z
    208c:	8e 2f       	mov	r24, r30
    208e:	8f 70       	andi	r24, 0x0F	; 15
    2090:	54 96       	adiw	r26, 0x14	; 20
    2092:	8c 93       	st	X, r24
    2094:	54 97       	sbiw	r26, 0x14	; 20
    2096:	e2 95       	swap	r30
    2098:	ef 70       	andi	r30, 0x0F	; 15
    209a:	53 96       	adiw	r26, 0x13	; 19
    209c:	ec 93       	st	X, r30
    209e:	53 97       	sbiw	r26, 0x13	; 19
    20a0:	fe 01       	movw	r30, r28
    20a2:	32 96       	adiw	r30, 0x02	; 2
    20a4:	e4 91       	lpm	r30, Z
    20a6:	e2 95       	swap	r30
    20a8:	ef 70       	andi	r30, 0x0F	; 15
    20aa:	50 96       	adiw	r26, 0x10	; 16
    20ac:	ec 93       	st	X, r30
    20ae:	8c 2f       	mov	r24, r28
    20b0:	9d 2f       	mov	r25, r29
    20b2:	15 c0       	rjmp	.+42     	; 0x20de <u8g_GetGlyph+0x1b4>
    20b4:	fe 01       	movw	r30, r28
    20b6:	32 96       	adiw	r30, 0x02	; 2
    20b8:	e4 91       	lpm	r30, Z
    20ba:	ea 21       	and	r30, r10
    20bc:	c9 01       	movw	r24, r18
    20be:	8e 0f       	add	r24, r30
    20c0:	91 1d       	adc	r25, r1
    20c2:	c8 0f       	add	r28, r24
    20c4:	d9 1f       	adc	r29, r25
    20c6:	10 17       	cp	r17, r16
    20c8:	11 f0       	breq	.+4      	; 0x20ce <u8g_GetGlyph+0x1a4>
    20ca:	1f 5f       	subi	r17, 0xFF	; 255
    20cc:	98 cf       	rjmp	.-208    	; 0x1ffe <u8g_GetGlyph+0xd4>
    20ce:	f7 01       	movw	r30, r14
    20d0:	10 8a       	std	Z+16, r1	; 0x10
    20d2:	13 8a       	std	Z+19, r1	; 0x13
    20d4:	14 8a       	std	Z+20, r1	; 0x14
    20d6:	11 8a       	std	Z+17, r1	; 0x11
    20d8:	12 8a       	std	Z+18, r1	; 0x12
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	08 95       	ret

000020f4 <u8g_draw_glyph>:
    20f4:	6f 92       	push	r6
    20f6:	7f 92       	push	r7
    20f8:	8f 92       	push	r8
    20fa:	9f 92       	push	r9
    20fc:	af 92       	push	r10
    20fe:	bf 92       	push	r11
    2100:	cf 92       	push	r12
    2102:	df 92       	push	r13
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	5c 01       	movw	r10, r24
    2112:	16 2f       	mov	r17, r22
    2114:	64 2e       	mov	r6, r20
    2116:	62 2f       	mov	r22, r18
    2118:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <u8g_GetGlyph>
    211c:	6c 01       	movw	r12, r24
    211e:	89 2b       	or	r24, r25
    2120:	09 f4       	brne	.+2      	; 0x2124 <u8g_draw_glyph+0x30>
    2122:	48 c0       	rjmp	.+144    	; 0x21b4 <u8g_draw_glyph+0xc0>
    2124:	f5 01       	movw	r30, r10
    2126:	84 81       	ldd	r24, Z+4	; 0x04
    2128:	95 81       	ldd	r25, Z+5	; 0x05
    212a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <u8g_font_GetFontGlyphStructureSize>
    212e:	98 2e       	mov	r9, r24
    2130:	f5 01       	movw	r30, r10
    2132:	d3 89       	ldd	r29, Z+19	; 0x13
    2134:	c4 89       	ldd	r28, Z+20	; 0x14
    2136:	71 88       	ldd	r7, Z+17	; 0x11
    2138:	71 0e       	add	r7, r17
    213a:	92 89       	ldd	r25, Z+18	; 0x12
    213c:	69 1a       	sub	r6, r25
    213e:	f6 2c       	mov	r15, r6
    2140:	fc 1a       	sub	r15, r28
    2142:	0c 2f       	mov	r16, r28
    2144:	2d 2f       	mov	r18, r29
    2146:	4f 2d       	mov	r20, r15
    2148:	67 2d       	mov	r22, r7
    214a:	c5 01       	movw	r24, r10
    214c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <u8g_IsBBXIntersection>
    2150:	81 11       	cpse	r24, r1
    2152:	03 c0       	rjmp	.+6      	; 0x215a <u8g_draw_glyph+0x66>
    2154:	f5 01       	movw	r30, r10
    2156:	80 89       	ldd	r24, Z+16	; 0x10
    2158:	2e c0       	rjmp	.+92     	; 0x21b6 <u8g_draw_glyph+0xc2>
    215a:	d9 5f       	subi	r29, 0xF9	; 249
    215c:	ed 2e       	mov	r14, r29
    215e:	e6 94       	lsr	r14
    2160:	e6 94       	lsr	r14
    2162:	e6 94       	lsr	r14
    2164:	cc 23       	and	r28, r28
    2166:	19 f1       	breq	.+70     	; 0x21ae <u8g_draw_glyph+0xba>
    2168:	e6 01       	movw	r28, r12
    216a:	c9 0d       	add	r28, r9
    216c:	d1 1d       	adc	r29, r1
    216e:	88 24       	eor	r8, r8
    2170:	8a 94       	dec	r8
    2172:	8e 0c       	add	r8, r14
    2174:	91 2c       	mov	r9, r1
    2176:	ff ef       	ldi	r31, 0xFF	; 255
    2178:	8f 1a       	sub	r8, r31
    217a:	9f 0a       	sbc	r9, r31
    217c:	11 c0       	rjmp	.+34     	; 0x21a0 <u8g_draw_glyph+0xac>
    217e:	fe 01       	movw	r30, r28
    2180:	04 91       	lpm	r16, Z
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	4f 2d       	mov	r20, r15
    2186:	61 2f       	mov	r22, r17
    2188:	c5 01       	movw	r24, r10
    218a:	0e 94 af 12 	call	0x255e	; 0x255e <u8g_Draw8Pixel>
    218e:	21 96       	adiw	r28, 0x01	; 1
    2190:	18 5f       	subi	r17, 0xF8	; 248
    2192:	cc 15       	cp	r28, r12
    2194:	dd 05       	cpc	r29, r13
    2196:	99 f7       	brne	.-26     	; 0x217e <u8g_draw_glyph+0x8a>
    2198:	e6 01       	movw	r28, r12
    219a:	f3 94       	inc	r15
    219c:	f6 14       	cp	r15, r6
    219e:	39 f0       	breq	.+14     	; 0x21ae <u8g_draw_glyph+0xba>
    21a0:	ee 20       	and	r14, r14
    21a2:	d9 f3       	breq	.-10     	; 0x219a <u8g_draw_glyph+0xa6>
    21a4:	6e 01       	movw	r12, r28
    21a6:	c8 0c       	add	r12, r8
    21a8:	d9 1c       	adc	r13, r9
    21aa:	17 2d       	mov	r17, r7
    21ac:	e8 cf       	rjmp	.-48     	; 0x217e <u8g_draw_glyph+0x8a>
    21ae:	f5 01       	movw	r30, r10
    21b0:	80 89       	ldd	r24, Z+16	; 0x10
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <u8g_draw_glyph+0xc2>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	8f 90       	pop	r8
    21ce:	7f 90       	pop	r7
    21d0:	6f 90       	pop	r6
    21d2:	08 95       	ret

000021d4 <u8g_DrawStr>:
    21d4:	cf 92       	push	r12
    21d6:	df 92       	push	r13
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	6c 01       	movw	r12, r24
    21e4:	c6 2f       	mov	r28, r22
    21e6:	f4 2e       	mov	r15, r20
    21e8:	89 01       	movw	r16, r18
    21ea:	dc 01       	movw	r26, r24
    21ec:	55 96       	adiw	r26, 0x15	; 21
    21ee:	ed 91       	ld	r30, X+
    21f0:	fc 91       	ld	r31, X
    21f2:	56 97       	sbiw	r26, 0x16	; 22
    21f4:	09 95       	icall
    21f6:	f8 0e       	add	r15, r24
    21f8:	f8 01       	movw	r30, r16
    21fa:	20 81       	ld	r18, Z
    21fc:	22 23       	and	r18, r18
    21fe:	81 f0       	breq	.+32     	; 0x2220 <u8g_DrawStr+0x4c>
    2200:	0f 5f       	subi	r16, 0xFF	; 255
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	d0 e0       	ldi	r29, 0x00	; 0
    2206:	4f 2d       	mov	r20, r15
    2208:	6c 2f       	mov	r22, r28
    220a:	c6 01       	movw	r24, r12
    220c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <u8g_draw_glyph>
    2210:	c8 0f       	add	r28, r24
    2212:	d8 0f       	add	r29, r24
    2214:	d8 01       	movw	r26, r16
    2216:	2d 91       	ld	r18, X+
    2218:	8d 01       	movw	r16, r26
    221a:	21 11       	cpse	r18, r1
    221c:	f4 cf       	rjmp	.-24     	; 0x2206 <u8g_DrawStr+0x32>
    221e:	01 c0       	rjmp	.+2      	; 0x2222 <u8g_DrawStr+0x4e>
    2220:	d0 e0       	ldi	r29, 0x00	; 0
    2222:	8d 2f       	mov	r24, r29
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	df 90       	pop	r13
    2230:	cf 90       	pop	r12
    2232:	08 95       	ret

00002234 <u8g_UpdateRefHeight>:
    2234:	dc 01       	movw	r26, r24
    2236:	14 96       	adiw	r26, 0x04	; 4
    2238:	8d 91       	ld	r24, X+
    223a:	9c 91       	ld	r25, X
    223c:	15 97       	sbiw	r26, 0x05	; 5
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	09 f4       	brne	.+2      	; 0x2244 <u8g_UpdateRefHeight+0x10>
    2242:	4d c0       	rjmp	.+154    	; 0x22de <u8g_UpdateRefHeight+0xaa>
    2244:	57 96       	adiw	r26, 0x17	; 23
    2246:	2c 91       	ld	r18, X
    2248:	57 97       	sbiw	r26, 0x17	; 23
    224a:	21 11       	cpse	r18, r1
    224c:	0d c0       	rjmp	.+26     	; 0x2268 <u8g_UpdateRefHeight+0x34>
    224e:	fc 01       	movw	r30, r24
    2250:	35 96       	adiw	r30, 0x05	; 5
    2252:	e4 91       	lpm	r30, Z
    2254:	58 96       	adiw	r26, 0x18	; 24
    2256:	ec 93       	st	X, r30
    2258:	58 97       	sbiw	r26, 0x18	; 24
    225a:	fc 01       	movw	r30, r24
    225c:	3c 96       	adiw	r30, 0x0c	; 12
    225e:	e4 91       	lpm	r30, Z
    2260:	59 96       	adiw	r26, 0x19	; 25
    2262:	ec 93       	st	X, r30
    2264:	59 97       	sbiw	r26, 0x19	; 25
    2266:	1b c0       	rjmp	.+54     	; 0x229e <u8g_UpdateRefHeight+0x6a>
    2268:	21 30       	cpi	r18, 0x01	; 1
    226a:	69 f4       	brne	.+26     	; 0x2286 <u8g_UpdateRefHeight+0x52>
    226c:	fc 01       	movw	r30, r24
    226e:	3f 96       	adiw	r30, 0x0f	; 15
    2270:	e4 91       	lpm	r30, Z
    2272:	58 96       	adiw	r26, 0x18	; 24
    2274:	ec 93       	st	X, r30
    2276:	58 97       	sbiw	r26, 0x18	; 24
    2278:	fc 01       	movw	r30, r24
    227a:	70 96       	adiw	r30, 0x10	; 16
    227c:	e4 91       	lpm	r30, Z
    227e:	59 96       	adiw	r26, 0x19	; 25
    2280:	ec 93       	st	X, r30
    2282:	59 97       	sbiw	r26, 0x19	; 25
    2284:	0c c0       	rjmp	.+24     	; 0x229e <u8g_UpdateRefHeight+0x6a>
    2286:	fc 01       	movw	r30, r24
    2288:	3d 96       	adiw	r30, 0x0d	; 13
    228a:	e4 91       	lpm	r30, Z
    228c:	58 96       	adiw	r26, 0x18	; 24
    228e:	ec 93       	st	X, r30
    2290:	58 97       	sbiw	r26, 0x18	; 24
    2292:	fc 01       	movw	r30, r24
    2294:	3e 96       	adiw	r30, 0x0e	; 14
    2296:	e4 91       	lpm	r30, Z
    2298:	59 96       	adiw	r26, 0x19	; 25
    229a:	ec 93       	st	X, r30
    229c:	59 97       	sbiw	r26, 0x19	; 25
    229e:	58 96       	adiw	r26, 0x18	; 24
    22a0:	8c 91       	ld	r24, X
    22a2:	58 97       	sbiw	r26, 0x18	; 24
    22a4:	08 2e       	mov	r0, r24
    22a6:	00 0c       	add	r0, r0
    22a8:	99 0b       	sbc	r25, r25
    22aa:	59 96       	adiw	r26, 0x19	; 25
    22ac:	2c 91       	ld	r18, X
    22ae:	59 97       	sbiw	r26, 0x19	; 25
    22b0:	82 1b       	sub	r24, r18
    22b2:	91 09       	sbc	r25, r1
    22b4:	27 fd       	sbrc	r18, 7
    22b6:	93 95       	inc	r25
    22b8:	5a 96       	adiw	r26, 0x1a	; 26
    22ba:	2c 91       	ld	r18, X
    22bc:	5a 97       	sbiw	r26, 0x1a	; 26
    22be:	20 34       	cpi	r18, 0x40	; 64
    22c0:	61 f0       	breq	.+24     	; 0x22da <u8g_UpdateRefHeight+0xa6>
    22c2:	82 9f       	mul	r24, r18
    22c4:	c0 01       	movw	r24, r0
    22c6:	11 24       	eor	r1, r1
    22c8:	00 24       	eor	r0, r0
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	00 1c       	adc	r0, r0
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	00 1c       	adc	r0, r0
    22d6:	89 2f       	mov	r24, r25
    22d8:	90 2d       	mov	r25, r0
    22da:	5b 96       	adiw	r26, 0x1b	; 27
    22dc:	8c 93       	st	X, r24
    22de:	08 95       	ret

000022e0 <u8g_SetFontPosBaseline>:
    22e0:	23 e8       	ldi	r18, 0x83	; 131
    22e2:	3f e0       	ldi	r19, 0x0F	; 15
    22e4:	fc 01       	movw	r30, r24
    22e6:	36 8b       	std	Z+22, r19	; 0x16
    22e8:	25 8b       	std	Z+21, r18	; 0x15
    22ea:	08 95       	ret

000022ec <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
  if ( u8g->font != font )
    22f0:	fc 01       	movw	r30, r24
    22f2:	24 81       	ldd	r18, Z+4	; 0x04
    22f4:	35 81       	ldd	r19, Z+5	; 0x05
    22f6:	26 17       	cp	r18, r22
    22f8:	37 07       	cpc	r19, r23
    22fa:	49 f0       	breq	.+18     	; 0x230e <u8g_SetFont+0x22>
    22fc:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    22fe:	75 83       	std	Z+5, r23	; 0x05
    2300:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    2302:	0e 94 1a 11 	call	0x2234	; 0x2234 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2306:	83 e8       	ldi	r24, 0x83	; 131
    2308:	9f e0       	ldi	r25, 0x0F	; 15
    230a:	9e 8b       	std	Y+22, r25	; 0x16
    230c:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	08 95       	ret

00002314 <u8g_init_data>:
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	ec 01       	movw	r28, r24
    231c:	1d 82       	std	Y+5, r1	; 0x05
    231e:	1c 82       	std	Y+4, r1	; 0x04
    2320:	1f 82       	std	Y+7, r1	; 0x07
    2322:	1e 82       	std	Y+6, r1	; 0x06
    2324:	19 86       	std	Y+9, r1	; 0x09
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	88 87       	std	Y+8, r24	; 0x08
    232a:	82 e2       	ldi	r24, 0x22	; 34
    232c:	8a 87       	std	Y+10, r24	; 0x0a
    232e:	1f 86       	std	Y+15, r1	; 0x0f
    2330:	1e 86       	std	Y+14, r1	; 0x0e
    2332:	fe 01       	movw	r30, r28
    2334:	b3 96       	adiw	r30, 0x23	; 35
    2336:	9e 01       	movw	r18, r28
    2338:	2f 5c       	subi	r18, 0xCF	; 207
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	8f ef       	ldi	r24, 0xFF	; 255
    233e:	81 93       	st	Z+, r24
    2340:	e2 17       	cp	r30, r18
    2342:	f3 07       	cpc	r31, r19
    2344:	e1 f7       	brne	.-8      	; 0x233e <u8g_init_data+0x2a>
    2346:	11 e0       	ldi	r17, 0x01	; 1
    2348:	18 a3       	std	Y+32, r17	; 0x20
    234a:	ce 01       	movw	r24, r28
    234c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <u8g_SetFontPosBaseline>
    2350:	1f 8b       	std	Y+23, r17	; 0x17
    2352:	18 8e       	std	Y+24, r1	; 0x18
    2354:	19 8e       	std	Y+25, r1	; 0x19
    2356:	80 e4       	ldi	r24, 0x40	; 64
    2358:	8a 8f       	std	Y+26, r24	; 0x1a
    235a:	1b 8e       	std	Y+27, r1	; 0x1b
    235c:	89 ee       	ldi	r24, 0xE9	; 233
    235e:	93 e1       	ldi	r25, 0x13	; 19
    2360:	9a ab       	std	Y+50, r25	; 0x32
    2362:	89 ab       	std	Y+49, r24	; 0x31
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	08 95       	ret

0000236c <u8g_call_dev_fn>:
    236c:	db 01       	movw	r26, r22
    236e:	ed 91       	ld	r30, X+
    2370:	fc 91       	ld	r31, X
    2372:	09 95       	icall
    2374:	08 95       	ret

00002376 <u8g_InitLL>:
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	ec 01       	movw	r28, r24
    2380:	8b 01       	movw	r16, r22
    2382:	e9 a9       	ldd	r30, Y+49	; 0x31
    2384:	fa a9       	ldd	r31, Y+50	; 0x32
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	09 95       	icall
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a e0       	ldi	r20, 0x0A	; 10
    2390:	b8 01       	movw	r22, r16
    2392:	ce 01       	movw	r24, r28
    2394:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    2398:	18 2f       	mov	r17, r24
    239a:	e9 a9       	ldd	r30, Y+49	; 0x31
    239c:	fa a9       	ldd	r31, Y+50	; 0x32
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	09 95       	icall
    23a2:	e9 a9       	ldd	r30, Y+49	; 0x31
    23a4:	fa a9       	ldd	r31, Y+50	; 0x32
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	09 95       	icall
    23aa:	81 2f       	mov	r24, r17
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	08 95       	ret

000023b6 <u8g_FirstPageLL>:
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	ec 01       	movw	r28, r24
    23c0:	8b 01       	movw	r16, r22
    23c2:	e9 a9       	ldd	r30, Y+49	; 0x31
    23c4:	fa a9       	ldd	r31, Y+50	; 0x32
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	09 95       	icall
    23ca:	e9 a9       	ldd	r30, Y+49	; 0x31
    23cc:	fa a9       	ldd	r31, Y+50	; 0x32
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	09 95       	icall
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	44 e1       	ldi	r20, 0x14	; 20
    23d8:	b8 01       	movw	r22, r16
    23da:	ce 01       	movw	r24, r28
    23dc:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    23e0:	9e 01       	movw	r18, r28
    23e2:	2d 5c       	subi	r18, 0xCD	; 205
    23e4:	3f 4f       	sbci	r19, 0xFF	; 255
    23e6:	47 e1       	ldi	r20, 0x17	; 23
    23e8:	b8 01       	movw	r22, r16
    23ea:	ce 01       	movw	r24, r28
    23ec:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    23f0:	e9 a9       	ldd	r30, Y+49	; 0x31
    23f2:	fa a9       	ldd	r31, Y+50	; 0x32
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	09 95       	icall
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	08 95       	ret

00002402 <u8g_NextPageLL>:
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	ec 01       	movw	r28, r24
    240e:	7b 01       	movw	r14, r22
    2410:	e9 a9       	ldd	r30, Y+49	; 0x31
    2412:	fa a9       	ldd	r31, Y+50	; 0x32
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	09 95       	icall
    2418:	e9 a9       	ldd	r30, Y+49	; 0x31
    241a:	fa a9       	ldd	r31, Y+50	; 0x32
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	09 95       	icall
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	45 e1       	ldi	r20, 0x15	; 21
    2426:	b7 01       	movw	r22, r14
    2428:	ce 01       	movw	r24, r28
    242a:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    242e:	18 2f       	mov	r17, r24
    2430:	88 23       	and	r24, r24
    2432:	41 f0       	breq	.+16     	; 0x2444 <u8g_NextPageLL+0x42>
    2434:	9e 01       	movw	r18, r28
    2436:	2d 5c       	subi	r18, 0xCD	; 205
    2438:	3f 4f       	sbci	r19, 0xFF	; 255
    243a:	47 e1       	ldi	r20, 0x17	; 23
    243c:	b7 01       	movw	r22, r14
    243e:	ce 01       	movw	r24, r28
    2440:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    2444:	e9 a9       	ldd	r30, Y+49	; 0x31
    2446:	fa a9       	ldd	r31, Y+50	; 0x32
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	09 95       	icall
    244c:	81 2f       	mov	r24, r17
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	08 95       	ret

0000245a <u8g_GetWidthLL>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	1f 92       	push	r1
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9e 01       	movw	r18, r28
    2466:	2f 5f       	subi	r18, 0xFF	; 255
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	46 e4       	ldi	r20, 0x46	; 70
    246c:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	0f 90       	pop	r0
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	08 95       	ret

0000247a <u8g_GetHeightLL>:
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	1f 92       	push	r1
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	9e 01       	movw	r18, r28
    2486:	2f 5f       	subi	r18, 0xFF	; 255
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	47 e4       	ldi	r20, 0x47	; 71
    248c:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	0f 90       	pop	r0
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	08 95       	ret

0000249a <u8g_GetModeLL>:
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	48 e4       	ldi	r20, 0x48	; 72
    24a0:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    24a4:	08 95       	ret

000024a6 <u8g_UpdateDimension>:
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ec 01       	movw	r28, r24
    24ac:	6a 81       	ldd	r22, Y+2	; 0x02
    24ae:	7b 81       	ldd	r23, Y+3	; 0x03
    24b0:	0e 94 2d 12 	call	0x245a	; 0x245a <u8g_GetWidthLL>
    24b4:	88 83       	st	Y, r24
    24b6:	6a 81       	ldd	r22, Y+2	; 0x02
    24b8:	7b 81       	ldd	r23, Y+3	; 0x03
    24ba:	ce 01       	movw	r24, r28
    24bc:	0e 94 3d 12 	call	0x247a	; 0x247a <u8g_GetHeightLL>
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	6a 81       	ldd	r22, Y+2	; 0x02
    24c4:	7b 81       	ldd	r23, Y+3	; 0x03
    24c6:	ce 01       	movw	r24, r28
    24c8:	0e 94 4d 12 	call	0x249a	; 0x249a <u8g_GetModeLL>
    24cc:	8b 87       	std	Y+11, r24	; 0x0b
    24ce:	9e 01       	movw	r18, r28
    24d0:	2d 5c       	subi	r18, 0xCD	; 205
    24d2:	3f 4f       	sbci	r19, 0xFF	; 255
    24d4:	6a 81       	ldd	r22, Y+2	; 0x02
    24d6:	7b 81       	ldd	r23, Y+3	; 0x03
    24d8:	47 e1       	ldi	r20, 0x17	; 23
    24da:	ce 01       	movw	r24, r28
    24dc:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	08 95       	ret

000024e6 <u8g_Begin>:
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	ec 01       	movw	r28, r24
    24ec:	6a 81       	ldd	r22, Y+2	; 0x02
    24ee:	7b 81       	ldd	r23, Y+3	; 0x03
    24f0:	0e 94 bb 11 	call	0x2376	; 0x2376 <u8g_InitLL>
    24f4:	88 23       	and	r24, r24
    24f6:	21 f0       	breq	.+8      	; 0x2500 <u8g_Begin+0x1a>
    24f8:	ce 01       	movw	r24, r28
    24fa:	0e 94 53 12 	call	0x24a6	; 0x24a6 <u8g_UpdateDimension>
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <u8g_InitI2C>:
    2506:	ef 92       	push	r14
    2508:	ff 92       	push	r15
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	ec 01       	movw	r28, r24
    2512:	7b 01       	movw	r14, r22
    2514:	14 2f       	mov	r17, r20
    2516:	0e 94 8a 11 	call	0x2314	; 0x2314 <u8g_init_data>
    251a:	fb 82       	std	Y+3, r15	; 0x03
    251c:	ea 82       	std	Y+2, r14	; 0x02
    251e:	1e a7       	std	Y+46, r17	; 0x2e
    2520:	ce 01       	movw	r24, r28
    2522:	0e 94 73 12 	call	0x24e6	; 0x24e6 <u8g_Begin>
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	ff 90       	pop	r15
    252e:	ef 90       	pop	r14
    2530:	08 95       	ret

00002532 <u8g_FirstPage>:
    2532:	fc 01       	movw	r30, r24
    2534:	62 81       	ldd	r22, Z+2	; 0x02
    2536:	73 81       	ldd	r23, Z+3	; 0x03
    2538:	0e 94 db 11 	call	0x23b6	; 0x23b6 <u8g_FirstPageLL>
    253c:	08 95       	ret

0000253e <u8g_NextPage>:
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	ec 01       	movw	r28, r24
    2544:	ee 85       	ldd	r30, Y+14	; 0x0e
    2546:	ff 85       	ldd	r31, Y+15	; 0x0f
    2548:	30 97       	sbiw	r30, 0x00	; 0
    254a:	09 f0       	breq	.+2      	; 0x254e <u8g_NextPage+0x10>
    254c:	09 95       	icall
    254e:	6a 81       	ldd	r22, Y+2	; 0x02
    2550:	7b 81       	ldd	r23, Y+3	; 0x03
    2552:	ce 01       	movw	r24, r28
    2554:	0e 94 01 12 	call	0x2402	; 0x2402 <u8g_NextPageLL>
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	08 95       	ret

0000255e <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    255e:	0f 93       	push	r16
    2560:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    2566:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    2568:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    256a:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    256c:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    256e:	9f 01       	movw	r18, r30
    2570:	24 5e       	subi	r18, 0xE4	; 228
    2572:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    2574:	4b e3       	ldi	r20, 0x3B	; 59
    2576:	bc 01       	movw	r22, r24
    2578:	cf 01       	movw	r24, r30
    257a:	0e 94 b6 11 	call	0x236c	; 0x236c <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    257e:	0f 91       	pop	r16
    2580:	08 95       	ret

00002582 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    2582:	fc 01       	movw	r30, r24
    2584:	12 82       	std	Z+2, r1	; 0x02
    2586:	80 81       	ld	r24, Z
    2588:	81 50       	subi	r24, 0x01	; 1
    258a:	83 83       	std	Z+3, r24	; 0x03
    258c:	14 82       	std	Z+4, r1	; 0x04
    258e:	08 95       	ret

00002590 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    2590:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    2592:	90 81       	ld	r25, Z
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	89 0f       	add	r24, r25
    2598:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    259a:	21 81       	ldd	r18, Z+1	; 0x01
    259c:	82 17       	cp	r24, r18
    259e:	60 f4       	brcc	.+24     	; 0x25b8 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    25a0:	84 81       	ldd	r24, Z+4	; 0x04
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    25a6:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    25a8:	98 0f       	add	r25, r24
  if ( y1 >= p->total_height )
    25aa:	92 17       	cp	r25, r18
    25ac:	10 f0       	brcs	.+4      	; 0x25b2 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    25ae:	9f ef       	ldi	r25, 0xFF	; 255
    25b0:	92 0f       	add	r25, r18
  }
  p->page_y1 = y1;
    25b2:	93 83       	std	Z+3, r25	; 0x03
  
  return 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    25ba:	08 95       	ret

000025bc <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    25bc:	dc 01       	movw	r26, r24
    25be:	16 96       	adiw	r26, 0x06	; 6
    25c0:	ed 91       	ld	r30, X+
    25c2:	fc 91       	ld	r31, X
    25c4:	17 97       	sbiw	r26, 0x07	; 7
    25c6:	15 96       	adiw	r26, 0x05	; 5
    25c8:	8c 91       	ld	r24, X
    25ca:	9f 01       	movw	r18, r30
    25cc:	28 0f       	add	r18, r24
    25ce:	31 1d       	adc	r19, r1
    25d0:	c9 01       	movw	r24, r18
    25d2:	11 92       	st	Z+, r1
    25d4:	e8 17       	cp	r30, r24
    25d6:	f9 07       	cpc	r31, r25
    25d8:	e1 f7       	brne	.-8      	; 0x25d2 <u8g_pb_Clear+0x16>
    25da:	08 95       	ret

000025dc <u8g_pb_IsYIntersection>:
    25dc:	fc 01       	movw	r30, r24
    25de:	91 e0       	ldi	r25, 0x01	; 1
    25e0:	83 81       	ldd	r24, Z+3	; 0x03
    25e2:	86 17       	cp	r24, r22
    25e4:	08 f4       	brcc	.+2      	; 0x25e8 <u8g_pb_IsYIntersection+0xc>
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	31 e0       	ldi	r19, 0x01	; 1
    25ea:	46 17       	cp	r20, r22
    25ec:	08 f0       	brcs	.+2      	; 0x25f0 <u8g_pb_IsYIntersection+0x14>
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	83 2f       	mov	r24, r19
    25f2:	89 2b       	or	r24, r25
    25f4:	21 e0       	ldi	r18, 0x01	; 1
    25f6:	52 81       	ldd	r21, Z+2	; 0x02
    25f8:	45 17       	cp	r20, r21
    25fa:	08 f4       	brcc	.+2      	; 0x25fe <u8g_pb_IsYIntersection+0x22>
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	28 23       	and	r18, r24
    2600:	83 2f       	mov	r24, r19
    2602:	89 23       	and	r24, r25
    2604:	82 2b       	or	r24, r18
    2606:	08 95       	ret

00002608 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    2608:	dc 01       	movw	r26, r24
    260a:	fb 01       	movw	r30, r22
  box->x0 = 0;
    260c:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    260e:	12 96       	adiw	r26, 0x02	; 2
    2610:	8c 91       	ld	r24, X
    2612:	12 97       	sbiw	r26, 0x02	; 2
    2614:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    2616:	15 96       	adiw	r26, 0x05	; 5
    2618:	8c 91       	ld	r24, X
    261a:	15 97       	sbiw	r26, 0x05	; 5
    261c:	81 50       	subi	r24, 0x01	; 1
    261e:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    2620:	13 96       	adiw	r26, 0x03	; 3
    2622:	8c 91       	ld	r24, X
    2624:	83 83       	std	Z+3, r24	; 0x03
    2626:	08 95       	ret

00002628 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2628:	fb 01       	movw	r30, r22
    262a:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    262c:	23 81       	ldd	r18, Z+3	; 0x03
    262e:	21 30       	cpi	r18, 0x01	; 1
    2630:	19 f0       	breq	.+6      	; 0x2638 <u8g_pb_Is8PixelVisible+0x10>
    2632:	23 30       	cpi	r18, 0x03	; 3
    2634:	21 f0       	breq	.+8      	; 0x263e <u8g_pb_Is8PixelVisible+0x16>
    2636:	06 c0       	rjmp	.+12     	; 0x2644 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    2638:	48 e0       	ldi	r20, 0x08	; 8
    263a:	43 0f       	add	r20, r19
      break;
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    263e:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    2640:	38 50       	subi	r19, 0x08	; 8
      break;
    2642:	01 c0       	rjmp	.+2      	; 0x2646 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2644:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    2646:	63 2f       	mov	r22, r19
    2648:	0e 94 ee 12 	call	0x25dc	; 0x25dc <u8g_pb_IsYIntersection>
}
    264c:	08 95       	ret

0000264e <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    264e:	fc 01       	movw	r30, r24
    2650:	cb 01       	movw	r24, r22
    2652:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    2654:	26 81       	ldd	r18, Z+6	; 0x06
    2656:	37 81       	ldd	r19, Z+7	; 0x07
    2658:	45 81       	ldd	r20, Z+5	; 0x05
    265a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <u8g_WriteSequence>
}
    265e:	08 95       	ret

00002660 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    2660:	dc 01       	movw	r26, r24
    2662:	16 96       	adiw	r26, 0x06	; 6
    2664:	ed 91       	ld	r30, X+
    2666:	fc 91       	ld	r31, X
    2668:	17 97       	sbiw	r26, 0x07	; 7
    266a:	12 96       	adiw	r26, 0x02	; 2
    266c:	8c 91       	ld	r24, X
    266e:	48 1b       	sub	r20, r24
    2670:	47 70       	andi	r20, 0x07	; 7
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	02 c0       	rjmp	.+4      	; 0x267c <u8g_pb8v1_set_pixel+0x1c>
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	4a 95       	dec	r20
    267e:	e2 f7       	brpl	.-8      	; 0x2678 <u8g_pb8v1_set_pixel+0x18>
    2680:	e6 0f       	add	r30, r22
    2682:	f1 1d       	adc	r31, r1
    2684:	22 23       	and	r18, r18
    2686:	21 f0       	breq	.+8      	; 0x2690 <u8g_pb8v1_set_pixel+0x30>
    2688:	90 81       	ld	r25, Z
    268a:	89 2b       	or	r24, r25
    268c:	80 83       	st	Z, r24
    268e:	08 95       	ret
    2690:	80 95       	com	r24
    2692:	90 81       	ld	r25, Z
    2694:	89 23       	and	r24, r25
    2696:	80 83       	st	Z, r24
    2698:	08 95       	ret

0000269a <u8g_pb8v1_SetPixel>:
    269a:	fb 01       	movw	r30, r22
    269c:	41 81       	ldd	r20, Z+1	; 0x01
    269e:	fc 01       	movw	r30, r24
    26a0:	22 81       	ldd	r18, Z+2	; 0x02
    26a2:	42 17       	cp	r20, r18
    26a4:	70 f0       	brcs	.+28     	; 0x26c2 <u8g_pb8v1_SetPixel+0x28>
    26a6:	23 81       	ldd	r18, Z+3	; 0x03
    26a8:	24 17       	cp	r18, r20
    26aa:	58 f0       	brcs	.+22     	; 0x26c2 <u8g_pb8v1_SetPixel+0x28>
    26ac:	fb 01       	movw	r30, r22
    26ae:	30 81       	ld	r19, Z
    26b0:	fc 01       	movw	r30, r24
    26b2:	25 81       	ldd	r18, Z+5	; 0x05
    26b4:	32 17       	cp	r19, r18
    26b6:	28 f4       	brcc	.+10     	; 0x26c2 <u8g_pb8v1_SetPixel+0x28>
    26b8:	fb 01       	movw	r30, r22
    26ba:	24 81       	ldd	r18, Z+4	; 0x04
    26bc:	63 2f       	mov	r22, r19
    26be:	0e 94 30 13 	call	0x2660	; 0x2660 <u8g_pb8v1_set_pixel>
    26c2:	08 95       	ret

000026c4 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    26c4:	df 92       	push	r13
    26c6:	ef 92       	push	r14
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	7c 01       	movw	r14, r24
    26d4:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    26d6:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	81 30       	cpi	r24, 0x01	; 1
    26dc:	49 f0       	breq	.+18     	; 0x26f0 <u8g_pb8v1_Set8PixelOpt2+0x2c>
    26de:	28 f0       	brcs	.+10     	; 0x26ea <u8g_pb8v1_Set8PixelOpt2+0x26>
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	51 f0       	breq	.+20     	; 0x26f8 <u8g_pb8v1_Set8PixelOpt2+0x34>
    26e4:	83 30       	cpi	r24, 0x03	; 3
    26e6:	59 f0       	breq	.+22     	; 0x26fe <u8g_pb8v1_Set8PixelOpt2+0x3a>
    26e8:	0e c0       	rjmp	.+28     	; 0x2706 <u8g_pb8v1_Set8PixelOpt2+0x42>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    26ea:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    26ec:	01 e0       	ldi	r16, 0x01	; 1
    26ee:	0d c0       	rjmp	.+26     	; 0x270a <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 1: dy++; break;
    26f0:	dd 24       	eor	r13, r13
    26f2:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    26f4:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    26f6:	09 c0       	rjmp	.+18     	; 0x270a <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    26f8:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    26fa:	0f ef       	ldi	r16, 0xFF	; 255
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
    26fe:	dd 24       	eor	r13, r13
    2700:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2702:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2704:	02 c0       	rjmp	.+4      	; 0x270a <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2706:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2708:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    270a:	11 23       	and	r17, r17
    270c:	24 f4       	brge	.+8      	; 0x2716 <u8g_pb8v1_Set8PixelOpt2+0x52>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    270e:	be 01       	movw	r22, r28
    2710:	c7 01       	movw	r24, r14
    2712:	0e 94 4d 13 	call	0x269a	; 0x269a <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2716:	98 81       	ld	r25, Y
    2718:	90 0f       	add	r25, r16
    271a:	98 83       	st	Y, r25
    arg_pixel->y += dy;
    271c:	99 81       	ldd	r25, Y+1	; 0x01
    271e:	9d 0d       	add	r25, r13
    2720:	99 83       	std	Y+1, r25	; 0x01
    pixel <<= 1;
    2722:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    2724:	91 f7       	brne	.-28     	; 0x270a <u8g_pb8v1_Set8PixelOpt2+0x46>
  
}
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	ff 90       	pop	r15
    2730:	ef 90       	pop	r14
    2732:	df 90       	pop	r13
    2734:	08 95       	ret

00002736 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    273e:	fb 01       	movw	r30, r22
    2740:	c2 81       	ldd	r28, Z+2	; 0x02
    2742:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	fa 01       	movw	r30, r20
    2748:	74 97       	sbiw	r30, 0x14	; 20
    274a:	e4 33       	cpi	r30, 0x34	; 52
    274c:	f1 05       	cpc	r31, r1
    274e:	c8 f5       	brcc	.+114    	; 0x27c2 <u8g_dev_pb8v1_base_fn+0x8c>
    2750:	89 01       	movw	r16, r18
    2752:	ec 5c       	subi	r30, 0xCC	; 204
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    275a:	b9 01       	movw	r22, r18
    275c:	ce 01       	movw	r24, r28
    275e:	0e 94 14 13 	call	0x2628	; 0x2628 <u8g_pb_Is8PixelVisible>
    2762:	88 23       	and	r24, r24
    2764:	81 f1       	breq	.+96     	; 0x27c6 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    2766:	b8 01       	movw	r22, r16
    2768:	ce 01       	movw	r24, r28
    276a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	2b c0       	rjmp	.+86     	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    2772:	b9 01       	movw	r22, r18
    2774:	ce 01       	movw	r24, r28
    2776:	0e 94 4d 13 	call	0x269a	; 0x269a <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    277c:	25 c0       	rjmp	.+74     	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    277e:	ce 01       	movw	r24, r28
    2780:	0e 94 de 12 	call	0x25bc	; 0x25bc <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    2784:	ce 01       	movw	r24, r28
    2786:	0e 94 c1 12 	call	0x2582	; 0x2582 <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    278c:	1d c0       	rjmp	.+58     	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    278e:	ce 01       	movw	r24, r28
    2790:	0e 94 c8 12 	call	0x2590	; 0x2590 <u8g_page_Next>
    2794:	88 23       	and	r24, r24
    2796:	c1 f0       	breq	.+48     	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
        return 0;
      u8g_pb_Clear(pb);
    2798:	ce 01       	movw	r24, r28
    279a:	0e 94 de 12 	call	0x25bc	; 0x25bc <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    27a0:	13 c0       	rjmp	.+38     	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    27a2:	b9 01       	movw	r22, r18
    27a4:	ce 01       	movw	r24, r28
    27a6:	0e 94 04 13 	call	0x2608	; 0x2608 <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    27ac:	0d c0       	rjmp	.+26     	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	f9 01       	movw	r30, r18
    27b2:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    27b6:	08 c0       	rjmp	.+16     	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	f9 01       	movw	r30, r18
    27bc:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    27c0:	03 c0       	rjmp	.+6      	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	01 c0       	rjmp	.+2      	; 0x27c8 <u8g_dev_pb8v1_base_fn+0x92>
  }
  return 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
}
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	08 95       	ret

000027d2 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    27d2:	08 95       	ret

000027d4 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    27d4:	1f 92       	push	r1
    27d6:	0f 92       	push	r0
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	0f 92       	push	r0
    27dc:	11 24       	eor	r1, r1
    27de:	2f 93       	push	r18
    27e0:	8f 93       	push	r24
    27e2:	9f 93       	push	r25
    27e4:	ef 93       	push	r30
    27e6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    27e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    27ec:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    27f0:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    27f2:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <UART_RxHead>
    27f6:	ef 5f       	subi	r30, 0xFF	; 255
    27f8:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    27fa:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <UART_RxTail>
    27fe:	e9 17       	cp	r30, r25
    2800:	39 f0       	breq	.+14     	; 0x2810 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    2802:	e0 93 b9 01 	sts	0x01B9, r30	; 0x8001b9 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	e4 54       	subi	r30, 0x44	; 68
    280a:	fe 4f       	sbci	r31, 0xFE	; 254
    280c:	20 83       	st	Z, r18
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2810:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    2812:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <UART_LastRxError>
}
    2816:	ff 91       	pop	r31
    2818:	ef 91       	pop	r30
    281a:	9f 91       	pop	r25
    281c:	8f 91       	pop	r24
    281e:	2f 91       	pop	r18
    2820:	0f 90       	pop	r0
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	0f 90       	pop	r0
    2826:	1f 90       	pop	r1
    2828:	18 95       	reti

0000282a <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    282a:	1f 92       	push	r1
    282c:	0f 92       	push	r0
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	0f 92       	push	r0
    2832:	11 24       	eor	r1, r1
    2834:	8f 93       	push	r24
    2836:	9f 93       	push	r25
    2838:	ef 93       	push	r30
    283a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    283c:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <UART_TxHead>
    2840:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <UART_TxTail>
    2844:	98 17       	cp	r25, r24
    2846:	69 f0       	breq	.+26     	; 0x2862 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2848:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <UART_TxTail>
    284c:	ef 5f       	subi	r30, 0xFF	; 255
    284e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    2850:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	e4 52       	subi	r30, 0x24	; 36
    2858:	fe 4f       	sbci	r31, 0xFE	; 254
    285a:	80 81       	ld	r24, Z
    285c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2860:	05 c0       	rjmp	.+10     	; 0x286c <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2862:	e1 ec       	ldi	r30, 0xC1	; 193
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	8f 7d       	andi	r24, 0xDF	; 223
    286a:	80 83       	st	Z, r24
    }
}
    286c:	ff 91       	pop	r31
    286e:	ef 91       	pop	r30
    2870:	9f 91       	pop	r25
    2872:	8f 91       	pop	r24
    2874:	0f 90       	pop	r0
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	0f 90       	pop	r0
    287a:	1f 90       	pop	r1
    287c:	18 95       	reti

0000287e <__subsf3>:
    287e:	50 58       	subi	r21, 0x80	; 128

00002880 <__addsf3>:
    2880:	bb 27       	eor	r27, r27
    2882:	aa 27       	eor	r26, r26
    2884:	0e 94 57 14 	call	0x28ae	; 0x28ae <__addsf3x>
    2888:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__fp_round>
    288c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__fp_pscA>
    2890:	38 f0       	brcs	.+14     	; 0x28a0 <__addsf3+0x20>
    2892:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__fp_pscB>
    2896:	20 f0       	brcs	.+8      	; 0x28a0 <__addsf3+0x20>
    2898:	39 f4       	brne	.+14     	; 0x28a8 <__addsf3+0x28>
    289a:	9f 3f       	cpi	r25, 0xFF	; 255
    289c:	19 f4       	brne	.+6      	; 0x28a4 <__addsf3+0x24>
    289e:	26 f4       	brtc	.+8      	; 0x28a8 <__addsf3+0x28>
    28a0:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__fp_nan>
    28a4:	0e f4       	brtc	.+2      	; 0x28a8 <__addsf3+0x28>
    28a6:	e0 95       	com	r30
    28a8:	e7 fb       	bst	r30, 7
    28aa:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>

000028ae <__addsf3x>:
    28ae:	e9 2f       	mov	r30, r25
    28b0:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fp_split3>
    28b4:	58 f3       	brcs	.-42     	; 0x288c <__addsf3+0xc>
    28b6:	ba 17       	cp	r27, r26
    28b8:	62 07       	cpc	r22, r18
    28ba:	73 07       	cpc	r23, r19
    28bc:	84 07       	cpc	r24, r20
    28be:	95 07       	cpc	r25, r21
    28c0:	20 f0       	brcs	.+8      	; 0x28ca <__addsf3x+0x1c>
    28c2:	79 f4       	brne	.+30     	; 0x28e2 <__addsf3x+0x34>
    28c4:	a6 f5       	brtc	.+104    	; 0x292e <__addsf3x+0x80>
    28c6:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__fp_zero>
    28ca:	0e f4       	brtc	.+2      	; 0x28ce <__addsf3x+0x20>
    28cc:	e0 95       	com	r30
    28ce:	0b 2e       	mov	r0, r27
    28d0:	ba 2f       	mov	r27, r26
    28d2:	a0 2d       	mov	r26, r0
    28d4:	0b 01       	movw	r0, r22
    28d6:	b9 01       	movw	r22, r18
    28d8:	90 01       	movw	r18, r0
    28da:	0c 01       	movw	r0, r24
    28dc:	ca 01       	movw	r24, r20
    28de:	a0 01       	movw	r20, r0
    28e0:	11 24       	eor	r1, r1
    28e2:	ff 27       	eor	r31, r31
    28e4:	59 1b       	sub	r21, r25
    28e6:	99 f0       	breq	.+38     	; 0x290e <__addsf3x+0x60>
    28e8:	59 3f       	cpi	r21, 0xF9	; 249
    28ea:	50 f4       	brcc	.+20     	; 0x2900 <__addsf3x+0x52>
    28ec:	50 3e       	cpi	r21, 0xE0	; 224
    28ee:	68 f1       	brcs	.+90     	; 0x294a <__addsf3x+0x9c>
    28f0:	1a 16       	cp	r1, r26
    28f2:	f0 40       	sbci	r31, 0x00	; 0
    28f4:	a2 2f       	mov	r26, r18
    28f6:	23 2f       	mov	r18, r19
    28f8:	34 2f       	mov	r19, r20
    28fa:	44 27       	eor	r20, r20
    28fc:	58 5f       	subi	r21, 0xF8	; 248
    28fe:	f3 cf       	rjmp	.-26     	; 0x28e6 <__addsf3x+0x38>
    2900:	46 95       	lsr	r20
    2902:	37 95       	ror	r19
    2904:	27 95       	ror	r18
    2906:	a7 95       	ror	r26
    2908:	f0 40       	sbci	r31, 0x00	; 0
    290a:	53 95       	inc	r21
    290c:	c9 f7       	brne	.-14     	; 0x2900 <__addsf3x+0x52>
    290e:	7e f4       	brtc	.+30     	; 0x292e <__addsf3x+0x80>
    2910:	1f 16       	cp	r1, r31
    2912:	ba 0b       	sbc	r27, r26
    2914:	62 0b       	sbc	r22, r18
    2916:	73 0b       	sbc	r23, r19
    2918:	84 0b       	sbc	r24, r20
    291a:	ba f0       	brmi	.+46     	; 0x294a <__addsf3x+0x9c>
    291c:	91 50       	subi	r25, 0x01	; 1
    291e:	a1 f0       	breq	.+40     	; 0x2948 <__addsf3x+0x9a>
    2920:	ff 0f       	add	r31, r31
    2922:	bb 1f       	adc	r27, r27
    2924:	66 1f       	adc	r22, r22
    2926:	77 1f       	adc	r23, r23
    2928:	88 1f       	adc	r24, r24
    292a:	c2 f7       	brpl	.-16     	; 0x291c <__addsf3x+0x6e>
    292c:	0e c0       	rjmp	.+28     	; 0x294a <__addsf3x+0x9c>
    292e:	ba 0f       	add	r27, r26
    2930:	62 1f       	adc	r22, r18
    2932:	73 1f       	adc	r23, r19
    2934:	84 1f       	adc	r24, r20
    2936:	48 f4       	brcc	.+18     	; 0x294a <__addsf3x+0x9c>
    2938:	87 95       	ror	r24
    293a:	77 95       	ror	r23
    293c:	67 95       	ror	r22
    293e:	b7 95       	ror	r27
    2940:	f7 95       	ror	r31
    2942:	9e 3f       	cpi	r25, 0xFE	; 254
    2944:	08 f0       	brcs	.+2      	; 0x2948 <__addsf3x+0x9a>
    2946:	b0 cf       	rjmp	.-160    	; 0x28a8 <__addsf3+0x28>
    2948:	93 95       	inc	r25
    294a:	88 0f       	add	r24, r24
    294c:	08 f0       	brcs	.+2      	; 0x2950 <__addsf3x+0xa2>
    294e:	99 27       	eor	r25, r25
    2950:	ee 0f       	add	r30, r30
    2952:	97 95       	ror	r25
    2954:	87 95       	ror	r24
    2956:	08 95       	ret

00002958 <__divsf3>:
    2958:	0e 94 c0 14 	call	0x2980	; 0x2980 <__divsf3x>
    295c:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__fp_round>
    2960:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__fp_pscB>
    2964:	58 f0       	brcs	.+22     	; 0x297c <__divsf3+0x24>
    2966:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__fp_pscA>
    296a:	40 f0       	brcs	.+16     	; 0x297c <__divsf3+0x24>
    296c:	29 f4       	brne	.+10     	; 0x2978 <__divsf3+0x20>
    296e:	5f 3f       	cpi	r21, 0xFF	; 255
    2970:	29 f0       	breq	.+10     	; 0x297c <__divsf3+0x24>
    2972:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>
    2976:	51 11       	cpse	r21, r1
    2978:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__fp_szero>
    297c:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__fp_nan>

00002980 <__divsf3x>:
    2980:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fp_split3>
    2984:	68 f3       	brcs	.-38     	; 0x2960 <__divsf3+0x8>

00002986 <__divsf3_pse>:
    2986:	99 23       	and	r25, r25
    2988:	b1 f3       	breq	.-20     	; 0x2976 <__divsf3+0x1e>
    298a:	55 23       	and	r21, r21
    298c:	91 f3       	breq	.-28     	; 0x2972 <__divsf3+0x1a>
    298e:	95 1b       	sub	r25, r21
    2990:	55 0b       	sbc	r21, r21
    2992:	bb 27       	eor	r27, r27
    2994:	aa 27       	eor	r26, r26
    2996:	62 17       	cp	r22, r18
    2998:	73 07       	cpc	r23, r19
    299a:	84 07       	cpc	r24, r20
    299c:	38 f0       	brcs	.+14     	; 0x29ac <__divsf3_pse+0x26>
    299e:	9f 5f       	subi	r25, 0xFF	; 255
    29a0:	5f 4f       	sbci	r21, 0xFF	; 255
    29a2:	22 0f       	add	r18, r18
    29a4:	33 1f       	adc	r19, r19
    29a6:	44 1f       	adc	r20, r20
    29a8:	aa 1f       	adc	r26, r26
    29aa:	a9 f3       	breq	.-22     	; 0x2996 <__divsf3_pse+0x10>
    29ac:	35 d0       	rcall	.+106    	; 0x2a18 <__divsf3_pse+0x92>
    29ae:	0e 2e       	mov	r0, r30
    29b0:	3a f0       	brmi	.+14     	; 0x29c0 <__divsf3_pse+0x3a>
    29b2:	e0 e8       	ldi	r30, 0x80	; 128
    29b4:	32 d0       	rcall	.+100    	; 0x2a1a <__divsf3_pse+0x94>
    29b6:	91 50       	subi	r25, 0x01	; 1
    29b8:	50 40       	sbci	r21, 0x00	; 0
    29ba:	e6 95       	lsr	r30
    29bc:	00 1c       	adc	r0, r0
    29be:	ca f7       	brpl	.-14     	; 0x29b2 <__divsf3_pse+0x2c>
    29c0:	2b d0       	rcall	.+86     	; 0x2a18 <__divsf3_pse+0x92>
    29c2:	fe 2f       	mov	r31, r30
    29c4:	29 d0       	rcall	.+82     	; 0x2a18 <__divsf3_pse+0x92>
    29c6:	66 0f       	add	r22, r22
    29c8:	77 1f       	adc	r23, r23
    29ca:	88 1f       	adc	r24, r24
    29cc:	bb 1f       	adc	r27, r27
    29ce:	26 17       	cp	r18, r22
    29d0:	37 07       	cpc	r19, r23
    29d2:	48 07       	cpc	r20, r24
    29d4:	ab 07       	cpc	r26, r27
    29d6:	b0 e8       	ldi	r27, 0x80	; 128
    29d8:	09 f0       	breq	.+2      	; 0x29dc <__divsf3_pse+0x56>
    29da:	bb 0b       	sbc	r27, r27
    29dc:	80 2d       	mov	r24, r0
    29de:	bf 01       	movw	r22, r30
    29e0:	ff 27       	eor	r31, r31
    29e2:	93 58       	subi	r25, 0x83	; 131
    29e4:	5f 4f       	sbci	r21, 0xFF	; 255
    29e6:	3a f0       	brmi	.+14     	; 0x29f6 <__divsf3_pse+0x70>
    29e8:	9e 3f       	cpi	r25, 0xFE	; 254
    29ea:	51 05       	cpc	r21, r1
    29ec:	78 f0       	brcs	.+30     	; 0x2a0c <__divsf3_pse+0x86>
    29ee:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>
    29f2:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__fp_szero>
    29f6:	5f 3f       	cpi	r21, 0xFF	; 255
    29f8:	e4 f3       	brlt	.-8      	; 0x29f2 <__divsf3_pse+0x6c>
    29fa:	98 3e       	cpi	r25, 0xE8	; 232
    29fc:	d4 f3       	brlt	.-12     	; 0x29f2 <__divsf3_pse+0x6c>
    29fe:	86 95       	lsr	r24
    2a00:	77 95       	ror	r23
    2a02:	67 95       	ror	r22
    2a04:	b7 95       	ror	r27
    2a06:	f7 95       	ror	r31
    2a08:	9f 5f       	subi	r25, 0xFF	; 255
    2a0a:	c9 f7       	brne	.-14     	; 0x29fe <__divsf3_pse+0x78>
    2a0c:	88 0f       	add	r24, r24
    2a0e:	91 1d       	adc	r25, r1
    2a10:	96 95       	lsr	r25
    2a12:	87 95       	ror	r24
    2a14:	97 f9       	bld	r25, 7
    2a16:	08 95       	ret
    2a18:	e1 e0       	ldi	r30, 0x01	; 1
    2a1a:	66 0f       	add	r22, r22
    2a1c:	77 1f       	adc	r23, r23
    2a1e:	88 1f       	adc	r24, r24
    2a20:	bb 1f       	adc	r27, r27
    2a22:	62 17       	cp	r22, r18
    2a24:	73 07       	cpc	r23, r19
    2a26:	84 07       	cpc	r24, r20
    2a28:	ba 07       	cpc	r27, r26
    2a2a:	20 f0       	brcs	.+8      	; 0x2a34 <__divsf3_pse+0xae>
    2a2c:	62 1b       	sub	r22, r18
    2a2e:	73 0b       	sbc	r23, r19
    2a30:	84 0b       	sbc	r24, r20
    2a32:	ba 0b       	sbc	r27, r26
    2a34:	ee 1f       	adc	r30, r30
    2a36:	88 f7       	brcc	.-30     	; 0x2a1a <__divsf3_pse+0x94>
    2a38:	e0 95       	com	r30
    2a3a:	08 95       	ret

00002a3c <__fixsfsi>:
    2a3c:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__fixunssfsi>
    2a40:	68 94       	set
    2a42:	b1 11       	cpse	r27, r1
    2a44:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__fp_szero>
    2a48:	08 95       	ret

00002a4a <__fixunssfsi>:
    2a4a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fp_splitA>
    2a4e:	88 f0       	brcs	.+34     	; 0x2a72 <__fixunssfsi+0x28>
    2a50:	9f 57       	subi	r25, 0x7F	; 127
    2a52:	98 f0       	brcs	.+38     	; 0x2a7a <__fixunssfsi+0x30>
    2a54:	b9 2f       	mov	r27, r25
    2a56:	99 27       	eor	r25, r25
    2a58:	b7 51       	subi	r27, 0x17	; 23
    2a5a:	b0 f0       	brcs	.+44     	; 0x2a88 <__fixunssfsi+0x3e>
    2a5c:	e1 f0       	breq	.+56     	; 0x2a96 <__fixunssfsi+0x4c>
    2a5e:	66 0f       	add	r22, r22
    2a60:	77 1f       	adc	r23, r23
    2a62:	88 1f       	adc	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	1a f0       	brmi	.+6      	; 0x2a6e <__fixunssfsi+0x24>
    2a68:	ba 95       	dec	r27
    2a6a:	c9 f7       	brne	.-14     	; 0x2a5e <__fixunssfsi+0x14>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <__fixunssfsi+0x4c>
    2a6e:	b1 30       	cpi	r27, 0x01	; 1
    2a70:	91 f0       	breq	.+36     	; 0x2a96 <__fixunssfsi+0x4c>
    2a72:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__fp_zero>
    2a76:	b1 e0       	ldi	r27, 0x01	; 1
    2a78:	08 95       	ret
    2a7a:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__fp_zero>
    2a7e:	67 2f       	mov	r22, r23
    2a80:	78 2f       	mov	r23, r24
    2a82:	88 27       	eor	r24, r24
    2a84:	b8 5f       	subi	r27, 0xF8	; 248
    2a86:	39 f0       	breq	.+14     	; 0x2a96 <__fixunssfsi+0x4c>
    2a88:	b9 3f       	cpi	r27, 0xF9	; 249
    2a8a:	cc f3       	brlt	.-14     	; 0x2a7e <__fixunssfsi+0x34>
    2a8c:	86 95       	lsr	r24
    2a8e:	77 95       	ror	r23
    2a90:	67 95       	ror	r22
    2a92:	b3 95       	inc	r27
    2a94:	d9 f7       	brne	.-10     	; 0x2a8c <__fixunssfsi+0x42>
    2a96:	3e f4       	brtc	.+14     	; 0x2aa6 <__fixunssfsi+0x5c>
    2a98:	90 95       	com	r25
    2a9a:	80 95       	com	r24
    2a9c:	70 95       	com	r23
    2a9e:	61 95       	neg	r22
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	08 95       	ret

00002aa8 <__floatunsisf>:
    2aa8:	e8 94       	clt
    2aaa:	09 c0       	rjmp	.+18     	; 0x2abe <__floatsisf+0x12>

00002aac <__floatsisf>:
    2aac:	97 fb       	bst	r25, 7
    2aae:	3e f4       	brtc	.+14     	; 0x2abe <__floatsisf+0x12>
    2ab0:	90 95       	com	r25
    2ab2:	80 95       	com	r24
    2ab4:	70 95       	com	r23
    2ab6:	61 95       	neg	r22
    2ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aba:	8f 4f       	sbci	r24, 0xFF	; 255
    2abc:	9f 4f       	sbci	r25, 0xFF	; 255
    2abe:	99 23       	and	r25, r25
    2ac0:	a9 f0       	breq	.+42     	; 0x2aec <__floatsisf+0x40>
    2ac2:	f9 2f       	mov	r31, r25
    2ac4:	96 e9       	ldi	r25, 0x96	; 150
    2ac6:	bb 27       	eor	r27, r27
    2ac8:	93 95       	inc	r25
    2aca:	f6 95       	lsr	r31
    2acc:	87 95       	ror	r24
    2ace:	77 95       	ror	r23
    2ad0:	67 95       	ror	r22
    2ad2:	b7 95       	ror	r27
    2ad4:	f1 11       	cpse	r31, r1
    2ad6:	f8 cf       	rjmp	.-16     	; 0x2ac8 <__floatsisf+0x1c>
    2ad8:	fa f4       	brpl	.+62     	; 0x2b18 <__floatsisf+0x6c>
    2ada:	bb 0f       	add	r27, r27
    2adc:	11 f4       	brne	.+4      	; 0x2ae2 <__floatsisf+0x36>
    2ade:	60 ff       	sbrs	r22, 0
    2ae0:	1b c0       	rjmp	.+54     	; 0x2b18 <__floatsisf+0x6c>
    2ae2:	6f 5f       	subi	r22, 0xFF	; 255
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	16 c0       	rjmp	.+44     	; 0x2b18 <__floatsisf+0x6c>
    2aec:	88 23       	and	r24, r24
    2aee:	11 f0       	breq	.+4      	; 0x2af4 <__floatsisf+0x48>
    2af0:	96 e9       	ldi	r25, 0x96	; 150
    2af2:	11 c0       	rjmp	.+34     	; 0x2b16 <__floatsisf+0x6a>
    2af4:	77 23       	and	r23, r23
    2af6:	21 f0       	breq	.+8      	; 0x2b00 <__floatsisf+0x54>
    2af8:	9e e8       	ldi	r25, 0x8E	; 142
    2afa:	87 2f       	mov	r24, r23
    2afc:	76 2f       	mov	r23, r22
    2afe:	05 c0       	rjmp	.+10     	; 0x2b0a <__floatsisf+0x5e>
    2b00:	66 23       	and	r22, r22
    2b02:	71 f0       	breq	.+28     	; 0x2b20 <__floatsisf+0x74>
    2b04:	96 e8       	ldi	r25, 0x86	; 134
    2b06:	86 2f       	mov	r24, r22
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	2a f0       	brmi	.+10     	; 0x2b18 <__floatsisf+0x6c>
    2b0e:	9a 95       	dec	r25
    2b10:	66 0f       	add	r22, r22
    2b12:	77 1f       	adc	r23, r23
    2b14:	88 1f       	adc	r24, r24
    2b16:	da f7       	brpl	.-10     	; 0x2b0e <__floatsisf+0x62>
    2b18:	88 0f       	add	r24, r24
    2b1a:	96 95       	lsr	r25
    2b1c:	87 95       	ror	r24
    2b1e:	97 f9       	bld	r25, 7
    2b20:	08 95       	ret

00002b22 <__fp_inf>:
    2b22:	97 f9       	bld	r25, 7
    2b24:	9f 67       	ori	r25, 0x7F	; 127
    2b26:	80 e8       	ldi	r24, 0x80	; 128
    2b28:	70 e0       	ldi	r23, 0x00	; 0
    2b2a:	60 e0       	ldi	r22, 0x00	; 0
    2b2c:	08 95       	ret

00002b2e <__fp_nan>:
    2b2e:	9f ef       	ldi	r25, 0xFF	; 255
    2b30:	80 ec       	ldi	r24, 0xC0	; 192
    2b32:	08 95       	ret

00002b34 <__fp_pscA>:
    2b34:	00 24       	eor	r0, r0
    2b36:	0a 94       	dec	r0
    2b38:	16 16       	cp	r1, r22
    2b3a:	17 06       	cpc	r1, r23
    2b3c:	18 06       	cpc	r1, r24
    2b3e:	09 06       	cpc	r0, r25
    2b40:	08 95       	ret

00002b42 <__fp_pscB>:
    2b42:	00 24       	eor	r0, r0
    2b44:	0a 94       	dec	r0
    2b46:	12 16       	cp	r1, r18
    2b48:	13 06       	cpc	r1, r19
    2b4a:	14 06       	cpc	r1, r20
    2b4c:	05 06       	cpc	r0, r21
    2b4e:	08 95       	ret

00002b50 <__fp_round>:
    2b50:	09 2e       	mov	r0, r25
    2b52:	03 94       	inc	r0
    2b54:	00 0c       	add	r0, r0
    2b56:	11 f4       	brne	.+4      	; 0x2b5c <__fp_round+0xc>
    2b58:	88 23       	and	r24, r24
    2b5a:	52 f0       	brmi	.+20     	; 0x2b70 <__fp_round+0x20>
    2b5c:	bb 0f       	add	r27, r27
    2b5e:	40 f4       	brcc	.+16     	; 0x2b70 <__fp_round+0x20>
    2b60:	bf 2b       	or	r27, r31
    2b62:	11 f4       	brne	.+4      	; 0x2b68 <__fp_round+0x18>
    2b64:	60 ff       	sbrs	r22, 0
    2b66:	04 c0       	rjmp	.+8      	; 0x2b70 <__fp_round+0x20>
    2b68:	6f 5f       	subi	r22, 0xFF	; 255
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b70:	08 95       	ret

00002b72 <__fp_split3>:
    2b72:	57 fd       	sbrc	r21, 7
    2b74:	90 58       	subi	r25, 0x80	; 128
    2b76:	44 0f       	add	r20, r20
    2b78:	55 1f       	adc	r21, r21
    2b7a:	59 f0       	breq	.+22     	; 0x2b92 <__fp_splitA+0x10>
    2b7c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b7e:	71 f0       	breq	.+28     	; 0x2b9c <__fp_splitA+0x1a>
    2b80:	47 95       	ror	r20

00002b82 <__fp_splitA>:
    2b82:	88 0f       	add	r24, r24
    2b84:	97 fb       	bst	r25, 7
    2b86:	99 1f       	adc	r25, r25
    2b88:	61 f0       	breq	.+24     	; 0x2ba2 <__fp_splitA+0x20>
    2b8a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b8c:	79 f0       	breq	.+30     	; 0x2bac <__fp_splitA+0x2a>
    2b8e:	87 95       	ror	r24
    2b90:	08 95       	ret
    2b92:	12 16       	cp	r1, r18
    2b94:	13 06       	cpc	r1, r19
    2b96:	14 06       	cpc	r1, r20
    2b98:	55 1f       	adc	r21, r21
    2b9a:	f2 cf       	rjmp	.-28     	; 0x2b80 <__fp_split3+0xe>
    2b9c:	46 95       	lsr	r20
    2b9e:	f1 df       	rcall	.-30     	; 0x2b82 <__fp_splitA>
    2ba0:	08 c0       	rjmp	.+16     	; 0x2bb2 <__fp_splitA+0x30>
    2ba2:	16 16       	cp	r1, r22
    2ba4:	17 06       	cpc	r1, r23
    2ba6:	18 06       	cpc	r1, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	f1 cf       	rjmp	.-30     	; 0x2b8e <__fp_splitA+0xc>
    2bac:	86 95       	lsr	r24
    2bae:	71 05       	cpc	r23, r1
    2bb0:	61 05       	cpc	r22, r1
    2bb2:	08 94       	sec
    2bb4:	08 95       	ret

00002bb6 <__fp_zero>:
    2bb6:	e8 94       	clt

00002bb8 <__fp_szero>:
    2bb8:	bb 27       	eor	r27, r27
    2bba:	66 27       	eor	r22, r22
    2bbc:	77 27       	eor	r23, r23
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	97 f9       	bld	r25, 7
    2bc2:	08 95       	ret

00002bc4 <__mulsf3>:
    2bc4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__mulsf3x>
    2bc8:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__fp_round>
    2bcc:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__fp_pscA>
    2bd0:	38 f0       	brcs	.+14     	; 0x2be0 <__mulsf3+0x1c>
    2bd2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__fp_pscB>
    2bd6:	20 f0       	brcs	.+8      	; 0x2be0 <__mulsf3+0x1c>
    2bd8:	95 23       	and	r25, r21
    2bda:	11 f0       	breq	.+4      	; 0x2be0 <__mulsf3+0x1c>
    2bdc:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>
    2be0:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__fp_nan>
    2be4:	11 24       	eor	r1, r1
    2be6:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__fp_szero>

00002bea <__mulsf3x>:
    2bea:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fp_split3>
    2bee:	70 f3       	brcs	.-36     	; 0x2bcc <__mulsf3+0x8>

00002bf0 <__mulsf3_pse>:
    2bf0:	95 9f       	mul	r25, r21
    2bf2:	c1 f3       	breq	.-16     	; 0x2be4 <__mulsf3+0x20>
    2bf4:	95 0f       	add	r25, r21
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	55 1f       	adc	r21, r21
    2bfa:	62 9f       	mul	r22, r18
    2bfc:	f0 01       	movw	r30, r0
    2bfe:	72 9f       	mul	r23, r18
    2c00:	bb 27       	eor	r27, r27
    2c02:	f0 0d       	add	r31, r0
    2c04:	b1 1d       	adc	r27, r1
    2c06:	63 9f       	mul	r22, r19
    2c08:	aa 27       	eor	r26, r26
    2c0a:	f0 0d       	add	r31, r0
    2c0c:	b1 1d       	adc	r27, r1
    2c0e:	aa 1f       	adc	r26, r26
    2c10:	64 9f       	mul	r22, r20
    2c12:	66 27       	eor	r22, r22
    2c14:	b0 0d       	add	r27, r0
    2c16:	a1 1d       	adc	r26, r1
    2c18:	66 1f       	adc	r22, r22
    2c1a:	82 9f       	mul	r24, r18
    2c1c:	22 27       	eor	r18, r18
    2c1e:	b0 0d       	add	r27, r0
    2c20:	a1 1d       	adc	r26, r1
    2c22:	62 1f       	adc	r22, r18
    2c24:	73 9f       	mul	r23, r19
    2c26:	b0 0d       	add	r27, r0
    2c28:	a1 1d       	adc	r26, r1
    2c2a:	62 1f       	adc	r22, r18
    2c2c:	83 9f       	mul	r24, r19
    2c2e:	a0 0d       	add	r26, r0
    2c30:	61 1d       	adc	r22, r1
    2c32:	22 1f       	adc	r18, r18
    2c34:	74 9f       	mul	r23, r20
    2c36:	33 27       	eor	r19, r19
    2c38:	a0 0d       	add	r26, r0
    2c3a:	61 1d       	adc	r22, r1
    2c3c:	23 1f       	adc	r18, r19
    2c3e:	84 9f       	mul	r24, r20
    2c40:	60 0d       	add	r22, r0
    2c42:	21 1d       	adc	r18, r1
    2c44:	82 2f       	mov	r24, r18
    2c46:	76 2f       	mov	r23, r22
    2c48:	6a 2f       	mov	r22, r26
    2c4a:	11 24       	eor	r1, r1
    2c4c:	9f 57       	subi	r25, 0x7F	; 127
    2c4e:	50 40       	sbci	r21, 0x00	; 0
    2c50:	9a f0       	brmi	.+38     	; 0x2c78 <__mulsf3_pse+0x88>
    2c52:	f1 f0       	breq	.+60     	; 0x2c90 <__mulsf3_pse+0xa0>
    2c54:	88 23       	and	r24, r24
    2c56:	4a f0       	brmi	.+18     	; 0x2c6a <__mulsf3_pse+0x7a>
    2c58:	ee 0f       	add	r30, r30
    2c5a:	ff 1f       	adc	r31, r31
    2c5c:	bb 1f       	adc	r27, r27
    2c5e:	66 1f       	adc	r22, r22
    2c60:	77 1f       	adc	r23, r23
    2c62:	88 1f       	adc	r24, r24
    2c64:	91 50       	subi	r25, 0x01	; 1
    2c66:	50 40       	sbci	r21, 0x00	; 0
    2c68:	a9 f7       	brne	.-22     	; 0x2c54 <__mulsf3_pse+0x64>
    2c6a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c6c:	51 05       	cpc	r21, r1
    2c6e:	80 f0       	brcs	.+32     	; 0x2c90 <__mulsf3_pse+0xa0>
    2c70:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>
    2c74:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__fp_szero>
    2c78:	5f 3f       	cpi	r21, 0xFF	; 255
    2c7a:	e4 f3       	brlt	.-8      	; 0x2c74 <__mulsf3_pse+0x84>
    2c7c:	98 3e       	cpi	r25, 0xE8	; 232
    2c7e:	d4 f3       	brlt	.-12     	; 0x2c74 <__mulsf3_pse+0x84>
    2c80:	86 95       	lsr	r24
    2c82:	77 95       	ror	r23
    2c84:	67 95       	ror	r22
    2c86:	b7 95       	ror	r27
    2c88:	f7 95       	ror	r31
    2c8a:	e7 95       	ror	r30
    2c8c:	9f 5f       	subi	r25, 0xFF	; 255
    2c8e:	c1 f7       	brne	.-16     	; 0x2c80 <__mulsf3_pse+0x90>
    2c90:	fe 2b       	or	r31, r30
    2c92:	88 0f       	add	r24, r24
    2c94:	91 1d       	adc	r25, r1
    2c96:	96 95       	lsr	r25
    2c98:	87 95       	ror	r24
    2c9a:	97 f9       	bld	r25, 7
    2c9c:	08 95       	ret

00002c9e <__tablejump2__>:
    2c9e:	ee 0f       	add	r30, r30
    2ca0:	ff 1f       	adc	r31, r31
    2ca2:	05 90       	lpm	r0, Z+
    2ca4:	f4 91       	lpm	r31, Z
    2ca6:	e0 2d       	mov	r30, r0
    2ca8:	09 94       	ijmp

00002caa <dtostrf>:
    2caa:	ef 92       	push	r14
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	e8 01       	movw	r28, r16
    2cb6:	47 fd       	sbrc	r20, 7
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <dtostrf+0x14>
    2cba:	34 e0       	ldi	r19, 0x04	; 4
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <dtostrf+0x16>
    2cbe:	34 e1       	ldi	r19, 0x14	; 20
    2cc0:	e4 2f       	mov	r30, r20
    2cc2:	44 0f       	add	r20, r20
    2cc4:	ff 0b       	sbc	r31, r31
    2cc6:	f7 ff       	sbrs	r31, 7
    2cc8:	03 c0       	rjmp	.+6      	; 0x2cd0 <dtostrf+0x26>
    2cca:	f1 95       	neg	r31
    2ccc:	e1 95       	neg	r30
    2cce:	f1 09       	sbc	r31, r1
    2cd0:	e3 2e       	mov	r14, r19
    2cd2:	02 2f       	mov	r16, r18
    2cd4:	2e 2f       	mov	r18, r30
    2cd6:	ae 01       	movw	r20, r28
    2cd8:	0e 94 75 16 	call	0x2cea	; 0x2cea <dtoa_prf>
    2cdc:	ce 01       	movw	r24, r28
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	1f 91       	pop	r17
    2ce4:	0f 91       	pop	r16
    2ce6:	ef 90       	pop	r14
    2ce8:	08 95       	ret

00002cea <dtoa_prf>:
    2cea:	4f 92       	push	r4
    2cec:	5f 92       	push	r5
    2cee:	6f 92       	push	r6
    2cf0:	7f 92       	push	r7
    2cf2:	9f 92       	push	r9
    2cf4:	af 92       	push	r10
    2cf6:	bf 92       	push	r11
    2cf8:	cf 92       	push	r12
    2cfa:	df 92       	push	r13
    2cfc:	ef 92       	push	r14
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	29 97       	sbiw	r28, 0x09	; 9
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	6a 01       	movw	r12, r20
    2d1a:	12 2f       	mov	r17, r18
    2d1c:	b0 2e       	mov	r11, r16
    2d1e:	2b e3       	ldi	r18, 0x3B	; 59
    2d20:	20 17       	cp	r18, r16
    2d22:	20 f0       	brcs	.+8      	; 0x2d2c <dtoa_prf+0x42>
    2d24:	ff 24       	eor	r15, r15
    2d26:	f3 94       	inc	r15
    2d28:	f0 0e       	add	r15, r16
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <dtoa_prf+0x46>
    2d2c:	bc e3       	ldi	r27, 0x3C	; 60
    2d2e:	fb 2e       	mov	r15, r27
    2d30:	0f 2d       	mov	r16, r15
    2d32:	27 e0       	ldi	r18, 0x07	; 7
    2d34:	ae 01       	movw	r20, r28
    2d36:	4f 5f       	subi	r20, 0xFF	; 255
    2d38:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3a:	0e 94 03 18 	call	0x3006	; 0x3006 <__ftoa_engine>
    2d3e:	ac 01       	movw	r20, r24
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	98 2f       	mov	r25, r24
    2d44:	99 70       	andi	r25, 0x09	; 9
    2d46:	91 30       	cpi	r25, 0x01	; 1
    2d48:	31 f0       	breq	.+12     	; 0x2d56 <dtoa_prf+0x6c>
    2d4a:	e1 fc       	sbrc	r14, 1
    2d4c:	06 c0       	rjmp	.+12     	; 0x2d5a <dtoa_prf+0x70>
    2d4e:	e0 fe       	sbrs	r14, 0
    2d50:	06 c0       	rjmp	.+12     	; 0x2d5e <dtoa_prf+0x74>
    2d52:	90 e2       	ldi	r25, 0x20	; 32
    2d54:	05 c0       	rjmp	.+10     	; 0x2d60 <dtoa_prf+0x76>
    2d56:	9d e2       	ldi	r25, 0x2D	; 45
    2d58:	03 c0       	rjmp	.+6      	; 0x2d60 <dtoa_prf+0x76>
    2d5a:	9b e2       	ldi	r25, 0x2B	; 43
    2d5c:	01 c0       	rjmp	.+2      	; 0x2d60 <dtoa_prf+0x76>
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	ee 2d       	mov	r30, r14
    2d62:	e0 71       	andi	r30, 0x10	; 16
    2d64:	83 ff       	sbrs	r24, 3
    2d66:	3c c0       	rjmp	.+120    	; 0x2de0 <dtoa_prf+0xf6>
    2d68:	91 11       	cpse	r25, r1
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <dtoa_prf+0x86>
    2d6c:	83 e0       	ldi	r24, 0x03	; 3
    2d6e:	01 c0       	rjmp	.+2      	; 0x2d72 <dtoa_prf+0x88>
    2d70:	84 e0       	ldi	r24, 0x04	; 4
    2d72:	81 17       	cp	r24, r17
    2d74:	18 f4       	brcc	.+6      	; 0x2d7c <dtoa_prf+0x92>
    2d76:	21 2f       	mov	r18, r17
    2d78:	28 1b       	sub	r18, r24
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <dtoa_prf+0x94>
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	e1 11       	cpse	r30, r1
    2d80:	0b c0       	rjmp	.+22     	; 0x2d98 <dtoa_prf+0xae>
    2d82:	f6 01       	movw	r30, r12
    2d84:	82 2f       	mov	r24, r18
    2d86:	30 e2       	ldi	r19, 0x20	; 32
    2d88:	88 23       	and	r24, r24
    2d8a:	19 f0       	breq	.+6      	; 0x2d92 <dtoa_prf+0xa8>
    2d8c:	31 93       	st	Z+, r19
    2d8e:	81 50       	subi	r24, 0x01	; 1
    2d90:	fb cf       	rjmp	.-10     	; 0x2d88 <dtoa_prf+0x9e>
    2d92:	c2 0e       	add	r12, r18
    2d94:	d1 1c       	adc	r13, r1
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	99 23       	and	r25, r25
    2d9a:	29 f0       	breq	.+10     	; 0x2da6 <dtoa_prf+0xbc>
    2d9c:	d6 01       	movw	r26, r12
    2d9e:	9c 93       	st	X, r25
    2da0:	f6 01       	movw	r30, r12
    2da2:	31 96       	adiw	r30, 0x01	; 1
    2da4:	6f 01       	movw	r12, r30
    2da6:	c6 01       	movw	r24, r12
    2da8:	03 96       	adiw	r24, 0x03	; 3
    2daa:	e2 fe       	sbrs	r14, 2
    2dac:	0a c0       	rjmp	.+20     	; 0x2dc2 <dtoa_prf+0xd8>
    2dae:	3e e4       	ldi	r19, 0x4E	; 78
    2db0:	d6 01       	movw	r26, r12
    2db2:	3c 93       	st	X, r19
    2db4:	41 e4       	ldi	r20, 0x41	; 65
    2db6:	11 96       	adiw	r26, 0x01	; 1
    2db8:	4c 93       	st	X, r20
    2dba:	11 97       	sbiw	r26, 0x01	; 1
    2dbc:	12 96       	adiw	r26, 0x02	; 2
    2dbe:	3c 93       	st	X, r19
    2dc0:	06 c0       	rjmp	.+12     	; 0x2dce <dtoa_prf+0xe4>
    2dc2:	3e e6       	ldi	r19, 0x6E	; 110
    2dc4:	f6 01       	movw	r30, r12
    2dc6:	30 83       	st	Z, r19
    2dc8:	41 e6       	ldi	r20, 0x61	; 97
    2dca:	41 83       	std	Z+1, r20	; 0x01
    2dcc:	32 83       	std	Z+2, r19	; 0x02
    2dce:	fc 01       	movw	r30, r24
    2dd0:	32 2f       	mov	r19, r18
    2dd2:	40 e2       	ldi	r20, 0x20	; 32
    2dd4:	33 23       	and	r19, r19
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <dtoa_prf+0xf0>
    2dd8:	42 c0       	rjmp	.+132    	; 0x2e5e <dtoa_prf+0x174>
    2dda:	41 93       	st	Z+, r20
    2ddc:	31 50       	subi	r19, 0x01	; 1
    2dde:	fa cf       	rjmp	.-12     	; 0x2dd4 <dtoa_prf+0xea>
    2de0:	82 ff       	sbrs	r24, 2
    2de2:	44 c0       	rjmp	.+136    	; 0x2e6c <dtoa_prf+0x182>
    2de4:	91 11       	cpse	r25, r1
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <dtoa_prf+0x102>
    2de8:	83 e0       	ldi	r24, 0x03	; 3
    2dea:	01 c0       	rjmp	.+2      	; 0x2dee <dtoa_prf+0x104>
    2dec:	84 e0       	ldi	r24, 0x04	; 4
    2dee:	81 17       	cp	r24, r17
    2df0:	18 f4       	brcc	.+6      	; 0x2df8 <dtoa_prf+0x10e>
    2df2:	21 2f       	mov	r18, r17
    2df4:	28 1b       	sub	r18, r24
    2df6:	01 c0       	rjmp	.+2      	; 0x2dfa <dtoa_prf+0x110>
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	e1 11       	cpse	r30, r1
    2dfc:	0b c0       	rjmp	.+22     	; 0x2e14 <dtoa_prf+0x12a>
    2dfe:	f6 01       	movw	r30, r12
    2e00:	82 2f       	mov	r24, r18
    2e02:	30 e2       	ldi	r19, 0x20	; 32
    2e04:	88 23       	and	r24, r24
    2e06:	19 f0       	breq	.+6      	; 0x2e0e <dtoa_prf+0x124>
    2e08:	31 93       	st	Z+, r19
    2e0a:	81 50       	subi	r24, 0x01	; 1
    2e0c:	fb cf       	rjmp	.-10     	; 0x2e04 <dtoa_prf+0x11a>
    2e0e:	c2 0e       	add	r12, r18
    2e10:	d1 1c       	adc	r13, r1
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	99 23       	and	r25, r25
    2e16:	29 f0       	breq	.+10     	; 0x2e22 <dtoa_prf+0x138>
    2e18:	d6 01       	movw	r26, r12
    2e1a:	9c 93       	st	X, r25
    2e1c:	f6 01       	movw	r30, r12
    2e1e:	31 96       	adiw	r30, 0x01	; 1
    2e20:	6f 01       	movw	r12, r30
    2e22:	c6 01       	movw	r24, r12
    2e24:	03 96       	adiw	r24, 0x03	; 3
    2e26:	e2 fe       	sbrs	r14, 2
    2e28:	0b c0       	rjmp	.+22     	; 0x2e40 <dtoa_prf+0x156>
    2e2a:	39 e4       	ldi	r19, 0x49	; 73
    2e2c:	d6 01       	movw	r26, r12
    2e2e:	3c 93       	st	X, r19
    2e30:	3e e4       	ldi	r19, 0x4E	; 78
    2e32:	11 96       	adiw	r26, 0x01	; 1
    2e34:	3c 93       	st	X, r19
    2e36:	11 97       	sbiw	r26, 0x01	; 1
    2e38:	36 e4       	ldi	r19, 0x46	; 70
    2e3a:	12 96       	adiw	r26, 0x02	; 2
    2e3c:	3c 93       	st	X, r19
    2e3e:	07 c0       	rjmp	.+14     	; 0x2e4e <dtoa_prf+0x164>
    2e40:	39 e6       	ldi	r19, 0x69	; 105
    2e42:	f6 01       	movw	r30, r12
    2e44:	30 83       	st	Z, r19
    2e46:	3e e6       	ldi	r19, 0x6E	; 110
    2e48:	31 83       	std	Z+1, r19	; 0x01
    2e4a:	36 e6       	ldi	r19, 0x66	; 102
    2e4c:	32 83       	std	Z+2, r19	; 0x02
    2e4e:	fc 01       	movw	r30, r24
    2e50:	32 2f       	mov	r19, r18
    2e52:	40 e2       	ldi	r20, 0x20	; 32
    2e54:	33 23       	and	r19, r19
    2e56:	19 f0       	breq	.+6      	; 0x2e5e <dtoa_prf+0x174>
    2e58:	41 93       	st	Z+, r20
    2e5a:	31 50       	subi	r19, 0x01	; 1
    2e5c:	fb cf       	rjmp	.-10     	; 0x2e54 <dtoa_prf+0x16a>
    2e5e:	fc 01       	movw	r30, r24
    2e60:	e2 0f       	add	r30, r18
    2e62:	f1 1d       	adc	r31, r1
    2e64:	10 82       	st	Z, r1
    2e66:	8e ef       	ldi	r24, 0xFE	; 254
    2e68:	9f ef       	ldi	r25, 0xFF	; 255
    2e6a:	b7 c0       	rjmp	.+366    	; 0x2fda <dtoa_prf+0x2f0>
    2e6c:	f1 e0       	ldi	r31, 0x01	; 1
    2e6e:	91 11       	cpse	r25, r1
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <dtoa_prf+0x18a>
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	6f 2f       	mov	r22, r31
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	14 16       	cp	r1, r20
    2e7a:	15 06       	cpc	r1, r21
    2e7c:	24 f4       	brge	.+8      	; 0x2e86 <dtoa_prf+0x19c>
    2e7e:	9a 01       	movw	r18, r20
    2e80:	2f 5f       	subi	r18, 0xFF	; 255
    2e82:	3f 4f       	sbci	r19, 0xFF	; 255
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <dtoa_prf+0x1a0>
    2e86:	21 e0       	ldi	r18, 0x01	; 1
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	26 0f       	add	r18, r22
    2e8c:	37 1f       	adc	r19, r23
    2e8e:	bb 20       	and	r11, r11
    2e90:	29 f0       	breq	.+10     	; 0x2e9c <dtoa_prf+0x1b2>
    2e92:	6b 2d       	mov	r22, r11
    2e94:	70 e0       	ldi	r23, 0x00	; 0
    2e96:	6f 5f       	subi	r22, 0xFF	; 255
    2e98:	7f 4f       	sbci	r23, 0xFF	; 255
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <dtoa_prf+0x1b6>
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	26 0f       	add	r18, r22
    2ea2:	37 1f       	adc	r19, r23
    2ea4:	61 2f       	mov	r22, r17
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	26 17       	cp	r18, r22
    2eaa:	37 07       	cpc	r19, r23
    2eac:	1c f4       	brge	.+6      	; 0x2eb4 <dtoa_prf+0x1ca>
    2eae:	12 1b       	sub	r17, r18
    2eb0:	21 2f       	mov	r18, r17
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <dtoa_prf+0x1cc>
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3e 2d       	mov	r19, r14
    2eb8:	38 71       	andi	r19, 0x18	; 24
    2eba:	59 f4       	brne	.+22     	; 0x2ed2 <dtoa_prf+0x1e8>
    2ebc:	d6 01       	movw	r26, r12
    2ebe:	32 2f       	mov	r19, r18
    2ec0:	60 e2       	ldi	r22, 0x20	; 32
    2ec2:	33 23       	and	r19, r19
    2ec4:	19 f0       	breq	.+6      	; 0x2ecc <dtoa_prf+0x1e2>
    2ec6:	6d 93       	st	X+, r22
    2ec8:	31 50       	subi	r19, 0x01	; 1
    2eca:	fb cf       	rjmp	.-10     	; 0x2ec2 <dtoa_prf+0x1d8>
    2ecc:	c2 0e       	add	r12, r18
    2ece:	d1 1c       	adc	r13, r1
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	ff 23       	and	r31, r31
    2ed4:	31 f0       	breq	.+12     	; 0x2ee2 <dtoa_prf+0x1f8>
    2ed6:	d6 01       	movw	r26, r12
    2ed8:	9c 93       	st	X, r25
    2eda:	b6 01       	movw	r22, r12
    2edc:	6f 5f       	subi	r22, 0xFF	; 255
    2ede:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee0:	6b 01       	movw	r12, r22
    2ee2:	e1 11       	cpse	r30, r1
    2ee4:	0b c0       	rjmp	.+22     	; 0x2efc <dtoa_prf+0x212>
    2ee6:	f6 01       	movw	r30, r12
    2ee8:	92 2f       	mov	r25, r18
    2eea:	30 e3       	ldi	r19, 0x30	; 48
    2eec:	99 23       	and	r25, r25
    2eee:	19 f0       	breq	.+6      	; 0x2ef6 <dtoa_prf+0x20c>
    2ef0:	31 93       	st	Z+, r19
    2ef2:	91 50       	subi	r25, 0x01	; 1
    2ef4:	fb cf       	rjmp	.-10     	; 0x2eec <dtoa_prf+0x202>
    2ef6:	c2 0e       	add	r12, r18
    2ef8:	d1 1c       	adc	r13, r1
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	9f 2d       	mov	r25, r15
    2efe:	94 0f       	add	r25, r20
    2f00:	3a 81       	ldd	r19, Y+2	; 0x02
    2f02:	78 2f       	mov	r23, r24
    2f04:	70 71       	andi	r23, 0x10	; 16
    2f06:	a7 2e       	mov	r10, r23
    2f08:	84 ff       	sbrs	r24, 4
    2f0a:	03 c0       	rjmp	.+6      	; 0x2f12 <dtoa_prf+0x228>
    2f0c:	31 33       	cpi	r19, 0x31	; 49
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <dtoa_prf+0x228>
    2f10:	91 50       	subi	r25, 0x01	; 1
    2f12:	19 16       	cp	r1, r25
    2f14:	24 f4       	brge	.+8      	; 0x2f1e <dtoa_prf+0x234>
    2f16:	99 30       	cpi	r25, 0x09	; 9
    2f18:	18 f0       	brcs	.+6      	; 0x2f20 <dtoa_prf+0x236>
    2f1a:	98 e0       	ldi	r25, 0x08	; 8
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <dtoa_prf+0x236>
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	e4 2f       	mov	r30, r20
    2f22:	85 2f       	mov	r24, r21
    2f24:	57 ff       	sbrs	r21, 7
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <dtoa_prf+0x242>
    2f28:	e0 e0       	ldi	r30, 0x00	; 0
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	6e 2f       	mov	r22, r30
    2f2e:	78 2f       	mov	r23, r24
    2f30:	e0 e0       	ldi	r30, 0x00	; 0
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	ae e2       	ldi	r26, 0x2E	; 46
    2f36:	9a 2e       	mov	r9, r26
    2f38:	3a 01       	movw	r6, r20
    2f3a:	69 1a       	sub	r6, r25
    2f3c:	71 08       	sbc	r7, r1
    2f3e:	2a 01       	movw	r4, r20
    2f40:	46 1a       	sub	r4, r22
    2f42:	57 0a       	sbc	r5, r23
    2f44:	0b 2d       	mov	r16, r11
    2f46:	10 e0       	ldi	r17, 0x00	; 0
    2f48:	11 95       	neg	r17
    2f4a:	01 95       	neg	r16
    2f4c:	11 09       	sbc	r17, r1
    2f4e:	6f 3f       	cpi	r22, 0xFF	; 255
    2f50:	8f ef       	ldi	r24, 0xFF	; 255
    2f52:	78 07       	cpc	r23, r24
    2f54:	29 f4       	brne	.+10     	; 0x2f60 <dtoa_prf+0x276>
    2f56:	d6 01       	movw	r26, r12
    2f58:	9c 92       	st	X, r9
    2f5a:	c6 01       	movw	r24, r12
    2f5c:	01 96       	adiw	r24, 0x01	; 1
    2f5e:	6c 01       	movw	r12, r24
    2f60:	46 17       	cp	r20, r22
    2f62:	57 07       	cpc	r21, r23
    2f64:	84 f0       	brlt	.+32     	; 0x2f86 <dtoa_prf+0x29c>
    2f66:	66 16       	cp	r6, r22
    2f68:	77 06       	cpc	r7, r23
    2f6a:	6c f4       	brge	.+26     	; 0x2f86 <dtoa_prf+0x29c>
    2f6c:	7f 01       	movw	r14, r30
    2f6e:	e4 0c       	add	r14, r4
    2f70:	f5 1c       	adc	r15, r5
    2f72:	a1 e0       	ldi	r26, 0x01	; 1
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	ac 0f       	add	r26, r28
    2f78:	bd 1f       	adc	r27, r29
    2f7a:	ea 0e       	add	r14, r26
    2f7c:	fb 1e       	adc	r15, r27
    2f7e:	d7 01       	movw	r26, r14
    2f80:	11 96       	adiw	r26, 0x01	; 1
    2f82:	bc 90       	ld	r11, X
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <dtoa_prf+0x2a0>
    2f86:	90 e3       	ldi	r25, 0x30	; 48
    2f88:	b9 2e       	mov	r11, r25
    2f8a:	61 50       	subi	r22, 0x01	; 1
    2f8c:	71 09       	sbc	r23, r1
    2f8e:	31 96       	adiw	r30, 0x01	; 1
    2f90:	c6 01       	movw	r24, r12
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	7c 01       	movw	r14, r24
    2f96:	60 17       	cp	r22, r16
    2f98:	71 07       	cpc	r23, r17
    2f9a:	24 f0       	brlt	.+8      	; 0x2fa4 <dtoa_prf+0x2ba>
    2f9c:	d6 01       	movw	r26, r12
    2f9e:	bc 92       	st	X, r11
    2fa0:	6c 01       	movw	r12, r24
    2fa2:	d5 cf       	rjmp	.-86     	; 0x2f4e <dtoa_prf+0x264>
    2fa4:	64 17       	cp	r22, r20
    2fa6:	75 07       	cpc	r23, r21
    2fa8:	41 f4       	brne	.+16     	; 0x2fba <dtoa_prf+0x2d0>
    2faa:	36 33       	cpi	r19, 0x36	; 54
    2fac:	20 f4       	brcc	.+8      	; 0x2fb6 <dtoa_prf+0x2cc>
    2fae:	35 33       	cpi	r19, 0x35	; 53
    2fb0:	21 f4       	brne	.+8      	; 0x2fba <dtoa_prf+0x2d0>
    2fb2:	a1 10       	cpse	r10, r1
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <dtoa_prf+0x2d0>
    2fb6:	81 e3       	ldi	r24, 0x31	; 49
    2fb8:	b8 2e       	mov	r11, r24
    2fba:	f6 01       	movw	r30, r12
    2fbc:	b0 82       	st	Z, r11
    2fbe:	f7 01       	movw	r30, r14
    2fc0:	82 2f       	mov	r24, r18
    2fc2:	90 e2       	ldi	r25, 0x20	; 32
    2fc4:	88 23       	and	r24, r24
    2fc6:	19 f0       	breq	.+6      	; 0x2fce <dtoa_prf+0x2e4>
    2fc8:	91 93       	st	Z+, r25
    2fca:	81 50       	subi	r24, 0x01	; 1
    2fcc:	fb cf       	rjmp	.-10     	; 0x2fc4 <dtoa_prf+0x2da>
    2fce:	f7 01       	movw	r30, r14
    2fd0:	e2 0f       	add	r30, r18
    2fd2:	f1 1d       	adc	r31, r1
    2fd4:	10 82       	st	Z, r1
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	29 96       	adiw	r28, 0x09	; 9
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	ff 90       	pop	r15
    2ff0:	ef 90       	pop	r14
    2ff2:	df 90       	pop	r13
    2ff4:	cf 90       	pop	r12
    2ff6:	bf 90       	pop	r11
    2ff8:	af 90       	pop	r10
    2ffa:	9f 90       	pop	r9
    2ffc:	7f 90       	pop	r7
    2ffe:	6f 90       	pop	r6
    3000:	5f 90       	pop	r5
    3002:	4f 90       	pop	r4
    3004:	08 95       	ret

00003006 <__ftoa_engine>:
    3006:	28 30       	cpi	r18, 0x08	; 8
    3008:	08 f0       	brcs	.+2      	; 0x300c <__ftoa_engine+0x6>
    300a:	27 e0       	ldi	r18, 0x07	; 7
    300c:	33 27       	eor	r19, r19
    300e:	da 01       	movw	r26, r20
    3010:	99 0f       	add	r25, r25
    3012:	31 1d       	adc	r19, r1
    3014:	87 fd       	sbrc	r24, 7
    3016:	91 60       	ori	r25, 0x01	; 1
    3018:	00 96       	adiw	r24, 0x00	; 0
    301a:	61 05       	cpc	r22, r1
    301c:	71 05       	cpc	r23, r1
    301e:	39 f4       	brne	.+14     	; 0x302e <__ftoa_engine+0x28>
    3020:	32 60       	ori	r19, 0x02	; 2
    3022:	2e 5f       	subi	r18, 0xFE	; 254
    3024:	3d 93       	st	X+, r19
    3026:	30 e3       	ldi	r19, 0x30	; 48
    3028:	2a 95       	dec	r18
    302a:	e1 f7       	brne	.-8      	; 0x3024 <__ftoa_engine+0x1e>
    302c:	08 95       	ret
    302e:	9f 3f       	cpi	r25, 0xFF	; 255
    3030:	30 f0       	brcs	.+12     	; 0x303e <__ftoa_engine+0x38>
    3032:	80 38       	cpi	r24, 0x80	; 128
    3034:	71 05       	cpc	r23, r1
    3036:	61 05       	cpc	r22, r1
    3038:	09 f0       	breq	.+2      	; 0x303c <__ftoa_engine+0x36>
    303a:	3c 5f       	subi	r19, 0xFC	; 252
    303c:	3c 5f       	subi	r19, 0xFC	; 252
    303e:	3d 93       	st	X+, r19
    3040:	91 30       	cpi	r25, 0x01	; 1
    3042:	08 f0       	brcs	.+2      	; 0x3046 <__ftoa_engine+0x40>
    3044:	80 68       	ori	r24, 0x80	; 128
    3046:	91 1d       	adc	r25, r1
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	1f 93       	push	r17
    304e:	0f 93       	push	r16
    3050:	ff 92       	push	r15
    3052:	ef 92       	push	r14
    3054:	19 2f       	mov	r17, r25
    3056:	98 7f       	andi	r25, 0xF8	; 248
    3058:	96 95       	lsr	r25
    305a:	e9 2f       	mov	r30, r25
    305c:	96 95       	lsr	r25
    305e:	96 95       	lsr	r25
    3060:	e9 0f       	add	r30, r25
    3062:	ff 27       	eor	r31, r31
    3064:	e6 5d       	subi	r30, 0xD6	; 214
    3066:	fe 4f       	sbci	r31, 0xFE	; 254
    3068:	99 27       	eor	r25, r25
    306a:	33 27       	eor	r19, r19
    306c:	ee 24       	eor	r14, r14
    306e:	ff 24       	eor	r15, r15
    3070:	a7 01       	movw	r20, r14
    3072:	e7 01       	movw	r28, r14
    3074:	05 90       	lpm	r0, Z+
    3076:	08 94       	sec
    3078:	07 94       	ror	r0
    307a:	28 f4       	brcc	.+10     	; 0x3086 <__ftoa_engine+0x80>
    307c:	36 0f       	add	r19, r22
    307e:	e7 1e       	adc	r14, r23
    3080:	f8 1e       	adc	r15, r24
    3082:	49 1f       	adc	r20, r25
    3084:	51 1d       	adc	r21, r1
    3086:	66 0f       	add	r22, r22
    3088:	77 1f       	adc	r23, r23
    308a:	88 1f       	adc	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	06 94       	lsr	r0
    3090:	a1 f7       	brne	.-24     	; 0x307a <__ftoa_engine+0x74>
    3092:	05 90       	lpm	r0, Z+
    3094:	07 94       	ror	r0
    3096:	28 f4       	brcc	.+10     	; 0x30a2 <__ftoa_engine+0x9c>
    3098:	e7 0e       	add	r14, r23
    309a:	f8 1e       	adc	r15, r24
    309c:	49 1f       	adc	r20, r25
    309e:	56 1f       	adc	r21, r22
    30a0:	c1 1d       	adc	r28, r1
    30a2:	77 0f       	add	r23, r23
    30a4:	88 1f       	adc	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	66 1f       	adc	r22, r22
    30aa:	06 94       	lsr	r0
    30ac:	a1 f7       	brne	.-24     	; 0x3096 <__ftoa_engine+0x90>
    30ae:	05 90       	lpm	r0, Z+
    30b0:	07 94       	ror	r0
    30b2:	28 f4       	brcc	.+10     	; 0x30be <__ftoa_engine+0xb8>
    30b4:	f8 0e       	add	r15, r24
    30b6:	49 1f       	adc	r20, r25
    30b8:	56 1f       	adc	r21, r22
    30ba:	c7 1f       	adc	r28, r23
    30bc:	d1 1d       	adc	r29, r1
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	66 1f       	adc	r22, r22
    30c4:	77 1f       	adc	r23, r23
    30c6:	06 94       	lsr	r0
    30c8:	a1 f7       	brne	.-24     	; 0x30b2 <__ftoa_engine+0xac>
    30ca:	05 90       	lpm	r0, Z+
    30cc:	07 94       	ror	r0
    30ce:	20 f4       	brcc	.+8      	; 0x30d8 <__ftoa_engine+0xd2>
    30d0:	49 0f       	add	r20, r25
    30d2:	56 1f       	adc	r21, r22
    30d4:	c7 1f       	adc	r28, r23
    30d6:	d8 1f       	adc	r29, r24
    30d8:	99 0f       	add	r25, r25
    30da:	66 1f       	adc	r22, r22
    30dc:	77 1f       	adc	r23, r23
    30de:	88 1f       	adc	r24, r24
    30e0:	06 94       	lsr	r0
    30e2:	a9 f7       	brne	.-22     	; 0x30ce <__ftoa_engine+0xc8>
    30e4:	84 91       	lpm	r24, Z
    30e6:	10 95       	com	r17
    30e8:	17 70       	andi	r17, 0x07	; 7
    30ea:	41 f0       	breq	.+16     	; 0x30fc <__ftoa_engine+0xf6>
    30ec:	d6 95       	lsr	r29
    30ee:	c7 95       	ror	r28
    30f0:	57 95       	ror	r21
    30f2:	47 95       	ror	r20
    30f4:	f7 94       	ror	r15
    30f6:	e7 94       	ror	r14
    30f8:	1a 95       	dec	r17
    30fa:	c1 f7       	brne	.-16     	; 0x30ec <__ftoa_engine+0xe6>
    30fc:	e0 ed       	ldi	r30, 0xD0	; 208
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	68 94       	set
    3102:	15 90       	lpm	r1, Z+
    3104:	15 91       	lpm	r17, Z+
    3106:	35 91       	lpm	r19, Z+
    3108:	65 91       	lpm	r22, Z+
    310a:	95 91       	lpm	r25, Z+
    310c:	05 90       	lpm	r0, Z+
    310e:	7f e2       	ldi	r23, 0x2F	; 47
    3110:	73 95       	inc	r23
    3112:	e1 18       	sub	r14, r1
    3114:	f1 0a       	sbc	r15, r17
    3116:	43 0b       	sbc	r20, r19
    3118:	56 0b       	sbc	r21, r22
    311a:	c9 0b       	sbc	r28, r25
    311c:	d0 09       	sbc	r29, r0
    311e:	c0 f7       	brcc	.-16     	; 0x3110 <__ftoa_engine+0x10a>
    3120:	e1 0c       	add	r14, r1
    3122:	f1 1e       	adc	r15, r17
    3124:	43 1f       	adc	r20, r19
    3126:	56 1f       	adc	r21, r22
    3128:	c9 1f       	adc	r28, r25
    312a:	d0 1d       	adc	r29, r0
    312c:	7e f4       	brtc	.+30     	; 0x314c <__ftoa_engine+0x146>
    312e:	70 33       	cpi	r23, 0x30	; 48
    3130:	11 f4       	brne	.+4      	; 0x3136 <__ftoa_engine+0x130>
    3132:	8a 95       	dec	r24
    3134:	e6 cf       	rjmp	.-52     	; 0x3102 <__ftoa_engine+0xfc>
    3136:	e8 94       	clt
    3138:	01 50       	subi	r16, 0x01	; 1
    313a:	30 f0       	brcs	.+12     	; 0x3148 <__ftoa_engine+0x142>
    313c:	08 0f       	add	r16, r24
    313e:	0a f4       	brpl	.+2      	; 0x3142 <__ftoa_engine+0x13c>
    3140:	00 27       	eor	r16, r16
    3142:	02 17       	cp	r16, r18
    3144:	08 f4       	brcc	.+2      	; 0x3148 <__ftoa_engine+0x142>
    3146:	20 2f       	mov	r18, r16
    3148:	23 95       	inc	r18
    314a:	02 2f       	mov	r16, r18
    314c:	7a 33       	cpi	r23, 0x3A	; 58
    314e:	28 f0       	brcs	.+10     	; 0x315a <__ftoa_engine+0x154>
    3150:	79 e3       	ldi	r23, 0x39	; 57
    3152:	7d 93       	st	X+, r23
    3154:	2a 95       	dec	r18
    3156:	e9 f7       	brne	.-6      	; 0x3152 <__ftoa_engine+0x14c>
    3158:	10 c0       	rjmp	.+32     	; 0x317a <__ftoa_engine+0x174>
    315a:	7d 93       	st	X+, r23
    315c:	2a 95       	dec	r18
    315e:	89 f6       	brne	.-94     	; 0x3102 <__ftoa_engine+0xfc>
    3160:	06 94       	lsr	r0
    3162:	97 95       	ror	r25
    3164:	67 95       	ror	r22
    3166:	37 95       	ror	r19
    3168:	17 95       	ror	r17
    316a:	17 94       	ror	r1
    316c:	e1 18       	sub	r14, r1
    316e:	f1 0a       	sbc	r15, r17
    3170:	43 0b       	sbc	r20, r19
    3172:	56 0b       	sbc	r21, r22
    3174:	c9 0b       	sbc	r28, r25
    3176:	d0 09       	sbc	r29, r0
    3178:	98 f0       	brcs	.+38     	; 0x31a0 <__ftoa_engine+0x19a>
    317a:	23 95       	inc	r18
    317c:	7e 91       	ld	r23, -X
    317e:	73 95       	inc	r23
    3180:	7a 33       	cpi	r23, 0x3A	; 58
    3182:	08 f0       	brcs	.+2      	; 0x3186 <__ftoa_engine+0x180>
    3184:	70 e3       	ldi	r23, 0x30	; 48
    3186:	7c 93       	st	X, r23
    3188:	20 13       	cpse	r18, r16
    318a:	b8 f7       	brcc	.-18     	; 0x317a <__ftoa_engine+0x174>
    318c:	7e 91       	ld	r23, -X
    318e:	70 61       	ori	r23, 0x10	; 16
    3190:	7d 93       	st	X+, r23
    3192:	30 f0       	brcs	.+12     	; 0x31a0 <__ftoa_engine+0x19a>
    3194:	83 95       	inc	r24
    3196:	71 e3       	ldi	r23, 0x31	; 49
    3198:	7d 93       	st	X+, r23
    319a:	70 e3       	ldi	r23, 0x30	; 48
    319c:	2a 95       	dec	r18
    319e:	e1 f7       	brne	.-8      	; 0x3198 <__ftoa_engine+0x192>
    31a0:	11 24       	eor	r1, r1
    31a2:	ef 90       	pop	r14
    31a4:	ff 90       	pop	r15
    31a6:	0f 91       	pop	r16
    31a8:	1f 91       	pop	r17
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	99 27       	eor	r25, r25
    31b0:	87 fd       	sbrc	r24, 7
    31b2:	90 95       	com	r25
    31b4:	08 95       	ret

000031b6 <_exit>:
    31b6:	f8 94       	cli

000031b8 <__stop_program>:
    31b8:	ff cf       	rjmp	.-2      	; 0x31b8 <__stop_program>
