
mpu_conntest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00002ffa  0000308e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ff  0080010e  0080010e  0000309c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007d0  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fa27  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002587  00000000  00000000  00013303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e07  00000000  00000000  0001588a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001920  00000000  00000000  00019694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003959  00000000  00000000  0001afb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aa27  00000000  00000000  0001e90d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  00029334  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__ctors_end>
       4:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
       8:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
       c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      10:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      14:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      18:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      1c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      20:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      24:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      28:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      2c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      30:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      34:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      38:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      3c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      40:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      44:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      48:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__vector_18>
      4c:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__vector_19>
      50:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      54:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      58:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      5c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      60:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      64:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      68:	af 15       	cp	r26, r15
      6a:	b7 15       	cp	r27, r7
      6c:	d1 15       	cp	r29, r1
      6e:	c1 15       	cp	r28, r1
      70:	d1 15       	cp	r29, r1
      72:	d1 15       	cp	r29, r1
      74:	d1 15       	cp	r29, r1
      76:	d1 15       	cp	r29, r1
      78:	d1 15       	cp	r29, r1
      7a:	d1 15       	cp	r29, r1
      7c:	d1 15       	cp	r29, r1
      7e:	d1 15       	cp	r29, r1
      80:	d1 15       	cp	r29, r1
      82:	d1 15       	cp	r29, r1
      84:	d1 15       	cp	r29, r1
      86:	d1 15       	cp	r29, r1
      88:	d1 15       	cp	r29, r1
      8a:	d1 15       	cp	r29, r1
      8c:	d1 15       	cp	r29, r1
      8e:	d1 15       	cp	r29, r1
      90:	d1 15       	cp	r29, r1
      92:	d1 15       	cp	r29, r1
      94:	d1 15       	cp	r29, r1
      96:	d1 15       	cp	r29, r1
      98:	d1 15       	cp	r29, r1
      9a:	d1 15       	cp	r29, r1
      9c:	d1 15       	cp	r29, r1
      9e:	d1 15       	cp	r29, r1
      a0:	d1 15       	cp	r29, r1
      a2:	d1 15       	cp	r29, r1
      a4:	a9 15       	cp	r26, r9
      a6:	d1 15       	cp	r29, r1
      a8:	d1 15       	cp	r29, r1
      aa:	d1 15       	cp	r29, r1
      ac:	d1 15       	cp	r29, r1
      ae:	d1 15       	cp	r29, r1
      b0:	d1 15       	cp	r29, r1
      b2:	d1 15       	cp	r29, r1
      b4:	d1 15       	cp	r29, r1
      b6:	9d 15       	cp	r25, r13
      b8:	d1 15       	cp	r29, r1
      ba:	d1 15       	cp	r29, r1
      bc:	d1 15       	cp	r29, r1
      be:	d1 15       	cp	r29, r1
      c0:	d1 15       	cp	r29, r1
      c2:	d1 15       	cp	r29, r1
      c4:	d1 15       	cp	r29, r1
      c6:	d1 15       	cp	r29, r1
      c8:	d1 15       	cp	r29, r1
      ca:	d1 15       	cp	r29, r1
      cc:	c7 15       	cp	r28, r7
      ce:	cc 15       	cp	r28, r12

000000d0 <__trampolines_end>:
      d0:	ff e0       	ldi	r31, 0x0F	; 15
      d2:	ff d1       	rcall	.+1022   	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
      d4:	af ff       	.word	0xffaf	; ????
      d6:	32 ff       	sbrs	r19, 2
      d8:	d0 ff       	sbrs	r29, 0
      da:	fe ff       	Address 0x000000da is out of bounds.
.word	0xffff	; ????

000000db <u8g_dev_ssd13xx_sleep_on>:
      db:	ff e0 ff d1 ae ff d0 ff fe                          .........

000000e4 <u8g_dev_ssd1306_128x64_data_start>:
      e4:	ff e0 ff d1 10 00 ff fe                             ........

000000ec <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      ec:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      fc:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     10c:	a6 af ff d0 ff fe                                   ......

00000112 <u8g_font_fub14>:
     112:	00 1f 1a fe fb 0e 03 74 07 5f 20 ff fc 15 fb 0e     .......t._ .....
     122:	fc 00 00 00 06 00 00 03 0e 0e 08 03 00 e0 e0 e0     ................
     132:	e0 e0 e0 e0 e0 e0 e0 00 00 e0 e0 08 06 06 0a 01     ................
     142:	08 e7 67 67 67 67 67 0c 0e 1c 0e 01 00 06 60 06     ..ggggg.......`.
     152:	60 0c 60 3f f0 3f f0 18 c0 19 80 19 80 ff e0 ff     `.`?.?..........
     162:	e0 33 00 33 00 63 00 66 00 0a 11 22 0c 01 fe 04     .3.3.c.f..."....
     172:	00 1f 00 7f 80 77 80 e5 c0 e4 00 fc 00 7e 00 1f     .....w.......~..
     182:	80 07 c0 05 c0 e5 c0 e5 c0 7f 80 3f 00 04 00 04     ...........?....
     192:	00 12 0e 2a 14 01 00 3c 04 00 7e 0c 00 c3 18 00     ...*...<..~.....
     1a2:	c3 10 00 c3 30 00 e7 60 00 7e 67 00 18 cd 80 00     ....0..`.~g.....
     1b2:	98 c0 01 98 c0 03 18 c0 03 18 c0 06 0f 80 0c 07     ................
     1c2:	00 0e 0e 1c 10 01 00 1f 00 7f 80 71 c0 71 c0 73     ...........q.q.s
     1d2:	80 3f 00 1e 00 7e 38 f7 30 e3 b0 e1 f0 e0 e0 7f     .?...~8.0.......
     1e2:	f0 1f bc 03 06 06 08 03 08 e0 c0 c0 c0 c0 c0 04     ................
     1f2:	11 11 08 02 fd 30 70 70 60 e0 e0 e0 e0 e0 e0 e0     .....0pp`.......
     202:	e0 e0 60 70 70 30 04 11 11 08 02 fd c0 c0 e0 e0     ..`pp0..........
     212:	60 60 70 70 70 70 70 60 60 e0 e0 c0 c0 08 07 07     ``ppppp``.......
     222:	0c 02 07 66 3c 18 ff 18 3c 66 0c 0c 18 14 04 00     ...f<...<f......
     232:	02 00 02 00 02 00 02 00 02 00 ff f0 ff f0 02 00     ................
     242:	02 00 02 00 02 00 02 00 04 05 05 06 01 fe 70 70     ..............pp
     252:	60 e0 c0 05 03 03 07 01 04 f8 f8 f8 03 03 03 06     `...............
     262:	02 00 e0 e0 e0 06 0f 0f 09 01 ff 0c 0c 0c 0c 18     ................
     272:	18 18 30 30 30 60 60 60 60 c0 0a 0e 1c 0b 01 00     ..000````.......
     282:	1e 00 7f 00 61 80 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0     ....a...........
     292:	e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 06 0e 0e 0b     ......a.........
     2a2:	02 00 1c 7c fc dc 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     ...|............
     2b2:	0a 0e 1c 0b 01 00 1f 00 7f 80 61 c0 e1 c0 01 c0     ..........a.....
     2c2:	01 c0 03 80 07 80 0f 00 1e 00 38 00 70 00 ff c0     ..........8.p...
     2d2:	ff c0 0a 0e 1c 0b 01 00 3e 00 7f 00 e3 80 03 80     ........>.......
     2e2:	03 80 1f 00 1f 00 03 80 01 c0 01 c0 e1 c0 f3 80     ................
     2f2:	7f 00 3e 00 0b 0e 1c 0b 01 00 07 80 0f 80 0f 80     ..>.............
     302:	1b 80 3b 80 33 80 73 80 63 80 e3 80 ff e0 ff e0     ..;.3.s.c.......
     312:	03 80 03 80 03 80 0a 0e 1c 0b 01 00 ff 80 ff 80     ................
     322:	e0 00 e0 00 e0 00 ff 00 ff 80 e1 80 01 c0 01 c0     ................
     332:	e1 c0 e3 80 7f 00 3e 00 0a 0e 1c 0b 01 00 1e 00     ......>.........
     342:	3f 80 61 80 60 00 e0 00 df 00 ff 80 e1 80 e1 c0     ?.a.`...........
     352:	e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0b 01 00     ....a...........
     362:	ff c0 ff c0 01 c0 03 80 03 80 07 80 07 00 07 00     ................
     372:	0e 00 0e 00 1c 00 1c 00 3c 00 38 00 0a 0e 1c 0b     ........<.8.....
     382:	01 00 3f 00 7f 80 e1 c0 e1 c0 e1 80 7f 00 3f 00     ..?...........?.
     392:	73 80 e1 c0 e1 c0 e1 c0 e1 c0 7f 80 3f 00 0a 0e     s...........?...
     3a2:	1c 0b 01 00 1e 00 7f 00 e1 80 e1 80 e1 c0 e1 c0     ................
     3b2:	f3 c0 7f c0 19 c0 01 80 e1 80 63 80 7f 00 3e 00     ..........c...>.
     3c2:	03 0a 0a 07 03 00 e0 e0 e0 00 00 00 00 e0 e0 e0     ................
     3d2:	04 0c 0c 06 01 fe 70 70 70 00 00 00 00 70 60 e0     ......ppp....p`.
     3e2:	c0 c0 0c 0a 14 14 04 01 00 10 00 e0 03 80 1c 00     ................
     3f2:	e0 00 c0 00 38 00 07 00 01 c0 00 30 0c 05 0a 14     ....8......0....
     402:	04 03 ff f0 ff f0 00 00 ff f0 ff f0 0c 0a 14 14     ................
     412:	04 01 80 00 70 00 1c 00 03 80 00 70 00 30 01 c0     ....p......p.0..
     422:	0e 00 38 00 c0 00 09 0e 1c 0b 01 00 3e 00 7f 00     ..8.........>...
     432:	c3 80 43 80 03 80 07 00 06 00 0c 00 18 00 18 00     ..C.............
     442:	18 00 00 00 18 00 18 00 13 12 36 15 01 fc 01 f8     ..........6.....
     452:	00 0f fe 00 1e 07 80 38 03 c0 71 fd c0 73 fc e0     .......8..q..s..
     462:	e7 1c e0 e7 1c e0 e7 1c e0 e7 1c e0 e7 1c e0 e7     ................
     472:	3c c0 73 ff c0 71 e7 80 38 00 00 1e 04 00 0f fc     <.s..q..8.......
     482:	00 03 fc 00 0e 0e 1c 0e 00 00 07 80 07 80 07 c0     ................
     492:	0f c0 0e c0 1c e0 1c e0 1c 60 38 70 3f f0 3f f8     .........`8p?.?.
     4a2:	70 38 70 38 e0 1c 0b 0e 1c 0d 01 00 ff 00 ff 80     p8p8............
     4b2:	e1 c0 e1 c0 e1 c0 e3 80 ff 00 ff 80 e0 c0 e0 e0     ................
     4c2:	e0 e0 e0 e0 ff c0 ff 00 0d 0e 1c 0f 01 00 0f 80     ................
     4d2:	3f e0 70 70 60 70 e0 00 e0 00 e0 00 e0 00 e0 00     ?.pp`p..........
     4e2:	e0 78 60 70 70 f0 3f e0 0f 80 0c 0e 1c 0e 01 00     .x`pp.?.........
     4f2:	ff 00 ff c0 e1 e0 e0 e0 e0 70 e0 70 e0 70 e0 70     .........p.p.p.p
     502:	e0 70 e0 70 e0 e0 e1 e0 ff c0 ff 00 0a 0e 1c 0c     .p.p............
     512:	01 00 ff c0 ff c0 e0 00 e0 00 e0 00 e0 00 ff 80     ................
     522:	ff 80 e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 09 0e     ................
     532:	1c 0b 01 00 ff 80 ff 80 e0 00 e0 00 e0 00 e0 00     ................
     542:	ff 80 ff 80 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
     552:	0d 0e 1c 0f 01 00 0f c0 1f f0 38 38 70 38 e0 00     ..........88p8..
     562:	e0 00 e1 f8 e1 f8 e0 38 e0 38 70 38 78 38 3f f8     .......8.8p8x8?.
     572:	0f f0 0c 0e 1c 0e 01 00 e0 70 e0 70 e0 70 e0 70     .........p.p.p.p
     582:	e0 70 e0 70 ff f0 ff f0 e0 70 e0 70 e0 70 e0 70     .p.p.....p.p.p.p
     592:	e0 70 e0 70 03 0e 0e 05 01 00 e0 e0 e0 e0 e0 e0     .p.p............
     5a2:	e0 e0 e0 e0 e0 e0 e0 e0 0a 0e 1c 0c 01 00 01 c0     ................
     5b2:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     5c2:	e1 c0 e1 c0 f3 c0 7f 80 3e 00 0b 0e 1c 0d 01 00     ........>.......
     5d2:	e1 e0 e3 c0 e3 80 e7 00 ee 00 fc 00 fc 00 fe 00     ................
     5e2:	ee 00 e7 00 e7 80 e3 c0 e1 c0 e0 e0 0a 0e 1c 0b     ................
     5f2:	01 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
     602:	e0 00 e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 10 0e     ................
     612:	1c 12 01 00 f8 1f f8 1f fc 3f fc 3f fc 37 ec 77     .........?.?.7.w
     622:	ee 77 ee 67 e6 e7 e7 e7 e7 c7 e3 c7 e3 c7 e3 87     .w.g............
     632:	0d 0e 1c 0f 01 00 f0 38 f8 38 f8 38 fc 38 ee 38     .......8.8.8.8.8
     642:	ee 38 e7 38 e7 38 e3 b8 e3 b8 e1 f8 e1 f8 e0 f8     .8.8.8..........
     652:	e0 f8 0e 0e 1c 10 01 00 0f c0 3f f0 70 70 60 38     ..........?.pp`8
     662:	e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70 70     ............`8pp
     672:	3f f0 0f c0 0b 0e 1c 0d 01 00 ff 00 ff c0 e1 c0     ?...............
     682:	e0 e0 e0 e0 e0 e0 e1 c0 ff c0 ff 00 e0 00 e0 00     ................
     692:	e0 00 e0 00 e0 00 0f 0e 1c 11 01 00 0f c0 3f e0     ..............?.
     6a2:	70 70 60 38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18     pp`8............
     6b2:	60 38 70 78 3f fe 0f fe 0b 0e 1c 0d 01 00 ff 80     `8px?...........
     6c2:	ff c0 e0 e0 e0 e0 e0 e0 e0 e0 ff 80 ff c0 e1 c0     ................
     6d2:	e0 e0 e0 e0 e0 e0 e0 e0 e0 60 0c 0e 1c 0e 01 00     .........`......
     6e2:	1f 80 3f c0 60 e0 e0 e0 e0 00 fc 00 7f 80 1f e0     ..?.`...........
     6f2:	03 e0 00 70 e0 70 e0 60 7f c0 1f 80 0c 0e 1c 0e     ...p.p.`........
     702:	01 00 ff f0 ff f0 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     712:	0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0c 0e     ................
     722:	1c 0e 01 00 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70     .....p.p.p.p.p.p
     732:	e0 70 e0 70 e0 70 e0 70 e0 70 70 e0 3f c0 1f 80     .p.p.p.p.pp.?...
     742:	0e 0e 1c 0f 00 00 f0 1c 70 1c 70 3c 38 38 38 38     ........p.p<8888
     752:	38 70 1c 70 1c 70 1e e0 0e e0 0f c0 07 c0 07 c0     8p.p.p..........
     762:	07 80 14 0e 2a 14 00 00 f0 f0 f0 70 f0 e0 70 f0     ....*......p..p.
     772:	e0 71 f8 e0 71 f8 e0 39 99 c0 39 99 c0 3b 9d c0     .q..q..9..9..;..
     782:	3b 9d c0 1b 0d 80 1f 0f 80 1f 0f 80 1f 0f 80 0e     ;...............
     792:	07 00 0c 0e 1c 0e 01 00 e0 70 70 e0 78 e0 39 c0     .........pp.x.9.
     7a2:	1f 80 1f 00 0f 00 0f 00 1f 80 3b c0 39 c0 70 e0     ..........;.9.p.
     7b2:	e0 f0 e0 70 0c 0e 1c 0d 00 00 f0 70 70 f0 38 e0     ...p.......pp.8.
     7c2:	38 e0 1d c0 1d c0 0f 80 0f 00 07 00 07 00 07 00     8...............
     7d2:	07 00 07 00 07 00 0b 0e 1c 0d 01 00 7f e0 7f e0     ................
     7e2:	01 e0 03 c0 03 80 07 80 0f 00 1e 00 1e 00 3c 00     ..............<.
     7f2:	78 00 f8 00 ff e0 ff e0 05 12 12 08 02 fc f8 f8     x...............
     802:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 f8 f8     ................
     812:	06 0f 0f 09 01 ff c0 c0 60 60 60 30 30 30 10 18     ........```000..
     822:	18 18 0c 0c 0c 05 12 12 08 02 fc f8 f8 38 38 38     .............888
     832:	38 38 38 38 38 38 38 38 38 38 38 f8 f8 0a 0c 18     88888888888.....
     842:	14 05 00 0c 00 0c 00 0c 00 12 00 12 00 33 00 21     .............3.!
     852:	00 21 00 40 80 40 80 c0 c0 80 40 0a 02 04 0a 00     .!.@.@....@.....
     862:	fd ff c0 ff c0 05 04 04 05 ff 0c e0 70 30 18 09     ............p0..
     872:	0a 14 0b 01 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3     .....>..........
     882:	80 e3 80 e3 80 ff 80 39 80 0a 0e 1c 0c 01 00 e0     .......9........
     892:	00 e0 00 e0 00 e0 00 ef 00 ff 80 e1 c0 e1 c0 e1     ................
     8a2:	c0 e1 c0 e1 c0 e1 80 ff 80 ef 00 09 0a 14 0b 01     ................
     8b2:	00 3e 00 7f 00 e3 80 e3 80 e0 00 e0 00 e3 80 e3     .>..............
     8c2:	80 7f 00 3e 00 0a 0e 1c 0c 01 00 01 c0 01 c0 01     ...>............
     8d2:	c0 01 c0 3d c0 7f c0 e1 c0 e1 c0 e1 c0 e1 c0 e1     ...=............
     8e2:	c0 e1 c0 7f c0 3d c0 09 0a 14 0b 01 00 1e 00 7f     .....=..........
     8f2:	00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f 80 3e     ...............>
     902:	00 07 0e 0e 08 01 00 1e 3e 38 38 fe fe 38 38 38     ........>88..888
     912:	38 38 38 38 38 0a 0e 1c 0c 01 fc 3d c0 7f c0 71     88888......=...q
     922:	c0 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 7f c0 3d c0 01     .............=..
     932:	c0 61 c0 7f 80 3f 00 09 0e 1c 0b 01 00 e0 00 e0     .a...?..........
     942:	00 e0 00 e0 00 ef 00 ff 80 e3 80 e3 80 e3 80 e3     ................
     952:	80 e3 80 e3 80 e3 80 e3 80 03 0e 0e 05 01 00 e0     ................
     962:	e0 e0 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 04 12 12     ................
     972:	07 02 fc 70 70 70 00 70 70 70 70 70 70 70 70 70     ...ppp.ppppppppp
     982:	70 70 70 f0 e0 09 0e 1c 0b 01 00 e0 00 e0 00 e0     ppp.............
     992:	00 e0 00 e7 80 e7 00 ee 00 fc 00 fc 00 fc 00 ee     ................
     9a2:	00 e7 00 e7 00 e3 80 03 0e 0e 05 01 00 e0 e0 e0     ................
     9b2:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 0f 0a 14 12 01     ................
     9c2:	00 ef 3c ff fe e3 ce e3 86 e3 86 e3 86 e3 86 e3     ..<.............
     9d2:	86 e3 86 e3 86 09 0a 14 0b 01 00 ef 00 ff 80 e3     ................
     9e2:	80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 0a     ................
     9f2:	0a 14 0c 01 00 1e 00 7f 80 61 80 e1 c0 e1 c0 e1     .........a......
     a02:	c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0c 01 fc ef     ...a............
     a12:	00 ff 80 e1 80 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 ff     ................
     a22:	80 ef 00 e0 00 e0 00 e0 00 e0 00 0a 0e 1c 0c 01     ................
     a32:	fc 3d c0 7f c0 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 e1     .=..............
     a42:	c0 7f c0 3d c0 01 c0 01 c0 01 c0 01 c0 06 0a 0a     ...=............
     a52:	08 01 00 ec fc f0 e0 e0 e0 e0 e0 e0 e0 09 0a 14     ................
     a62:	0b 01 00 3e 00 ff 00 e3 80 e0 00 7e 00 1f 00 03     ...>.......~....
     a72:	80 e3 80 ff 00 3e 00 07 0d 0d 09 01 00 08 38 38     .....>........88
     a82:	fe fe 38 38 38 38 38 38 3e 1e 09 0a 14 0b 01 00     ..888888>.......
     a92:	e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80     ................
     aa2:	ff 80 7b 80 0b 0a 14 0b 00 00 e0 e0 71 c0 71 c0     ..{.........q.q.
     ab2:	31 80 3b 80 3b 80 1b 00 1f 00 1f 00 0e 00 11 0a     1.;.;...........
     ac2:	1e 11 00 00 e1 c3 80 61 e3 00 73 e7 00 73 67 00     .......a..s..sg.
     ad2:	33 77 00 3f 76 00 3f 3e 00 3e 3e 00 1e 3c 00 1e     3w.?v.?>.>>..<..
     ae2:	1c 00 09 0a 14 0b 01 00 e3 80 73 00 77 00 3e 00     ..........s.w.>.
     af2:	1c 00 3e 00 3e 00 77 00 e3 80 e3 80 0b 0e 1c 0b     ..>.>.w.........
     b02:	00 fc e0 e0 71 c0 71 c0 39 80 3b 80 3b 80 1f 00     ....q.q.9.;.;...
     b12:	1f 00 0f 00 0e 00 0e 00 0e 00 1c 00 1c 00 08 0a     ................
     b22:	0a 0a 01 00 ff ff 07 0e 1c 38 70 e0 ff ff 07 13     .........8p.....
     b32:	13 0a 02 fb 0e 3e 38 38 38 38 38 30 f0 c0 f0 70     .....>888880...p
     b42:	38 38 38 38 38 3e 0e 01 15 15 07 03 fb 80 80 80     88888>..........
     b52:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     b62:	80 80 07 13 13 0a 02 fb e0 f0 38 38 38 38 38 38     ..........888888
     b72:	1c 06 1c 38 38 38 38 38 38 f0 e0 0b 03 06 0b 00     ...888888.......
     b82:	04 30 60 7f c0 c7 80 ff ff ff ff ff ff ff ff ff     .0`.............
     b92:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ba2:	ff ff ff ff ff ff ff ff 00 00 00 06 00 00 03 0e     ................
     bb2:	0e 09 03 fc e0 e0 00 00 e0 e0 e0 e0 e0 e0 e0 e0     ................
     bc2:	e0 e0 09 0e 1c 0b 01 fe 02 00 02 00 3e 00 7f 00     ............>...
     bd2:	e7 80 e7 80 e8 00 e8 00 eb 80 f3 80 7f 00 3e 00     ..............>.
     be2:	20 00 20 00 0a 0e 1c 0c 01 00 1f 00 3f c0 71 c0      . .........?.q.
     bf2:	70 00 70 00 fe 00 fe 00 70 00 70 00 70 00 70 00     p.p.....p.p.p.p.
     c02:	70 00 ff c0 ff c0 0a 0a 14 0c 01 03 80 40 5e 80     p............@^.
     c12:	21 00 40 80 40 80 40 80 40 80 21 00 5e 80 80 40     !.@.@.@.@.!.^..@
     c22:	0b 0e 1c 0d 01 00 e0 e0 e1 c0 71 c0 71 80 fb e0     ..........q.q...
     c32:	fb e0 1f 00 ff e0 ff e0 0e 00 0e 00 0e 00 0e 00     ................
     c42:	0e 00 01 12 12 07 03 fc 80 80 80 80 80 80 80 80     ................
     c52:	00 00 80 80 80 80 80 80 80 80 08 12 12 0a 01 fc     ................
     c62:	3e 7e e0 e0 70 3c 7e e7 e7 e7 fe 7c 1e 07 07 87     >~..p<~....|....
     c72:	fe 38 07 02 02 07 00 0c ee ee 0f 0e 1c 11 01 00     .8..............
     c82:	07 c0 1f f0 37 98 6f cc cc e4 9c 02 9c 02 9c e2     ....7.o.........
     c92:	8c e2 cf c6 47 84 20 18 1c 70 0f c0 07 09 09 08     ....G. ..p......
     ca2:	01 05 78 cc 7c cc cc fc 24 00 fe 0a 08 10 0c 01     ..x.|...$.......
     cb2:	01 39 c0 71 80 73 80 e7 00 e7 00 73 80 71 80 39     .9.q.s.....s.q.9
     cc2:	c0 0b 05 0a 0d 01 04 ff e0 ff e0 00 20 00 20 00     ............ . .
     cd2:	20 ff 0f 0e 1c 11 01 00 07 c0 1f f0 3f 98 6f ec      ...........?.o.
     ce2:	cc 64 8c 62 8f c2 8f c2 8c 62 cc 66 4c 64 20 18     .d.b.....b.fLd .
     cf2:	1c 70 0f c0 06 02 02 06 00 0c fc fc 05 05 05 07     .p..............
     d02:	01 09 70 88 88 88 70 0c 0c 18 14 04 00 02 00 02     ..p...p.........
     d12:	00 02 00 ff f0 ff f0 02 00 02 00 02 00 00 00 00     ................
     d22:	00 ff f0 ff f0 06 08 08 08 01 06 78 cc 0c 18 30     ...........x...0
     d32:	e0 fc fc 06 07 07 08 01 07 78 cc 0c 30 0c cc 78     .........x..0..x
     d42:	04 04 04 04 01 0c 30 60 60 c0 ff 09 11 22 0b 01     ......0``...."..
     d52:	fd 3f 80 79 00 f9 00 f9 00 f9 00 f9 00 79 00 09     .?.y.........y..
     d62:	00 09 00 09 00 09 00 09 00 09 00 09 00 09 00 09     ................
     d72:	00 09 00 03 03 03 06 02 05 e0 e0 e0 05 05 05 05     ................
     d82:	01 fb 40 70 18 18 f0 04 08 08 06 01 06 30 f0 30     ..@p.........0.0
     d92:	30 30 30 30 30 07 09 09 09 01 05 38 44 c6 c6 c6     00000......8D...
     da2:	44 38 00 fe 0a 08 10 0c 01 01 e7 00 63 80 73 80     D8..........c.s.
     db2:	39 c0 39 c0 73 80 63 80 e7 00 0e 0e 1c 10 01 00     9.9.s.c.........
     dc2:	70 30 f0 30 30 60 30 c0 30 c0 31 80 31 9c 33 3c     p0.00`0.0.1.1.3<
     dd2:	06 3c 06 6c 0c cc 18 fc 18 0c 30 0c 0f 0e 1c 11     .<.l......0.....
     de2:	01 00 70 30 f0 20 30 60 30 c0 30 c0 31 80 33 3c     ..p0. 0`0.0.1.3<
     df2:	33 66 06 06 0c 0e 0c 1c 18 30 30 7e 30 7e 0e 0e     3f.......00~0~..
     e02:	1c 10 01 00 78 18 cc 30 0c 30 30 60 0c c0 cc c0     ....x..0.00`....
     e12:	79 9c 01 bc 03 3c 06 6c 06 cc 0c fc 08 0c 18 0c     y....<.l........
     e22:	09 0e 1c 0b 01 fc 0e 00 0e 00 00 00 0e 00 0e 00     ................
     e32:	0e 00 3c 00 70 00 e0 00 e0 00 e1 80 e1 80 7f 80     ..<.p...........
     e42:	3e 00 0e 14 28 0e 00 00 0c 00 0e 00 06 00 03 00     >...(...........
     e52:	00 00 00 00 07 80 07 80 07 c0 0f c0 0e c0 1c e0     ................
     e62:	1c e0 1c 60 38 70 3f f0 3f f8 70 38 70 38 e0 1c     ...`8p?.?.p8p8..
     e72:	0e 14 28 0e 00 00 00 c0 01 c0 01 80 03 00 00 00     ..(.............
     e82:	00 00 07 80 07 80 07 c0 0f c0 0e c0 1c e0 1c e0     ................
     e92:	1c 60 38 70 3f f0 3f f8 70 38 70 38 e0 1c 0e 14     .`8p?.?.p8p8....
     ea2:	28 0e 00 00 03 80 07 80 06 c0 0c c0 00 00 00 00     (...............
     eb2:	07 80 07 80 07 c0 0f c0 0e c0 1c e0 1c e0 1c 60     ...............`
     ec2:	38 70 3f f0 3f f8 70 38 70 38 e0 1c 0e 13 26 0e     8p?.?.p8p8....&.
     ed2:	00 00 06 40 0f c0 08 80 00 00 00 00 07 80 07 80     ...@............
     ee2:	07 c0 0f c0 0e c0 1c e0 1c e0 1c 60 38 70 3f f0     ...........`8p?.
     ef2:	3f f8 70 38 70 38 e0 1c 0e 13 26 0f 00 00 0e e0     ?.p8p8....&.....
     f02:	0e e0 00 00 00 00 00 00 03 80 07 80 07 c0 07 c0     ................
     f12:	0e c0 0e e0 1c e0 1c 70 1c 70 3f f8 3f f8 70 38     .......p.p?.?.p8
     f22:	70 1c e0 1c 0d 15 2a 0f 01 00 07 00 08 80 08 80     p.....*.........
     f32:	08 80 07 00 00 00 00 00 07 00 0f 80 0f 80 1d c0     ................
     f42:	1d c0 1d c0 38 e0 38 e0 30 60 7f f0 7f f0 e0 38     ....8.8.0`.....8
     f52:	e0 38 e0 38 13 0e 2a 14 00 00 00 ff e0 01 ff e0     .8.8..*.........
     f62:	03 f0 00 03 70 00 07 70 00 07 70 00 0e 7f c0 0e     ....p..p..p.....
     f72:	7f c0 1c 70 00 1f f0 00 3f f0 00 70 70 00 70 7f     ...p....?..pp.p.
     f82:	e0 e0 7f e0 0d 12 24 0f 01 fc 0f 80 3f e0 70 f0     ......$.....?.p.
     f92:	60 70 e0 00 e0 00 e0 00 e0 00 e0 00 e0 78 60 70     `p...........x`p
     fa2:	70 f0 3f e0 1f 80 04 00 07 80 01 80 0f 00 0a 14     p.?.............
     fb2:	28 0c 01 00 30 00 38 00 18 00 0c 00 00 00 00 00     (...0.8.........
     fc2:	ff c0 ff c0 e0 00 e0 00 e0 00 e0 00 ff 80 ff 80     ................
     fd2:	e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 0a 14 28 0c     ..............(.
     fe2:	01 00 07 00 06 00 0c 00 08 00 00 00 00 00 ff c0     ................
     ff2:	ff c0 e0 00 e0 00 e0 00 e0 00 ff 80 ff 80 e0 00     ................
    1002:	e0 00 e0 00 e0 00 ff c0 ff c0 0a 14 28 0c 01 00     ............(...
    1012:	1c 00 1e 00 36 00 23 00 00 00 00 00 ff c0 ff c0     ....6.#.........
    1022:	e0 00 e0 00 e0 00 e0 00 ff 80 ff 80 e0 00 e0 00     ................
    1032:	e0 00 e0 00 ff c0 ff c0 0a 13 26 0c 01 00 77 00     ..........&...w.
    1042:	77 00 00 00 00 00 00 00 ff c0 ff c0 e0 00 e0 00     w...............
    1052:	e0 00 e0 00 ff 80 ff 80 e0 00 e0 00 e0 00 e0 00     ................
    1062:	ff c0 ff c0 05 14 14 05 ff 00 e0 60 30 10 00 00     ...........`0...
    1072:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 04 14     88888888888888..
    1082:	14 05 01 00 30 70 60 c0 00 00 e0 e0 e0 e0 e0 e0     ....0p`.........
    1092:	e0 e0 e0 e0 e0 e0 e0 e0 05 14 14 05 00 00 70 70     ..............pp
    10a2:	d8 88 00 00 70 70 70 70 70 70 70 70 70 70 70 70     ....pppppppppppp
    10b2:	70 70 07 13 13 07 00 00 ee ee 00 00 00 38 38 38     pp...........888
    10c2:	38 38 38 38 38 38 38 38 38 38 38 0d 0e 1c 0e 00     88888888888.....
    10d2:	00 7f 80 7f e0 70 f0 70 70 70 38 70 38 fe 38 fe     .....p.ppp8p8.8.
    10e2:	38 70 38 70 38 70 70 70 f0 7f e0 7f 80 0d 13 26     8p8p8ppp.......&
    10f2:	0f 01 00 0c 40 1f 80 11 00 00 00 00 00 f0 38 f8     ....@.........8.
    1102:	38 f8 38 fc 38 ee 38 ee 38 e7 38 e7 38 e3 b8 e3     8.8.8.8.8.8.8...
    1112:	b8 e1 f8 e1 f8 e0 f8 e0 f8 0e 14 28 10 01 00 1c     ...........(....
    1122:	00 0c 00 06 00 02 00 00 00 00 00 0f c0 3f f0 70     .............?.p
    1132:	70 60 38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60     p`8............`
    1142:	38 70 70 3f f0 0f c0 0e 14 28 10 01 00 00 e0 01     8pp?.....(......
    1152:	c0 01 80 03 00 00 00 00 00 0f c0 3f f0 70 70 60     ...........?.pp`
    1162:	38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70     8............`8p
    1172:	70 3f f0 0f c0 0e 14 28 10 01 00 07 00 07 80 0d     p?.....(........
    1182:	c0 08 c0 00 00 00 00 0f c0 3f f0 70 70 60 38 e0     .........?.pp`8.
    1192:	18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70 70 3f     ...........`8pp?
    11a2:	f0 0f c0 0e 13 26 10 01 00 07 c0 0f c0 00 00 00     .....&..........
    11b2:	00 00 00 0f c0 3f f0 70 30 60 38 e0 18 e0 1c e0     .....?.p0`8.....
    11c2:	1c e0 1c e0 1c e0 18 70 38 78 f0 3f f0 0f c0 0e     .......p8x.?....
    11d2:	13 26 10 01 00 1d c0 1d c0 00 00 00 00 00 00 0f     .&..............
    11e2:	c0 3f f0 70 70 60 38 e0 18 e0 1c e0 1c e0 1c e0     .?.pp`8.........
    11f2:	1c e0 18 60 38 70 70 3f f0 0f c0 0a 0a 14 14 05     ...`8pp?........
    1202:	01 80 40 c0 c0 61 80 33 00 0c 00 0c 00 12 00 21     ..@..a.3.......!
    1212:	00 40 80 80 40 0f 10 20 10 00 ff 00 02 07 e6 1f     .@..@.. ........
    1222:	fc 38 3c 30 3c 70 6c 70 ee 71 ce 73 8e 77 0e 7e     .8<0<plp.q.s.w.~
    1232:	0c 7c 1c 38 38 3f f0 ef e0 40 00 0c 14 28 0e 01     .|.88?...@...(..
    1242:	00 38 00 18 00 0c 00 06 00 00 00 00 00 e0 70 e0     .8............p.
    1252:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0     p.p.p.p.p.p.p.p.
    1262:	70 e0 70 71 e0 3f c0 1f 80 0c 14 28 0e 01 00 01     p.pq.?.....(....
    1272:	c0 03 80 03 00 06 00 00 00 00 00 e0 70 e0 70 e0     ............p.p.
    1282:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0     p.p.p.p.p.p.p.p.
    1292:	70 71 e0 3f c0 1f 80 0c 14 28 0e 01 00 0e 00 0f     pq.?.....(......
    12a2:	00 1b 00 11 80 00 00 00 00 e0 70 e0 70 e0 70 e0     ..........p.p.p.
    12b2:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 71     p.p.p.p.p.p.p.pq
    12c2:	e0 3f c0 1f 80 0c 13 26 0e 01 00 1d c0 1d c0 00     .?.....&........
    12d2:	00 00 00 00 00 e0 70 e0 70 e0 70 e0 70 e0 70 e0     ......p.p.p.p.p.
    12e2:	70 e0 70 e0 70 e0 70 e0 70 e0 70 70 e0 3f c0 1f     p.p.p.p.p.pp.?..
    12f2:	80 0c 13 26 0d 00 00 01 80 03 00 02 00 00 00 00     ...&............
    1302:	00 f0 70 70 f0 38 e0 38 e0 1d c0 1d c0 0f 80 0f     ..pp.8.8........
    1312:	00 07 00 07 00 07 00 07 00 07 00 07 00 0b 0e 1c     ................
    1322:	0d 01 00 e0 00 e0 00 ff 00 ff c0 e1 c0 e0 e0 e0     ................
    1332:	e0 e0 e0 e1 c0 ff 80 fe 00 e0 00 e0 00 e0 00 0a     ................
    1342:	0e 1c 0c 01 00 3e 00 7f 80 e3 80 e3 80 e3 00 e7     .....>..........
    1352:	00 ee 00 ee 00 e7 80 e3 c0 e1 c0 fd c0 ff c0 ef     ................
    1362:	80 09 10 20 0b 01 00 70 00 30 00 18 00 08 00 00     ... ...p.0......
    1372:	00 00 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3 80 e3     ...>............
    1382:	80 e3 80 ff 80 39 80 09 10 20 0b 01 00 07 00 06     .....9... ......
    1392:	00 0c 00 0c 00 00 00 00 00 3e 00 7f 80 e3 80 03     .........>......
    13a2:	80 3f 80 fb 80 e3 80 e3 80 ff 80 79 80 09 10 20     .?.........y... 
    13b2:	0b 01 00 1c 00 1e 00 36 00 23 00 00 00 00 00 3e     .......6.#.....>
    13c2:	00 7f 80 e3 80 1f 80 7f 80 e3 80 e3 80 e3 80 ff     ................
    13d2:	80 39 80 09 0e 1c 0b 01 00 3f 00 3e 00 00 00 00     .9.......?.>....
    13e2:	00 3e 00 7f 80 e3 80 1f 80 7f 80 e3 80 e3 80 e3     .>..............
    13f2:	80 ff 80 39 80 09 0f 1e 0b 01 00 77 00 77 00 00     ...9.......w.w..
    1402:	00 00 00 00 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3     .....>..........
    1412:	80 e3 80 e3 80 ff 80 39 80 09 11 22 0b 01 00 1c     .......9..."....
    1422:	00 22 00 22 00 22 00 1c 00 00 00 00 00 3e 00 7f     .".".".......>..
    1432:	80 e3 80 1f 80 7f 80 e3 80 e3 80 e3 80 ff 80 39     ...............9
    1442:	80 10 0a 14 12 01 00 3e 7c 7f fe e3 87 1f ff 7f     .......>|.......
    1452:	ff e3 80 e3 80 e3 c7 fe fe 3c 7c 09 0e 1c 0b 01     .........<|.....
    1462:	fc 3e 00 7f 00 e3 80 e3 80 e0 00 e0 00 e3 80 e3     .>..............
    1472:	80 7f 00 3e 00 10 00 1e 00 06 00 3e 00 09 10 20     ...>.......>... 
    1482:	0b 01 00 70 00 30 00 18 00 08 00 00 00 00 00 1e     ...p.0..........
    1492:	00 7f 00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f     ................
    14a2:	80 3e 00 09 10 20 0b 01 00 07 00 06 00 0c 00 08     .>... ..........
    14b2:	00 00 00 00 00 1e 00 7f 00 e3 80 e3 80 ff 80 ff     ................
    14c2:	80 e0 00 e3 80 7f 80 3e 00 09 10 20 0b 01 00 1c     .......>... ....
    14d2:	00 1e 00 36 00 23 00 00 00 00 00 1e 00 7f 00 e3     ...6.#..........
    14e2:	80 e3 80 ff 80 ff 80 e0 00 e3 80 7f 80 3e 00 09     .............>..
    14f2:	0f 1e 0b 01 00 77 00 77 00 00 00 00 00 00 00 1e     .....w.w........
    1502:	00 7f 00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f     ................
    1512:	80 3e 00 04 0f 0f 05 00 00 c0 e0 60 30 00 70 70     .>.........`0.pp
    1522:	70 70 70 70 70 70 70 70 04 0f 0f 04 01 00 70 60     pppppppp......p`
    1532:	c0 80 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 07 0f 0f     ................
    1542:	05 ff 00 38 7c 4c c6 00 38 38 38 38 38 38 38 38     ...8|L..88888888
    1552:	38 38 07 0e 0e 06 00 00 ee ee 00 00 38 38 38 38     88..........8888
    1562:	38 38 38 38 38 38 0a 0e 1c 0c 01 00 39 80 0f 00     888888......9...
    1572:	1f 00 63 00 1f 80 7f 80 61 c0 e1 c0 e1 c0 e1 c0     ..c.....a.......
    1582:	e1 c0 61 c0 7f 80 1f 00 09 0e 1c 0b 01 00 3e 00     ..a...........>.
    1592:	3c 00 00 00 00 00 ef 00 ff 80 e3 80 e3 80 e3 80     <...............
    15a2:	e3 80 e3 80 e3 80 e3 80 e3 80 0a 10 20 0c 01 00     ............ ...
    15b2:	30 00 18 00 18 00 0c 00 00 00 00 00 1e 00 7f 80     0...............
    15c2:	61 80 e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00     a.........a.....
    15d2:	0a 10 20 0c 01 00 03 00 06 00 06 00 0c 00 00 00     .. .............
    15e2:	00 00 1e 00 7f 80 61 80 e1 c0 e1 c0 e1 c0 e1 c0     ......a.........
    15f2:	61 80 7f 80 1e 00 0a 10 20 0c 01 00 0c 00 1e 00     a....... .......
    1602:	1a 00 33 00 00 00 00 00 1e 00 7f 80 61 80 e1 c0     ..3.........a...
    1612:	e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0c     ......a.........
    1622:	01 00 1f 00 3e 00 00 00 00 00 1e 00 7f 80 61 80     ....>.........a.
    1632:	e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0f     ........a.......
    1642:	1e 0c 01 00 3b 80 3b 80 00 00 00 00 00 00 1e 00     ....;.;.........
    1652:	7f 80 61 80 e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80     ..a.........a...
    1662:	1e 00 0c 08 10 14 04 02 06 00 0e 00 00 00 ff f0     ................
    1672:	ff f0 00 00 06 00 0e 00 0a 0c 18 0c 01 00 00 c0     ................
    1682:	1f 80 7f 80 63 80 e7 c0 ed c0 e9 c0 f1 c0 71 80     ....c.........q.
    1692:	7f 80 de 00 80 00 09 10 20 0b 01 00 70 00 30 00     ........ ...p.0.
    16a2:	18 00 08 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80     ................
    16b2:	e3 80 e3 80 e3 80 e3 80 ff 80 7b 80 09 10 20 0b     ..........{... .
    16c2:	01 00 07 00 06 00 0c 00 08 00 00 00 00 00 e3 80     ................
    16d2:	e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 ff 80     ................
    16e2:	7b 80 09 10 20 0b 01 00 1c 00 1c 00 36 00 22 00     {... .......6.".
    16f2:	00 00 00 00 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80     ................
    1702:	e3 80 e3 80 ff 80 7b 80 09 0f 1e 0b 01 00 77 00     ......{.......w.
    1712:	77 00 00 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80     w...............
    1722:	e3 80 e3 80 e3 80 e3 80 ff 80 7b 80 0b 13 26 0b     ..........{...&.
    1732:	00 fc 01 80 03 00 02 00 04 00 00 00 70 e0 71 c0     ............p.q.
    1742:	71 c0 39 c0 3b 80 1b 80 1f 80 1f 00 0f 00 0e 00     q.9.;...........
    1752:	0e 00 4e 00 fc 00 78 00 0a 12 24 0c 01 fc e0 00     ..N...x...$.....
    1762:	e0 00 e0 00 e0 00 ef 00 ff 80 e1 80 e1 c0 e1 c0     ................
    1772:	e1 c0 e1 c0 e1 c0 ff 80 ff 00 e0 00 e0 00 e0 00     ................
    1782:	e0 00 0b 12 24 0b 00 fc 3b 80 3b 80 00 00 00 00     ....$...;.;.....
    1792:	e1 e0 71 c0 71 c0 73 80 3b 80 3b 80 1f 00 1f 00     ..q.q.s.;.;.....
    17a2:	1f 00 0e 00 0e 00 0c 00 1c 00 1c 00                 ............

000017ae <__ctors_end>:
    17ae:	11 24       	eor	r1, r1
    17b0:	1f be       	out	0x3f, r1	; 63
    17b2:	cf ef       	ldi	r28, 0xFF	; 255
    17b4:	d8 e0       	ldi	r29, 0x08	; 8
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	cd bf       	out	0x3d, r28	; 61

000017ba <__do_copy_data>:
    17ba:	11 e0       	ldi	r17, 0x01	; 1
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b1 e0       	ldi	r27, 0x01	; 1
    17c0:	ea ef       	ldi	r30, 0xFA	; 250
    17c2:	ff e2       	ldi	r31, 0x2F	; 47
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <__do_copy_data+0x10>
    17c6:	05 90       	lpm	r0, Z+
    17c8:	0d 92       	st	X+, r0
    17ca:	ae 30       	cpi	r26, 0x0E	; 14
    17cc:	b1 07       	cpc	r27, r17
    17ce:	d9 f7       	brne	.-10     	; 0x17c6 <__do_copy_data+0xc>

000017d0 <__do_clear_bss>:
    17d0:	22 e0       	ldi	r18, 0x02	; 2
    17d2:	ae e0       	ldi	r26, 0x0E	; 14
    17d4:	b1 e0       	ldi	r27, 0x01	; 1
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <.do_clear_bss_start>

000017d8 <.do_clear_bss_loop>:
    17d8:	1d 92       	st	X+, r1

000017da <.do_clear_bss_start>:
    17da:	ad 30       	cpi	r26, 0x0D	; 13
    17dc:	b2 07       	cpc	r27, r18
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <.do_clear_bss_loop>
    17e0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <main>
    17e4:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <_exit>

000017e8 <__bad_interrupt>:
    17e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000017ec <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    17ec:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    17f0:	80 e2       	ldi	r24, 0x20	; 32
    17f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    17f6:	08 95       	ret

000017f8 <i2c_start>:
    17f8:	94 ea       	ldi	r25, 0xA4	; 164
    17fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17fe:	4f ef       	ldi	r20, 0xFF	; 255
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	ec eb       	ldi	r30, 0xBC	; 188
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	90 81       	ld	r25, Z
    180c:	99 23       	and	r25, r25
    180e:	34 f0       	brlt	.+12     	; 0x181c <i2c_start+0x24>
    1810:	41 50       	subi	r20, 0x01	; 1
    1812:	51 09       	sbc	r21, r1
    1814:	61 09       	sbc	r22, r1
    1816:	71 09       	sbc	r23, r1
    1818:	c0 f7       	brcc	.-16     	; 0x180a <i2c_start+0x12>
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <i2c_start+0x2c>
    181c:	45 2b       	or	r20, r21
    181e:	46 2b       	or	r20, r22
    1820:	47 2b       	or	r20, r23
    1822:	41 f1       	breq	.+80     	; 0x1874 <i2c_start+0x7c>
    1824:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1828:	98 7f       	andi	r25, 0xF8	; 248
    182a:	98 30       	cpi	r25, 0x08	; 8
    182c:	11 f0       	breq	.+4      	; 0x1832 <i2c_start+0x3a>
    182e:	90 31       	cpi	r25, 0x10	; 16
    1830:	19 f5       	brne	.+70     	; 0x1878 <i2c_start+0x80>
    1832:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1836:	84 e8       	ldi	r24, 0x84	; 132
    1838:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a0 e0       	ldi	r26, 0x00	; 0
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ec eb       	ldi	r30, 0xBC	; 188
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	20 81       	ld	r18, Z
    184a:	22 23       	and	r18, r18
    184c:	2c f0       	brlt	.+10     	; 0x1858 <i2c_start+0x60>
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	a1 09       	sbc	r26, r1
    1852:	b1 09       	sbc	r27, r1
    1854:	c8 f7       	brcc	.-14     	; 0x1848 <i2c_start+0x50>
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <i2c_start+0x68>
    1858:	89 2b       	or	r24, r25
    185a:	8a 2b       	or	r24, r26
    185c:	8b 2b       	or	r24, r27
    185e:	71 f0       	breq	.+28     	; 0x187c <i2c_start+0x84>
    1860:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1864:	98 7f       	andi	r25, 0xF8	; 248
    1866:	98 31       	cpi	r25, 0x18	; 24
    1868:	59 f0       	breq	.+22     	; 0x1880 <i2c_start+0x88>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 34       	cpi	r25, 0x40	; 64
    186e:	49 f4       	brne	.+18     	; 0x1882 <i2c_start+0x8a>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	08 95       	ret
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	08 95       	ret
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	08 95       	ret
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	08 95       	ret
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	08 95       	ret

00001884 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1884:	84 e9       	ldi	r24, 0x94	; 148
    1886:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	ec eb       	ldi	r30, 0xBC	; 188
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	20 81       	ld	r18, Z
    1894:	24 ff       	sbrs	r18, 4
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <i2c_stop+0x1e>
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	81 15       	cp	r24, r1
    189c:	21 e0       	ldi	r18, 0x01	; 1
    189e:	92 07       	cpc	r25, r18
    18a0:	c1 f7       	brne	.-16     	; 0x1892 <i2c_stop+0xe>
    18a2:	08 95       	ret

000018a4 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    18a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    18a8:	84 e8       	ldi	r24, 0x84	; 132
    18aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    18b6:	ec eb       	ldi	r30, 0xBC	; 188
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	20 81       	ld	r18, Z
    18bc:	22 23       	and	r18, r18
    18be:	2c f0       	brlt	.+10     	; 0x18ca <i2c_write+0x26>
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	a1 09       	sbc	r26, r1
    18c4:	b1 09       	sbc	r27, r1
    18c6:	c8 f7       	brcc	.-14     	; 0x18ba <i2c_write+0x16>
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <i2c_write+0x2e>
	if(i2c_timer == 0)
    18ca:	89 2b       	or	r24, r25
    18cc:	8a 2b       	or	r24, r26
    18ce:	8b 2b       	or	r24, r27
    18d0:	41 f0       	breq	.+16     	; 0x18e2 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    18d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    18d6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	98 32       	cpi	r25, 0x28	; 40
    18dc:	19 f4       	brne	.+6      	; 0x18e4 <i2c_write+0x40>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    18e4:	08 95       	ret

000018e6 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    18e6:	84 ec       	ldi	r24, 0xC4	; 196
    18e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    18f4:	ec eb       	ldi	r30, 0xBC	; 188
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	20 81       	ld	r18, Z
    18fa:	22 23       	and	r18, r18
    18fc:	2c f0       	brlt	.+10     	; 0x1908 <i2c_readAck+0x22>
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	a1 09       	sbc	r26, r1
    1902:	b1 09       	sbc	r27, r1
    1904:	c8 f7       	brcc	.-14     	; 0x18f8 <i2c_readAck+0x12>
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    1908:	89 2b       	or	r24, r25
    190a:	8a 2b       	or	r24, r26
    190c:	8b 2b       	or	r24, r27
    190e:	19 f0       	breq	.+6      	; 0x1916 <i2c_readAck+0x30>
		return 0;

    return TWDR;
    1910:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1914:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1916:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    1918:	08 95       	ret

0000191a <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    191a:	84 e8       	ldi	r24, 0x84	; 132
    191c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1928:	ec eb       	ldi	r30, 0xBC	; 188
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	20 81       	ld	r18, Z
    192e:	22 23       	and	r18, r18
    1930:	2c f0       	brlt	.+10     	; 0x193c <i2c_readNak+0x22>
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	a1 09       	sbc	r26, r1
    1936:	b1 09       	sbc	r27, r1
    1938:	c8 f7       	brcc	.-14     	; 0x192c <i2c_readNak+0x12>
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    193c:	89 2b       	or	r24, r25
    193e:	8a 2b       	or	r24, r26
    1940:	8b 2b       	or	r24, r27
    1942:	19 f0       	breq	.+6      	; 0x194a <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    1944:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1948:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    194a:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    194c:	08 95       	ret

0000194e <getAcc>:
		u8g_Delay(100);
		_delay_ms(300);
	}
}

double getAcc(int addr){
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	c8 2f       	mov	r28, r24
	int16_t ret = 0;
	uint8_t buffer[2];
	i2c_start(MPU6050_ADDR | I2C_WRITE);
    1954:	80 ed       	ldi	r24, 0xD0	; 208
    1956:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
	i2c_write(addr);
    195a:	8c 2f       	mov	r24, r28
    195c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1960:	8a e1       	ldi	r24, 0x1A	; 26
    1962:	8a 95       	dec	r24
    1964:	f1 f7       	brne	.-4      	; 0x1962 <getAcc+0x14>
    1966:	00 c0       	rjmp	.+0      	; 0x1968 <getAcc+0x1a>
	_delay_us(10);
	//read data
	i2c_start(MPU6050_ADDR | I2C_READ);
    1968:	81 ed       	ldi	r24, 0xD1	; 209
    196a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
	buffer[0] = i2c_readAck();
    196e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <i2c_readAck>
    1972:	d8 2f       	mov	r29, r24
	buffer[1] = i2c_readNak();
    1974:	0e 94 8d 0c 	call	0x191a	; 0x191a <i2c_readNak>
    1978:	c8 2f       	mov	r28, r24
	i2c_stop();
    197a:	0e 94 42 0c 	call	0x1884	; 0x1884 <i2c_stop>
	ret = (((int16_t)buffer[0]) << 8) | buffer[1];
    197e:	6c 2f       	mov	r22, r28
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	7d 2b       	or	r23, r29
	return (double)(ret)/MPU6050_AGAIN; //Konverterar till g?
    1984:	07 2e       	mov	r0, r23
    1986:	00 0c       	add	r0, r0
    1988:	88 0b       	sbc	r24, r24
    198a:	99 0b       	sbc	r25, r25
    198c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__floatsisf>
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	58 e3       	ldi	r21, 0x38	; 56
    1998:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <__mulsf3>
}
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <drawSteps>:

void drawSteps(uint16_t steps){
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <drawSteps+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <drawSteps+0x8>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <drawSteps+0xa>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	char csteps[6] = "";
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	1a 82       	std	Y+2, r1	; 0x02
    19b4:	1b 82       	std	Y+3, r1	; 0x03
    19b6:	1c 82       	std	Y+4, r1	; 0x04
    19b8:	1e 82       	std	Y+6, r1	; 0x06
    19ba:	1d 82       	std	Y+5, r1	; 0x05
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    19bc:	4a e0       	ldi	r20, 0x0A	; 10
    19be:	be 01       	movw	r22, r28
    19c0:	6f 5f       	subi	r22, 0xFF	; 255
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__itoa_ncheck>
	itoa(steps, csteps, 10);
	u8g_SetFont(&u8g, u8g_font_fub14);
    19c8:	62 e1       	ldi	r22, 0x12	; 18
    19ca:	71 e0       	ldi	r23, 0x01	; 1
    19cc:	86 ed       	ldi	r24, 0xD6	; 214
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	0e 94 66 13 	call	0x26cc	; 0x26cc <u8g_SetFont>
	u8g_DrawStr(&u8g, 2, 16, csteps);
    19d4:	9e 01       	movw	r18, r28
    19d6:	2f 5f       	subi	r18, 0xFF	; 255
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	40 e1       	ldi	r20, 0x10	; 16
    19dc:	62 e0       	ldi	r22, 0x02	; 2
    19de:	86 ed       	ldi	r24, 0xD6	; 214
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	0e 94 da 12 	call	0x25b4	; 0x25b4 <u8g_DrawStr>
}
    19e6:	26 96       	adiw	r28, 0x06	; 6
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <main>:

double getAcc(int addr);
void drawSteps(uint16_t steps);

int main(void) {
	u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	71 e0       	ldi	r23, 0x01	; 1
    19fe:	86 ed       	ldi	r24, 0xD6	; 214
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	0e 94 73 14 	call	0x28e6	; 0x28e6 <u8g_InitI2C>


	sei();
    1a06:	78 94       	sei
	/*	 Init MPU 6050	*/
	mpu6050_init();
    1a08:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a0c:	2f e7       	ldi	r18, 0x7F	; 127
    1a0e:	88 e3       	ldi	r24, 0x38	; 56
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	21 50       	subi	r18, 0x01	; 1
    1a14:	80 40       	sbci	r24, 0x00	; 0
    1a16:	90 40       	sbci	r25, 0x00	; 0
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <main+0x1a>
    1a1a:	00 c0       	rjmp	.+0      	; 0x1a1c <main+0x24>
    1a1c:	00 00       	nop
	_delay_ms(50);

	uint16_t steps = 0;
    1a1e:	c0 e0       	ldi	r28, 0x00	; 0
    1a20:	d0 e0       	ldi	r29, 0x00	; 0

	while(1) {
		double combinedAcc = fabs(getAcc(X)) + fabs(getAcc(Y)) + fabs(getAcc(Z));
    1a22:	8b e3       	ldi	r24, 0x3B	; 59
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 a7 0c 	call	0x194e	; 0x194e <getAcc>
    1a2a:	6b 01       	movw	r12, r22
    1a2c:	7c 01       	movw	r14, r24
    1a2e:	8d e3       	ldi	r24, 0x3D	; 61
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 a7 0c 	call	0x194e	; 0x194e <getAcc>
    1a36:	e8 94       	clt
    1a38:	f7 f8       	bld	r15, 7
    1a3a:	9b 01       	movw	r18, r22
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	5f 77       	andi	r21, 0x7F	; 127
    1a40:	c7 01       	movw	r24, r14
    1a42:	b6 01       	movw	r22, r12
    1a44:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__addsf3>
    1a48:	6b 01       	movw	r12, r22
    1a4a:	7c 01       	movw	r14, r24
    1a4c:	8f e3       	ldi	r24, 0x3F	; 63
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 a7 0c 	call	0x194e	; 0x194e <getAcc>
    1a54:	9b 01       	movw	r18, r22
    1a56:	ac 01       	movw	r20, r24
    1a58:	5f 77       	andi	r21, 0x7F	; 127
    1a5a:	c7 01       	movw	r24, r14
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__addsf3>
		if(combinedAcc > 2.0){
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e4       	ldi	r21, 0x40	; 64
    1a6a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__gesf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	0c f4       	brge	.+2      	; 0x1a74 <main+0x7c>
			steps++;
    1a72:	21 96       	adiw	r28, 0x01	; 1
		}
		u8g_FirstPage(&u8g);
    1a74:	86 ed       	ldi	r24, 0xD6	; 214
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	0e 94 89 14 	call	0x2912	; 0x2912 <u8g_FirstPage>
		do{
			drawSteps(steps);
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <drawSteps>
		}while(u8g_NextPage(&u8g));
    1a82:	86 ed       	ldi	r24, 0xD6	; 214
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	0e 94 8f 14 	call	0x291e	; 0x291e <u8g_NextPage>
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	f7 cf       	rjmp	.-18     	; 0x1a7c <main+0x84>
		u8g_Delay(100);
    1a8e:	84 e6       	ldi	r24, 0x64	; 100
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <u8g_Delay>
    1a96:	2f ef       	ldi	r18, 0xFF	; 255
    1a98:	82 e5       	ldi	r24, 0x52	; 82
    1a9a:	97 e0       	ldi	r25, 0x07	; 7
    1a9c:	21 50       	subi	r18, 0x01	; 1
    1a9e:	80 40       	sbci	r24, 0x00	; 0
    1aa0:	90 40       	sbci	r25, 0x00	; 0
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <main+0xa4>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <main+0xae>
    1aa6:	00 00       	nop
    1aa8:	bc cf       	rjmp	.-136    	; 0x1a22 <main+0x2a>

00001aaa <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	66 23       	and	r22, r22
    1abe:	b9 f1       	breq	.+110    	; 0x1b2e <mpu6050_readBytes+0x84>
    1ac0:	c5 2f       	mov	r28, r21
    1ac2:	d4 2f       	mov	r29, r20
    1ac4:	d6 2e       	mov	r13, r22
    1ac6:	18 2f       	mov	r17, r24
    1ac8:	80 ed       	ldi	r24, 0xD0	; 208
    1aca:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
    1ace:	81 2f       	mov	r24, r17
    1ad0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <i2c_write>
    1ad4:	8a e1       	ldi	r24, 0x1A	; 26
    1ad6:	8a 95       	dec	r24
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <mpu6050_readBytes+0x2c>
    1ada:	00 c0       	rjmp	.+0      	; 0x1adc <mpu6050_readBytes+0x32>
    1adc:	81 ed       	ldi	r24, 0xD1	; 209
    1ade:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
    1ae2:	0d 2f       	mov	r16, r29
    1ae4:	1c 2f       	mov	r17, r28
    1ae6:	ee 24       	eor	r14, r14
    1ae8:	ea 94       	dec	r14
    1aea:	ed 0c       	add	r14, r13
    1aec:	f1 2c       	mov	r15, r1
    1aee:	ef ef       	ldi	r30, 0xFF	; 255
    1af0:	ee 1a       	sub	r14, r30
    1af2:	fe 0a       	sbc	r15, r30
    1af4:	c0 e0       	ldi	r28, 0x00	; 0
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
    1af8:	ad 2c       	mov	r10, r13
    1afa:	b1 2c       	mov	r11, r1
    1afc:	f1 e0       	ldi	r31, 0x01	; 1
    1afe:	af 1a       	sub	r10, r31
    1b00:	b1 08       	sbc	r11, r1
    1b02:	ca 15       	cp	r28, r10
    1b04:	db 05       	cpc	r29, r11
    1b06:	29 f4       	brne	.+10     	; 0x1b12 <mpu6050_readBytes+0x68>
    1b08:	0e 94 8d 0c 	call	0x191a	; 0x191a <i2c_readNak>
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	80 83       	st	Z, r24
    1b10:	04 c0       	rjmp	.+8      	; 0x1b1a <mpu6050_readBytes+0x70>
    1b12:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <i2c_readAck>
    1b16:	f8 01       	movw	r30, r16
    1b18:	80 83       	st	Z, r24
    1b1a:	21 96       	adiw	r28, 0x01	; 1
    1b1c:	0f 5f       	subi	r16, 0xFF	; 255
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	ce 15       	cp	r28, r14
    1b22:	df 05       	cpc	r29, r15
    1b24:	71 f7       	brne	.-36     	; 0x1b02 <mpu6050_readBytes+0x58>
    1b26:	cd 2d       	mov	r28, r13
    1b28:	0e 94 42 0c 	call	0x1884	; 0x1884 <i2c_stop>
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <mpu6050_readBytes+0x86>
    1b2e:	c0 e0       	ldi	r28, 0x00	; 0
    1b30:	8c 2f       	mov	r24, r28
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	df 90       	pop	r13
    1b40:	bf 90       	pop	r11
    1b42:	af 90       	pop	r10
    1b44:	08 95       	ret

00001b46 <mpu6050_readByte>:
    1b46:	ab 01       	movw	r20, r22
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <mpu6050_readBytes>
    1b4e:	08 95       	ret

00001b50 <mpu6050_writeBytes>:
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	66 23       	and	r22, r22
    1b5e:	d1 f0       	breq	.+52     	; 0x1b94 <mpu6050_writeBytes+0x44>
    1b60:	7a 01       	movw	r14, r20
    1b62:	16 2f       	mov	r17, r22
    1b64:	c8 2f       	mov	r28, r24
    1b66:	80 ed       	ldi	r24, 0xD0	; 208
    1b68:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
    1b6c:	8c 2f       	mov	r24, r28
    1b6e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <i2c_write>
    1b72:	e7 01       	movw	r28, r14
    1b74:	6f ef       	ldi	r22, 0xFF	; 255
    1b76:	61 0f       	add	r22, r17
    1b78:	06 2f       	mov	r16, r22
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
    1b7c:	0f 5f       	subi	r16, 0xFF	; 255
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	0e 0d       	add	r16, r14
    1b82:	1f 1d       	adc	r17, r15
    1b84:	89 91       	ld	r24, Y+
    1b86:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <i2c_write>
    1b8a:	c0 17       	cp	r28, r16
    1b8c:	d1 07       	cpc	r29, r17
    1b8e:	d1 f7       	brne	.-12     	; 0x1b84 <mpu6050_writeBytes+0x34>
    1b90:	0e 94 42 0c 	call	0x1884	; 0x1884 <i2c_stop>
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <mpu6050_writeByte>:
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	1f 92       	push	r1
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	69 83       	std	Y+1, r22	; 0x01
    1bae:	ae 01       	movw	r20, r28
    1bb0:	4f 5f       	subi	r20, 0xFF	; 255
    1bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <mpu6050_writeBytes>
    1bba:	0f 90       	pop	r0
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <mpu6050_writeBits>:
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	1f 92       	push	r1
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	44 23       	and	r20, r20
    1bd6:	89 f1       	breq	.+98     	; 0x1c3a <mpu6050_writeBits+0x78>
    1bd8:	f2 2e       	mov	r15, r18
    1bda:	14 2f       	mov	r17, r20
    1bdc:	06 2f       	mov	r16, r22
    1bde:	e8 2e       	mov	r14, r24
    1be0:	19 82       	std	Y+1, r1	; 0x01
    1be2:	be 01       	movw	r22, r28
    1be4:	6f 5f       	subi	r22, 0xFF	; 255
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <mpu6050_readByte>
    1bec:	88 23       	and	r24, r24
    1bee:	29 f1       	breq	.+74     	; 0x1c3a <mpu6050_writeBits+0x78>
    1bf0:	40 2f       	mov	r20, r16
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	41 1b       	sub	r20, r17
    1bf6:	51 09       	sbc	r21, r1
    1bf8:	4f 5f       	subi	r20, 0xFF	; 255
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <mpu6050_writeBits+0x44>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	1a 95       	dec	r17
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <mpu6050_writeBits+0x40>
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	04 2e       	mov	r0, r20
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <mpu6050_writeBits+0x52>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <mpu6050_writeBits+0x4e>
    1c18:	2f 2d       	mov	r18, r15
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <mpu6050_writeBits+0x60>
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	4a 95       	dec	r20
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <mpu6050_writeBits+0x5c>
    1c26:	68 2f       	mov	r22, r24
    1c28:	60 95       	com	r22
    1c2a:	99 81       	ldd	r25, Y+1	; 0x01
    1c2c:	69 23       	and	r22, r25
    1c2e:	82 23       	and	r24, r18
    1c30:	68 2b       	or	r22, r24
    1c32:	69 83       	std	Y+1, r22	; 0x01
    1c34:	8e 2d       	mov	r24, r14
    1c36:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <mpu6050_writeByte>
    1c3a:	0f 90       	pop	r0
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	08 95       	ret

00001c4a <mpu6050_writeBit>:
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	1f 92       	push	r1
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	18 2f       	mov	r17, r24
    1c5c:	06 2f       	mov	r16, r22
    1c5e:	f4 2e       	mov	r15, r20
    1c60:	be 01       	movw	r22, r28
    1c62:	6f 5f       	subi	r22, 0xFF	; 255
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <mpu6050_readByte>
    1c6a:	ff 20       	and	r15, r15
    1c6c:	59 f0       	breq	.+22     	; 0x1c84 <mpu6050_writeBit+0x3a>
    1c6e:	21 e0       	ldi	r18, 0x01	; 1
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	b9 01       	movw	r22, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <mpu6050_writeBit+0x30>
    1c76:	66 0f       	add	r22, r22
    1c78:	77 1f       	adc	r23, r23
    1c7a:	0a 95       	dec	r16
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <mpu6050_writeBit+0x2c>
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	68 2b       	or	r22, r24
    1c82:	0b c0       	rjmp	.+22     	; 0x1c9a <mpu6050_writeBit+0x50>
    1c84:	21 e0       	ldi	r18, 0x01	; 1
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	b9 01       	movw	r22, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <mpu6050_writeBit+0x46>
    1c8c:	66 0f       	add	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	0a 95       	dec	r16
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <mpu6050_writeBit+0x42>
    1c94:	60 95       	com	r22
    1c96:	99 81       	ldd	r25, Y+1	; 0x01
    1c98:	69 23       	and	r22, r25
    1c9a:	69 83       	std	Y+1, r22	; 0x01
    1c9c:	81 2f       	mov	r24, r17
    1c9e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <mpu6050_writeByte>
    1ca2:	0f 90       	pop	r0
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	08 95       	ret

00001cb0 <mpu6050_setSleepDisabled>:
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	66 e0       	ldi	r22, 0x06	; 6
    1cb4:	8b e6       	ldi	r24, 0x6B	; 107
    1cb6:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <mpu6050_writeBit>
    1cba:	08 95       	ret

00001cbc <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    1cbc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cc0:	2a e1       	ldi	r18, 0x1A	; 26
    1cc2:	2a 95       	dec	r18
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <mpu6050_init+0x6>
    1cc6:	00 c0       	rjmp	.+0      	; 0x1cc8 <mpu6050_init+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cc8:	8f ef       	ldi	r24, 0xFF	; 255
    1cca:	90 e7       	ldi	r25, 0x70	; 112
    1ccc:	22 e0       	ldi	r18, 0x02	; 2
    1cce:	81 50       	subi	r24, 0x01	; 1
    1cd0:	90 40       	sbci	r25, 0x00	; 0
    1cd2:	20 40       	sbci	r18, 0x00	; 0
    1cd4:	e1 f7       	brne	.-8      	; 0x1cce <mpu6050_init+0x12>
    1cd6:	00 c0       	rjmp	.+0      	; 0x1cd8 <mpu6050_init+0x1c>
    1cd8:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    1cda:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <mpu6050_setSleepDisabled>
    1cde:	8f e1       	ldi	r24, 0x1F	; 31
    1ce0:	9e e4       	ldi	r25, 0x4E	; 78
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <mpu6050_init+0x26>
    1ce6:	00 c0       	rjmp	.+0      	; 0x1ce8 <mpu6050_init+0x2c>
    1ce8:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    1cea:	21 e0       	ldi	r18, 0x01	; 1
    1cec:	43 e0       	ldi	r20, 0x03	; 3
    1cee:	62 e0       	ldi	r22, 0x02	; 2
    1cf0:	8b e6       	ldi	r24, 0x6B	; 107
    1cf2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1cf6:	23 e0       	ldi	r18, 0x03	; 3
    1cf8:	43 e0       	ldi	r20, 0x03	; 3
    1cfa:	62 e0       	ldi	r22, 0x02	; 2
    1cfc:	8a e1       	ldi	r24, 0x1A	; 26
    1cfe:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1d02:	64 e0       	ldi	r22, 0x04	; 4
    1d04:	89 e1       	ldi	r24, 0x19	; 25
    1d06:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    1d0a:	23 e0       	ldi	r18, 0x03	; 3
    1d0c:	42 e0       	ldi	r20, 0x02	; 2
    1d0e:	64 e0       	ldi	r22, 0x04	; 4
    1d10:	8b e1       	ldi	r24, 0x1B	; 27
    1d12:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	42 e0       	ldi	r20, 0x02	; 2
    1d1a:	64 e0       	ldi	r22, 0x04	; 4
    1d1c:	8c e1       	ldi	r24, 0x1C	; 28
    1d1e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <mpu6050_writeBits>
    1d22:	08 95       	ret

00001d24 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1d24:	0f 93       	push	r16
    1d26:	fc 01       	movw	r30, r24
    1d28:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    1d2a:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1d2c:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1d2e:	96 a9       	ldd	r25, Z+54	; 0x36
    1d30:	94 17       	cp	r25, r20
    1d32:	38 f0       	brcs	.+14     	; 0x1d42 <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    1d34:	08 17       	cp	r16, r24
    1d36:	68 f4       	brcc	.+26     	; 0x1d52 <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	04 17       	cp	r16, r20
    1d3c:	40 f0       	brcs	.+16     	; 0x1d4e <u8g_IsBBXIntersection+0x2a>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1d42:	08 17       	cp	r16, r24
    1d44:	d0 f0       	brcs	.+52     	; 0x1d7a <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	04 17       	cp	r16, r20
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <u8g_IsBBXIntersection+0x2a>
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1d4e:	88 23       	and	r24, r24
    1d50:	c9 f0       	breq	.+50     	; 0x1d84 <u8g_IsBBXIntersection+0x60>
    1d52:	21 50       	subi	r18, 0x01	; 1
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    1d54:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    1d56:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1d58:	95 a9       	ldd	r25, Z+53	; 0x35
    1d5a:	96 17       	cp	r25, r22
    1d5c:	38 f0       	brcs	.+14     	; 0x1d6c <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    1d5e:	28 17       	cp	r18, r24
    1d60:	70 f4       	brcc	.+28     	; 0x1d7e <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	26 17       	cp	r18, r22
    1d66:	70 f0       	brcs	.+28     	; 0x1d84 <u8g_IsBBXIntersection+0x60>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	0c c0       	rjmp	.+24     	; 0x1d84 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1d6c:	28 17       	cp	r18, r24
    1d6e:	48 f0       	brcs	.+18     	; 0x1d82 <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	26 17       	cp	r18, r22
    1d74:	38 f0       	brcs	.+14     	; 0x1d84 <u8g_IsBBXIntersection+0x60>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    1d82:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    1d84:	0f 91       	pop	r16
    1d86:	08 95       	ret

00001d88 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    1d88:	db 01       	movw	r26, r22
    1d8a:	14 96       	adiw	r26, 0x04	; 4
    1d8c:	ed 91       	ld	r30, X+
    1d8e:	fc 91       	ld	r31, X
    1d90:	15 97       	sbiw	r26, 0x05	; 5
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	61 e0       	ldi	r22, 0x01	; 1
    1d98:	09 95       	icall
    1d9a:	08 95       	ret

00001d9c <u8g_SetChipSelect>:
    1d9c:	db 01       	movw	r26, r22
    1d9e:	14 96       	adiw	r26, 0x04	; 4
    1da0:	ed 91       	ld	r30, X+
    1da2:	fc 91       	ld	r31, X
    1da4:	15 97       	sbiw	r26, 0x05	; 5
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	63 e0       	ldi	r22, 0x03	; 3
    1dac:	09 95       	icall
    1dae:	08 95       	ret

00001db0 <u8g_SetResetLow>:
    1db0:	db 01       	movw	r26, r22
    1db2:	14 96       	adiw	r26, 0x04	; 4
    1db4:	ed 91       	ld	r30, X+
    1db6:	fc 91       	ld	r31, X
    1db8:	15 97       	sbiw	r26, 0x05	; 5
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	64 e0       	ldi	r22, 0x04	; 4
    1dc2:	09 95       	icall
    1dc4:	08 95       	ret

00001dc6 <u8g_SetResetHigh>:
    1dc6:	db 01       	movw	r26, r22
    1dc8:	14 96       	adiw	r26, 0x04	; 4
    1dca:	ed 91       	ld	r30, X+
    1dcc:	fc 91       	ld	r31, X
    1dce:	15 97       	sbiw	r26, 0x05	; 5
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	09 95       	icall
    1dda:	08 95       	ret

00001ddc <u8g_SetAddress>:
    1ddc:	db 01       	movw	r26, r22
    1dde:	14 96       	adiw	r26, 0x04	; 4
    1de0:	ed 91       	ld	r30, X+
    1de2:	fc 91       	ld	r31, X
    1de4:	15 97       	sbiw	r26, 0x05	; 5
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	62 e0       	ldi	r22, 0x02	; 2
    1dec:	09 95       	icall
    1dee:	08 95       	ret

00001df0 <u8g_WriteByte>:
    1df0:	db 01       	movw	r26, r22
    1df2:	14 96       	adiw	r26, 0x04	; 4
    1df4:	ed 91       	ld	r30, X+
    1df6:	fc 91       	ld	r31, X
    1df8:	15 97       	sbiw	r26, 0x05	; 5
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	65 e0       	ldi	r22, 0x05	; 5
    1e00:	09 95       	icall
    1e02:	08 95       	ret

00001e04 <u8g_WriteSequence>:
    1e04:	db 01       	movw	r26, r22
    1e06:	14 96       	adiw	r26, 0x04	; 4
    1e08:	ed 91       	ld	r30, X+
    1e0a:	fc 91       	ld	r31, X
    1e0c:	15 97       	sbiw	r26, 0x05	; 5
    1e0e:	66 e0       	ldi	r22, 0x06	; 6
    1e10:	09 95       	icall
    1e12:	08 95       	ret

00001e14 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    1e14:	af 92       	push	r10
    1e16:	bf 92       	push	r11
    1e18:	cf 92       	push	r12
    1e1a:	df 92       	push	r13
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
    1e20:	0f 93       	push	r16
    1e22:	1f 93       	push	r17
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	6c 01       	movw	r12, r24
    1e2a:	7b 01       	movw	r14, r22
    1e2c:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    1e2e:	d0 e0       	ldi	r29, 0x00	; 0
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1e30:	b1 2c       	mov	r11, r1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1e32:	aa 24       	eor	r10, r10
    1e34:	a3 94       	inc	r10
{
  uint8_t is_escape = 0;
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    1e36:	f8 01       	movw	r30, r16
    1e38:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    1e3a:	d1 11       	cpse	r29, r1
    1e3c:	0b c0       	rjmp	.+22     	; 0x1e54 <u8g_WriteEscSeqP+0x40>
    {
      if ( value != 255 )
    1e3e:	cf 3f       	cpi	r28, 0xFF	; 255
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <u8g_WriteEscSeqP+0x30>
    1e42:	4a c0       	rjmp	.+148    	; 0x1ed8 <u8g_WriteEscSeqP+0xc4>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1e44:	4c 2f       	mov	r20, r28
    1e46:	b7 01       	movw	r22, r14
    1e48:	c6 01       	movw	r24, r12
    1e4a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <u8g_WriteByte>
    1e4e:	81 11       	cpse	r24, r1
    1e50:	48 c0       	rjmp	.+144    	; 0x1ee2 <u8g_WriteEscSeqP+0xce>
    1e52:	4b c0       	rjmp	.+150    	; 0x1eea <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1e54:	cf 3f       	cpi	r28, 0xFF	; 255
    1e56:	51 f4       	brne	.+20     	; 0x1e6c <u8g_WriteEscSeqP+0x58>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1e58:	4f ef       	ldi	r20, 0xFF	; 255
    1e5a:	b7 01       	movw	r22, r14
    1e5c:	c6 01       	movw	r24, r12
    1e5e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <u8g_WriteByte>
    1e62:	88 23       	and	r24, r24
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <u8g_WriteEscSeqP+0x54>
    1e66:	41 c0       	rjmp	.+130    	; 0x1eea <u8g_WriteEscSeqP+0xd6>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1e68:	db 2d       	mov	r29, r11
    1e6a:	3b c0       	rjmp	.+118    	; 0x1ee2 <u8g_WriteEscSeqP+0xce>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    1e6c:	ce 3f       	cpi	r28, 0xFE	; 254
    1e6e:	e1 f1       	breq	.+120    	; 0x1ee8 <u8g_WriteEscSeqP+0xd4>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1e70:	c0 3f       	cpi	r28, 0xF0	; 240
    1e72:	a0 f5       	brcc	.+104    	; 0x1edc <u8g_WriteEscSeqP+0xc8>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1e74:	c0 3e       	cpi	r28, 0xE0	; 224
    1e76:	40 f0       	brcs	.+16     	; 0x1e88 <u8g_WriteEscSeqP+0x74>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    1e78:	4c 2f       	mov	r20, r28
    1e7a:	4f 70       	andi	r20, 0x0F	; 15
    1e7c:	b7 01       	movw	r22, r14
    1e7e:	c6 01       	movw	r24, r12
    1e80:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1e84:	db 2d       	mov	r29, r11
    1e86:	2d c0       	rjmp	.+90     	; 0x1ee2 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    1e88:	c0 3d       	cpi	r28, 0xD0	; 208
    1e8a:	40 f0       	brcs	.+16     	; 0x1e9c <u8g_WriteEscSeqP+0x88>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    1e8c:	4c 2f       	mov	r20, r28
    1e8e:	4f 70       	andi	r20, 0x0F	; 15
    1e90:	b7 01       	movw	r22, r14
    1e92:	c6 01       	movw	r24, r12
    1e94:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1e98:	db 2d       	mov	r29, r11
    1e9a:	23 c0       	rjmp	.+70     	; 0x1ee2 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    1e9c:	c0 3c       	cpi	r28, 0xC0	; 192
    1e9e:	a0 f0       	brcs	.+40     	; 0x1ec8 <u8g_WriteEscSeqP+0xb4>
      {
        u8g_SetResetLow(u8g, dev);
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	c6 01       	movw	r24, r12
    1ea4:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    1ea8:	c2 95       	swap	r28
    1eaa:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
    1eac:	ce 5f       	subi	r28, 0xFE	; 254
        u8g_Delay(value);
    1eae:	d0 e0       	ldi	r29, 0x00	; 0
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    1eb6:	b7 01       	movw	r22, r14
    1eb8:	c6 01       	movw	r24, r12
    1eba:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <u8g_SetResetHigh>
        u8g_Delay(value);
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1ec4:	db 2d       	mov	r29, r11
    1ec6:	0d c0       	rjmp	.+26     	; 0x1ee2 <u8g_WriteEscSeqP+0xce>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    1ec8:	cc 23       	and	r28, r28
    1eca:	54 f0       	brlt	.+20     	; 0x1ee0 <u8g_WriteEscSeqP+0xcc>
      {
        u8g_Delay(value);
    1ecc:	8c 2f       	mov	r24, r28
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <u8g_Delay>
      }
      is_escape = 0;
    1ed4:	db 2d       	mov	r29, r11
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <u8g_WriteEscSeqP+0xce>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1ed8:	da 2d       	mov	r29, r10
    1eda:	03 c0       	rjmp	.+6      	; 0x1ee2 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1edc:	db 2d       	mov	r29, r11
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <u8g_WriteEscSeqP+0xce>
    1ee0:	db 2d       	mov	r29, r11
    }
    esc_seq++;
    1ee2:	0f 5f       	subi	r16, 0xFF	; 255
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    1ee6:	a7 cf       	rjmp	.-178    	; 0x1e36 <u8g_WriteEscSeqP+0x22>
  return 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	df 90       	pop	r13
    1ef8:	cf 90       	pop	r12
    1efa:	bf 90       	pop	r11
    1efc:	af 90       	pop	r10
    1efe:	08 95       	ret

00001f00 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    1f04:	fc 01       	movw	r30, r24
    1f06:	23 a5       	ldd	r18, Z+43	; 0x2b
    1f08:	22 23       	and	r18, r18
    1f0a:	b1 f0       	breq	.+44     	; 0x1f38 <u8g_com_arduino_ssd_start_sequence+0x38>
    1f0c:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    1f0e:	88 e7       	ldi	r24, 0x78	; 120
    1f10:	0e 94 8a 10 	call	0x2114	; 0x2114 <u8g_i2c_start>
    1f14:	88 23       	and	r24, r24
    1f16:	89 f0       	breq	.+34     	; 0x1f3a <u8g_com_arduino_ssd_start_sequence+0x3a>
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    1f18:	8e a1       	ldd	r24, Y+38	; 0x26
    1f1a:	81 11       	cpse	r24, r1
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    1f1e:	0e 94 c7 10 	call	0x218e	; 0x218e <u8g_i2c_send_byte>
    1f22:	81 11       	cpse	r24, r1
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <u8g_com_arduino_ssd_start_sequence+0x32>
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    1f28:	80 e4       	ldi	r24, 0x40	; 64
    1f2a:	0e 94 c7 10 	call	0x218e	; 0x218e <u8g_i2c_send_byte>
    1f2e:	88 23       	and	r24, r24
    1f30:	21 f0       	breq	.+8      	; 0x1f3a <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    1f32:	1b a6       	std	Y+43, r1	; 0x2b
  return 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <u8g_com_arduino_ssd_start_sequence+0x3a>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    1f40:	cf 92       	push	r12
    1f42:	df 92       	push	r13
    1f44:	ef 92       	push	r14
    1f46:	ff 92       	push	r15
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	cf 93       	push	r28
    1f4e:	e4 2e       	mov	r14, r20
    1f50:	89 01       	movw	r16, r18
  switch(msg)
    1f52:	63 30       	cpi	r22, 0x03	; 3
    1f54:	b1 f0       	breq	.+44     	; 0x1f82 <u8g_com_arduino_ssd_i2c_fn+0x42>
    1f56:	30 f4       	brcc	.+12     	; 0x1f64 <u8g_com_arduino_ssd_i2c_fn+0x24>
    1f58:	61 30       	cpi	r22, 0x01	; 1
    1f5a:	69 f0       	breq	.+26     	; 0x1f76 <u8g_com_arduino_ssd_i2c_fn+0x36>
    1f5c:	62 30       	cpi	r22, 0x02	; 2
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <u8g_com_arduino_ssd_i2c_fn+0x22>
    1f60:	6f c0       	rjmp	.+222    	; 0x2040 <u8g_com_arduino_ssd_i2c_fn+0x100>
    1f62:	74 c0       	rjmp	.+232    	; 0x204c <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1f64:	66 30       	cpi	r22, 0x06	; 6
    1f66:	41 f1       	breq	.+80     	; 0x1fb8 <u8g_com_arduino_ssd_i2c_fn+0x78>
    1f68:	67 30       	cpi	r22, 0x07	; 7
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <u8g_com_arduino_ssd_i2c_fn+0x2e>
    1f6c:	48 c0       	rjmp	.+144    	; 0x1ffe <u8g_com_arduino_ssd_i2c_fn+0xbe>
    1f6e:	65 30       	cpi	r22, 0x05	; 5
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <u8g_com_arduino_ssd_i2c_fn+0x34>
    1f72:	6c c0       	rjmp	.+216    	; 0x204c <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1f74:	10 c0       	rjmp	.+32     	; 0x1f96 <u8g_com_arduino_ssd_i2c_fn+0x56>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    1f76:	fc 01       	movw	r30, r24
    1f78:	86 a5       	ldd	r24, Z+46	; 0x2e
    1f7a:	0e 94 42 10 	call	0x2084	; 0x2084 <u8g_i2c_init>
      }
      */
#endif
      break;
  }
  return 1;
    1f7e:	c1 e0       	ldi	r28, 0x01	; 1
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);

      break;
    1f80:	6a c0       	rjmp	.+212    	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    1f82:	fc 01       	movw	r30, r24
    1f84:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    1f86:	21 e0       	ldi	r18, 0x01	; 1
    1f88:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    1f8a:	41 11       	cpse	r20, r1
    1f8c:	61 c0       	rjmp	.+194    	; 0x2050 <u8g_com_arduino_ssd_i2c_fn+0x110>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    1f8e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_i2c_stop>
      }
      */
#endif
      break;
  }
  return 1;
    1f92:	c1 e0       	ldi	r28, 0x01	; 1
    1f94:	60 c0       	rjmp	.+192    	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1f96:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <u8g_com_arduino_ssd_start_sequence>
    1f9a:	c8 2f       	mov	r28, r24
    1f9c:	81 11       	cpse	r24, r1
    1f9e:	03 c0       	rjmp	.+6      	; 0x1fa6 <u8g_com_arduino_ssd_i2c_fn+0x66>
	return u8g_i2c_stop(), 0;
    1fa0:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_i2c_stop>
    1fa4:	58 c0       	rjmp	.+176    	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    1fa6:	8e 2d       	mov	r24, r14
    1fa8:	0e 94 c7 10 	call	0x218e	; 0x218e <u8g_i2c_send_byte>
    1fac:	c8 2f       	mov	r28, r24
    1fae:	81 11       	cpse	r24, r1
    1fb0:	51 c0       	rjmp	.+162    	; 0x2054 <u8g_com_arduino_ssd_i2c_fn+0x114>
	return u8g_i2c_stop(), 0;
    1fb2:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_i2c_stop>
    1fb6:	4f c0       	rjmp	.+158    	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1fb8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <u8g_com_arduino_ssd_start_sequence>
    1fbc:	c8 2f       	mov	r28, r24
    1fbe:	88 23       	and	r24, r24
    1fc0:	21 f0       	breq	.+8      	; 0x1fca <u8g_com_arduino_ssd_i2c_fn+0x8a>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1fc2:	e1 10       	cpse	r14, r1
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <u8g_com_arduino_ssd_i2c_fn+0x90>
      }
      */
#endif
      break;
  }
  return 1;
    1fc6:	c1 e0       	ldi	r28, 0x01	; 1
    1fc8:	46 c0       	rjmp	.+140    	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1fca:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_i2c_stop>
    1fce:	43 c0       	rjmp	.+134    	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1fd0:	68 01       	movw	r12, r16
    1fd2:	ea 94       	dec	r14
    1fd4:	8e 2d       	mov	r24, r14
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	08 0f       	add	r16, r24
    1fdc:	19 1f       	adc	r17, r25
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    1fde:	f6 01       	movw	r30, r12
    1fe0:	81 91       	ld	r24, Z+
    1fe2:	6f 01       	movw	r12, r30
    1fe4:	0e 94 c7 10 	call	0x218e	; 0x218e <u8g_i2c_send_byte>
    1fe8:	c8 2f       	mov	r28, r24
    1fea:	81 11       	cpse	r24, r1
    1fec:	03 c0       	rjmp	.+6      	; 0x1ff4 <u8g_com_arduino_ssd_i2c_fn+0xb4>
	    return u8g_i2c_stop(), 0;
    1fee:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_i2c_stop>
    1ff2:	31 c0       	rjmp	.+98     	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1ff4:	c0 16       	cp	r12, r16
    1ff6:	d1 06       	cpc	r13, r17
    1ff8:	91 f7       	brne	.-28     	; 0x1fde <u8g_com_arduino_ssd_i2c_fn+0x9e>
      }
      */
#endif
      break;
  }
  return 1;
    1ffa:	c1 e0       	ldi	r28, 0x01	; 1
    1ffc:	2c c0       	rjmp	.+88     	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1ffe:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <u8g_com_arduino_ssd_start_sequence>
    2002:	c8 2f       	mov	r28, r24
    2004:	88 23       	and	r24, r24
    2006:	21 f0       	breq	.+8      	; 0x2010 <u8g_com_arduino_ssd_i2c_fn+0xd0>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2008:	e1 10       	cpse	r14, r1
    200a:	05 c0       	rjmp	.+10     	; 0x2016 <u8g_com_arduino_ssd_i2c_fn+0xd6>
      }
      */
#endif
      break;
  }
  return 1;
    200c:	c1 e0       	ldi	r28, 0x01	; 1
    200e:	23 c0       	rjmp	.+70     	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    2010:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <u8g_i2c_stop>
    2014:	20 c0       	rjmp	.+64     	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
    2016:	ea 94       	dec	r14
    2018:	f1 2c       	mov	r15, r1
    201a:	ff ef       	ldi	r31, 0xFF	; 255
    201c:	ef 1a       	sub	r14, r31
    201e:	ff 0a       	sbc	r15, r31
    2020:	e0 0e       	add	r14, r16
    2022:	f1 1e       	adc	r15, r17
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    2024:	f8 01       	movw	r30, r16
    2026:	84 91       	lpm	r24, Z
    2028:	0e 94 c7 10 	call	0x218e	; 0x218e <u8g_i2c_send_byte>
    202c:	c8 2f       	mov	r28, r24
    202e:	88 23       	and	r24, r24
    2030:	91 f0       	breq	.+36     	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
	    return 0;
          ptr++;
    2032:	0f 5f       	subi	r16, 0xFF	; 255
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2036:	0e 15       	cp	r16, r14
    2038:	1f 05       	cpc	r17, r15
    203a:	a1 f7       	brne	.-24     	; 0x2024 <u8g_com_arduino_ssd_i2c_fn+0xe4>
      }
      */
#endif
      break;
  }
  return 1;
    203c:	c1 e0       	ldi	r28, 0x01	; 1
    203e:	0b c0       	rjmp	.+22     	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    2040:	fc 01       	movw	r30, r24
    2042:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    2044:	21 e0       	ldi	r18, 0x01	; 1
    2046:	23 a7       	std	Z+43, r18	; 0x2b
      }
      */
#endif
      break;
  }
  return 1;
    2048:	c1 e0       	ldi	r28, 0x01	; 1
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
  }
  return 1;
    204c:	c1 e0       	ldi	r28, 0x01	; 1
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
    2050:	c1 e0       	ldi	r28, 0x01	; 1
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <u8g_com_arduino_ssd_i2c_fn+0x116>
    2054:	c1 e0       	ldi	r28, 0x01	; 1
}
    2056:	8c 2f       	mov	r24, r28
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	08 95       	ret

00002068 <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    2068:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <u8g_i2c_err_code>
    206c:	91 11       	cpse	r25, r1
    206e:	04 c0       	rjmp	.+8      	; 0x2078 <u8g_i2c_set_error+0x10>
    2070:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <u8g_i2c_err_code>
    2074:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
    2078:	08 95       	ret

0000207a <u8g_i2c_clear_error>:
    207a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <u8g_i2c_err_code>
    207e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
    2082:	08 95       	ret

00002084 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    2084:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <u8g_i2c_opt>
  TWSR = 0;
    2088:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    208c:	84 ff       	sbrs	r24, 4
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <u8g_i2c_init+0x14>
  {
    TWBR = F_CPU/(2*400000)-8;
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2096:	03 c0       	rjmp	.+6      	; 0x209e <u8g_i2c_init+0x1a>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    2098:	80 e2       	ldi	r24, 0x20	; 32
    209a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    209e:	0e 94 3d 10 	call	0x207a	; 0x207a <u8g_i2c_clear_error>
    20a2:	08 95       	ret

000020a4 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <u8g_i2c_wait+0x8>
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    20b0:	20 ed       	ldi	r18, 0xD0	; 208
    20b2:	37 e0       	ldi	r19, 0x07	; 7
    20b4:	3a 83       	std	Y+2, r19	; 0x02
    20b6:	29 83       	std	Y+1, r18	; 0x01
  while( !(TWCR & mask) )
    20b8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20bc:	98 23       	and	r25, r24
    20be:	01 f5       	brne	.+64     	; 0x2100 <u8g_i2c_wait+0x5c>
  {
      if ( cnt == 0 )
    20c0:	29 81       	ldd	r18, Y+1	; 0x01
    20c2:	3a 81       	ldd	r19, Y+2	; 0x02
    20c4:	23 2b       	or	r18, r19
    20c6:	39 f0       	breq	.+14     	; 0x20d6 <u8g_i2c_wait+0x32>
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    20c8:	ec eb       	ldi	r30, 0xBC	; 188
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	0e c0       	rjmp	.+28     	; 0x20ea <u8g_i2c_wait+0x46>
  {
      if ( cnt == 0 )
    20ce:	29 81       	ldd	r18, Y+1	; 0x01
    20d0:	3a 81       	ldd	r19, Y+2	; 0x02
    20d2:	23 2b       	or	r18, r19
    20d4:	51 f4       	brne	.+20     	; 0x20ea <u8g_i2c_wait+0x46>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    20d6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <u8g_i2c_opt>
    20da:	18 2f       	mov	r17, r24
    20dc:	12 70       	andi	r17, 0x02	; 2
    20de:	81 fd       	sbrc	r24, 1
    20e0:	11 c0       	rjmp	.+34     	; 0x2104 <u8g_i2c_wait+0x60>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	0e 94 34 10 	call	0x2068	; 0x2068 <u8g_i2c_set_error>
	  return 0; /* error */
    20e8:	0e c0       	rjmp	.+28     	; 0x2106 <u8g_i2c_wait+0x62>
	}
      }
      cnt--;
    20ea:	29 81       	ldd	r18, Y+1	; 0x01
    20ec:	3a 81       	ldd	r19, Y+2	; 0x02
    20ee:	21 50       	subi	r18, 0x01	; 1
    20f0:	31 09       	sbc	r19, r1
    20f2:	3a 83       	std	Y+2, r19	; 0x02
    20f4:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    20f6:	90 81       	ld	r25, Z
    20f8:	98 23       	and	r25, r24
    20fa:	49 f3       	breq	.-46     	; 0x20ce <u8g_i2c_wait+0x2a>
	  return 0; /* error */
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
    20fc:	11 e0       	ldi	r17, 0x01	; 1
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <u8g_i2c_wait+0x62>
    2100:	11 e0       	ldi	r17, 0x01	; 1
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <u8g_i2c_wait+0x62>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    2104:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    2106:	81 2f       	mov	r24, r17
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	08 95       	ret

00002114 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	d8 2f       	mov	r29, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    211a:	94 ea       	ldi	r25, 0xA4	; 164
    211c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    2120:	61 e0       	ldi	r22, 0x01	; 1
    2122:	80 e8       	ldi	r24, 0x80	; 128
    2124:	0e 94 52 10 	call	0x20a4	; 0x20a4 <u8g_i2c_wait>
    2128:	c8 2f       	mov	r28, r24
    212a:	88 23       	and	r24, r24
    212c:	61 f1       	breq	.+88     	; 0x2186 <u8g_i2c_start+0x72>
    return 0;
  
  status = TW_STATUS;
    212e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2132:	98 7f       	andi	r25, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    2134:	98 30       	cpi	r25, 0x08	; 8
    2136:	41 f0       	breq	.+16     	; 0x2148 <u8g_i2c_start+0x34>
    2138:	90 31       	cpi	r25, 0x10	; 16
    213a:	31 f0       	breq	.+12     	; 0x2148 <u8g_i2c_start+0x34>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	0e 94 34 10 	call	0x2068	; 0x2068 <u8g_i2c_set_error>
    return 0;
    2144:	c0 e0       	ldi	r28, 0x00	; 0
    2146:	1f c0       	rjmp	.+62     	; 0x2186 <u8g_i2c_start+0x72>
  }

  /* set slave address */  
  TWDR = sla;
    2148:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    214c:	84 e8       	ldi	r24, 0x84	; 132
    214e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	80 e8       	ldi	r24, 0x80	; 128
    2156:	0e 94 52 10 	call	0x20a4	; 0x20a4 <u8g_i2c_wait>
    215a:	c8 2f       	mov	r28, r24
    215c:	88 23       	and	r24, r24
    215e:	99 f0       	breq	.+38     	; 0x2186 <u8g_i2c_start+0x72>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2160:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <u8g_i2c_opt>
    2164:	c8 2f       	mov	r28, r24
    2166:	c2 70       	andi	r28, 0x02	; 2
    2168:	81 fd       	sbrc	r24, 1
    216a:	0a c0       	rjmp	.+20     	; 0x2180 <u8g_i2c_start+0x6c>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    216c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2170:	88 7f       	andi	r24, 0xF8	; 248
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    2172:	88 31       	cpi	r24, 0x18	; 24
    2174:	39 f0       	breq	.+14     	; 0x2184 <u8g_i2c_start+0x70>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    2176:	62 e0       	ldi	r22, 0x02	; 2
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	0e 94 34 10 	call	0x2068	; 0x2068 <u8g_i2c_set_error>
      return 0;
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <u8g_i2c_start+0x72>
    }
  }

   return 1;
    2180:	c1 e0       	ldi	r28, 0x01	; 1
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <u8g_i2c_start+0x72>
    2184:	c1 e0       	ldi	r28, 0x01	; 1
}
    2186:	8c 2f       	mov	r24, r28
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	08 95       	ret

0000218e <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    218e:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    2190:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    2194:	84 e8       	ldi	r24, 0x84	; 132
    2196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    219a:	63 e0       	ldi	r22, 0x03	; 3
    219c:	80 e8       	ldi	r24, 0x80	; 128
    219e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <u8g_i2c_wait>
    21a2:	c8 2f       	mov	r28, r24
    21a4:	88 23       	and	r24, r24
    21a6:	99 f0       	breq	.+38     	; 0x21ce <u8g_i2c_send_byte+0x40>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    21a8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <u8g_i2c_opt>
    21ac:	c8 2f       	mov	r28, r24
    21ae:	c2 70       	andi	r28, 0x02	; 2
    21b0:	81 fd       	sbrc	r24, 1
    21b2:	0a c0       	rjmp	.+20     	; 0x21c8 <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    21b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    21b8:	88 7f       	andi	r24, 0xF8	; 248
    if ( status != TW_MT_DATA_ACK )
    21ba:	88 32       	cpi	r24, 0x28	; 40
    21bc:	39 f0       	breq	.+14     	; 0x21cc <u8g_i2c_send_byte+0x3e>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    21be:	63 e0       	ldi	r22, 0x03	; 3
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	0e 94 34 10 	call	0x2068	; 0x2068 <u8g_i2c_set_error>
      return 0;
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <u8g_i2c_send_byte+0x40>
    }
  }

  return 1;  
    21c8:	c1 e0       	ldi	r28, 0x01	; 1
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <u8g_i2c_send_byte+0x40>
    21cc:	c1 e0       	ldi	r28, 0x01	; 1
}
    21ce:	8c 2f       	mov	r24, r28
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    21d4:	84 e9       	ldi	r24, 0x94	; 148
    21d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    21da:	64 e0       	ldi	r22, 0x04	; 4
    21dc:	80 e1       	ldi	r24, 0x10	; 16
    21de:	0e 94 52 10 	call	0x20a4	; 0x20a4 <u8g_i2c_wait>
    21e2:	08 95       	ret

000021e4 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	39 f0       	breq	.+14     	; 0x21f6 <u8g_Delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e8:	2e ec       	ldi	r18, 0xCE	; 206
    21ea:	37 e0       	ldi	r19, 0x07	; 7
    21ec:	f9 01       	movw	r30, r18
    21ee:	31 97       	sbiw	r30, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    21f2:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    21f4:	d9 f7       	brne	.-10     	; 0x21ec <u8g_Delay+0x8>
    21f6:	08 95       	ret

000021f8 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	7c 01       	movw	r14, r24
    220c:	8b 01       	movw	r16, r22
    220e:	c4 2f       	mov	r28, r20
    2210:	69 01       	movw	r12, r18
  switch(msg)
    2212:	40 31       	cpi	r20, 0x10	; 16
    2214:	99 f1       	breq	.+102    	; 0x227c <u8g_dev_ssd1306_128x64_fn+0x84>
    2216:	18 f4       	brcc	.+6      	; 0x221e <u8g_dev_ssd1306_128x64_fn+0x26>
    2218:	4a 30       	cpi	r20, 0x0A	; 10
    221a:	31 f0       	breq	.+12     	; 0x2228 <u8g_dev_ssd1306_128x64_fn+0x30>
    221c:	3b c0       	rjmp	.+118    	; 0x2294 <u8g_dev_ssd1306_128x64_fn+0x9c>
    221e:	41 31       	cpi	r20, 0x11	; 17
    2220:	99 f1       	breq	.+102    	; 0x2288 <u8g_dev_ssd1306_128x64_fn+0x90>
    2222:	45 31       	cpi	r20, 0x15	; 21
    2224:	59 f0       	breq	.+22     	; 0x223c <u8g_dev_ssd1306_128x64_fn+0x44>
    2226:	36 c0       	rjmp	.+108    	; 0x2294 <u8g_dev_ssd1306_128x64_fn+0x9c>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    2228:	42 e0       	ldi	r20, 0x02	; 2
    222a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    222e:	4c ee       	ldi	r20, 0xEC	; 236
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	b8 01       	movw	r22, r16
    2234:	c7 01       	movw	r24, r14
    2236:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <u8g_WriteEscSeqP>
      break;
    223a:	2c c0       	rjmp	.+88     	; 0x2294 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    223c:	fb 01       	movw	r30, r22
    223e:	a2 80       	ldd	r10, Z+2	; 0x02
    2240:	b3 80       	ldd	r11, Z+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    2242:	44 ee       	ldi	r20, 0xE4	; 228
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    224a:	f5 01       	movw	r30, r10
    224c:	44 81       	ldd	r20, Z+4	; 0x04
    224e:	40 6b       	ori	r20, 0xB0	; 176
    2250:	b8 01       	movw	r22, r16
    2252:	c7 01       	movw	r24, r14
    2254:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	b8 01       	movw	r22, r16
    225c:	c7 01       	movw	r24, r14
    225e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    2262:	a8 01       	movw	r20, r16
    2264:	b7 01       	movw	r22, r14
    2266:	c5 01       	movw	r24, r10
    2268:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <u8g_pb_WriteBuffer>
    226c:	88 23       	and	r24, r24
    226e:	c1 f0       	breq	.+48     	; 0x22a0 <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	b8 01       	movw	r22, r16
    2274:	c7 01       	movw	r24, r14
    2276:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <u8g_SetChipSelect>
      }
      break;
    227a:	0c c0       	rjmp	.+24     	; 0x2294 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    227c:	4b ed       	ldi	r20, 0xDB	; 219
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <u8g_WriteEscSeqP>
      return 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	0c c0       	rjmp	.+24     	; 0x22a0 <u8g_dev_ssd1306_128x64_fn+0xa8>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    2288:	40 ed       	ldi	r20, 0xD0	; 208
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <u8g_WriteEscSeqP>
      return 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	06 c0       	rjmp	.+12     	; 0x22a0 <u8g_dev_ssd1306_128x64_fn+0xa8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    2294:	96 01       	movw	r18, r12
    2296:	4c 2f       	mov	r20, r28
    2298:	b8 01       	movw	r22, r16
    229a:	c7 01       	movw	r24, r14
    229c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <u8g_dev_pb8v1_base_fn>
}
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	df 90       	pop	r13
    22ac:	cf 90       	pop	r12
    22ae:	bf 90       	pop	r11
    22b0:	af 90       	pop	r10
    22b2:	08 95       	ret

000022b4 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    22b4:	fc 01       	movw	r30, r24
    22b6:	e6 0f       	add	r30, r22
    22b8:	f1 1d       	adc	r31, r1
    22ba:	84 91       	lpm	r24, Z
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	98 2f       	mov	r25, r24
    22c0:	88 27       	eor	r24, r24
    22c2:	31 96       	adiw	r30, 0x01	; 1
    22c4:	e4 91       	lpm	r30, Z
    22c6:	8e 0f       	add	r24, r30
    22c8:	91 1d       	adc	r25, r1
    22ca:	08 95       	ret

000022cc <u8g_font_GetFormat>:
    22cc:	fc 01       	movw	r30, r24
    22ce:	84 91       	lpm	r24, Z
    22d0:	08 95       	ret

000022d2 <u8g_font_GetFontGlyphStructureSize>:
    22d2:	0e 94 66 11 	call	0x22cc	; 0x22cc <u8g_font_GetFormat>
    22d6:	88 23       	and	r24, r24
    22d8:	21 f0       	breq	.+8      	; 0x22e2 <u8g_font_GetFontGlyphStructureSize+0x10>
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	11 f0       	breq	.+4      	; 0x22e2 <u8g_font_GetFontGlyphStructureSize+0x10>
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	08 95       	ret
    22e2:	86 e0       	ldi	r24, 0x06	; 6
    22e4:	08 95       	ret

000022e6 <u8g_font_calc_vref_font>:
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	08 95       	ret

000022ea <u8g_font_GetEncoding65Pos>:
    22ea:	66 e0       	ldi	r22, 0x06	; 6
    22ec:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <u8g_font_get_word>
    22f0:	08 95       	ret

000022f2 <u8g_font_GetEncoding97Pos>:
    22f2:	68 e0       	ldi	r22, 0x08	; 8
    22f4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <u8g_font_get_word>
    22f8:	08 95       	ret

000022fa <u8g_font_GetFontStartEncoding>:
    22fa:	0a 96       	adiw	r24, 0x0a	; 10
    22fc:	fc 01       	movw	r30, r24
    22fe:	84 91       	lpm	r24, Z
    2300:	08 95       	ret

00002302 <u8g_font_GetFontEndEncoding>:
    2302:	0b 96       	adiw	r24, 0x0b	; 11
    2304:	fc 01       	movw	r30, r24
    2306:	84 91       	lpm	r24, Z
    2308:	08 95       	ret

0000230a <u8g_GetGlyph>:
    230a:	af 92       	push	r10
    230c:	bf 92       	push	r11
    230e:	cf 92       	push	r12
    2310:	df 92       	push	r13
    2312:	ef 92       	push	r14
    2314:	ff 92       	push	r15
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	7c 01       	movw	r14, r24
    2320:	b6 2e       	mov	r11, r22
    2322:	dc 01       	movw	r26, r24
    2324:	14 96       	adiw	r26, 0x04	; 4
    2326:	cd 91       	ld	r28, X+
    2328:	dc 91       	ld	r29, X
    232a:	15 97       	sbiw	r26, 0x05	; 5
    232c:	ce 01       	movw	r24, r28
    232e:	0e 94 66 11 	call	0x22cc	; 0x22cc <u8g_font_GetFormat>
    2332:	18 2f       	mov	r17, r24
    2334:	f7 01       	movw	r30, r14
    2336:	84 81       	ldd	r24, Z+4	; 0x04
    2338:	95 81       	ldd	r25, Z+5	; 0x05
    233a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <u8g_font_GetFontGlyphStructureSize>
    233e:	d8 2e       	mov	r13, r24
    2340:	11 30       	cpi	r17, 0x01	; 1
    2342:	29 f4       	brne	.+10     	; 0x234e <u8g_GetGlyph+0x44>
    2344:	0f 2e       	mov	r0, r31
    2346:	ff e0       	ldi	r31, 0x0F	; 15
    2348:	af 2e       	mov	r10, r31
    234a:	f0 2d       	mov	r31, r0
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <u8g_GetGlyph+0x48>
    234e:	aa 24       	eor	r10, r10
    2350:	aa 94       	dec	r10
    2352:	d7 01       	movw	r26, r14
    2354:	14 96       	adiw	r26, 0x04	; 4
    2356:	8d 91       	ld	r24, X+
    2358:	9c 91       	ld	r25, X
    235a:	15 97       	sbiw	r26, 0x05	; 5
    235c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <u8g_font_GetFontStartEncoding>
    2360:	18 2f       	mov	r17, r24
    2362:	f7 01       	movw	r30, r14
    2364:	84 81       	ldd	r24, Z+4	; 0x04
    2366:	95 81       	ldd	r25, Z+5	; 0x05
    2368:	0e 94 81 11 	call	0x2302	; 0x2302 <u8g_font_GetFontEndEncoding>
    236c:	08 2f       	mov	r16, r24
    236e:	d7 01       	movw	r26, r14
    2370:	14 96       	adiw	r26, 0x04	; 4
    2372:	8d 91       	ld	r24, X+
    2374:	9c 91       	ld	r25, X
    2376:	15 97       	sbiw	r26, 0x05	; 5
    2378:	0e 94 79 11 	call	0x22f2	; 0x22f2 <u8g_font_GetEncoding97Pos>
    237c:	b0 e6       	ldi	r27, 0x60	; 96
    237e:	bb 15       	cp	r27, r11
    2380:	30 f4       	brcc	.+12     	; 0x238e <u8g_GetGlyph+0x84>
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	21 f0       	breq	.+8      	; 0x238e <u8g_GetGlyph+0x84>
    2386:	c8 0f       	add	r28, r24
    2388:	d9 1f       	adc	r29, r25
    238a:	11 e6       	ldi	r17, 0x61	; 97
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <u8g_GetGlyph+0xa2>
    238e:	f7 01       	movw	r30, r14
    2390:	84 81       	ldd	r24, Z+4	; 0x04
    2392:	95 81       	ldd	r25, Z+5	; 0x05
    2394:	0e 94 75 11 	call	0x22ea	; 0x22ea <u8g_font_GetEncoding65Pos>
    2398:	f0 e4       	ldi	r31, 0x40	; 64
    239a:	fb 15       	cp	r31, r11
    239c:	30 f4       	brcc	.+12     	; 0x23aa <u8g_GetGlyph+0xa0>
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	21 f0       	breq	.+8      	; 0x23aa <u8g_GetGlyph+0xa0>
    23a2:	c8 0f       	add	r28, r24
    23a4:	d9 1f       	adc	r29, r25
    23a6:	11 e4       	ldi	r17, 0x41	; 65
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <u8g_GetGlyph+0xa2>
    23aa:	61 96       	adiw	r28, 0x11	; 17
    23ac:	0b 15       	cp	r16, r11
    23ae:	90 f4       	brcc	.+36     	; 0x23d4 <u8g_GetGlyph+0xca>
    23b0:	d7 01       	movw	r26, r14
    23b2:	50 96       	adiw	r26, 0x10	; 16
    23b4:	1c 92       	st	X, r1
    23b6:	50 97       	sbiw	r26, 0x10	; 16
    23b8:	53 96       	adiw	r26, 0x13	; 19
    23ba:	1c 92       	st	X, r1
    23bc:	53 97       	sbiw	r26, 0x13	; 19
    23be:	54 96       	adiw	r26, 0x14	; 20
    23c0:	1c 92       	st	X, r1
    23c2:	54 97       	sbiw	r26, 0x14	; 20
    23c4:	51 96       	adiw	r26, 0x11	; 17
    23c6:	1c 92       	st	X, r1
    23c8:	51 97       	sbiw	r26, 0x11	; 17
    23ca:	52 96       	adiw	r26, 0x12	; 18
    23cc:	1c 92       	st	X, r1
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	75 c0       	rjmp	.+234    	; 0x24be <u8g_GetGlyph+0x1b4>
    23d4:	01 17       	cp	r16, r17
    23d6:	08 f4       	brcc	.+2      	; 0x23da <u8g_GetGlyph+0xd0>
    23d8:	6a c0       	rjmp	.+212    	; 0x24ae <u8g_GetGlyph+0x1a4>
    23da:	2d 2d       	mov	r18, r13
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	6e 01       	movw	r12, r28
    23e0:	fe 01       	movw	r30, r28
    23e2:	94 91       	lpm	r25, Z
    23e4:	9f 3f       	cpi	r25, 0xFF	; 255
    23e6:	11 f4       	brne	.+4      	; 0x23ec <u8g_GetGlyph+0xe2>
    23e8:	21 96       	adiw	r28, 0x01	; 1
    23ea:	5d c0       	rjmp	.+186    	; 0x24a6 <u8g_GetGlyph+0x19c>
    23ec:	1b 11       	cpse	r17, r11
    23ee:	52 c0       	rjmp	.+164    	; 0x2494 <u8g_GetGlyph+0x18a>
    23f0:	8e 01       	movw	r16, r28
    23f2:	d7 01       	movw	r26, r14
    23f4:	14 96       	adiw	r26, 0x04	; 4
    23f6:	8d 91       	ld	r24, X+
    23f8:	9c 91       	ld	r25, X
    23fa:	15 97       	sbiw	r26, 0x05	; 5
    23fc:	0e 94 66 11 	call	0x22cc	; 0x22cc <u8g_font_GetFormat>
    2400:	88 23       	and	r24, r24
    2402:	11 f0       	breq	.+4      	; 0x2408 <u8g_GetGlyph+0xfe>
    2404:	82 30       	cpi	r24, 0x02	; 2
    2406:	f1 f4       	brne	.+60     	; 0x2444 <u8g_GetGlyph+0x13a>
    2408:	f6 01       	movw	r30, r12
    240a:	c4 90       	lpm	r12, Z
    240c:	d7 01       	movw	r26, r14
    240e:	53 96       	adiw	r26, 0x13	; 19
    2410:	cc 92       	st	X, r12
    2412:	53 97       	sbiw	r26, 0x13	; 19
    2414:	f8 01       	movw	r30, r16
    2416:	31 96       	adiw	r30, 0x01	; 1
    2418:	e4 91       	lpm	r30, Z
    241a:	54 96       	adiw	r26, 0x14	; 20
    241c:	ec 93       	st	X, r30
    241e:	54 97       	sbiw	r26, 0x14	; 20
    2420:	f8 01       	movw	r30, r16
    2422:	33 96       	adiw	r30, 0x03	; 3
    2424:	e4 91       	lpm	r30, Z
    2426:	50 96       	adiw	r26, 0x10	; 16
    2428:	ec 93       	st	X, r30
    242a:	50 97       	sbiw	r26, 0x10	; 16
    242c:	f8 01       	movw	r30, r16
    242e:	34 96       	adiw	r30, 0x04	; 4
    2430:	e4 91       	lpm	r30, Z
    2432:	51 96       	adiw	r26, 0x11	; 17
    2434:	ec 93       	st	X, r30
    2436:	51 97       	sbiw	r26, 0x11	; 17
    2438:	f8 01       	movw	r30, r16
    243a:	35 96       	adiw	r30, 0x05	; 5
    243c:	e4 91       	lpm	r30, Z
    243e:	52 96       	adiw	r26, 0x12	; 18
    2440:	ec 93       	st	X, r30
    2442:	25 c0       	rjmp	.+74     	; 0x248e <u8g_GetGlyph+0x184>
    2444:	fe 01       	movw	r30, r28
    2446:	84 91       	lpm	r24, Z
    2448:	98 2f       	mov	r25, r24
    244a:	9f 70       	andi	r25, 0x0F	; 15
    244c:	92 50       	subi	r25, 0x02	; 2
    244e:	d7 01       	movw	r26, r14
    2450:	52 96       	adiw	r26, 0x12	; 18
    2452:	9c 93       	st	X, r25
    2454:	52 97       	sbiw	r26, 0x12	; 18
    2456:	c8 2e       	mov	r12, r24
    2458:	c6 94       	lsr	r12
    245a:	c6 94       	lsr	r12
    245c:	c6 94       	lsr	r12
    245e:	c6 94       	lsr	r12
    2460:	51 96       	adiw	r26, 0x11	; 17
    2462:	cc 92       	st	X, r12
    2464:	51 97       	sbiw	r26, 0x11	; 17
    2466:	fe 01       	movw	r30, r28
    2468:	31 96       	adiw	r30, 0x01	; 1
    246a:	e4 91       	lpm	r30, Z
    246c:	8e 2f       	mov	r24, r30
    246e:	8f 70       	andi	r24, 0x0F	; 15
    2470:	54 96       	adiw	r26, 0x14	; 20
    2472:	8c 93       	st	X, r24
    2474:	54 97       	sbiw	r26, 0x14	; 20
    2476:	e2 95       	swap	r30
    2478:	ef 70       	andi	r30, 0x0F	; 15
    247a:	53 96       	adiw	r26, 0x13	; 19
    247c:	ec 93       	st	X, r30
    247e:	53 97       	sbiw	r26, 0x13	; 19
    2480:	fe 01       	movw	r30, r28
    2482:	32 96       	adiw	r30, 0x02	; 2
    2484:	e4 91       	lpm	r30, Z
    2486:	e2 95       	swap	r30
    2488:	ef 70       	andi	r30, 0x0F	; 15
    248a:	50 96       	adiw	r26, 0x10	; 16
    248c:	ec 93       	st	X, r30
    248e:	8c 2f       	mov	r24, r28
    2490:	9d 2f       	mov	r25, r29
    2492:	15 c0       	rjmp	.+42     	; 0x24be <u8g_GetGlyph+0x1b4>
    2494:	fe 01       	movw	r30, r28
    2496:	32 96       	adiw	r30, 0x02	; 2
    2498:	e4 91       	lpm	r30, Z
    249a:	ea 21       	and	r30, r10
    249c:	c9 01       	movw	r24, r18
    249e:	8e 0f       	add	r24, r30
    24a0:	91 1d       	adc	r25, r1
    24a2:	c8 0f       	add	r28, r24
    24a4:	d9 1f       	adc	r29, r25
    24a6:	10 17       	cp	r17, r16
    24a8:	11 f0       	breq	.+4      	; 0x24ae <u8g_GetGlyph+0x1a4>
    24aa:	1f 5f       	subi	r17, 0xFF	; 255
    24ac:	98 cf       	rjmp	.-208    	; 0x23de <u8g_GetGlyph+0xd4>
    24ae:	f7 01       	movw	r30, r14
    24b0:	10 8a       	std	Z+16, r1	; 0x10
    24b2:	13 8a       	std	Z+19, r1	; 0x13
    24b4:	14 8a       	std	Z+20, r1	; 0x14
    24b6:	11 8a       	std	Z+17, r1	; 0x11
    24b8:	12 8a       	std	Z+18, r1	; 0x12
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
    24ce:	bf 90       	pop	r11
    24d0:	af 90       	pop	r10
    24d2:	08 95       	ret

000024d4 <u8g_draw_glyph>:
    24d4:	6f 92       	push	r6
    24d6:	7f 92       	push	r7
    24d8:	8f 92       	push	r8
    24da:	9f 92       	push	r9
    24dc:	af 92       	push	r10
    24de:	bf 92       	push	r11
    24e0:	cf 92       	push	r12
    24e2:	df 92       	push	r13
    24e4:	ef 92       	push	r14
    24e6:	ff 92       	push	r15
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	5c 01       	movw	r10, r24
    24f2:	16 2f       	mov	r17, r22
    24f4:	64 2e       	mov	r6, r20
    24f6:	62 2f       	mov	r22, r18
    24f8:	0e 94 85 11 	call	0x230a	; 0x230a <u8g_GetGlyph>
    24fc:	6c 01       	movw	r12, r24
    24fe:	89 2b       	or	r24, r25
    2500:	09 f4       	brne	.+2      	; 0x2504 <u8g_draw_glyph+0x30>
    2502:	48 c0       	rjmp	.+144    	; 0x2594 <u8g_draw_glyph+0xc0>
    2504:	f5 01       	movw	r30, r10
    2506:	84 81       	ldd	r24, Z+4	; 0x04
    2508:	95 81       	ldd	r25, Z+5	; 0x05
    250a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <u8g_font_GetFontGlyphStructureSize>
    250e:	98 2e       	mov	r9, r24
    2510:	f5 01       	movw	r30, r10
    2512:	d3 89       	ldd	r29, Z+19	; 0x13
    2514:	c4 89       	ldd	r28, Z+20	; 0x14
    2516:	71 88       	ldd	r7, Z+17	; 0x11
    2518:	71 0e       	add	r7, r17
    251a:	92 89       	ldd	r25, Z+18	; 0x12
    251c:	69 1a       	sub	r6, r25
    251e:	f6 2c       	mov	r15, r6
    2520:	fc 1a       	sub	r15, r28
    2522:	0c 2f       	mov	r16, r28
    2524:	2d 2f       	mov	r18, r29
    2526:	4f 2d       	mov	r20, r15
    2528:	67 2d       	mov	r22, r7
    252a:	c5 01       	movw	r24, r10
    252c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <u8g_IsBBXIntersection>
    2530:	81 11       	cpse	r24, r1
    2532:	03 c0       	rjmp	.+6      	; 0x253a <u8g_draw_glyph+0x66>
    2534:	f5 01       	movw	r30, r10
    2536:	80 89       	ldd	r24, Z+16	; 0x10
    2538:	2e c0       	rjmp	.+92     	; 0x2596 <u8g_draw_glyph+0xc2>
    253a:	d9 5f       	subi	r29, 0xF9	; 249
    253c:	ed 2e       	mov	r14, r29
    253e:	e6 94       	lsr	r14
    2540:	e6 94       	lsr	r14
    2542:	e6 94       	lsr	r14
    2544:	cc 23       	and	r28, r28
    2546:	19 f1       	breq	.+70     	; 0x258e <u8g_draw_glyph+0xba>
    2548:	e6 01       	movw	r28, r12
    254a:	c9 0d       	add	r28, r9
    254c:	d1 1d       	adc	r29, r1
    254e:	88 24       	eor	r8, r8
    2550:	8a 94       	dec	r8
    2552:	8e 0c       	add	r8, r14
    2554:	91 2c       	mov	r9, r1
    2556:	ff ef       	ldi	r31, 0xFF	; 255
    2558:	8f 1a       	sub	r8, r31
    255a:	9f 0a       	sbc	r9, r31
    255c:	11 c0       	rjmp	.+34     	; 0x2580 <u8g_draw_glyph+0xac>
    255e:	fe 01       	movw	r30, r28
    2560:	04 91       	lpm	r16, Z
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	4f 2d       	mov	r20, r15
    2566:	61 2f       	mov	r22, r17
    2568:	c5 01       	movw	r24, r10
    256a:	0e 94 9f 14 	call	0x293e	; 0x293e <u8g_Draw8Pixel>
    256e:	21 96       	adiw	r28, 0x01	; 1
    2570:	18 5f       	subi	r17, 0xF8	; 248
    2572:	cc 15       	cp	r28, r12
    2574:	dd 05       	cpc	r29, r13
    2576:	99 f7       	brne	.-26     	; 0x255e <u8g_draw_glyph+0x8a>
    2578:	e6 01       	movw	r28, r12
    257a:	f3 94       	inc	r15
    257c:	f6 14       	cp	r15, r6
    257e:	39 f0       	breq	.+14     	; 0x258e <u8g_draw_glyph+0xba>
    2580:	ee 20       	and	r14, r14
    2582:	d9 f3       	breq	.-10     	; 0x257a <u8g_draw_glyph+0xa6>
    2584:	6e 01       	movw	r12, r28
    2586:	c8 0c       	add	r12, r8
    2588:	d9 1c       	adc	r13, r9
    258a:	17 2d       	mov	r17, r7
    258c:	e8 cf       	rjmp	.-48     	; 0x255e <u8g_draw_glyph+0x8a>
    258e:	f5 01       	movw	r30, r10
    2590:	80 89       	ldd	r24, Z+16	; 0x10
    2592:	01 c0       	rjmp	.+2      	; 0x2596 <u8g_draw_glyph+0xc2>
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	ef 90       	pop	r14
    25a2:	df 90       	pop	r13
    25a4:	cf 90       	pop	r12
    25a6:	bf 90       	pop	r11
    25a8:	af 90       	pop	r10
    25aa:	9f 90       	pop	r9
    25ac:	8f 90       	pop	r8
    25ae:	7f 90       	pop	r7
    25b0:	6f 90       	pop	r6
    25b2:	08 95       	ret

000025b4 <u8g_DrawStr>:
    25b4:	cf 92       	push	r12
    25b6:	df 92       	push	r13
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	6c 01       	movw	r12, r24
    25c4:	c6 2f       	mov	r28, r22
    25c6:	f4 2e       	mov	r15, r20
    25c8:	89 01       	movw	r16, r18
    25ca:	dc 01       	movw	r26, r24
    25cc:	55 96       	adiw	r26, 0x15	; 21
    25ce:	ed 91       	ld	r30, X+
    25d0:	fc 91       	ld	r31, X
    25d2:	56 97       	sbiw	r26, 0x16	; 22
    25d4:	09 95       	icall
    25d6:	f8 0e       	add	r15, r24
    25d8:	f8 01       	movw	r30, r16
    25da:	20 81       	ld	r18, Z
    25dc:	22 23       	and	r18, r18
    25de:	81 f0       	breq	.+32     	; 0x2600 <u8g_DrawStr+0x4c>
    25e0:	0f 5f       	subi	r16, 0xFF	; 255
    25e2:	1f 4f       	sbci	r17, 0xFF	; 255
    25e4:	d0 e0       	ldi	r29, 0x00	; 0
    25e6:	4f 2d       	mov	r20, r15
    25e8:	6c 2f       	mov	r22, r28
    25ea:	c6 01       	movw	r24, r12
    25ec:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <u8g_draw_glyph>
    25f0:	c8 0f       	add	r28, r24
    25f2:	d8 0f       	add	r29, r24
    25f4:	d8 01       	movw	r26, r16
    25f6:	2d 91       	ld	r18, X+
    25f8:	8d 01       	movw	r16, r26
    25fa:	21 11       	cpse	r18, r1
    25fc:	f4 cf       	rjmp	.-24     	; 0x25e6 <u8g_DrawStr+0x32>
    25fe:	01 c0       	rjmp	.+2      	; 0x2602 <u8g_DrawStr+0x4e>
    2600:	d0 e0       	ldi	r29, 0x00	; 0
    2602:	8d 2f       	mov	r24, r29
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	ff 90       	pop	r15
    260e:	df 90       	pop	r13
    2610:	cf 90       	pop	r12
    2612:	08 95       	ret

00002614 <u8g_UpdateRefHeight>:
    2614:	dc 01       	movw	r26, r24
    2616:	14 96       	adiw	r26, 0x04	; 4
    2618:	8d 91       	ld	r24, X+
    261a:	9c 91       	ld	r25, X
    261c:	15 97       	sbiw	r26, 0x05	; 5
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	09 f4       	brne	.+2      	; 0x2624 <u8g_UpdateRefHeight+0x10>
    2622:	4d c0       	rjmp	.+154    	; 0x26be <u8g_UpdateRefHeight+0xaa>
    2624:	57 96       	adiw	r26, 0x17	; 23
    2626:	2c 91       	ld	r18, X
    2628:	57 97       	sbiw	r26, 0x17	; 23
    262a:	21 11       	cpse	r18, r1
    262c:	0d c0       	rjmp	.+26     	; 0x2648 <u8g_UpdateRefHeight+0x34>
    262e:	fc 01       	movw	r30, r24
    2630:	35 96       	adiw	r30, 0x05	; 5
    2632:	e4 91       	lpm	r30, Z
    2634:	58 96       	adiw	r26, 0x18	; 24
    2636:	ec 93       	st	X, r30
    2638:	58 97       	sbiw	r26, 0x18	; 24
    263a:	fc 01       	movw	r30, r24
    263c:	3c 96       	adiw	r30, 0x0c	; 12
    263e:	e4 91       	lpm	r30, Z
    2640:	59 96       	adiw	r26, 0x19	; 25
    2642:	ec 93       	st	X, r30
    2644:	59 97       	sbiw	r26, 0x19	; 25
    2646:	1b c0       	rjmp	.+54     	; 0x267e <u8g_UpdateRefHeight+0x6a>
    2648:	21 30       	cpi	r18, 0x01	; 1
    264a:	69 f4       	brne	.+26     	; 0x2666 <u8g_UpdateRefHeight+0x52>
    264c:	fc 01       	movw	r30, r24
    264e:	3f 96       	adiw	r30, 0x0f	; 15
    2650:	e4 91       	lpm	r30, Z
    2652:	58 96       	adiw	r26, 0x18	; 24
    2654:	ec 93       	st	X, r30
    2656:	58 97       	sbiw	r26, 0x18	; 24
    2658:	fc 01       	movw	r30, r24
    265a:	70 96       	adiw	r30, 0x10	; 16
    265c:	e4 91       	lpm	r30, Z
    265e:	59 96       	adiw	r26, 0x19	; 25
    2660:	ec 93       	st	X, r30
    2662:	59 97       	sbiw	r26, 0x19	; 25
    2664:	0c c0       	rjmp	.+24     	; 0x267e <u8g_UpdateRefHeight+0x6a>
    2666:	fc 01       	movw	r30, r24
    2668:	3d 96       	adiw	r30, 0x0d	; 13
    266a:	e4 91       	lpm	r30, Z
    266c:	58 96       	adiw	r26, 0x18	; 24
    266e:	ec 93       	st	X, r30
    2670:	58 97       	sbiw	r26, 0x18	; 24
    2672:	fc 01       	movw	r30, r24
    2674:	3e 96       	adiw	r30, 0x0e	; 14
    2676:	e4 91       	lpm	r30, Z
    2678:	59 96       	adiw	r26, 0x19	; 25
    267a:	ec 93       	st	X, r30
    267c:	59 97       	sbiw	r26, 0x19	; 25
    267e:	58 96       	adiw	r26, 0x18	; 24
    2680:	8c 91       	ld	r24, X
    2682:	58 97       	sbiw	r26, 0x18	; 24
    2684:	08 2e       	mov	r0, r24
    2686:	00 0c       	add	r0, r0
    2688:	99 0b       	sbc	r25, r25
    268a:	59 96       	adiw	r26, 0x19	; 25
    268c:	2c 91       	ld	r18, X
    268e:	59 97       	sbiw	r26, 0x19	; 25
    2690:	82 1b       	sub	r24, r18
    2692:	91 09       	sbc	r25, r1
    2694:	27 fd       	sbrc	r18, 7
    2696:	93 95       	inc	r25
    2698:	5a 96       	adiw	r26, 0x1a	; 26
    269a:	2c 91       	ld	r18, X
    269c:	5a 97       	sbiw	r26, 0x1a	; 26
    269e:	20 34       	cpi	r18, 0x40	; 64
    26a0:	61 f0       	breq	.+24     	; 0x26ba <u8g_UpdateRefHeight+0xa6>
    26a2:	82 9f       	mul	r24, r18
    26a4:	c0 01       	movw	r24, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	00 24       	eor	r0, r0
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	00 1c       	adc	r0, r0
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	00 1c       	adc	r0, r0
    26b6:	89 2f       	mov	r24, r25
    26b8:	90 2d       	mov	r25, r0
    26ba:	5b 96       	adiw	r26, 0x1b	; 27
    26bc:	8c 93       	st	X, r24
    26be:	08 95       	ret

000026c0 <u8g_SetFontPosBaseline>:
    26c0:	23 e7       	ldi	r18, 0x73	; 115
    26c2:	31 e1       	ldi	r19, 0x11	; 17
    26c4:	fc 01       	movw	r30, r24
    26c6:	36 8b       	std	Z+22, r19	; 0x16
    26c8:	25 8b       	std	Z+21, r18	; 0x15
    26ca:	08 95       	ret

000026cc <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
  if ( u8g->font != font )
    26d0:	fc 01       	movw	r30, r24
    26d2:	24 81       	ldd	r18, Z+4	; 0x04
    26d4:	35 81       	ldd	r19, Z+5	; 0x05
    26d6:	26 17       	cp	r18, r22
    26d8:	37 07       	cpc	r19, r23
    26da:	49 f0       	breq	.+18     	; 0x26ee <u8g_SetFont+0x22>
    26dc:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    26de:	75 83       	std	Z+5, r23	; 0x05
    26e0:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    26e2:	0e 94 0a 13 	call	0x2614	; 0x2614 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    26e6:	83 e7       	ldi	r24, 0x73	; 115
    26e8:	91 e1       	ldi	r25, 0x11	; 17
    26ea:	9e 8b       	std	Y+22, r25	; 0x16
    26ec:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	08 95       	ret

000026f4 <u8g_init_data>:
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	ec 01       	movw	r28, r24
    26fc:	1d 82       	std	Y+5, r1	; 0x05
    26fe:	1c 82       	std	Y+4, r1	; 0x04
    2700:	1f 82       	std	Y+7, r1	; 0x07
    2702:	1e 82       	std	Y+6, r1	; 0x06
    2704:	19 86       	std	Y+9, r1	; 0x09
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	88 87       	std	Y+8, r24	; 0x08
    270a:	82 e2       	ldi	r24, 0x22	; 34
    270c:	8a 87       	std	Y+10, r24	; 0x0a
    270e:	1f 86       	std	Y+15, r1	; 0x0f
    2710:	1e 86       	std	Y+14, r1	; 0x0e
    2712:	fe 01       	movw	r30, r28
    2714:	b3 96       	adiw	r30, 0x23	; 35
    2716:	9e 01       	movw	r18, r28
    2718:	2f 5c       	subi	r18, 0xCF	; 207
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	81 93       	st	Z+, r24
    2720:	e2 17       	cp	r30, r18
    2722:	f3 07       	cpc	r31, r19
    2724:	e1 f7       	brne	.-8      	; 0x271e <u8g_init_data+0x2a>
    2726:	11 e0       	ldi	r17, 0x01	; 1
    2728:	18 a3       	std	Y+32, r17	; 0x20
    272a:	ce 01       	movw	r24, r28
    272c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <u8g_SetFontPosBaseline>
    2730:	1f 8b       	std	Y+23, r17	; 0x17
    2732:	18 8e       	std	Y+24, r1	; 0x18
    2734:	19 8e       	std	Y+25, r1	; 0x19
    2736:	80 e4       	ldi	r24, 0x40	; 64
    2738:	8a 8f       	std	Y+26, r24	; 0x1a
    273a:	1b 8e       	std	Y+27, r1	; 0x1b
    273c:	89 ed       	ldi	r24, 0xD9	; 217
    273e:	95 e1       	ldi	r25, 0x15	; 21
    2740:	9a ab       	std	Y+50, r25	; 0x32
    2742:	89 ab       	std	Y+49, r24	; 0x31
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	08 95       	ret

0000274c <u8g_call_dev_fn>:
    274c:	db 01       	movw	r26, r22
    274e:	ed 91       	ld	r30, X+
    2750:	fc 91       	ld	r31, X
    2752:	09 95       	icall
    2754:	08 95       	ret

00002756 <u8g_InitLL>:
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	ec 01       	movw	r28, r24
    2760:	8b 01       	movw	r16, r22
    2762:	e9 a9       	ldd	r30, Y+49	; 0x31
    2764:	fa a9       	ldd	r31, Y+50	; 0x32
    2766:	82 e0       	ldi	r24, 0x02	; 2
    2768:	09 95       	icall
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a e0       	ldi	r20, 0x0A	; 10
    2770:	b8 01       	movw	r22, r16
    2772:	ce 01       	movw	r24, r28
    2774:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    2778:	18 2f       	mov	r17, r24
    277a:	e9 a9       	ldd	r30, Y+49	; 0x31
    277c:	fa a9       	ldd	r31, Y+50	; 0x32
    277e:	83 e0       	ldi	r24, 0x03	; 3
    2780:	09 95       	icall
    2782:	e9 a9       	ldd	r30, Y+49	; 0x31
    2784:	fa a9       	ldd	r31, Y+50	; 0x32
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	09 95       	icall
    278a:	81 2f       	mov	r24, r17
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	08 95       	ret

00002796 <u8g_FirstPageLL>:
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	ec 01       	movw	r28, r24
    27a0:	8b 01       	movw	r16, r22
    27a2:	e9 a9       	ldd	r30, Y+49	; 0x31
    27a4:	fa a9       	ldd	r31, Y+50	; 0x32
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	09 95       	icall
    27aa:	e9 a9       	ldd	r30, Y+49	; 0x31
    27ac:	fa a9       	ldd	r31, Y+50	; 0x32
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	09 95       	icall
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	44 e1       	ldi	r20, 0x14	; 20
    27b8:	b8 01       	movw	r22, r16
    27ba:	ce 01       	movw	r24, r28
    27bc:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    27c0:	9e 01       	movw	r18, r28
    27c2:	2d 5c       	subi	r18, 0xCD	; 205
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	47 e1       	ldi	r20, 0x17	; 23
    27c8:	b8 01       	movw	r22, r16
    27ca:	ce 01       	movw	r24, r28
    27cc:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    27d0:	e9 a9       	ldd	r30, Y+49	; 0x31
    27d2:	fa a9       	ldd	r31, Y+50	; 0x32
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	09 95       	icall
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	08 95       	ret

000027e2 <u8g_NextPageLL>:
    27e2:	ef 92       	push	r14
    27e4:	ff 92       	push	r15
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	ec 01       	movw	r28, r24
    27ee:	7b 01       	movw	r14, r22
    27f0:	e9 a9       	ldd	r30, Y+49	; 0x31
    27f2:	fa a9       	ldd	r31, Y+50	; 0x32
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	09 95       	icall
    27f8:	e9 a9       	ldd	r30, Y+49	; 0x31
    27fa:	fa a9       	ldd	r31, Y+50	; 0x32
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	09 95       	icall
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	45 e1       	ldi	r20, 0x15	; 21
    2806:	b7 01       	movw	r22, r14
    2808:	ce 01       	movw	r24, r28
    280a:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    280e:	18 2f       	mov	r17, r24
    2810:	88 23       	and	r24, r24
    2812:	41 f0       	breq	.+16     	; 0x2824 <u8g_NextPageLL+0x42>
    2814:	9e 01       	movw	r18, r28
    2816:	2d 5c       	subi	r18, 0xCD	; 205
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	47 e1       	ldi	r20, 0x17	; 23
    281c:	b7 01       	movw	r22, r14
    281e:	ce 01       	movw	r24, r28
    2820:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    2824:	e9 a9       	ldd	r30, Y+49	; 0x31
    2826:	fa a9       	ldd	r31, Y+50	; 0x32
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	09 95       	icall
    282c:	81 2f       	mov	r24, r17
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	08 95       	ret

0000283a <u8g_GetWidthLL>:
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	1f 92       	push	r1
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	9e 01       	movw	r18, r28
    2846:	2f 5f       	subi	r18, 0xFF	; 255
    2848:	3f 4f       	sbci	r19, 0xFF	; 255
    284a:	46 e4       	ldi	r20, 0x46	; 70
    284c:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	0f 90       	pop	r0
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	08 95       	ret

0000285a <u8g_GetHeightLL>:
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	1f 92       	push	r1
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	9e 01       	movw	r18, r28
    2866:	2f 5f       	subi	r18, 0xFF	; 255
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	47 e4       	ldi	r20, 0x47	; 71
    286c:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	0f 90       	pop	r0
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	08 95       	ret

0000287a <u8g_GetModeLL>:
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	48 e4       	ldi	r20, 0x48	; 72
    2880:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    2884:	08 95       	ret

00002886 <u8g_UpdateDimension>:
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	ec 01       	movw	r28, r24
    288c:	6a 81       	ldd	r22, Y+2	; 0x02
    288e:	7b 81       	ldd	r23, Y+3	; 0x03
    2890:	0e 94 1d 14 	call	0x283a	; 0x283a <u8g_GetWidthLL>
    2894:	88 83       	st	Y, r24
    2896:	6a 81       	ldd	r22, Y+2	; 0x02
    2898:	7b 81       	ldd	r23, Y+3	; 0x03
    289a:	ce 01       	movw	r24, r28
    289c:	0e 94 2d 14 	call	0x285a	; 0x285a <u8g_GetHeightLL>
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	6a 81       	ldd	r22, Y+2	; 0x02
    28a4:	7b 81       	ldd	r23, Y+3	; 0x03
    28a6:	ce 01       	movw	r24, r28
    28a8:	0e 94 3d 14 	call	0x287a	; 0x287a <u8g_GetModeLL>
    28ac:	8b 87       	std	Y+11, r24	; 0x0b
    28ae:	9e 01       	movw	r18, r28
    28b0:	2d 5c       	subi	r18, 0xCD	; 205
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
    28b4:	6a 81       	ldd	r22, Y+2	; 0x02
    28b6:	7b 81       	ldd	r23, Y+3	; 0x03
    28b8:	47 e1       	ldi	r20, 0x17	; 23
    28ba:	ce 01       	movw	r24, r28
    28bc:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	08 95       	ret

000028c6 <u8g_Begin>:
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	ec 01       	movw	r28, r24
    28cc:	6a 81       	ldd	r22, Y+2	; 0x02
    28ce:	7b 81       	ldd	r23, Y+3	; 0x03
    28d0:	0e 94 ab 13 	call	0x2756	; 0x2756 <u8g_InitLL>
    28d4:	88 23       	and	r24, r24
    28d6:	21 f0       	breq	.+8      	; 0x28e0 <u8g_Begin+0x1a>
    28d8:	ce 01       	movw	r24, r28
    28da:	0e 94 43 14 	call	0x2886	; 0x2886 <u8g_UpdateDimension>
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	08 95       	ret

000028e6 <u8g_InitI2C>:
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	1f 93       	push	r17
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	ec 01       	movw	r28, r24
    28f2:	7b 01       	movw	r14, r22
    28f4:	14 2f       	mov	r17, r20
    28f6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <u8g_init_data>
    28fa:	fb 82       	std	Y+3, r15	; 0x03
    28fc:	ea 82       	std	Y+2, r14	; 0x02
    28fe:	1e a7       	std	Y+46, r17	; 0x2e
    2900:	ce 01       	movw	r24, r28
    2902:	0e 94 63 14 	call	0x28c6	; 0x28c6 <u8g_Begin>
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	ff 90       	pop	r15
    290e:	ef 90       	pop	r14
    2910:	08 95       	ret

00002912 <u8g_FirstPage>:
    2912:	fc 01       	movw	r30, r24
    2914:	62 81       	ldd	r22, Z+2	; 0x02
    2916:	73 81       	ldd	r23, Z+3	; 0x03
    2918:	0e 94 cb 13 	call	0x2796	; 0x2796 <u8g_FirstPageLL>
    291c:	08 95       	ret

0000291e <u8g_NextPage>:
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	ec 01       	movw	r28, r24
    2924:	ee 85       	ldd	r30, Y+14	; 0x0e
    2926:	ff 85       	ldd	r31, Y+15	; 0x0f
    2928:	30 97       	sbiw	r30, 0x00	; 0
    292a:	09 f0       	breq	.+2      	; 0x292e <u8g_NextPage+0x10>
    292c:	09 95       	icall
    292e:	6a 81       	ldd	r22, Y+2	; 0x02
    2930:	7b 81       	ldd	r23, Y+3	; 0x03
    2932:	ce 01       	movw	r24, r28
    2934:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <u8g_NextPageLL>
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	08 95       	ret

0000293e <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    293e:	0f 93       	push	r16
    2940:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    2946:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    2948:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    294a:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    294c:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    294e:	9f 01       	movw	r18, r30
    2950:	24 5e       	subi	r18, 0xE4	; 228
    2952:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    2954:	4b e3       	ldi	r20, 0x3B	; 59
    2956:	bc 01       	movw	r22, r24
    2958:	cf 01       	movw	r24, r30
    295a:	0e 94 a6 13 	call	0x274c	; 0x274c <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    2962:	fc 01       	movw	r30, r24
    2964:	12 82       	std	Z+2, r1	; 0x02
    2966:	80 81       	ld	r24, Z
    2968:	81 50       	subi	r24, 0x01	; 1
    296a:	83 83       	std	Z+3, r24	; 0x03
    296c:	14 82       	std	Z+4, r1	; 0x04
    296e:	08 95       	ret

00002970 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    2970:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    2972:	90 81       	ld	r25, Z
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	89 0f       	add	r24, r25
    2978:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    297a:	21 81       	ldd	r18, Z+1	; 0x01
    297c:	82 17       	cp	r24, r18
    297e:	60 f4       	brcc	.+24     	; 0x2998 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    2980:	84 81       	ldd	r24, Z+4	; 0x04
    2982:	8f 5f       	subi	r24, 0xFF	; 255
    2984:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    2986:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    2988:	98 0f       	add	r25, r24
  if ( y1 >= p->total_height )
    298a:	92 17       	cp	r25, r18
    298c:	10 f0       	brcs	.+4      	; 0x2992 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    298e:	9f ef       	ldi	r25, 0xFF	; 255
    2990:	92 0f       	add	r25, r18
  }
  p->page_y1 = y1;
    2992:	93 83       	std	Z+3, r25	; 0x03
  
  return 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    2998:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    299a:	08 95       	ret

0000299c <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    299c:	dc 01       	movw	r26, r24
    299e:	16 96       	adiw	r26, 0x06	; 6
    29a0:	ed 91       	ld	r30, X+
    29a2:	fc 91       	ld	r31, X
    29a4:	17 97       	sbiw	r26, 0x07	; 7
    29a6:	15 96       	adiw	r26, 0x05	; 5
    29a8:	8c 91       	ld	r24, X
    29aa:	9f 01       	movw	r18, r30
    29ac:	28 0f       	add	r18, r24
    29ae:	31 1d       	adc	r19, r1
    29b0:	c9 01       	movw	r24, r18
    29b2:	11 92       	st	Z+, r1
    29b4:	e8 17       	cp	r30, r24
    29b6:	f9 07       	cpc	r31, r25
    29b8:	e1 f7       	brne	.-8      	; 0x29b2 <u8g_pb_Clear+0x16>
    29ba:	08 95       	ret

000029bc <u8g_pb_IsYIntersection>:
    29bc:	fc 01       	movw	r30, r24
    29be:	91 e0       	ldi	r25, 0x01	; 1
    29c0:	83 81       	ldd	r24, Z+3	; 0x03
    29c2:	86 17       	cp	r24, r22
    29c4:	08 f4       	brcc	.+2      	; 0x29c8 <u8g_pb_IsYIntersection+0xc>
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	31 e0       	ldi	r19, 0x01	; 1
    29ca:	46 17       	cp	r20, r22
    29cc:	08 f0       	brcs	.+2      	; 0x29d0 <u8g_pb_IsYIntersection+0x14>
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	83 2f       	mov	r24, r19
    29d2:	89 2b       	or	r24, r25
    29d4:	21 e0       	ldi	r18, 0x01	; 1
    29d6:	52 81       	ldd	r21, Z+2	; 0x02
    29d8:	45 17       	cp	r20, r21
    29da:	08 f4       	brcc	.+2      	; 0x29de <u8g_pb_IsYIntersection+0x22>
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	28 23       	and	r18, r24
    29e0:	83 2f       	mov	r24, r19
    29e2:	89 23       	and	r24, r25
    29e4:	82 2b       	or	r24, r18
    29e6:	08 95       	ret

000029e8 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    29e8:	dc 01       	movw	r26, r24
    29ea:	fb 01       	movw	r30, r22
  box->x0 = 0;
    29ec:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    29ee:	12 96       	adiw	r26, 0x02	; 2
    29f0:	8c 91       	ld	r24, X
    29f2:	12 97       	sbiw	r26, 0x02	; 2
    29f4:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    29f6:	15 96       	adiw	r26, 0x05	; 5
    29f8:	8c 91       	ld	r24, X
    29fa:	15 97       	sbiw	r26, 0x05	; 5
    29fc:	81 50       	subi	r24, 0x01	; 1
    29fe:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    2a00:	13 96       	adiw	r26, 0x03	; 3
    2a02:	8c 91       	ld	r24, X
    2a04:	83 83       	std	Z+3, r24	; 0x03
    2a06:	08 95       	ret

00002a08 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2a08:	fb 01       	movw	r30, r22
    2a0a:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    2a0c:	23 81       	ldd	r18, Z+3	; 0x03
    2a0e:	21 30       	cpi	r18, 0x01	; 1
    2a10:	19 f0       	breq	.+6      	; 0x2a18 <u8g_pb_Is8PixelVisible+0x10>
    2a12:	23 30       	cpi	r18, 0x03	; 3
    2a14:	21 f0       	breq	.+8      	; 0x2a1e <u8g_pb_Is8PixelVisible+0x16>
    2a16:	06 c0       	rjmp	.+12     	; 0x2a24 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    2a18:	48 e0       	ldi	r20, 0x08	; 8
    2a1a:	43 0f       	add	r20, r19
      break;
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2a1e:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    2a20:	38 50       	subi	r19, 0x08	; 8
      break;
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2a24:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    2a26:	63 2f       	mov	r22, r19
    2a28:	0e 94 de 14 	call	0x29bc	; 0x29bc <u8g_pb_IsYIntersection>
}
    2a2c:	08 95       	ret

00002a2e <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    2a2e:	fc 01       	movw	r30, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    2a34:	26 81       	ldd	r18, Z+6	; 0x06
    2a36:	37 81       	ldd	r19, Z+7	; 0x07
    2a38:	45 81       	ldd	r20, Z+5	; 0x05
    2a3a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <u8g_WriteSequence>
}
    2a3e:	08 95       	ret

00002a40 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    2a40:	dc 01       	movw	r26, r24
    2a42:	16 96       	adiw	r26, 0x06	; 6
    2a44:	ed 91       	ld	r30, X+
    2a46:	fc 91       	ld	r31, X
    2a48:	17 97       	sbiw	r26, 0x07	; 7
    2a4a:	12 96       	adiw	r26, 0x02	; 2
    2a4c:	8c 91       	ld	r24, X
    2a4e:	48 1b       	sub	r20, r24
    2a50:	47 70       	andi	r20, 0x07	; 7
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <u8g_pb8v1_set_pixel+0x1c>
    2a58:	88 0f       	add	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	4a 95       	dec	r20
    2a5e:	e2 f7       	brpl	.-8      	; 0x2a58 <u8g_pb8v1_set_pixel+0x18>
    2a60:	e6 0f       	add	r30, r22
    2a62:	f1 1d       	adc	r31, r1
    2a64:	22 23       	and	r18, r18
    2a66:	21 f0       	breq	.+8      	; 0x2a70 <u8g_pb8v1_set_pixel+0x30>
    2a68:	90 81       	ld	r25, Z
    2a6a:	89 2b       	or	r24, r25
    2a6c:	80 83       	st	Z, r24
    2a6e:	08 95       	ret
    2a70:	80 95       	com	r24
    2a72:	90 81       	ld	r25, Z
    2a74:	89 23       	and	r24, r25
    2a76:	80 83       	st	Z, r24
    2a78:	08 95       	ret

00002a7a <u8g_pb8v1_SetPixel>:
    2a7a:	fb 01       	movw	r30, r22
    2a7c:	41 81       	ldd	r20, Z+1	; 0x01
    2a7e:	fc 01       	movw	r30, r24
    2a80:	22 81       	ldd	r18, Z+2	; 0x02
    2a82:	42 17       	cp	r20, r18
    2a84:	70 f0       	brcs	.+28     	; 0x2aa2 <u8g_pb8v1_SetPixel+0x28>
    2a86:	23 81       	ldd	r18, Z+3	; 0x03
    2a88:	24 17       	cp	r18, r20
    2a8a:	58 f0       	brcs	.+22     	; 0x2aa2 <u8g_pb8v1_SetPixel+0x28>
    2a8c:	fb 01       	movw	r30, r22
    2a8e:	30 81       	ld	r19, Z
    2a90:	fc 01       	movw	r30, r24
    2a92:	25 81       	ldd	r18, Z+5	; 0x05
    2a94:	32 17       	cp	r19, r18
    2a96:	28 f4       	brcc	.+10     	; 0x2aa2 <u8g_pb8v1_SetPixel+0x28>
    2a98:	fb 01       	movw	r30, r22
    2a9a:	24 81       	ldd	r18, Z+4	; 0x04
    2a9c:	63 2f       	mov	r22, r19
    2a9e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <u8g_pb8v1_set_pixel>
    2aa2:	08 95       	ret

00002aa4 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    2aa4:	df 92       	push	r13
    2aa6:	ef 92       	push	r14
    2aa8:	ff 92       	push	r15
    2aaa:	0f 93       	push	r16
    2aac:	1f 93       	push	r17
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	7c 01       	movw	r14, r24
    2ab4:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    2ab6:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	81 30       	cpi	r24, 0x01	; 1
    2abc:	49 f0       	breq	.+18     	; 0x2ad0 <u8g_pb8v1_Set8PixelOpt2+0x2c>
    2abe:	28 f0       	brcs	.+10     	; 0x2aca <u8g_pb8v1_Set8PixelOpt2+0x26>
    2ac0:	82 30       	cpi	r24, 0x02	; 2
    2ac2:	51 f0       	breq	.+20     	; 0x2ad8 <u8g_pb8v1_Set8PixelOpt2+0x34>
    2ac4:	83 30       	cpi	r24, 0x03	; 3
    2ac6:	59 f0       	breq	.+22     	; 0x2ade <u8g_pb8v1_Set8PixelOpt2+0x3a>
    2ac8:	0e c0       	rjmp	.+28     	; 0x2ae6 <u8g_pb8v1_Set8PixelOpt2+0x42>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2aca:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    2acc:	01 e0       	ldi	r16, 0x01	; 1
    2ace:	0d c0       	rjmp	.+26     	; 0x2aea <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 1: dy++; break;
    2ad0:	dd 24       	eor	r13, r13
    2ad2:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2ad4:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    2ad6:	09 c0       	rjmp	.+18     	; 0x2aea <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2ad8:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    2ada:	0f ef       	ldi	r16, 0xFF	; 255
    2adc:	06 c0       	rjmp	.+12     	; 0x2aea <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
    2ade:	dd 24       	eor	r13, r13
    2ae0:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2ae2:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2ae6:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2ae8:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    2aea:	11 23       	and	r17, r17
    2aec:	24 f4       	brge	.+8      	; 0x2af6 <u8g_pb8v1_Set8PixelOpt2+0x52>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    2aee:	be 01       	movw	r22, r28
    2af0:	c7 01       	movw	r24, r14
    2af2:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2af6:	98 81       	ld	r25, Y
    2af8:	90 0f       	add	r25, r16
    2afa:	98 83       	st	Y, r25
    arg_pixel->y += dy;
    2afc:	99 81       	ldd	r25, Y+1	; 0x01
    2afe:	9d 0d       	add	r25, r13
    2b00:	99 83       	std	Y+1, r25	; 0x01
    pixel <<= 1;
    2b02:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    2b04:	91 f7       	brne	.-28     	; 0x2aea <u8g_pb8v1_Set8PixelOpt2+0x46>
  
}
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	1f 91       	pop	r17
    2b0c:	0f 91       	pop	r16
    2b0e:	ff 90       	pop	r15
    2b10:	ef 90       	pop	r14
    2b12:	df 90       	pop	r13
    2b14:	08 95       	ret

00002b16 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    2b1e:	fb 01       	movw	r30, r22
    2b20:	c2 81       	ldd	r28, Z+2	; 0x02
    2b22:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	fa 01       	movw	r30, r20
    2b28:	74 97       	sbiw	r30, 0x14	; 20
    2b2a:	e4 33       	cpi	r30, 0x34	; 52
    2b2c:	f1 05       	cpc	r31, r1
    2b2e:	c8 f5       	brcc	.+114    	; 0x2ba2 <u8g_dev_pb8v1_base_fn+0x8c>
    2b30:	89 01       	movw	r16, r18
    2b32:	ec 5c       	subi	r30, 0xCC	; 204
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    2b3a:	b9 01       	movw	r22, r18
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <u8g_pb_Is8PixelVisible>
    2b42:	88 23       	and	r24, r24
    2b44:	81 f1       	breq	.+96     	; 0x2ba6 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    2b46:	b8 01       	movw	r22, r16
    2b48:	ce 01       	movw	r24, r28
    2b4a:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	2b c0       	rjmp	.+86     	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    2b52:	b9 01       	movw	r22, r18
    2b54:	ce 01       	movw	r24, r28
    2b56:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    2b5c:	25 c0       	rjmp	.+74     	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    2b5e:	ce 01       	movw	r24, r28
    2b60:	0e 94 ce 14 	call	0x299c	; 0x299c <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    2b64:	ce 01       	movw	r24, r28
    2b66:	0e 94 b1 14 	call	0x2962	; 0x2962 <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    2b6c:	1d c0       	rjmp	.+58     	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    2b6e:	ce 01       	movw	r24, r28
    2b70:	0e 94 b8 14 	call	0x2970	; 0x2970 <u8g_page_Next>
    2b74:	88 23       	and	r24, r24
    2b76:	c1 f0       	breq	.+48     	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
        return 0;
      u8g_pb_Clear(pb);
    2b78:	ce 01       	movw	r24, r28
    2b7a:	0e 94 ce 14 	call	0x299c	; 0x299c <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    2b80:	13 c0       	rjmp	.+38     	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    2b82:	b9 01       	movw	r22, r18
    2b84:	ce 01       	movw	r24, r28
    2b86:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    2b8c:	0d c0       	rjmp	.+26     	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	f9 01       	movw	r30, r18
    2b92:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    2b96:	08 c0       	rjmp	.+16     	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	f9 01       	movw	r30, r18
    2b9c:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    2ba0:	03 c0       	rjmp	.+6      	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	01 c0       	rjmp	.+2      	; 0x2ba8 <u8g_dev_pb8v1_base_fn+0x92>
  }
  return 1;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
}
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	08 95       	ret

00002bb2 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    2bb2:	08 95       	ret

00002bb4 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    2bb4:	1f 92       	push	r1
    2bb6:	0f 92       	push	r0
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	0f 92       	push	r0
    2bbc:	11 24       	eor	r1, r1
    2bbe:	2f 93       	push	r18
    2bc0:	8f 93       	push	r24
    2bc2:	9f 93       	push	r25
    2bc4:	ef 93       	push	r30
    2bc6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2bc8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    2bcc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    2bd0:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2bd2:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <UART_RxHead>
    2bd6:	ef 5f       	subi	r30, 0xFF	; 255
    2bd8:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    2bda:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <UART_RxTail>
    2bde:	e9 17       	cp	r30, r25
    2be0:	39 f0       	breq	.+14     	; 0x2bf0 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    2be2:	e0 93 93 01 	sts	0x0193, r30	; 0x800193 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	ea 56       	subi	r30, 0x6A	; 106
    2bea:	fe 4f       	sbci	r31, 0xFE	; 254
    2bec:	20 83       	st	Z, r18
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2bf0:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    2bf2:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <UART_LastRxError>
}
    2bf6:	ff 91       	pop	r31
    2bf8:	ef 91       	pop	r30
    2bfa:	9f 91       	pop	r25
    2bfc:	8f 91       	pop	r24
    2bfe:	2f 91       	pop	r18
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	0f 90       	pop	r0
    2c06:	1f 90       	pop	r1
    2c08:	18 95       	reti

00002c0a <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    2c0a:	1f 92       	push	r1
    2c0c:	0f 92       	push	r0
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	0f 92       	push	r0
    2c12:	11 24       	eor	r1, r1
    2c14:	8f 93       	push	r24
    2c16:	9f 93       	push	r25
    2c18:	ef 93       	push	r30
    2c1a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    2c1c:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <UART_TxHead>
    2c20:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <UART_TxTail>
    2c24:	98 17       	cp	r25, r24
    2c26:	69 f0       	breq	.+26     	; 0x2c42 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2c28:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <UART_TxTail>
    2c2c:	ef 5f       	subi	r30, 0xFF	; 255
    2c2e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    2c30:	e0 93 94 01 	sts	0x0194, r30	; 0x800194 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	ea 54       	subi	r30, 0x4A	; 74
    2c38:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3a:	80 81       	ld	r24, Z
    2c3c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2c40:	05 c0       	rjmp	.+10     	; 0x2c4c <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2c42:	e1 ec       	ldi	r30, 0xC1	; 193
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 7d       	andi	r24, 0xDF	; 223
    2c4a:	80 83       	st	Z, r24
    }
}
    2c4c:	ff 91       	pop	r31
    2c4e:	ef 91       	pop	r30
    2c50:	9f 91       	pop	r25
    2c52:	8f 91       	pop	r24
    2c54:	0f 90       	pop	r0
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	0f 90       	pop	r0
    2c5a:	1f 90       	pop	r1
    2c5c:	18 95       	reti

00002c5e <__subsf3>:
    2c5e:	50 58       	subi	r21, 0x80	; 128

00002c60 <__addsf3>:
    2c60:	bb 27       	eor	r27, r27
    2c62:	aa 27       	eor	r26, r26
    2c64:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__addsf3x>
    2c68:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__fp_round>
    2c6c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__fp_pscA>
    2c70:	38 f0       	brcs	.+14     	; 0x2c80 <__addsf3+0x20>
    2c72:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_pscB>
    2c76:	20 f0       	brcs	.+8      	; 0x2c80 <__addsf3+0x20>
    2c78:	39 f4       	brne	.+14     	; 0x2c88 <__addsf3+0x28>
    2c7a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c7c:	19 f4       	brne	.+6      	; 0x2c84 <__addsf3+0x24>
    2c7e:	26 f4       	brtc	.+8      	; 0x2c88 <__addsf3+0x28>
    2c80:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__fp_nan>
    2c84:	0e f4       	brtc	.+2      	; 0x2c88 <__addsf3+0x28>
    2c86:	e0 95       	com	r30
    2c88:	e7 fb       	bst	r30, 7
    2c8a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_inf>

00002c8e <__addsf3x>:
    2c8e:	e9 2f       	mov	r30, r25
    2c90:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__fp_split3>
    2c94:	58 f3       	brcs	.-42     	; 0x2c6c <__addsf3+0xc>
    2c96:	ba 17       	cp	r27, r26
    2c98:	62 07       	cpc	r22, r18
    2c9a:	73 07       	cpc	r23, r19
    2c9c:	84 07       	cpc	r24, r20
    2c9e:	95 07       	cpc	r25, r21
    2ca0:	20 f0       	brcs	.+8      	; 0x2caa <__addsf3x+0x1c>
    2ca2:	79 f4       	brne	.+30     	; 0x2cc2 <__addsf3x+0x34>
    2ca4:	a6 f5       	brtc	.+104    	; 0x2d0e <__addsf3x+0x80>
    2ca6:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__fp_zero>
    2caa:	0e f4       	brtc	.+2      	; 0x2cae <__addsf3x+0x20>
    2cac:	e0 95       	com	r30
    2cae:	0b 2e       	mov	r0, r27
    2cb0:	ba 2f       	mov	r27, r26
    2cb2:	a0 2d       	mov	r26, r0
    2cb4:	0b 01       	movw	r0, r22
    2cb6:	b9 01       	movw	r22, r18
    2cb8:	90 01       	movw	r18, r0
    2cba:	0c 01       	movw	r0, r24
    2cbc:	ca 01       	movw	r24, r20
    2cbe:	a0 01       	movw	r20, r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	ff 27       	eor	r31, r31
    2cc4:	59 1b       	sub	r21, r25
    2cc6:	99 f0       	breq	.+38     	; 0x2cee <__addsf3x+0x60>
    2cc8:	59 3f       	cpi	r21, 0xF9	; 249
    2cca:	50 f4       	brcc	.+20     	; 0x2ce0 <__addsf3x+0x52>
    2ccc:	50 3e       	cpi	r21, 0xE0	; 224
    2cce:	68 f1       	brcs	.+90     	; 0x2d2a <__addsf3x+0x9c>
    2cd0:	1a 16       	cp	r1, r26
    2cd2:	f0 40       	sbci	r31, 0x00	; 0
    2cd4:	a2 2f       	mov	r26, r18
    2cd6:	23 2f       	mov	r18, r19
    2cd8:	34 2f       	mov	r19, r20
    2cda:	44 27       	eor	r20, r20
    2cdc:	58 5f       	subi	r21, 0xF8	; 248
    2cde:	f3 cf       	rjmp	.-26     	; 0x2cc6 <__addsf3x+0x38>
    2ce0:	46 95       	lsr	r20
    2ce2:	37 95       	ror	r19
    2ce4:	27 95       	ror	r18
    2ce6:	a7 95       	ror	r26
    2ce8:	f0 40       	sbci	r31, 0x00	; 0
    2cea:	53 95       	inc	r21
    2cec:	c9 f7       	brne	.-14     	; 0x2ce0 <__addsf3x+0x52>
    2cee:	7e f4       	brtc	.+30     	; 0x2d0e <__addsf3x+0x80>
    2cf0:	1f 16       	cp	r1, r31
    2cf2:	ba 0b       	sbc	r27, r26
    2cf4:	62 0b       	sbc	r22, r18
    2cf6:	73 0b       	sbc	r23, r19
    2cf8:	84 0b       	sbc	r24, r20
    2cfa:	ba f0       	brmi	.+46     	; 0x2d2a <__addsf3x+0x9c>
    2cfc:	91 50       	subi	r25, 0x01	; 1
    2cfe:	a1 f0       	breq	.+40     	; 0x2d28 <__addsf3x+0x9a>
    2d00:	ff 0f       	add	r31, r31
    2d02:	bb 1f       	adc	r27, r27
    2d04:	66 1f       	adc	r22, r22
    2d06:	77 1f       	adc	r23, r23
    2d08:	88 1f       	adc	r24, r24
    2d0a:	c2 f7       	brpl	.-16     	; 0x2cfc <__addsf3x+0x6e>
    2d0c:	0e c0       	rjmp	.+28     	; 0x2d2a <__addsf3x+0x9c>
    2d0e:	ba 0f       	add	r27, r26
    2d10:	62 1f       	adc	r22, r18
    2d12:	73 1f       	adc	r23, r19
    2d14:	84 1f       	adc	r24, r20
    2d16:	48 f4       	brcc	.+18     	; 0x2d2a <__addsf3x+0x9c>
    2d18:	87 95       	ror	r24
    2d1a:	77 95       	ror	r23
    2d1c:	67 95       	ror	r22
    2d1e:	b7 95       	ror	r27
    2d20:	f7 95       	ror	r31
    2d22:	9e 3f       	cpi	r25, 0xFE	; 254
    2d24:	08 f0       	brcs	.+2      	; 0x2d28 <__addsf3x+0x9a>
    2d26:	b0 cf       	rjmp	.-160    	; 0x2c88 <__addsf3+0x28>
    2d28:	93 95       	inc	r25
    2d2a:	88 0f       	add	r24, r24
    2d2c:	08 f0       	brcs	.+2      	; 0x2d30 <__addsf3x+0xa2>
    2d2e:	99 27       	eor	r25, r25
    2d30:	ee 0f       	add	r30, r30
    2d32:	97 95       	ror	r25
    2d34:	87 95       	ror	r24
    2d36:	08 95       	ret

00002d38 <__floatunsisf>:
    2d38:	e8 94       	clt
    2d3a:	09 c0       	rjmp	.+18     	; 0x2d4e <__floatsisf+0x12>

00002d3c <__floatsisf>:
    2d3c:	97 fb       	bst	r25, 7
    2d3e:	3e f4       	brtc	.+14     	; 0x2d4e <__floatsisf+0x12>
    2d40:	90 95       	com	r25
    2d42:	80 95       	com	r24
    2d44:	70 95       	com	r23
    2d46:	61 95       	neg	r22
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4e:	99 23       	and	r25, r25
    2d50:	a9 f0       	breq	.+42     	; 0x2d7c <__floatsisf+0x40>
    2d52:	f9 2f       	mov	r31, r25
    2d54:	96 e9       	ldi	r25, 0x96	; 150
    2d56:	bb 27       	eor	r27, r27
    2d58:	93 95       	inc	r25
    2d5a:	f6 95       	lsr	r31
    2d5c:	87 95       	ror	r24
    2d5e:	77 95       	ror	r23
    2d60:	67 95       	ror	r22
    2d62:	b7 95       	ror	r27
    2d64:	f1 11       	cpse	r31, r1
    2d66:	f8 cf       	rjmp	.-16     	; 0x2d58 <__floatsisf+0x1c>
    2d68:	fa f4       	brpl	.+62     	; 0x2da8 <__floatsisf+0x6c>
    2d6a:	bb 0f       	add	r27, r27
    2d6c:	11 f4       	brne	.+4      	; 0x2d72 <__floatsisf+0x36>
    2d6e:	60 ff       	sbrs	r22, 0
    2d70:	1b c0       	rjmp	.+54     	; 0x2da8 <__floatsisf+0x6c>
    2d72:	6f 5f       	subi	r22, 0xFF	; 255
    2d74:	7f 4f       	sbci	r23, 0xFF	; 255
    2d76:	8f 4f       	sbci	r24, 0xFF	; 255
    2d78:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7a:	16 c0       	rjmp	.+44     	; 0x2da8 <__floatsisf+0x6c>
    2d7c:	88 23       	and	r24, r24
    2d7e:	11 f0       	breq	.+4      	; 0x2d84 <__floatsisf+0x48>
    2d80:	96 e9       	ldi	r25, 0x96	; 150
    2d82:	11 c0       	rjmp	.+34     	; 0x2da6 <__floatsisf+0x6a>
    2d84:	77 23       	and	r23, r23
    2d86:	21 f0       	breq	.+8      	; 0x2d90 <__floatsisf+0x54>
    2d88:	9e e8       	ldi	r25, 0x8E	; 142
    2d8a:	87 2f       	mov	r24, r23
    2d8c:	76 2f       	mov	r23, r22
    2d8e:	05 c0       	rjmp	.+10     	; 0x2d9a <__floatsisf+0x5e>
    2d90:	66 23       	and	r22, r22
    2d92:	71 f0       	breq	.+28     	; 0x2db0 <__floatsisf+0x74>
    2d94:	96 e8       	ldi	r25, 0x86	; 134
    2d96:	86 2f       	mov	r24, r22
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	2a f0       	brmi	.+10     	; 0x2da8 <__floatsisf+0x6c>
    2d9e:	9a 95       	dec	r25
    2da0:	66 0f       	add	r22, r22
    2da2:	77 1f       	adc	r23, r23
    2da4:	88 1f       	adc	r24, r24
    2da6:	da f7       	brpl	.-10     	; 0x2d9e <__floatsisf+0x62>
    2da8:	88 0f       	add	r24, r24
    2daa:	96 95       	lsr	r25
    2dac:	87 95       	ror	r24
    2dae:	97 f9       	bld	r25, 7
    2db0:	08 95       	ret

00002db2 <__fp_inf>:
    2db2:	97 f9       	bld	r25, 7
    2db4:	9f 67       	ori	r25, 0x7F	; 127
    2db6:	80 e8       	ldi	r24, 0x80	; 128
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	60 e0       	ldi	r22, 0x00	; 0
    2dbc:	08 95       	ret

00002dbe <__fp_nan>:
    2dbe:	9f ef       	ldi	r25, 0xFF	; 255
    2dc0:	80 ec       	ldi	r24, 0xC0	; 192
    2dc2:	08 95       	ret

00002dc4 <__fp_pscA>:
    2dc4:	00 24       	eor	r0, r0
    2dc6:	0a 94       	dec	r0
    2dc8:	16 16       	cp	r1, r22
    2dca:	17 06       	cpc	r1, r23
    2dcc:	18 06       	cpc	r1, r24
    2dce:	09 06       	cpc	r0, r25
    2dd0:	08 95       	ret

00002dd2 <__fp_pscB>:
    2dd2:	00 24       	eor	r0, r0
    2dd4:	0a 94       	dec	r0
    2dd6:	12 16       	cp	r1, r18
    2dd8:	13 06       	cpc	r1, r19
    2dda:	14 06       	cpc	r1, r20
    2ddc:	05 06       	cpc	r0, r21
    2dde:	08 95       	ret

00002de0 <__fp_round>:
    2de0:	09 2e       	mov	r0, r25
    2de2:	03 94       	inc	r0
    2de4:	00 0c       	add	r0, r0
    2de6:	11 f4       	brne	.+4      	; 0x2dec <__fp_round+0xc>
    2de8:	88 23       	and	r24, r24
    2dea:	52 f0       	brmi	.+20     	; 0x2e00 <__fp_round+0x20>
    2dec:	bb 0f       	add	r27, r27
    2dee:	40 f4       	brcc	.+16     	; 0x2e00 <__fp_round+0x20>
    2df0:	bf 2b       	or	r27, r31
    2df2:	11 f4       	brne	.+4      	; 0x2df8 <__fp_round+0x18>
    2df4:	60 ff       	sbrs	r22, 0
    2df6:	04 c0       	rjmp	.+8      	; 0x2e00 <__fp_round+0x20>
    2df8:	6f 5f       	subi	r22, 0xFF	; 255
    2dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2e00:	08 95       	ret

00002e02 <__fp_split3>:
    2e02:	57 fd       	sbrc	r21, 7
    2e04:	90 58       	subi	r25, 0x80	; 128
    2e06:	44 0f       	add	r20, r20
    2e08:	55 1f       	adc	r21, r21
    2e0a:	59 f0       	breq	.+22     	; 0x2e22 <__fp_splitA+0x10>
    2e0c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e0e:	71 f0       	breq	.+28     	; 0x2e2c <__fp_splitA+0x1a>
    2e10:	47 95       	ror	r20

00002e12 <__fp_splitA>:
    2e12:	88 0f       	add	r24, r24
    2e14:	97 fb       	bst	r25, 7
    2e16:	99 1f       	adc	r25, r25
    2e18:	61 f0       	breq	.+24     	; 0x2e32 <__fp_splitA+0x20>
    2e1a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e1c:	79 f0       	breq	.+30     	; 0x2e3c <__fp_splitA+0x2a>
    2e1e:	87 95       	ror	r24
    2e20:	08 95       	ret
    2e22:	12 16       	cp	r1, r18
    2e24:	13 06       	cpc	r1, r19
    2e26:	14 06       	cpc	r1, r20
    2e28:	55 1f       	adc	r21, r21
    2e2a:	f2 cf       	rjmp	.-28     	; 0x2e10 <__fp_split3+0xe>
    2e2c:	46 95       	lsr	r20
    2e2e:	f1 df       	rcall	.-30     	; 0x2e12 <__fp_splitA>
    2e30:	08 c0       	rjmp	.+16     	; 0x2e42 <__fp_splitA+0x30>
    2e32:	16 16       	cp	r1, r22
    2e34:	17 06       	cpc	r1, r23
    2e36:	18 06       	cpc	r1, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	f1 cf       	rjmp	.-30     	; 0x2e1e <__fp_splitA+0xc>
    2e3c:	86 95       	lsr	r24
    2e3e:	71 05       	cpc	r23, r1
    2e40:	61 05       	cpc	r22, r1
    2e42:	08 94       	sec
    2e44:	08 95       	ret

00002e46 <__fp_zero>:
    2e46:	e8 94       	clt

00002e48 <__fp_szero>:
    2e48:	bb 27       	eor	r27, r27
    2e4a:	66 27       	eor	r22, r22
    2e4c:	77 27       	eor	r23, r23
    2e4e:	cb 01       	movw	r24, r22
    2e50:	97 f9       	bld	r25, 7
    2e52:	08 95       	ret

00002e54 <__gesf2>:
    2e54:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__fp_cmp>
    2e58:	08 f4       	brcc	.+2      	; 0x2e5c <__gesf2+0x8>
    2e5a:	8f ef       	ldi	r24, 0xFF	; 255
    2e5c:	08 95       	ret

00002e5e <__mulsf3>:
    2e5e:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3x>
    2e62:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__fp_round>
    2e66:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__fp_pscA>
    2e6a:	38 f0       	brcs	.+14     	; 0x2e7a <__mulsf3+0x1c>
    2e6c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_pscB>
    2e70:	20 f0       	brcs	.+8      	; 0x2e7a <__mulsf3+0x1c>
    2e72:	95 23       	and	r25, r21
    2e74:	11 f0       	breq	.+4      	; 0x2e7a <__mulsf3+0x1c>
    2e76:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_inf>
    2e7a:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__fp_nan>
    2e7e:	11 24       	eor	r1, r1
    2e80:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__fp_szero>

00002e84 <__mulsf3x>:
    2e84:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__fp_split3>
    2e88:	70 f3       	brcs	.-36     	; 0x2e66 <__mulsf3+0x8>

00002e8a <__mulsf3_pse>:
    2e8a:	95 9f       	mul	r25, r21
    2e8c:	c1 f3       	breq	.-16     	; 0x2e7e <__mulsf3+0x20>
    2e8e:	95 0f       	add	r25, r21
    2e90:	50 e0       	ldi	r21, 0x00	; 0
    2e92:	55 1f       	adc	r21, r21
    2e94:	62 9f       	mul	r22, r18
    2e96:	f0 01       	movw	r30, r0
    2e98:	72 9f       	mul	r23, r18
    2e9a:	bb 27       	eor	r27, r27
    2e9c:	f0 0d       	add	r31, r0
    2e9e:	b1 1d       	adc	r27, r1
    2ea0:	63 9f       	mul	r22, r19
    2ea2:	aa 27       	eor	r26, r26
    2ea4:	f0 0d       	add	r31, r0
    2ea6:	b1 1d       	adc	r27, r1
    2ea8:	aa 1f       	adc	r26, r26
    2eaa:	64 9f       	mul	r22, r20
    2eac:	66 27       	eor	r22, r22
    2eae:	b0 0d       	add	r27, r0
    2eb0:	a1 1d       	adc	r26, r1
    2eb2:	66 1f       	adc	r22, r22
    2eb4:	82 9f       	mul	r24, r18
    2eb6:	22 27       	eor	r18, r18
    2eb8:	b0 0d       	add	r27, r0
    2eba:	a1 1d       	adc	r26, r1
    2ebc:	62 1f       	adc	r22, r18
    2ebe:	73 9f       	mul	r23, r19
    2ec0:	b0 0d       	add	r27, r0
    2ec2:	a1 1d       	adc	r26, r1
    2ec4:	62 1f       	adc	r22, r18
    2ec6:	83 9f       	mul	r24, r19
    2ec8:	a0 0d       	add	r26, r0
    2eca:	61 1d       	adc	r22, r1
    2ecc:	22 1f       	adc	r18, r18
    2ece:	74 9f       	mul	r23, r20
    2ed0:	33 27       	eor	r19, r19
    2ed2:	a0 0d       	add	r26, r0
    2ed4:	61 1d       	adc	r22, r1
    2ed6:	23 1f       	adc	r18, r19
    2ed8:	84 9f       	mul	r24, r20
    2eda:	60 0d       	add	r22, r0
    2edc:	21 1d       	adc	r18, r1
    2ede:	82 2f       	mov	r24, r18
    2ee0:	76 2f       	mov	r23, r22
    2ee2:	6a 2f       	mov	r22, r26
    2ee4:	11 24       	eor	r1, r1
    2ee6:	9f 57       	subi	r25, 0x7F	; 127
    2ee8:	50 40       	sbci	r21, 0x00	; 0
    2eea:	9a f0       	brmi	.+38     	; 0x2f12 <__mulsf3_pse+0x88>
    2eec:	f1 f0       	breq	.+60     	; 0x2f2a <__mulsf3_pse+0xa0>
    2eee:	88 23       	and	r24, r24
    2ef0:	4a f0       	brmi	.+18     	; 0x2f04 <__mulsf3_pse+0x7a>
    2ef2:	ee 0f       	add	r30, r30
    2ef4:	ff 1f       	adc	r31, r31
    2ef6:	bb 1f       	adc	r27, r27
    2ef8:	66 1f       	adc	r22, r22
    2efa:	77 1f       	adc	r23, r23
    2efc:	88 1f       	adc	r24, r24
    2efe:	91 50       	subi	r25, 0x01	; 1
    2f00:	50 40       	sbci	r21, 0x00	; 0
    2f02:	a9 f7       	brne	.-22     	; 0x2eee <__mulsf3_pse+0x64>
    2f04:	9e 3f       	cpi	r25, 0xFE	; 254
    2f06:	51 05       	cpc	r21, r1
    2f08:	80 f0       	brcs	.+32     	; 0x2f2a <__mulsf3_pse+0xa0>
    2f0a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_inf>
    2f0e:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__fp_szero>
    2f12:	5f 3f       	cpi	r21, 0xFF	; 255
    2f14:	e4 f3       	brlt	.-8      	; 0x2f0e <__mulsf3_pse+0x84>
    2f16:	98 3e       	cpi	r25, 0xE8	; 232
    2f18:	d4 f3       	brlt	.-12     	; 0x2f0e <__mulsf3_pse+0x84>
    2f1a:	86 95       	lsr	r24
    2f1c:	77 95       	ror	r23
    2f1e:	67 95       	ror	r22
    2f20:	b7 95       	ror	r27
    2f22:	f7 95       	ror	r31
    2f24:	e7 95       	ror	r30
    2f26:	9f 5f       	subi	r25, 0xFF	; 255
    2f28:	c1 f7       	brne	.-16     	; 0x2f1a <__mulsf3_pse+0x90>
    2f2a:	fe 2b       	or	r31, r30
    2f2c:	88 0f       	add	r24, r24
    2f2e:	91 1d       	adc	r25, r1
    2f30:	96 95       	lsr	r25
    2f32:	87 95       	ror	r24
    2f34:	97 f9       	bld	r25, 7
    2f36:	08 95       	ret

00002f38 <__fp_cmp>:
    2f38:	99 0f       	add	r25, r25
    2f3a:	00 08       	sbc	r0, r0
    2f3c:	55 0f       	add	r21, r21
    2f3e:	aa 0b       	sbc	r26, r26
    2f40:	e0 e8       	ldi	r30, 0x80	; 128
    2f42:	fe ef       	ldi	r31, 0xFE	; 254
    2f44:	16 16       	cp	r1, r22
    2f46:	17 06       	cpc	r1, r23
    2f48:	e8 07       	cpc	r30, r24
    2f4a:	f9 07       	cpc	r31, r25
    2f4c:	c0 f0       	brcs	.+48     	; 0x2f7e <__fp_cmp+0x46>
    2f4e:	12 16       	cp	r1, r18
    2f50:	13 06       	cpc	r1, r19
    2f52:	e4 07       	cpc	r30, r20
    2f54:	f5 07       	cpc	r31, r21
    2f56:	98 f0       	brcs	.+38     	; 0x2f7e <__fp_cmp+0x46>
    2f58:	62 1b       	sub	r22, r18
    2f5a:	73 0b       	sbc	r23, r19
    2f5c:	84 0b       	sbc	r24, r20
    2f5e:	95 0b       	sbc	r25, r21
    2f60:	39 f4       	brne	.+14     	; 0x2f70 <__fp_cmp+0x38>
    2f62:	0a 26       	eor	r0, r26
    2f64:	61 f0       	breq	.+24     	; 0x2f7e <__fp_cmp+0x46>
    2f66:	23 2b       	or	r18, r19
    2f68:	24 2b       	or	r18, r20
    2f6a:	25 2b       	or	r18, r21
    2f6c:	21 f4       	brne	.+8      	; 0x2f76 <__fp_cmp+0x3e>
    2f6e:	08 95       	ret
    2f70:	0a 26       	eor	r0, r26
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <__fp_cmp+0x3e>
    2f74:	a1 40       	sbci	r26, 0x01	; 1
    2f76:	a6 95       	lsr	r26
    2f78:	8f ef       	ldi	r24, 0xFF	; 255
    2f7a:	81 1d       	adc	r24, r1
    2f7c:	81 1d       	adc	r24, r1
    2f7e:	08 95       	ret

00002f80 <__tablejump2__>:
    2f80:	ee 0f       	add	r30, r30
    2f82:	ff 1f       	adc	r31, r31
    2f84:	05 90       	lpm	r0, Z+
    2f86:	f4 91       	lpm	r31, Z
    2f88:	e0 2d       	mov	r30, r0
    2f8a:	09 94       	ijmp

00002f8c <__itoa_ncheck>:
    2f8c:	bb 27       	eor	r27, r27
    2f8e:	4a 30       	cpi	r20, 0x0A	; 10
    2f90:	31 f4       	brne	.+12     	; 0x2f9e <__itoa_ncheck+0x12>
    2f92:	99 23       	and	r25, r25
    2f94:	22 f4       	brpl	.+8      	; 0x2f9e <__itoa_ncheck+0x12>
    2f96:	bd e2       	ldi	r27, 0x2D	; 45
    2f98:	90 95       	com	r25
    2f9a:	81 95       	neg	r24
    2f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9e:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__utoa_common>

00002fa2 <__utoa_ncheck>:
    2fa2:	bb 27       	eor	r27, r27

00002fa4 <__utoa_common>:
    2fa4:	fb 01       	movw	r30, r22
    2fa6:	55 27       	eor	r21, r21
    2fa8:	aa 27       	eor	r26, r26
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	aa 1f       	adc	r26, r26
    2fb0:	a4 17       	cp	r26, r20
    2fb2:	10 f0       	brcs	.+4      	; 0x2fb8 <__utoa_common+0x14>
    2fb4:	a4 1b       	sub	r26, r20
    2fb6:	83 95       	inc	r24
    2fb8:	50 51       	subi	r21, 0x10	; 16
    2fba:	b9 f7       	brne	.-18     	; 0x2faa <__utoa_common+0x6>
    2fbc:	a0 5d       	subi	r26, 0xD0	; 208
    2fbe:	aa 33       	cpi	r26, 0x3A	; 58
    2fc0:	08 f0       	brcs	.+2      	; 0x2fc4 <__utoa_common+0x20>
    2fc2:	a9 5d       	subi	r26, 0xD9	; 217
    2fc4:	a1 93       	st	Z+, r26
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	79 f7       	brne	.-34     	; 0x2fa8 <__utoa_common+0x4>
    2fca:	b1 11       	cpse	r27, r1
    2fcc:	b1 93       	st	Z+, r27
    2fce:	11 92       	st	Z+, r1
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <strrev>

00002fd6 <strrev>:
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	fc 01       	movw	r30, r24
    2fda:	67 2f       	mov	r22, r23
    2fdc:	71 91       	ld	r23, Z+
    2fde:	77 23       	and	r23, r23
    2fe0:	e1 f7       	brne	.-8      	; 0x2fda <strrev+0x4>
    2fe2:	32 97       	sbiw	r30, 0x02	; 2
    2fe4:	04 c0       	rjmp	.+8      	; 0x2fee <strrev+0x18>
    2fe6:	7c 91       	ld	r23, X
    2fe8:	6d 93       	st	X+, r22
    2fea:	70 83       	st	Z, r23
    2fec:	62 91       	ld	r22, -Z
    2fee:	ae 17       	cp	r26, r30
    2ff0:	bf 07       	cpc	r27, r31
    2ff2:	c8 f3       	brcs	.-14     	; 0x2fe6 <strrev+0x10>
    2ff4:	08 95       	ret

00002ff6 <_exit>:
    2ff6:	f8 94       	cli

00002ff8 <__stop_program>:
    2ff8:	ff cf       	rjmp	.-2      	; 0x2ff8 <__stop_program>
