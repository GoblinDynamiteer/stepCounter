
mpu_conntest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002a5a  00002aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ff  00800134  00800134  00002b22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ff06  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025c0  00000000  00000000  00013282  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f4b  00000000  00000000  00015842  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019f0  00000000  00000000  00019790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039b2  00000000  00000000  0001b180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b189  00000000  00000000  0001eb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  00029cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__ctors_end>
       4:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
       8:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
       c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      10:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      14:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      18:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      1c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      20:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      24:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      28:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      2c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      30:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      34:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      38:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      3c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      40:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      44:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      48:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__vector_18>
      4c:	0c 94 46 13 	jmp	0x268c	; 0x268c <__vector_19>
      50:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      54:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      58:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      5c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      60:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      64:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__bad_interrupt>
      68:	f0 12       	cpse	r15, r16
      6a:	f8 12       	cpse	r15, r24
      6c:	12 13       	cpse	r17, r18
      6e:	02 13       	cpse	r16, r18
      70:	12 13       	cpse	r17, r18
      72:	12 13       	cpse	r17, r18
      74:	12 13       	cpse	r17, r18
      76:	12 13       	cpse	r17, r18
      78:	12 13       	cpse	r17, r18
      7a:	12 13       	cpse	r17, r18
      7c:	12 13       	cpse	r17, r18
      7e:	12 13       	cpse	r17, r18
      80:	12 13       	cpse	r17, r18
      82:	12 13       	cpse	r17, r18
      84:	12 13       	cpse	r17, r18
      86:	12 13       	cpse	r17, r18
      88:	12 13       	cpse	r17, r18
      8a:	12 13       	cpse	r17, r18
      8c:	12 13       	cpse	r17, r18
      8e:	12 13       	cpse	r17, r18
      90:	12 13       	cpse	r17, r18
      92:	12 13       	cpse	r17, r18
      94:	12 13       	cpse	r17, r18
      96:	12 13       	cpse	r17, r18
      98:	12 13       	cpse	r17, r18
      9a:	12 13       	cpse	r17, r18
      9c:	12 13       	cpse	r17, r18
      9e:	12 13       	cpse	r17, r18
      a0:	12 13       	cpse	r17, r18
      a2:	12 13       	cpse	r17, r18
      a4:	ea 12       	cpse	r14, r26
      a6:	12 13       	cpse	r17, r18
      a8:	12 13       	cpse	r17, r18
      aa:	12 13       	cpse	r17, r18
      ac:	12 13       	cpse	r17, r18
      ae:	12 13       	cpse	r17, r18
      b0:	12 13       	cpse	r17, r18
      b2:	12 13       	cpse	r17, r18
      b4:	12 13       	cpse	r17, r18
      b6:	de 12       	cpse	r13, r30
      b8:	12 13       	cpse	r17, r18
      ba:	12 13       	cpse	r17, r18
      bc:	12 13       	cpse	r17, r18
      be:	12 13       	cpse	r17, r18
      c0:	12 13       	cpse	r17, r18
      c2:	12 13       	cpse	r17, r18
      c4:	12 13       	cpse	r17, r18
      c6:	12 13       	cpse	r17, r18
      c8:	12 13       	cpse	r17, r18
      ca:	12 13       	cpse	r17, r18
      cc:	08 13       	cpse	r16, r24
      ce:	0d 13       	cpse	r16, r29

000000d0 <__trampolines_end>:
      d0:	ff e0       	ldi	r31, 0x0F	; 15
      d2:	ff d1       	rcall	.+1022   	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
      d4:	af ff       	.word	0xffaf	; ????
      d6:	32 ff       	sbrs	r19, 2
      d8:	d0 ff       	sbrs	r29, 0
      da:	fe ff       	Address 0x000000da is out of bounds.
.word	0xffff	; ????

000000db <u8g_dev_ssd13xx_sleep_on>:
      db:	ff e0 ff d1 ae ff d0 ff fe                          .........

000000e4 <u8g_dev_ssd1306_128x64_data_start>:
      e4:	ff e0 ff d1 10 00 ff fe                             ........

000000ec <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      ec:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      fc:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     10c:	a6 af ff d0 ff fe                                   ......

00000112 <u8g_font_fub11>:
     112:	00 18 15 ff fc 0b 02 52 05 37 20 ff fd 11 fc 0b     .......R.7 .....
     122:	fd 00 00 00 05 00 00 02 0b 0b 06 02 00 c0 c0 c0     ................
     132:	c0 c0 c0 c0 c0 00 00 c0 06 05 05 08 01 06 cc cc     ................
     142:	cc cc cc 0a 0b 16 0b 01 00 09 80 19 80 19 00 7f     ................
     152:	c0 33 00 32 00 36 00 ff 00 64 00 6c 00 4c 00 08     .3.2.6...d.l.L..
     162:	0e 0e 0a 01 fe 08 3e 7e cb c8 f8 7e 0f 0b cb eb     ......>~...~....
     172:	7e 08 08 0f 0b 16 11 01 00 3c 20 ee 60 c6 40 c6     ~........< .`.@.
     182:	c0 e7 80 7d 7c 03 ee 02 c6 06 c6 04 ee 08 7c 0b     ...}|.........|.
     192:	0b 16 0d 01 00 3e 00 77 00 63 00 77 00 3c 00 7c     .....>.w.c.w.<.|
     1a2:	c0 ee c0 c7 c0 c3 c0 f3 c0 3f e0 02 05 05 07 02     .........?......
     1b2:	06 c0 c0 c0 c0 c0 03 0e 0e 06 01 fd 60 60 60 e0     ............```.
     1c2:	c0 c0 c0 c0 c0 c0 e0 60 60 60 03 0e 0e 07 02 fd     .......```......
     1d2:	c0 c0 c0 60 60 60 60 60 60 60 60 e0 c0 c0 06 05     ...````````.....
     1e2:	05 0a 02 05 78 30 fc 30 78 09 09 12 10 03 00 08     ....x0.0x.......
     1f2:	00 08 00 08 00 08 00 ff 80 08 00 08 00 08 00 08     ................
     202:	00 03 04 04 05 01 fe 60 60 c0 c0 04 02 02 06 01     .......``.......
     212:	03 f0 f0 02 02 02 05 02 00 c0 c0 05 0c 0c 07 01     ................
     222:	ff 18 18 10 30 30 20 20 60 60 40 c0 c0 08 0b 0b     ....00  ``@.....
     232:	09 01 00 3c 66 c3 c3 c3 c3 c3 c3 c3 66 3c 04 0b     ...<f.......f<..
     242:	0b 09 02 00 30 f0 f0 30 30 30 30 30 30 30 30 08     ....0..00000000.
     252:	0b 0b 09 01 00 3e 77 63 03 07 06 1e 3c 70 e0 ff     .....>wc....<p..
     262:	08 0b 0b 09 01 00 7c ee c6 06 3c 06 03 c3 c7 7e     ......|...<....~
     272:	3c 08 0b 0b 09 01 00 0e 1e 1e 36 66 66 c6 ff ff     <.........6ff...
     282:	06 06 08 0b 0b 09 01 00 fe c0 c0 c0 fe e7 03 03     ................
     292:	c7 fe 7c 08 0b 0b 09 01 00 3c 76 43 c0 de e7 c3     ..|......<vC....
     2a2:	c3 c3 66 3c 08 0b 0b 09 01 00 ff 03 07 06 0e 0c     ..f<............
     2b2:	1c 18 38 38 70 08 0b 0b 09 01 00 7e e7 c3 e7 3c     ..88p......~...<
     2c2:	66 c3 c3 c3 e7 3c 08 0b 0b 09 01 00 3c 66 c3 c3     f....<......<f..
     2d2:	e7 7f 03 03 c6 6e 3c 02 08 08 05 02 00 c0 c0 00     .....n<.........
     2e2:	00 00 00 c0 c0 03 0a 0a 05 01 fe 60 60 00 00 00     ...........``...
     2f2:	00 60 60 c0 c0 0a 08 10 10 03 01 00 40 03 80 0c     .``.........@...
     302:	00 70 00 80 00 70 00 0e 00 01 c0 0a 04 08 10 03     .p...p..........
     312:	03 ff c0 00 00 00 00 ff c0 0a 08 10 10 03 01 80     ................
     322:	00 60 00 1c 00 03 80 00 c0 07 00 18 00 e0 00 07     .`..............
     332:	0b 0b 09 01 00 78 ee 86 06 0c 18 30 30 30 00 30     .....x.....000.0
     342:	0f 0e 1c 11 01 fd 07 e0 1e 78 30 1c 67 ec ee e6     .........x0.g...
     352:	cc 66 cc 66 cc 66 cc 66 ef fc 67 b8 30 00 1c 20     .f.f.f.f..g.0.. 
     362:	07 e0 0b 0b 16 0b 00 00 0e 00 0e 00 0f 00 1b 00     ................
     372:	1b 80 39 80 31 80 3f c0 7f c0 60 e0 e0 60 09 0b     ..9.1.?...`..`..
     382:	16 0b 01 00 fe 00 c7 00 c3 00 c3 00 c7 00 fc 00     ................
     392:	c3 00 c1 80 c1 80 c3 80 fe 00 0a 0b 16 0c 01 00     ................
     3a2:	1f 00 73 80 61 c0 c0 00 c0 00 c0 00 c0 00 c1 c0     ..s.a...........
     3b2:	61 c0 73 80 1f 00 09 0b 16 0b 01 00 fc 00 cf 00     a.s.............
     3c2:	c3 00 c1 80 c1 80 c1 80 c1 80 c1 80 c3 00 cf 00     ................
     3d2:	fc 00 08 0b 0b 0a 01 00 ff c0 c0 c0 c0 ff c0 c0     ................
     3e2:	c0 c0 ff 08 0b 0b 09 01 00 ff c0 c0 c0 c0 fe c0     ................
     3f2:	c0 c0 c0 c0 0a 0b 16 0c 01 00 1f 00 3b c0 60 c0     ............;.`.
     402:	e0 00 c0 00 c3 c0 c0 c0 c0 c0 60 c0 39 c0 1f c0     ..........`.9...
     412:	09 0b 16 0b 01 00 c1 80 c1 80 c1 80 c1 80 c1 80     ................
     422:	ff 80 c1 80 c1 80 c1 80 c1 80 c1 80 02 0b 0b 04     ................
     432:	01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 08 0b 0b     ................
     442:	0a 01 00 03 03 03 03 03 03 03 c3 c3 fe 7c 09 0b     .............|..
     452:	16 0b 01 00 c3 00 c7 00 ce 00 dc 00 f8 00 f8 00     ................
     462:	dc 00 ce 00 ce 00 c7 00 c3 80 08 0b 0b 09 01 00     ................
     472:	c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff 0d 0b 16 0f 01     ................
     482:	00 f0 78 f0 78 f8 f8 d8 d8 d8 d8 dd d8 cd 98 cd     ..x.x...........
     492:	98 cf 98 c7 18 c7 18 0a 0b 16 0c 01 00 f0 c0 f0     ................
     4a2:	c0 f8 c0 d8 c0 dc c0 cc c0 ce c0 c6 c0 c7 c0 c3     ................
     4b2:	c0 c3 c0 0b 0b 16 0d 01 00 1f 00 7b c0 60 c0 c0     ...........{.`..
     4c2:	60 c0 60 c0 60 c0 60 c0 60 60 c0 7b c0 1f 00 08     `.`.`.`.``.{....
     4d2:	0b 0b 0a 01 00 fc c7 c3 c3 c7 fe c0 c0 c0 c0 c0     ................
     4e2:	0c 0b 16 0e 01 00 1f 00 7b 80 60 c0 c0 60 c0 60     ........{.`..`.`
     4f2:	c0 60 c0 60 c0 60 60 c0 7b c0 1f f0 09 0b 16 0b     .`.`.``.{.......
     502:	01 00 fe 00 c7 80 c1 80 c1 80 c3 00 fe 00 c3 00     ................
     512:	c1 80 c1 80 c1 80 c1 80 09 0b 16 0b 01 00 3e 00     ..............>.
     522:	77 00 c1 80 e0 00 f8 00 7f 00 0f 80 01 80 c1 80     w...............
     532:	77 00 3e 00 09 0b 16 0b 01 00 ff 80 0c 00 0c 00     w.>.............
     542:	0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
     552:	0a 0b 16 0c 01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     562:	c0 c0 c0 c0 c0 c0 e1 c0 73 80 3e 00 0b 0b 16 0c     ........s.>.....
     572:	00 00 e0 60 60 60 70 e0 30 c0 31 c0 39 80 19 80     ...```p.0.1.9...
     582:	1f 80 1f 00 0f 00 0e 00 10 0b 16 10 00 00 e1 87     ................
     592:	63 c6 63 c6 63 c6 77 ce 36 6c 36 6c 36 6c 3c 3c     c.c.c.w.6l6l6l<<
     5a2:	1c 38 1c 38 0b 0b 16 0b 00 00 70 c0 31 c0 3b 80     .8.8......p.1.;.
     5b2:	1f 00 0e 00 0e 00 1f 00 1b 00 33 80 71 c0 e0 e0     ..........3.q...
     5c2:	0a 0b 16 0a 00 00 e1 c0 71 80 33 80 3b 00 1f 00     ........q.3.;...
     5d2:	1e 00 0c 00 0c 00 0c 00 0c 00 0c 00 08 0b 0b 0a     ................
     5e2:	01 00 ff 07 06 0e 1c 18 38 70 60 c0 ff 04 0e 0e     ........8p`.....
     5f2:	06 01 fd f0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     602:	f0 05 0c 0c 07 01 ff 80 c0 c0 40 60 60 20 30 30     ..........@`` 00
     612:	10 10 18 04 0e 0e 07 01 fd f0 30 30 30 30 30 30     ..........000000
     622:	30 30 30 30 30 30 f0 08 0a 0a 10 04 00 10 18 18     000000..........
     632:	24 24 24 42 42 81 81 08 01 01 08 00 fe ff 03 03     $$$BB...........
     642:	03 04 00 09 c0 40 20 07 08 08 09 01 00 3c 6e 06     .....@ ......<n.
     652:	7e e6 c6 ee 76 08 0b 0b 0a 01 00 c0 c0 c0 dc f6     ~...v...........
     662:	c7 c3 c3 c3 e6 dc 07 08 08 09 01 00 3c 6e c6 c0     ............<n..
     672:	c0 c6 ee 3c 08 0b 0b 0a 01 00 03 03 03 3b 6f e3     ...<.........;o.
     682:	c3 c3 c3 67 3b 07 08 08 09 01 00 3c 6e c6 fe c0     ...g;......<n...
     692:	c6 6e 3c 05 0b 0b 07 01 00 38 30 30 f8 30 30 30     .n<......800.000
     6a2:	30 30 30 30 08 0b 0b 0a 01 fd 3b 6f e3 c3 c3 c3     0000......;o....
     6b2:	67 3b 03 67 3c 07 0b 0b 09 01 00 c0 c0 c0 dc ee     g;.g<...........
     6c2:	c6 c6 c6 c6 c6 c6 02 0b 0b 04 01 00 c0 c0 00 c0     ................
     6d2:	c0 c0 c0 c0 c0 c0 c0 03 0e 0e 05 01 fd 60 60 00     .............``.
     6e2:	60 60 60 60 60 60 60 60 60 e0 e0 07 0b 0b 09 01     `````````.......
     6f2:	00 c0 c0 c0 ce dc d8 f0 d8 dc cc c6 02 0b 0b 04     ................
     702:	01 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 0c 08 10     ................
     712:	0e 01 00 dc e0 ef 70 c6 30 c6 30 c6 30 c6 30 c6     ......p.0.0.0.0.
     722:	30 c6 30 07 08 08 09 01 00 dc ee c6 c6 c6 c6 c6     0.0.............
     732:	c6 08 08 08 0a 01 00 3c 66 c3 c3 c3 c3 66 3c 08     .......<f....f<.
     742:	0b 0b 0a 01 fd dc e6 c3 c3 c3 c7 f6 dc c0 c0 c0     ................
     752:	08 0b 0b 0a 01 fd 3b 67 c3 c3 c3 c3 6f 3b 03 03     ......;g....o;..
     762:	03 05 08 08 07 01 00 d8 f0 c0 c0 c0 c0 c0 c0 07     ................
     772:	08 08 09 01 00 7c ee c0 f8 1e c6 ee 7c 06 0a 0a     .....|......|...
     782:	08 01 00 30 30 fc 30 30 30 30 30 38 1c 07 08 08     ...00.000008....
     792:	09 01 00 c6 c6 c6 c6 c6 c6 ee 76 08 08 08 09 00     ..........v.....
     7a2:	00 e3 63 67 76 36 3c 1c 1c 0d 08 10 0e 00 00 e7     ..cgv6<.........
     7b2:	18 67 98 67 98 6f b0 3d f0 3c f0 3c f0 38 e0 08     .g.g.o.=.<.<.8..
     7c2:	08 08 09 00 00 63 76 3e 1c 3c 3e 67 e3 08 0b 0b     .....cv>.<>g....
     7d2:	09 00 fd e3 63 77 36 36 3e 1c 1c 18 18 38 06 08     ....cw66>....8..
     7e2:	08 08 01 00 fc 0c 18 38 70 60 c0 fc 06 0f 0f 08     .......8p`......
     7f2:	01 fc 1c 38 30 30 30 30 70 c0 60 30 30 30 30 30     ...80000p.`00000
     802:	1c 01 10 10 05 02 fc 80 80 80 80 80 80 80 80 80     ................
     812:	80 80 80 80 80 80 80 06 0f 0f 08 01 fc e0 70 30     ..............p0
     822:	30 30 30 18 0c 18 30 30 30 30 30 f0 08 02 02 09     000...00000.....
     832:	00 03 79 df ff ff ff ff ff ff ff ff ff ff ff ff     ..y.............
     842:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     852:	ff ff ff ff ff 00 00 00 05 00 00 02 0b 0b 06 02     ................
     862:	fd c0 00 00 c0 c0 c0 c0 c0 c0 c0 c0 07 0c 0c 09     ................
     872:	01 fe 04 04 3c 6e ce d0 d0 d6 6e 3c 20 40 08 0b     ....<n....n< @..
     882:	0b 0a 01 00 3e 77 60 60 fc 60 60 60 60 60 ff 09     ....>w``.`````..
     892:	08 10 0a 01 02 80 80 5d 00 22 00 41 00 41 00 22     .......].".A.A."
     8a2:	00 5d 00 80 80 09 0b 16 0b 01 00 c3 80 63 00 67     .]...........c.g
     8b2:	00 f7 80 3e 00 3c 00 ff 80 18 00 18 00 18 00 18     ...>.<..........
     8c2:	00 01 0e 0e 05 02 fd 80 80 80 80 80 80 00 00 80     ................
     8d2:	80 80 80 80 80 06 0e 0e 08 01 fd 78 ec c0 e0 78     ...........x...x
     8e2:	7c cc cc f8 78 1c 0c 9c f8 05 01 01 05 00 0a d8     |...x...........
     8f2:	0c 0b 16 0e 01 00 1f 80 39 c0 6f 60 d9 b0 98 10     ........9.o`....
     902:	98 10 99 90 8f 10 40 20 30 c0 1f 80 05 08 08 07     ......@ 0.......
     912:	01 03 70 d8 78 d8 d8 78 00 f8 08 06 06 0a 01 01     ..p.x..x........
     922:	67 66 ee ce 66 67 09 04 08 0a 00 03 ff 80 00 80     gf..fg..........
     932:	00 80 00 80 ff 0c 0b 16 0e 01 00 1f 80 39 c0 6f     .............9.o
     942:	60 c9 b0 88 90 8f 10 89 90 88 90 48 a0 30 c0 1f     `..........H.0..
     952:	80 05 01 01 05 00 0a f8 04 04 04 06 01 07 60 d0     ..............`.
     962:	90 f0 09 0a 14 10 03 00 08 00 08 00 08 00 ff 80     ................
     972:	08 00 08 00 08 00 00 00 00 00 ff 80 05 06 06 07     ................
     982:	01 05 70 d8 18 30 c0 f8 05 07 07 07 01 04 70 d8     ..p..0........p.
     992:	18 70 18 d8 70 03 03 03 04 01 09 60 c0 80 ff 07     .p..p......`....
     9a2:	0e 0e 09 01 fd 7e f4 f4 f4 f4 74 14 14 14 14 14     .....~....t.....
     9b2:	14 14 14 02 02 02 04 01 04 c0 c0 04 04 04 03 00     ................
     9c2:	fc 40 30 b0 e0 03 06 06 05 01 05 60 e0 60 60 60     .@0........`.```
     9d2:	60 06 08 08 08 01 03 78 fc cc cc cc 78 00 fc 08     `......x....x...
     9e2:	06 06 0a 01 01 cc 66 67 67 66 cc 0c 0b 16 0d 01     ......fggf......
     9f2:	00 e0 80 61 80 63 00 63 00 66 00 6c e0 0c e0 19     ...a.c.c.f.l....
     a02:	e0 19 60 33 f0 60 60 0b 0b 16 0d 01 00 61 00 e3     ..`3.``......a..
     a12:	00 62 00 66 00 64 00 6d e0 1b 60 18 60 31 c0 23     .b.f.d.m..`.`1.#
     a22:	00 63 e0 0c 0b 16 0d 01 00 78 c0 d8 80 71 80 d9     .c.......x...q..
     a32:	00 73 00 06 60 04 e0 0d e0 19 60 19 f0 30 60 07     .s..`.....`..0`.
     a42:	0b 0b 09 01 fd 18 00 18 18 38 70 e0 c0 c2 fe 3c     .........8p....<
     a52:	0b 10 20 0b 00 00 18 00 0c 00 04 00 00 00 00 00     .. .............
     a62:	0e 00 0e 00 0f 00 1b 00 1b 80 39 80 31 80 3f c0     ..........9.1.?.
     a72:	7f c0 60 e0 e0 60 0b 10 20 0b 00 00 03 00 02 00     ..`..`.. .......
     a82:	04 00 00 00 00 00 0e 00 0e 00 0f 00 1b 00 1b 80     ................
     a92:	39 80 31 80 3f c0 7f c0 60 e0 e0 60 0b 10 20 0b     9.1.?...`..`.. .
     aa2:	00 00 06 00 0e 00 19 00 00 00 00 00 0e 00 0e 00     ................
     ab2:	0f 00 1b 00 1b 80 39 80 31 80 3f c0 7f c0 60 e0     ......9.1.?...`.
     ac2:	e0 60 0b 0f 1e 0b 00 00 0d 00 17 00 00 00 00 00     .`..............
     ad2:	0e 00 0e 00 0f 00 1b 00 1b 80 39 80 31 80 3f c0     ..........9.1.?.
     ae2:	7f c0 60 e0 e0 60 0b 0f 1e 0b 00 00 1b 00 00 00     ..`..`..........
     af2:	00 00 00 00 0e 00 0e 00 0f 00 1b 00 1b 00 3b 80     ..............;.
     b02:	31 80 3f c0 7f c0 60 e0 e0 60 0a 11 22 0c 01 00     1.?...`..`.."...
     b12:	0c 00 12 00 12 00 1e 00 00 00 00 00 0c 00 1e 00     ................
     b22:	1e 00 3f 00 33 00 33 00 63 80 7f 80 ff c0 c0 c0     ..?.3.3.c.......
     b32:	c0 c0 0f 0b 16 10 00 00 03 fe 07 80 07 80 0d 80     ................
     b42:	1d 80 19 fe 39 80 3f 80 61 80 61 80 c1 fe 0a 0f     ....9.?.a.a.....
     b52:	1e 0c 01 fc 1f 00 77 80 61 c0 c0 00 c0 00 c0 00     ......w.a.......
     b62:	c0 00 c1 c0 61 c0 73 80 3e 00 08 00 0e 00 02 00     ....a.s.>.......
     b72:	1c 00 08 10 10 0a 01 00 60 30 18 00 00 ff c0 c0     ........`0......
     b82:	c0 c0 ff c0 c0 c0 c0 ff 08 10 10 0a 01 00 0c 08     ................
     b92:	10 00 00 ff c0 c0 c0 c0 ff c0 c0 c0 c0 ff 08 10     ................
     ba2:	10 0a 01 00 18 3c 24 00 00 ff c0 c0 c0 c0 ff c0     .....<$.........
     bb2:	c0 c0 c0 ff 08 0f 0f 0a 01 00 66 00 00 00 ff c0     ..........f.....
     bc2:	c0 c0 c0 ff c0 c0 c0 c0 ff 04 10 10 04 ff 00 c0     ................
     bd2:	60 30 00 00 30 30 30 30 30 30 30 30 30 30 30 04     `0..00000000000.
     be2:	10 10 04 01 00 70 60 c0 00 00 c0 c0 c0 c0 c0 c0     .....p`.........
     bf2:	c0 c0 c0 c0 c0 04 10 10 04 00 00 60 f0 90 00 00     ...........`....
     c02:	60 60 60 60 60 60 60 60 60 60 60 05 0f 0f 05 00     ```````````.....
     c12:	00 d8 00 00 00 30 30 30 30 30 30 30 30 30 30 30     .....00000000000
     c22:	0b 0b 16 0c 00 00 7f 00 63 80 60 c0 60 e0 60 60     ........c.`.`.``
     c32:	fc 60 60 60 60 e0 60 c0 63 80 7f 00 0a 0f 1e 0c     .````.`.c.......
     c42:	01 00 19 00 16 00 00 00 00 00 f0 c0 f0 c0 f8 c0     ................
     c52:	d8 c0 dc c0 cc c0 ce c0 c6 c0 c7 c0 c3 c0 c3 c0     ................
     c62:	0b 10 20 0d 01 00 18 00 08 00 0c 00 00 00 00 00     .. .............
     c72:	1f 00 7b c0 60 c0 c0 60 c0 60 c0 60 c0 60 c0 60     ..{.`..`.`.`.`.`
     c82:	60 c0 7b c0 1f 00 0b 10 20 0d 01 00 03 00 02 00     `.{..... .......
     c92:	04 00 00 00 00 00 1f 00 7b c0 60 c0 c0 60 c0 60     ........{.`..`.`
     ca2:	c0 60 c0 60 c0 60 60 c0 7b c0 1f 00 0b 10 20 0d     .`.`.``.{..... .
     cb2:	01 00 0e 00 1b 00 11 00 00 00 00 00 1f 00 7b c0     ..............{.
     cc2:	60 c0 c0 60 c0 60 c0 60 c0 60 c0 60 60 c0 7b c0     `..`.`.`.`.``.{.
     cd2:	1f 00 0b 0f 1e 0d 01 00 1f 00 00 00 00 00 00 00     ................
     ce2:	1f 00 7b c0 60 c0 c0 60 c0 60 c0 60 c0 60 e0 e0     ..{.`..`.`.`.`..
     cf2:	60 c0 7f c0 1f 00 0b 0f 1e 0d 01 00 1b 00 00 00     `...............
     d02:	00 00 00 00 1f 00 7b c0 60 c0 c0 60 c0 60 c0 60     ......{.`..`.`.`
     d12:	c0 60 c0 60 60 c0 7b c0 1f 00 08 08 08 10 04 00     .`.``.{.........
     d22:	81 c3 66 18 18 24 42 81 0b 0b 16 0d 01 00 1f a0     ..f..$B.........
     d32:	3b c0 60 c0 c1 60 c2 60 c4 60 c8 60 d0 60 e0 c0     ;.`..`.`.`.`.`..
     d42:	7b 80 bf 00 0a 10 20 0c 01 00 30 00 18 00 08 00     {..... ...0.....
     d52:	00 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     d62:	c0 c0 c0 c0 e1 c0 7f 80 3e 00 0a 10 20 0c 01 00     ........>... ...
     d72:	03 00 06 00 04 00 00 00 00 00 c0 c0 c0 c0 c0 c0     ................
     d82:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 e1 c0 7f 80 3e 00     ..............>.
     d92:	0a 10 20 0c 01 00 1c 00 1e 00 33 00 00 00 00 00     .. .......3.....
     da2:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     db2:	e1 c0 7f 80 3e 00 0a 0f 1e 0c 01 00 33 00 00 00     ....>.......3...
     dc2:	00 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     dd2:	c0 c0 c0 c0 e1 c0 73 80 3e 00 0a 10 20 0a 00 00     ......s.>... ...
     de2:	06 00 06 00 04 00 00 00 00 00 e1 c0 71 80 33 80     ............q.3.
     df2:	3b 00 1f 00 1e 00 0c 00 0c 00 0c 00 0c 00 0c 00     ;...............
     e02:	08 0b 0b 0a 01 00 c0 c0 fe c7 c3 c3 c7 fe c0 c0     ................
     e12:	c0 08 0b 0b 0a 01 00 7c ee c6 ce dc d8 ce c7 c3     .......|........
     e22:	db de 07 0c 0c 09 01 00 60 30 10 00 3c 6e 06 7e     ........`0..<n.~
     e32:	e6 c6 ee 76 07 0c 0c 09 01 00 0c 18 10 00 3c 6e     ...v..........<n
     e42:	06 7e e6 c6 ee 76 07 0c 0c 09 01 00 38 2c 44 00     .~...v......8,D.
     e52:	3c 6e 06 7e e6 c6 ee 76 07 0b 0b 09 01 00 3c 00     <n.~...v......<.
     e62:	00 3c 6e 06 7e e6 c6 ee 76 07 0b 0b 09 01 00 6c     .<n.~...v......l
     e72:	00 00 3c e6 06 7e e6 c6 ee 76 07 0d 0d 09 01 00     ..<..~...v......
     e82:	18 24 24 3c 00 3c 66 06 7e e6 c6 ee 7e 0d 08 10     .$$<.<f.~...~...
     e92:	0f 01 00 3c e0 67 b0 07 18 7f f8 e7 00 c7 18 ed     ...<.g..........
     ea2:	b8 78 f0 07 0c 0c 09 01 fc 3c 6e c6 c0 c0 c6 6e     .x.......<n....n
     eb2:	3c 10 1c 04 38 07 0d 0d 09 01 00 60 20 30 10 00     <...8......` 0..
     ec2:	3c 6e c6 fe c0 c6 6e 3c 07 0d 0d 09 01 00 0c 0c     <n....n<........
     ed2:	18 10 00 3c 6e c6 fe c0 c6 6e 3c 07 0d 0d 09 01     ...<n....n<.....
     ee2:	00 18 38 2c 44 00 3c 6e c6 fe c0 c6 6e 3c 07 0c     ..8,D.<n....n<..
     ef2:	0c 09 01 00 6c 00 00 00 3c 6e c6 fe c0 ce 6e 3c     ....l...<n....n<
     f02:	03 0c 0c 04 00 00 c0 60 20 00 60 60 60 60 60 60     .......` .``````
     f12:	60 60 03 0c 0c 04 01 00 60 c0 80 00 c0 c0 c0 c0     ``......`.......
     f22:	c0 c0 c0 c0 05 0c 0c 04 00 00 60 d0 88 00 60 60     ..........`...``
     f32:	60 60 60 60 60 60 05 0b 0b 05 00 00 d8 00 00 30     ``````.........0
     f42:	30 30 30 30 30 30 30 08 0b 0b 0a 01 00 33 1c 66     0000000......3.f
     f52:	3e 67 c3 c3 c3 c3 67 3c 07 0b 0b 09 01 00 3c 00     >g....g<......<.
     f62:	00 dc ee c6 c6 c6 c6 c6 c6 08 0d 0d 0a 01 00 60     ...............`
     f72:	30 10 08 00 3c 66 c3 c3 c3 c3 66 3c 08 0d 0d 0a     0...<f....f<....
     f82:	01 00 06 0c 08 10 00 3c 66 c3 c3 c3 c3 66 3c 08     .......<f....f<.
     f92:	0d 0d 0a 01 00 18 1c 24 22 00 3c 66 c3 c3 c3 c3     .......$".<f....
     fa2:	66 3c 08 0b 0b 0a 01 00 3c 00 00 3c 66 c3 c3 c3     f<......<..<f...
     fb2:	c3 66 3c 08 0c 0c 0a 01 00 66 00 00 00 3c 66 c3     .f<......f...<f.
     fc2:	c3 c3 c3 66 3c 0a 06 0c 10 03 02 0c 00 00 00 ff     ...f<...........
     fd2:	c0 00 00 00 00 0c 00 08 0a 0a 0a 01 ff 01 3e 66     ..............>f
     fe2:	cf cb d3 e3 76 fc 80 07 0c 0c 09 01 00 60 30 10     ....v........`0.
     ff2:	00 c6 c6 c6 c6 c6 c6 ee 76 07 0c 0c 09 01 00 0c     ........v.......
    1002:	18 10 00 c6 c6 c6 c6 c6 c6 ee 76 07 0c 0c 09 01     ..........v.....
    1012:	00 38 28 44 00 c6 c6 c6 c6 c6 c6 ee 76 07 0b 0b     .8(D........v...
    1022:	09 01 00 6c 00 00 c6 c6 c6 c6 c6 c6 ee 76 09 10     ...l.........v..
    1032:	20 09 00 fd 07 00 06 00 0c 00 08 00 00 00 63 80      .............c.
    1042:	63 00 73 00 36 00 36 00 1e 00 1c 00 1c 00 1c 00     c.s.6.6.........
    1052:	f8 00 70 00 08 0e 0e 0a 01 fd c0 c0 c0 dc e6 c3     ..p.............
    1062:	c3 c3 c7 e6 dc c0 c0 c0 08 0e 0e 09 01 fd 6c 00     ..............l.
    1072:	00 c7 c6 ee 6c 6c 3c 38 38 38 30 30                 ....ll<88800

0000107e <__ctors_end>:
    107e:	11 24       	eor	r1, r1
    1080:	1f be       	out	0x3f, r1	; 63
    1082:	cf ef       	ldi	r28, 0xFF	; 255
    1084:	d8 e0       	ldi	r29, 0x08	; 8
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	cd bf       	out	0x3d, r28	; 61

0000108a <__do_copy_data>:
    108a:	11 e0       	ldi	r17, 0x01	; 1
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b1 e0       	ldi	r27, 0x01	; 1
    1090:	ea e5       	ldi	r30, 0x5A	; 90
    1092:	fa e2       	ldi	r31, 0x2A	; 42
    1094:	02 c0       	rjmp	.+4      	; 0x109a <__do_copy_data+0x10>
    1096:	05 90       	lpm	r0, Z+
    1098:	0d 92       	st	X+, r0
    109a:	a4 33       	cpi	r26, 0x34	; 52
    109c:	b1 07       	cpc	r27, r17
    109e:	d9 f7       	brne	.-10     	; 0x1096 <__do_copy_data+0xc>

000010a0 <__do_clear_bss>:
    10a0:	22 e0       	ldi	r18, 0x02	; 2
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b1 e0       	ldi	r27, 0x01	; 1
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <.do_clear_bss_start>

000010a8 <.do_clear_bss_loop>:
    10a8:	1d 92       	st	X+, r1

000010aa <.do_clear_bss_start>:
    10aa:	a3 33       	cpi	r26, 0x33	; 51
    10ac:	b2 07       	cpc	r27, r18
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <.do_clear_bss_loop>
    10b0:	0e 94 29 0a 	call	0x1452	; 0x1452 <main>
    10b4:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <_exit>

000010b8 <__bad_interrupt>:
    10b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000010bc <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    10bc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10c0:	80 e2       	ldi	r24, 0x20	; 32
    10c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    10c6:	08 95       	ret

000010c8 <i2c_start>:
    10c8:	94 ea       	ldi	r25, 0xA4	; 164
    10ca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10ce:	4f ef       	ldi	r20, 0xFF	; 255
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	ec eb       	ldi	r30, 0xBC	; 188
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	90 81       	ld	r25, Z
    10dc:	99 23       	and	r25, r25
    10de:	34 f0       	brlt	.+12     	; 0x10ec <i2c_start+0x24>
    10e0:	41 50       	subi	r20, 0x01	; 1
    10e2:	51 09       	sbc	r21, r1
    10e4:	61 09       	sbc	r22, r1
    10e6:	71 09       	sbc	r23, r1
    10e8:	c0 f7       	brcc	.-16     	; 0x10da <i2c_start+0x12>
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <i2c_start+0x2c>
    10ec:	45 2b       	or	r20, r21
    10ee:	46 2b       	or	r20, r22
    10f0:	47 2b       	or	r20, r23
    10f2:	41 f1       	breq	.+80     	; 0x1144 <i2c_start+0x7c>
    10f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10f8:	98 7f       	andi	r25, 0xF8	; 248
    10fa:	98 30       	cpi	r25, 0x08	; 8
    10fc:	11 f0       	breq	.+4      	; 0x1102 <i2c_start+0x3a>
    10fe:	90 31       	cpi	r25, 0x10	; 16
    1100:	19 f5       	brne	.+70     	; 0x1148 <i2c_start+0x80>
    1102:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1106:	84 e8       	ldi	r24, 0x84	; 132
    1108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ec eb       	ldi	r30, 0xBC	; 188
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	20 81       	ld	r18, Z
    111a:	22 23       	and	r18, r18
    111c:	2c f0       	brlt	.+10     	; 0x1128 <i2c_start+0x60>
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	a1 09       	sbc	r26, r1
    1122:	b1 09       	sbc	r27, r1
    1124:	c8 f7       	brcc	.-14     	; 0x1118 <i2c_start+0x50>
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <i2c_start+0x68>
    1128:	89 2b       	or	r24, r25
    112a:	8a 2b       	or	r24, r26
    112c:	8b 2b       	or	r24, r27
    112e:	71 f0       	breq	.+28     	; 0x114c <i2c_start+0x84>
    1130:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1134:	98 7f       	andi	r25, 0xF8	; 248
    1136:	98 31       	cpi	r25, 0x18	; 24
    1138:	59 f0       	breq	.+22     	; 0x1150 <i2c_start+0x88>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 34       	cpi	r25, 0x40	; 64
    113e:	49 f4       	brne	.+18     	; 0x1152 <i2c_start+0x8a>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	08 95       	ret
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	08 95       	ret
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	08 95       	ret
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret

00001154 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1154:	84 e9       	ldi	r24, 0x94	; 148
    1156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	ec eb       	ldi	r30, 0xBC	; 188
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	20 81       	ld	r18, Z
    1164:	24 ff       	sbrs	r18, 4
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <i2c_stop+0x1e>
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	81 15       	cp	r24, r1
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	92 07       	cpc	r25, r18
    1170:	c1 f7       	brne	.-16     	; 0x1162 <i2c_stop+0xe>
    1172:	08 95       	ret

00001174 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1174:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1178:	84 e8       	ldi	r24, 0x84	; 132
    117a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a0 e0       	ldi	r26, 0x00	; 0
    1184:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1186:	ec eb       	ldi	r30, 0xBC	; 188
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	20 81       	ld	r18, Z
    118c:	22 23       	and	r18, r18
    118e:	2c f0       	brlt	.+10     	; 0x119a <i2c_write+0x26>
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	a1 09       	sbc	r26, r1
    1194:	b1 09       	sbc	r27, r1
    1196:	c8 f7       	brcc	.-14     	; 0x118a <i2c_write+0x16>
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <i2c_write+0x2e>
	if(i2c_timer == 0)
    119a:	89 2b       	or	r24, r25
    119c:	8a 2b       	or	r24, r26
    119e:	8b 2b       	or	r24, r27
    11a0:	41 f0       	breq	.+16     	; 0x11b2 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    11a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    11a6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	98 32       	cpi	r25, 0x28	; 40
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <i2c_write+0x40>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    11b4:	08 95       	ret

000011b6 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    11b6:	84 ec       	ldi	r24, 0xC4	; 196
    11b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    11c4:	ec eb       	ldi	r30, 0xBC	; 188
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	20 81       	ld	r18, Z
    11ca:	22 23       	and	r18, r18
    11cc:	2c f0       	brlt	.+10     	; 0x11d8 <i2c_readAck+0x22>
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	a1 09       	sbc	r26, r1
    11d2:	b1 09       	sbc	r27, r1
    11d4:	c8 f7       	brcc	.-14     	; 0x11c8 <i2c_readAck+0x12>
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    11d8:	89 2b       	or	r24, r25
    11da:	8a 2b       	or	r24, r26
    11dc:	8b 2b       	or	r24, r27
    11de:	19 f0       	breq	.+6      	; 0x11e6 <i2c_readAck+0x30>
		return 0;

    return TWDR;
    11e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    11e4:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    11e6:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    11e8:	08 95       	ret

000011ea <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    11ea:	84 e8       	ldi	r24, 0x84	; 132
    11ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    11f8:	ec eb       	ldi	r30, 0xBC	; 188
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	20 81       	ld	r18, Z
    11fe:	22 23       	and	r18, r18
    1200:	2c f0       	brlt	.+10     	; 0x120c <i2c_readNak+0x22>
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	a1 09       	sbc	r26, r1
    1206:	b1 09       	sbc	r27, r1
    1208:	c8 f7       	brcc	.-14     	; 0x11fc <i2c_readNak+0x12>
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    120c:	89 2b       	or	r24, r25
    120e:	8a 2b       	or	r24, r26
    1210:	8b 2b       	or	r24, r27
    1212:	19 f0       	breq	.+6      	; 0x121a <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    1214:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1218:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    121a:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    121c:	08 95       	ret

0000121e <getAcc>:
	do{
		u8g_DrawStr(&u8g, 2, 16, ax);
		u8g_DrawStr(&u8g, 2, 16*2 + 1, ay);
		u8g_DrawStr(&u8g, 2, 16*3 + 2, az);
	}while(u8g_NextPage(&u8g));
}
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	c8 2f       	mov	r28, r24
    1224:	80 ed       	ldi	r24, 0xD0	; 208
    1226:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
    122a:	8c 2f       	mov	r24, r28
    122c:	0e 94 ba 08 	call	0x1174	; 0x1174 <i2c_write>
    1230:	8a e1       	ldi	r24, 0x1A	; 26
    1232:	8a 95       	dec	r24
    1234:	f1 f7       	brne	.-4      	; 0x1232 <getAcc+0x14>
    1236:	00 c0       	rjmp	.+0      	; 0x1238 <getAcc+0x1a>
    1238:	81 ed       	ldi	r24, 0xD1	; 209
    123a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
    123e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <i2c_readAck>
    1242:	d8 2f       	mov	r29, r24
    1244:	0e 94 f5 08 	call	0x11ea	; 0x11ea <i2c_readNak>
    1248:	c8 2f       	mov	r28, r24
    124a:	0e 94 aa 08 	call	0x1154	; 0x1154 <i2c_stop>
    124e:	6c 2f       	mov	r22, r28
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	7d 2b       	or	r23, r29
    1254:	07 2e       	mov	r0, r23
    1256:	00 0c       	add	r0, r0
    1258:	88 0b       	sbc	r24, r24
    125a:	99 0b       	sbc	r25, r25
    125c:	0e 94 1a 14 	call	0x2834	; 0x2834 <__floatsisf>
    1260:	9f 77       	andi	r25, 0x7F	; 127
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a e7       	ldi	r20, 0x7A	; 122
    1268:	54 e4       	ldi	r21, 0x44	; 68
    126a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__divsf3>
    126e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__fixsfsi>
    1272:	cb 01       	movw	r24, r22
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <drawSteps>:
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	00 d0       	rcall	.+0      	; 0x1280 <drawSteps+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <drawSteps+0x8>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <drawSteps+0xa>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <u8g_dev_ssd1306_128x64_i2c_pb+0x8>
    128c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <u8g_dev_ssd1306_128x64_i2c_pb+0x9>
    1290:	3a 83       	std	Y+2, r19	; 0x02
    1292:	29 83       	std	Y+1, r18	; 0x01
    1294:	1b 82       	std	Y+3, r1	; 0x03
    1296:	1c 82       	std	Y+4, r1	; 0x04
    1298:	1d 82       	std	Y+5, r1	; 0x05
    129a:	1e 82       	std	Y+6, r1	; 0x06
    129c:	4a e0       	ldi	r20, 0x0A	; 10
    129e:	be 01       	movw	r22, r28
    12a0:	6f 5f       	subi	r22, 0xFF	; 255
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__itoa_ncheck>
    12a8:	8c ef       	ldi	r24, 0xFC	; 252
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 ca 11 	call	0x2394	; 0x2394 <u8g_FirstPage>
    12b0:	9e 01       	movw	r18, r28
    12b2:	2f 5f       	subi	r18, 0xFF	; 255
    12b4:	3f 4f       	sbci	r19, 0xFF	; 255
    12b6:	40 e1       	ldi	r20, 0x10	; 16
    12b8:	62 e0       	ldi	r22, 0x02	; 2
    12ba:	8c ef       	ldi	r24, 0xFC	; 252
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	0e 94 1b 10 	call	0x2036	; 0x2036 <u8g_DrawStr>
    12c2:	8c ef       	ldi	r24, 0xFC	; 252
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <u8g_NextPage>
    12ca:	81 11       	cpse	r24, r1
    12cc:	f1 cf       	rjmp	.-30     	; 0x12b0 <drawSteps+0x36>
    12ce:	26 96       	adiw	r28, 0x06	; 6
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <drawString>:
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	ec 01       	movw	r28, r24
    12e6:	8c ef       	ldi	r24, 0xFC	; 252
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 ca 11 	call	0x2394	; 0x2394 <u8g_FirstPage>
    12ee:	9e 01       	movw	r18, r28
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	8c ef       	ldi	r24, 0xFC	; 252
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	0e 94 1b 10 	call	0x2036	; 0x2036 <u8g_DrawStr>
    12fc:	8c ef       	ldi	r24, 0xFC	; 252
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <u8g_NextPage>
    1304:	81 11       	cpse	r24, r1
    1306:	f3 cf       	rjmp	.-26     	; 0x12ee <drawString+0xe>
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <getAccOffset>:

void getAccOffset(int16_t *ox, int16_t *oy, int16_t *oz){
    130e:	2f 92       	push	r2
    1310:	3f 92       	push	r3
    1312:	4f 92       	push	r4
    1314:	5f 92       	push	r5
    1316:	6f 92       	push	r6
    1318:	7f 92       	push	r7
    131a:	8f 92       	push	r8
    131c:	9f 92       	push	r9
    131e:	af 92       	push	r10
    1320:	bf 92       	push	r11
    1322:	cf 92       	push	r12
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	00 d0       	rcall	.+0      	; 0x1334 <getAccOffset+0x26>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <getAccOffset+0x28>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	8c 01       	movw	r16, r24
    133c:	1b 01       	movw	r2, r22
    133e:	5a 83       	std	Y+2, r21	; 0x02
    1340:	49 83       	std	Y+1, r20	; 0x01
	uint32_t accX = 0, accY = 0, accZ = 0;
	drawString("Calibrating...");
    1342:	84 e1       	ldi	r24, 0x14	; 20
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	0e 94 70 09 	call	0x12e0	; 0x12e0 <drawString>
    134a:	8a e0       	ldi	r24, 0x0A	; 10
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	8b 83       	std	Y+3, r24	; 0x03
		u8g_DrawStr(&u8g, 2, 16*3 + 2, az);
	}while(u8g_NextPage(&u8g));
}

void getAccOffset(int16_t *ox, int16_t *oy, int16_t *oz){
	uint32_t accX = 0, accY = 0, accZ = 0;
    1352:	c1 2c       	mov	r12, r1
    1354:	d1 2c       	mov	r13, r1
    1356:	76 01       	movw	r14, r12
    1358:	41 2c       	mov	r4, r1
    135a:	51 2c       	mov	r5, r1
    135c:	32 01       	movw	r6, r4
    135e:	81 2c       	mov	r8, r1
    1360:	91 2c       	mov	r9, r1
    1362:	54 01       	movw	r10, r8
	drawString("Calibrating...");
	for(int i = 0; i < OFFSET_NUM; i++){
		accX += getAcc(X);
    1364:	8b e3       	ldi	r24, 0x3B	; 59
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
    136c:	09 2e       	mov	r0, r25
    136e:	00 0c       	add	r0, r0
    1370:	aa 0b       	sbc	r26, r26
    1372:	bb 0b       	sbc	r27, r27
    1374:	88 0e       	add	r8, r24
    1376:	99 1e       	adc	r9, r25
    1378:	aa 1e       	adc	r10, r26
    137a:	bb 1e       	adc	r11, r27
		accY += getAcc(Y); 
    137c:	8d e3       	ldi	r24, 0x3D	; 61
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
    1384:	09 2e       	mov	r0, r25
    1386:	00 0c       	add	r0, r0
    1388:	aa 0b       	sbc	r26, r26
    138a:	bb 0b       	sbc	r27, r27
    138c:	48 0e       	add	r4, r24
    138e:	59 1e       	adc	r5, r25
    1390:	6a 1e       	adc	r6, r26
    1392:	7b 1e       	adc	r7, r27
		accZ += getAcc(Z); 
    1394:	8f e3       	ldi	r24, 0x3F	; 63
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
    139c:	09 2e       	mov	r0, r25
    139e:	00 0c       	add	r0, r0
    13a0:	aa 0b       	sbc	r26, r26
    13a2:	bb 0b       	sbc	r27, r27
    13a4:	c8 0e       	add	r12, r24
    13a6:	d9 1e       	adc	r13, r25
    13a8:	ea 1e       	adc	r14, r26
    13aa:	fb 1e       	adc	r15, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ac:	ef e1       	ldi	r30, 0x1F	; 31
    13ae:	fe e4       	ldi	r31, 0x4E	; 78
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <getAccOffset+0xa2>
    13b4:	00 c0       	rjmp	.+0      	; 0x13b6 <getAccOffset+0xa8>
    13b6:	00 00       	nop
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
}

void getAccOffset(int16_t *ox, int16_t *oy, int16_t *oz){
	uint32_t accX = 0, accY = 0, accZ = 0;
	drawString("Calibrating...");
	for(int i = 0; i < OFFSET_NUM; i++){
    13c2:	89 2b       	or	r24, r25
    13c4:	79 f6       	brne	.-98     	; 0x1364 <getAccOffset+0x56>
		accX += getAcc(X);
		accY += getAcc(Y); 
		accZ += getAcc(Z); 
		_delay_ms(10);
	}
	*ox = (int16_t)(accX / OFFSET_NUM);
    13c6:	c5 01       	movw	r24, r10
    13c8:	b4 01       	movw	r22, r8
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	0e 94 ba 14 	call	0x2974	; 0x2974 <__udivmodsi4>
    13d6:	f8 01       	movw	r30, r16
    13d8:	31 83       	std	Z+1, r19	; 0x01
    13da:	20 83       	st	Z, r18
	*oy = (int16_t)(accY / OFFSET_NUM);
    13dc:	c3 01       	movw	r24, r6
    13de:	b2 01       	movw	r22, r4
    13e0:	2a e0       	ldi	r18, 0x0A	; 10
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	0e 94 ba 14 	call	0x2974	; 0x2974 <__udivmodsi4>
    13ec:	f1 01       	movw	r30, r2
    13ee:	31 83       	std	Z+1, r19	; 0x01
    13f0:	20 83       	st	Z, r18
	*oz = (int16_t)(accZ / OFFSET_NUM);
    13f2:	c7 01       	movw	r24, r14
    13f4:	b6 01       	movw	r22, r12
    13f6:	2a e0       	ldi	r18, 0x0A	; 10
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	0e 94 ba 14 	call	0x2974	; 0x2974 <__udivmodsi4>
    1402:	e9 81       	ldd	r30, Y+1	; 0x01
    1404:	fa 81       	ldd	r31, Y+2	; 0x02
    1406:	31 83       	std	Z+1, r19	; 0x01
    1408:	20 83       	st	Z, r18
	drawString("Calib. done");
    140a:	83 e2       	ldi	r24, 0x23	; 35
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <drawString>
    1412:	ff ef       	ldi	r31, 0xFF	; 255
    1414:	24 e3       	ldi	r18, 0x34	; 52
    1416:	8c e0       	ldi	r24, 0x0C	; 12
    1418:	f1 50       	subi	r31, 0x01	; 1
    141a:	20 40       	sbci	r18, 0x00	; 0
    141c:	80 40       	sbci	r24, 0x00	; 0
    141e:	e1 f7       	brne	.-8      	; 0x1418 <getAccOffset+0x10a>
    1420:	00 c0       	rjmp	.+0      	; 0x1422 <getAccOffset+0x114>
    1422:	00 00       	nop
	_delay_ms(500);
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	df 90       	pop	r13
    143a:	cf 90       	pop	r12
    143c:	bf 90       	pop	r11
    143e:	af 90       	pop	r10
    1440:	9f 90       	pop	r9
    1442:	8f 90       	pop	r8
    1444:	7f 90       	pop	r7
    1446:	6f 90       	pop	r6
    1448:	5f 90       	pop	r5
    144a:	4f 90       	pop	r4
    144c:	3f 90       	pop	r3
    144e:	2f 90       	pop	r2
    1450:	08 95       	ret

00001452 <main>:
void drawSteps(uint16_t steps);
void drawString(char * string);
void drawAccData(int16_t x, int16_t y, int16_t z);
void getAccOffset(int16_t *ox, int16_t *oy, int16_t *oz);

int main(void) {
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	00 d0       	rcall	.+0      	; 0x1458 <main+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <main+0x8>
    145a:	00 d0       	rcall	.+0      	; 0x145c <main+0xa>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	71 e0       	ldi	r23, 0x01	; 1
    1466:	8c ef       	ldi	r24, 0xFC	; 252
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 b4 11 	call	0x2368	; 0x2368 <u8g_InitI2C>
	u8g_SetFont(&u8g, u8g_font_fub11);
    146e:	62 e1       	ldi	r22, 0x12	; 18
    1470:	71 e0       	ldi	r23, 0x01	; 1
    1472:	8c ef       	ldi	r24, 0xFC	; 252
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 a7 10 	call	0x214e	; 0x214e <u8g_SetFont>
	int16_t combinedAcc = 0;
	int16_t accX = 0, accY = 0, accZ = 0;
	int16_t xOffset = 0, yOffset = 0, zOffset = 0;
    147a:	1a 82       	std	Y+2, r1	; 0x02
    147c:	19 82       	std	Y+1, r1	; 0x01
    147e:	1c 82       	std	Y+4, r1	; 0x04
    1480:	1b 82       	std	Y+3, r1	; 0x03
    1482:	1e 82       	std	Y+6, r1	; 0x06
    1484:	1d 82       	std	Y+5, r1	; 0x05
	//uint16_t steps = 0;
	getAccOffset(&xOffset, &yOffset, &zOffset);
    1486:	ae 01       	movw	r20, r28
    1488:	4b 5f       	subi	r20, 0xFB	; 251
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	be 01       	movw	r22, r28
    148e:	6d 5f       	subi	r22, 0xFD	; 253
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	0e 94 87 09 	call	0x130e	; 0x130e <getAccOffset>
	sei();
    149a:	78 94       	sei
	/*	 Init MPU 6050	*/
	mpu6050_init();
    149c:	0e 94 9f 0b 	call	0x173e	; 0x173e <mpu6050_init>
    14a0:	2f e7       	ldi	r18, 0x7F	; 127
    14a2:	88 e3       	ldi	r24, 0x38	; 56
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	21 50       	subi	r18, 0x01	; 1
    14a8:	80 40       	sbci	r24, 0x00	; 0
    14aa:	90 40       	sbci	r25, 0x00	; 0
    14ac:	e1 f7       	brne	.-8      	; 0x14a6 <main+0x54>
    14ae:	00 c0       	rjmp	.+0      	; 0x14b0 <main+0x5e>
    14b0:	00 00       	nop

	while(1) {
		accX = getAcc(X) - xOffset; 
		accY = getAcc(Y) - yOffset;
		accZ = getAcc(Z) - zOffset;
		combinedAcc = (accX + accY + accZ) / 3;
    14b2:	0f 2e       	mov	r0, r31
    14b4:	f3 e0       	ldi	r31, 0x03	; 3
    14b6:	ef 2e       	mov	r14, r31
    14b8:	f1 2c       	mov	r15, r1
    14ba:	f0 2d       	mov	r31, r0
	/*	 Init MPU 6050	*/
	mpu6050_init();
	_delay_ms(50);

	while(1) {
		accX = getAcc(X) - xOffset; 
    14bc:	8b e3       	ldi	r24, 0x3B	; 59
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
    14c4:	29 81       	ldd	r18, Y+1	; 0x01
    14c6:	3a 81       	ldd	r19, Y+2	; 0x02
    14c8:	6c 01       	movw	r12, r24
    14ca:	c2 1a       	sub	r12, r18
    14cc:	d3 0a       	sbc	r13, r19
		accY = getAcc(Y) - yOffset;
    14ce:	8d e3       	ldi	r24, 0x3D	; 61
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	8c 01       	movw	r16, r24
    14dc:	02 1b       	sub	r16, r18
    14de:	13 0b       	sbc	r17, r19
		accZ = getAcc(Z) - zOffset;
    14e0:	8f e3       	ldi	r24, 0x3F	; 63
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 0f 09 	call	0x121e	; 0x121e <getAcc>
		combinedAcc = (accX + accY + accZ) / 3;
    14e8:	0c 0d       	add	r16, r12
    14ea:	1d 1d       	adc	r17, r13
	_delay_ms(50);

	while(1) {
		accX = getAcc(X) - xOffset; 
		accY = getAcc(Y) - yOffset;
		accZ = getAcc(Z) - zOffset;
    14ec:	2d 81       	ldd	r18, Y+5	; 0x05
    14ee:	3e 81       	ldd	r19, Y+6	; 0x06
    14f0:	82 1b       	sub	r24, r18
    14f2:	93 0b       	sbc	r25, r19
		combinedAcc = (accX + accY + accZ) / 3;
    14f4:	80 0f       	add	r24, r16
    14f6:	91 1f       	adc	r25, r17
    14f8:	b7 01       	movw	r22, r14
    14fa:	0e 94 a6 14 	call	0x294c	; 0x294c <__divmodhi4>
		if(combinedAcc > 5){
    14fe:	66 30       	cpi	r22, 0x06	; 6
    1500:	71 05       	cpc	r23, r1
    1502:	6c f0       	brlt	.+26     	; 0x151e <main+0xcc>
			drawSteps(combinedAcc);
    1504:	cb 01       	movw	r24, r22
    1506:	0e 94 3d 09 	call	0x127a	; 0x127a <drawSteps>
    150a:	8f e1       	ldi	r24, 0x1F	; 31
    150c:	9e e4       	ldi	r25, 0x4E	; 78
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <main+0xbc>
    1512:	00 c0       	rjmp	.+0      	; 0x1514 <main+0xc2>
    1514:	00 00       	nop
			_delay_ms(10);
			drawString("Idle");
    1516:	8f e2       	ldi	r24, 0x2F	; 47
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <drawString>
    151e:	8f e0       	ldi	r24, 0x0F	; 15
    1520:	97 e2       	ldi	r25, 0x27	; 39
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <main+0xd0>
    1526:	00 c0       	rjmp	.+0      	; 0x1528 <main+0xd6>
    1528:	00 00       	nop
    152a:	c8 cf       	rjmp	.-112    	; 0x14bc <main+0x6a>

0000152c <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
    152c:	af 92       	push	r10
    152e:	bf 92       	push	r11
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	66 23       	and	r22, r22
    1540:	b9 f1       	breq	.+110    	; 0x15b0 <mpu6050_readBytes+0x84>
    1542:	c5 2f       	mov	r28, r21
    1544:	d4 2f       	mov	r29, r20
    1546:	d6 2e       	mov	r13, r22
    1548:	18 2f       	mov	r17, r24
    154a:	80 ed       	ldi	r24, 0xD0	; 208
    154c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
    1550:	81 2f       	mov	r24, r17
    1552:	0e 94 ba 08 	call	0x1174	; 0x1174 <i2c_write>
    1556:	8a e1       	ldi	r24, 0x1A	; 26
    1558:	8a 95       	dec	r24
    155a:	f1 f7       	brne	.-4      	; 0x1558 <mpu6050_readBytes+0x2c>
    155c:	00 c0       	rjmp	.+0      	; 0x155e <mpu6050_readBytes+0x32>
    155e:	81 ed       	ldi	r24, 0xD1	; 209
    1560:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
    1564:	0d 2f       	mov	r16, r29
    1566:	1c 2f       	mov	r17, r28
    1568:	ee 24       	eor	r14, r14
    156a:	ea 94       	dec	r14
    156c:	ed 0c       	add	r14, r13
    156e:	f1 2c       	mov	r15, r1
    1570:	ef ef       	ldi	r30, 0xFF	; 255
    1572:	ee 1a       	sub	r14, r30
    1574:	fe 0a       	sbc	r15, r30
    1576:	c0 e0       	ldi	r28, 0x00	; 0
    1578:	d0 e0       	ldi	r29, 0x00	; 0
    157a:	ad 2c       	mov	r10, r13
    157c:	b1 2c       	mov	r11, r1
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	af 1a       	sub	r10, r31
    1582:	b1 08       	sbc	r11, r1
    1584:	ca 15       	cp	r28, r10
    1586:	db 05       	cpc	r29, r11
    1588:	29 f4       	brne	.+10     	; 0x1594 <mpu6050_readBytes+0x68>
    158a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <i2c_readNak>
    158e:	f8 01       	movw	r30, r16
    1590:	80 83       	st	Z, r24
    1592:	04 c0       	rjmp	.+8      	; 0x159c <mpu6050_readBytes+0x70>
    1594:	0e 94 db 08 	call	0x11b6	; 0x11b6 <i2c_readAck>
    1598:	f8 01       	movw	r30, r16
    159a:	80 83       	st	Z, r24
    159c:	21 96       	adiw	r28, 0x01	; 1
    159e:	0f 5f       	subi	r16, 0xFF	; 255
    15a0:	1f 4f       	sbci	r17, 0xFF	; 255
    15a2:	ce 15       	cp	r28, r14
    15a4:	df 05       	cpc	r29, r15
    15a6:	71 f7       	brne	.-36     	; 0x1584 <mpu6050_readBytes+0x58>
    15a8:	cd 2d       	mov	r28, r13
    15aa:	0e 94 aa 08 	call	0x1154	; 0x1154 <i2c_stop>
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <mpu6050_readBytes+0x86>
    15b0:	c0 e0       	ldi	r28, 0x00	; 0
    15b2:	8c 2f       	mov	r24, r28
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	08 95       	ret

000015c8 <mpu6050_readByte>:
    15c8:	ab 01       	movw	r20, r22
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	0e 94 96 0a 	call	0x152c	; 0x152c <mpu6050_readBytes>
    15d0:	08 95       	ret

000015d2 <mpu6050_writeBytes>:
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	66 23       	and	r22, r22
    15e0:	d1 f0       	breq	.+52     	; 0x1616 <mpu6050_writeBytes+0x44>
    15e2:	7a 01       	movw	r14, r20
    15e4:	16 2f       	mov	r17, r22
    15e6:	c8 2f       	mov	r28, r24
    15e8:	80 ed       	ldi	r24, 0xD0	; 208
    15ea:	0e 94 64 08 	call	0x10c8	; 0x10c8 <i2c_start>
    15ee:	8c 2f       	mov	r24, r28
    15f0:	0e 94 ba 08 	call	0x1174	; 0x1174 <i2c_write>
    15f4:	e7 01       	movw	r28, r14
    15f6:	6f ef       	ldi	r22, 0xFF	; 255
    15f8:	61 0f       	add	r22, r17
    15fa:	06 2f       	mov	r16, r22
    15fc:	10 e0       	ldi	r17, 0x00	; 0
    15fe:	0f 5f       	subi	r16, 0xFF	; 255
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	0e 0d       	add	r16, r14
    1604:	1f 1d       	adc	r17, r15
    1606:	89 91       	ld	r24, Y+
    1608:	0e 94 ba 08 	call	0x1174	; 0x1174 <i2c_write>
    160c:	c0 17       	cp	r28, r16
    160e:	d1 07       	cpc	r29, r17
    1610:	d1 f7       	brne	.-12     	; 0x1606 <mpu6050_writeBytes+0x34>
    1612:	0e 94 aa 08 	call	0x1154	; 0x1154 <i2c_stop>
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	08 95       	ret

00001624 <mpu6050_writeByte>:
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	1f 92       	push	r1
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	69 83       	std	Y+1, r22	; 0x01
    1630:	ae 01       	movw	r20, r28
    1632:	4f 5f       	subi	r20, 0xFF	; 255
    1634:	5f 4f       	sbci	r21, 0xFF	; 255
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <mpu6050_writeBytes>
    163c:	0f 90       	pop	r0
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <mpu6050_writeBits>:
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	1f 92       	push	r1
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	44 23       	and	r20, r20
    1658:	89 f1       	breq	.+98     	; 0x16bc <mpu6050_writeBits+0x78>
    165a:	f2 2e       	mov	r15, r18
    165c:	14 2f       	mov	r17, r20
    165e:	06 2f       	mov	r16, r22
    1660:	e8 2e       	mov	r14, r24
    1662:	19 82       	std	Y+1, r1	; 0x01
    1664:	be 01       	movw	r22, r28
    1666:	6f 5f       	subi	r22, 0xFF	; 255
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <mpu6050_readByte>
    166e:	88 23       	and	r24, r24
    1670:	29 f1       	breq	.+74     	; 0x16bc <mpu6050_writeBits+0x78>
    1672:	40 2f       	mov	r20, r16
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	41 1b       	sub	r20, r17
    1678:	51 09       	sbc	r21, r1
    167a:	4f 5f       	subi	r20, 0xFF	; 255
    167c:	5f 4f       	sbci	r21, 0xFF	; 255
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <mpu6050_writeBits+0x44>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	1a 95       	dec	r17
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <mpu6050_writeBits+0x40>
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	04 2e       	mov	r0, r20
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <mpu6050_writeBits+0x52>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <mpu6050_writeBits+0x4e>
    169a:	2f 2d       	mov	r18, r15
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <mpu6050_writeBits+0x60>
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	4a 95       	dec	r20
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <mpu6050_writeBits+0x5c>
    16a8:	68 2f       	mov	r22, r24
    16aa:	60 95       	com	r22
    16ac:	99 81       	ldd	r25, Y+1	; 0x01
    16ae:	69 23       	and	r22, r25
    16b0:	82 23       	and	r24, r18
    16b2:	68 2b       	or	r22, r24
    16b4:	69 83       	std	Y+1, r22	; 0x01
    16b6:	8e 2d       	mov	r24, r14
    16b8:	0e 94 12 0b 	call	0x1624	; 0x1624 <mpu6050_writeByte>
    16bc:	0f 90       	pop	r0
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	08 95       	ret

000016cc <mpu6050_writeBit>:
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	1f 92       	push	r1
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	18 2f       	mov	r17, r24
    16de:	06 2f       	mov	r16, r22
    16e0:	f4 2e       	mov	r15, r20
    16e2:	be 01       	movw	r22, r28
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <mpu6050_readByte>
    16ec:	ff 20       	and	r15, r15
    16ee:	59 f0       	breq	.+22     	; 0x1706 <mpu6050_writeBit+0x3a>
    16f0:	21 e0       	ldi	r18, 0x01	; 1
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	b9 01       	movw	r22, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <mpu6050_writeBit+0x30>
    16f8:	66 0f       	add	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	0a 95       	dec	r16
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <mpu6050_writeBit+0x2c>
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	68 2b       	or	r22, r24
    1704:	0b c0       	rjmp	.+22     	; 0x171c <mpu6050_writeBit+0x50>
    1706:	21 e0       	ldi	r18, 0x01	; 1
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	b9 01       	movw	r22, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <mpu6050_writeBit+0x46>
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	0a 95       	dec	r16
    1714:	e2 f7       	brpl	.-8      	; 0x170e <mpu6050_writeBit+0x42>
    1716:	60 95       	com	r22
    1718:	99 81       	ldd	r25, Y+1	; 0x01
    171a:	69 23       	and	r22, r25
    171c:	69 83       	std	Y+1, r22	; 0x01
    171e:	81 2f       	mov	r24, r17
    1720:	0e 94 12 0b 	call	0x1624	; 0x1624 <mpu6050_writeByte>
    1724:	0f 90       	pop	r0
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	08 95       	ret

00001732 <mpu6050_setSleepDisabled>:
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	66 e0       	ldi	r22, 0x06	; 6
    1736:	8b e6       	ldi	r24, 0x6B	; 107
    1738:	0e 94 66 0b 	call	0x16cc	; 0x16cc <mpu6050_writeBit>
    173c:	08 95       	ret

0000173e <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    173e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1742:	2a e1       	ldi	r18, 0x1A	; 26
    1744:	2a 95       	dec	r18
    1746:	f1 f7       	brne	.-4      	; 0x1744 <mpu6050_init+0x6>
    1748:	00 c0       	rjmp	.+0      	; 0x174a <mpu6050_init+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    174a:	8f ef       	ldi	r24, 0xFF	; 255
    174c:	90 e7       	ldi	r25, 0x70	; 112
    174e:	22 e0       	ldi	r18, 0x02	; 2
    1750:	81 50       	subi	r24, 0x01	; 1
    1752:	90 40       	sbci	r25, 0x00	; 0
    1754:	20 40       	sbci	r18, 0x00	; 0
    1756:	e1 f7       	brne	.-8      	; 0x1750 <mpu6050_init+0x12>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <mpu6050_init+0x1c>
    175a:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    175c:	0e 94 99 0b 	call	0x1732	; 0x1732 <mpu6050_setSleepDisabled>
    1760:	8f e1       	ldi	r24, 0x1F	; 31
    1762:	9e e4       	ldi	r25, 0x4E	; 78
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <mpu6050_init+0x26>
    1768:	00 c0       	rjmp	.+0      	; 0x176a <mpu6050_init+0x2c>
    176a:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	43 e0       	ldi	r20, 0x03	; 3
    1770:	62 e0       	ldi	r22, 0x02	; 2
    1772:	8b e6       	ldi	r24, 0x6B	; 107
    1774:	0e 94 22 0b 	call	0x1644	; 0x1644 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1778:	23 e0       	ldi	r18, 0x03	; 3
    177a:	43 e0       	ldi	r20, 0x03	; 3
    177c:	62 e0       	ldi	r22, 0x02	; 2
    177e:	8a e1       	ldi	r24, 0x1A	; 26
    1780:	0e 94 22 0b 	call	0x1644	; 0x1644 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1784:	64 e0       	ldi	r22, 0x04	; 4
    1786:	89 e1       	ldi	r24, 0x19	; 25
    1788:	0e 94 12 0b 	call	0x1624	; 0x1624 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    178c:	23 e0       	ldi	r18, 0x03	; 3
    178e:	42 e0       	ldi	r20, 0x02	; 2
    1790:	64 e0       	ldi	r22, 0x04	; 4
    1792:	8b e1       	ldi	r24, 0x1B	; 27
    1794:	0e 94 22 0b 	call	0x1644	; 0x1644 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	42 e0       	ldi	r20, 0x02	; 2
    179c:	64 e0       	ldi	r22, 0x04	; 4
    179e:	8c e1       	ldi	r24, 0x1C	; 28
    17a0:	0e 94 22 0b 	call	0x1644	; 0x1644 <mpu6050_writeBits>
    17a4:	08 95       	ret

000017a6 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    17a6:	0f 93       	push	r16
    17a8:	fc 01       	movw	r30, r24
    17aa:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    17ac:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    17ae:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    17b0:	96 a9       	ldd	r25, Z+54	; 0x36
    17b2:	94 17       	cp	r25, r20
    17b4:	38 f0       	brcs	.+14     	; 0x17c4 <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    17b6:	08 17       	cp	r16, r24
    17b8:	68 f4       	brcc	.+26     	; 0x17d4 <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	04 17       	cp	r16, r20
    17be:	40 f0       	brcs	.+16     	; 0x17d0 <u8g_IsBBXIntersection+0x2a>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    17c4:	08 17       	cp	r16, r24
    17c6:	d0 f0       	brcs	.+52     	; 0x17fc <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	04 17       	cp	r16, r20
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <u8g_IsBBXIntersection+0x2a>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    17d0:	88 23       	and	r24, r24
    17d2:	c9 f0       	breq	.+50     	; 0x1806 <u8g_IsBBXIntersection+0x60>
    17d4:	21 50       	subi	r18, 0x01	; 1
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    17d6:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    17d8:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    17da:	95 a9       	ldd	r25, Z+53	; 0x35
    17dc:	96 17       	cp	r25, r22
    17de:	38 f0       	brcs	.+14     	; 0x17ee <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    17e0:	28 17       	cp	r18, r24
    17e2:	70 f4       	brcc	.+28     	; 0x1800 <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	26 17       	cp	r18, r22
    17e8:	70 f0       	brcs	.+28     	; 0x1806 <u8g_IsBBXIntersection+0x60>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	0c c0       	rjmp	.+24     	; 0x1806 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    17ee:	28 17       	cp	r18, r24
    17f0:	48 f0       	brcs	.+18     	; 0x1804 <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	26 17       	cp	r18, r22
    17f6:	38 f0       	brcs	.+14     	; 0x1806 <u8g_IsBBXIntersection+0x60>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    1804:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    180a:	db 01       	movw	r26, r22
    180c:	14 96       	adiw	r26, 0x04	; 4
    180e:	ed 91       	ld	r30, X+
    1810:	fc 91       	ld	r31, X
    1812:	15 97       	sbiw	r26, 0x05	; 5
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	09 95       	icall
    181c:	08 95       	ret

0000181e <u8g_SetChipSelect>:
    181e:	db 01       	movw	r26, r22
    1820:	14 96       	adiw	r26, 0x04	; 4
    1822:	ed 91       	ld	r30, X+
    1824:	fc 91       	ld	r31, X
    1826:	15 97       	sbiw	r26, 0x05	; 5
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	63 e0       	ldi	r22, 0x03	; 3
    182e:	09 95       	icall
    1830:	08 95       	ret

00001832 <u8g_SetResetLow>:
    1832:	db 01       	movw	r26, r22
    1834:	14 96       	adiw	r26, 0x04	; 4
    1836:	ed 91       	ld	r30, X+
    1838:	fc 91       	ld	r31, X
    183a:	15 97       	sbiw	r26, 0x05	; 5
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	64 e0       	ldi	r22, 0x04	; 4
    1844:	09 95       	icall
    1846:	08 95       	ret

00001848 <u8g_SetResetHigh>:
    1848:	db 01       	movw	r26, r22
    184a:	14 96       	adiw	r26, 0x04	; 4
    184c:	ed 91       	ld	r30, X+
    184e:	fc 91       	ld	r31, X
    1850:	15 97       	sbiw	r26, 0x05	; 5
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	64 e0       	ldi	r22, 0x04	; 4
    185a:	09 95       	icall
    185c:	08 95       	ret

0000185e <u8g_SetAddress>:
    185e:	db 01       	movw	r26, r22
    1860:	14 96       	adiw	r26, 0x04	; 4
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	15 97       	sbiw	r26, 0x05	; 5
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	62 e0       	ldi	r22, 0x02	; 2
    186e:	09 95       	icall
    1870:	08 95       	ret

00001872 <u8g_WriteByte>:
    1872:	db 01       	movw	r26, r22
    1874:	14 96       	adiw	r26, 0x04	; 4
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	15 97       	sbiw	r26, 0x05	; 5
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	65 e0       	ldi	r22, 0x05	; 5
    1882:	09 95       	icall
    1884:	08 95       	ret

00001886 <u8g_WriteSequence>:
    1886:	db 01       	movw	r26, r22
    1888:	14 96       	adiw	r26, 0x04	; 4
    188a:	ed 91       	ld	r30, X+
    188c:	fc 91       	ld	r31, X
    188e:	15 97       	sbiw	r26, 0x05	; 5
    1890:	66 e0       	ldi	r22, 0x06	; 6
    1892:	09 95       	icall
    1894:	08 95       	ret

00001896 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    1896:	af 92       	push	r10
    1898:	bf 92       	push	r11
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	6c 01       	movw	r12, r24
    18ac:	7b 01       	movw	r14, r22
    18ae:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    18b2:	b1 2c       	mov	r11, r1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    18b4:	aa 24       	eor	r10, r10
    18b6:	a3 94       	inc	r10
{
  uint8_t is_escape = 0;
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    18b8:	f8 01       	movw	r30, r16
    18ba:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    18bc:	d1 11       	cpse	r29, r1
    18be:	0b c0       	rjmp	.+22     	; 0x18d6 <u8g_WriteEscSeqP+0x40>
    {
      if ( value != 255 )
    18c0:	cf 3f       	cpi	r28, 0xFF	; 255
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <u8g_WriteEscSeqP+0x30>
    18c4:	4a c0       	rjmp	.+148    	; 0x195a <u8g_WriteEscSeqP+0xc4>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    18c6:	4c 2f       	mov	r20, r28
    18c8:	b7 01       	movw	r22, r14
    18ca:	c6 01       	movw	r24, r12
    18cc:	0e 94 39 0c 	call	0x1872	; 0x1872 <u8g_WriteByte>
    18d0:	81 11       	cpse	r24, r1
    18d2:	48 c0       	rjmp	.+144    	; 0x1964 <u8g_WriteEscSeqP+0xce>
    18d4:	4b c0       	rjmp	.+150    	; 0x196c <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    18d6:	cf 3f       	cpi	r28, 0xFF	; 255
    18d8:	51 f4       	brne	.+20     	; 0x18ee <u8g_WriteEscSeqP+0x58>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    18da:	4f ef       	ldi	r20, 0xFF	; 255
    18dc:	b7 01       	movw	r22, r14
    18de:	c6 01       	movw	r24, r12
    18e0:	0e 94 39 0c 	call	0x1872	; 0x1872 <u8g_WriteByte>
    18e4:	88 23       	and	r24, r24
    18e6:	09 f4       	brne	.+2      	; 0x18ea <u8g_WriteEscSeqP+0x54>
    18e8:	41 c0       	rjmp	.+130    	; 0x196c <u8g_WriteEscSeqP+0xd6>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    18ea:	db 2d       	mov	r29, r11
    18ec:	3b c0       	rjmp	.+118    	; 0x1964 <u8g_WriteEscSeqP+0xce>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    18ee:	ce 3f       	cpi	r28, 0xFE	; 254
    18f0:	e1 f1       	breq	.+120    	; 0x196a <u8g_WriteEscSeqP+0xd4>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    18f2:	c0 3f       	cpi	r28, 0xF0	; 240
    18f4:	a0 f5       	brcc	.+104    	; 0x195e <u8g_WriteEscSeqP+0xc8>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    18f6:	c0 3e       	cpi	r28, 0xE0	; 224
    18f8:	40 f0       	brcs	.+16     	; 0x190a <u8g_WriteEscSeqP+0x74>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    18fa:	4c 2f       	mov	r20, r28
    18fc:	4f 70       	andi	r20, 0x0F	; 15
    18fe:	b7 01       	movw	r22, r14
    1900:	c6 01       	movw	r24, r12
    1902:	0e 94 2f 0c 	call	0x185e	; 0x185e <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1906:	db 2d       	mov	r29, r11
    1908:	2d c0       	rjmp	.+90     	; 0x1964 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    190a:	c0 3d       	cpi	r28, 0xD0	; 208
    190c:	40 f0       	brcs	.+16     	; 0x191e <u8g_WriteEscSeqP+0x88>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    190e:	4c 2f       	mov	r20, r28
    1910:	4f 70       	andi	r20, 0x0F	; 15
    1912:	b7 01       	movw	r22, r14
    1914:	c6 01       	movw	r24, r12
    1916:	0e 94 0f 0c 	call	0x181e	; 0x181e <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    191a:	db 2d       	mov	r29, r11
    191c:	23 c0       	rjmp	.+70     	; 0x1964 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    191e:	c0 3c       	cpi	r28, 0xC0	; 192
    1920:	a0 f0       	brcs	.+40     	; 0x194a <u8g_WriteEscSeqP+0xb4>
      {
        u8g_SetResetLow(u8g, dev);
    1922:	b7 01       	movw	r22, r14
    1924:	c6 01       	movw	r24, r12
    1926:	0e 94 19 0c 	call	0x1832	; 0x1832 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    192a:	c2 95       	swap	r28
    192c:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
    192e:	ce 5f       	subi	r28, 0xFE	; 254
        u8g_Delay(value);
    1930:	d0 e0       	ldi	r29, 0x00	; 0
    1932:	ce 01       	movw	r24, r28
    1934:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    1938:	b7 01       	movw	r22, r14
    193a:	c6 01       	movw	r24, r12
    193c:	0e 94 24 0c 	call	0x1848	; 0x1848 <u8g_SetResetHigh>
        u8g_Delay(value);
    1940:	ce 01       	movw	r24, r28
    1942:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1946:	db 2d       	mov	r29, r11
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <u8g_WriteEscSeqP+0xce>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    194a:	cc 23       	and	r28, r28
    194c:	54 f0       	brlt	.+20     	; 0x1962 <u8g_WriteEscSeqP+0xcc>
      {
        u8g_Delay(value);
    194e:	8c 2f       	mov	r24, r28
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <u8g_Delay>
      }
      is_escape = 0;
    1956:	db 2d       	mov	r29, r11
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <u8g_WriteEscSeqP+0xce>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    195a:	da 2d       	mov	r29, r10
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    195e:	db 2d       	mov	r29, r11
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <u8g_WriteEscSeqP+0xce>
    1962:	db 2d       	mov	r29, r11
    }
    esc_seq++;
    1964:	0f 5f       	subi	r16, 0xFF	; 255
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    1968:	a7 cf       	rjmp	.-178    	; 0x18b8 <u8g_WriteEscSeqP+0x22>
  return 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
}
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	08 95       	ret

00001982 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    1986:	fc 01       	movw	r30, r24
    1988:	23 a5       	ldd	r18, Z+43	; 0x2b
    198a:	22 23       	and	r18, r18
    198c:	b1 f0       	breq	.+44     	; 0x19ba <u8g_com_arduino_ssd_start_sequence+0x38>
    198e:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    1990:	88 e7       	ldi	r24, 0x78	; 120
    1992:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <u8g_i2c_start>
    1996:	88 23       	and	r24, r24
    1998:	89 f0       	breq	.+34     	; 0x19bc <u8g_com_arduino_ssd_start_sequence+0x3a>
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    199a:	8e a1       	ldd	r24, Y+38	; 0x26
    199c:	81 11       	cpse	r24, r1
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    19a0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <u8g_i2c_send_byte>
    19a4:	81 11       	cpse	r24, r1
    19a6:	06 c0       	rjmp	.+12     	; 0x19b4 <u8g_com_arduino_ssd_start_sequence+0x32>
    19a8:	09 c0       	rjmp	.+18     	; 0x19bc <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    19aa:	80 e4       	ldi	r24, 0x40	; 64
    19ac:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <u8g_i2c_send_byte>
    19b0:	88 23       	and	r24, r24
    19b2:	21 f0       	breq	.+8      	; 0x19bc <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    19b4:	1b a6       	std	Y+43, r1	; 0x2b
  return 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <u8g_com_arduino_ssd_start_sequence+0x3a>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	e4 2e       	mov	r14, r20
    19d2:	89 01       	movw	r16, r18
  switch(msg)
    19d4:	63 30       	cpi	r22, 0x03	; 3
    19d6:	b1 f0       	breq	.+44     	; 0x1a04 <u8g_com_arduino_ssd_i2c_fn+0x42>
    19d8:	30 f4       	brcc	.+12     	; 0x19e6 <u8g_com_arduino_ssd_i2c_fn+0x24>
    19da:	61 30       	cpi	r22, 0x01	; 1
    19dc:	69 f0       	breq	.+26     	; 0x19f8 <u8g_com_arduino_ssd_i2c_fn+0x36>
    19de:	62 30       	cpi	r22, 0x02	; 2
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <u8g_com_arduino_ssd_i2c_fn+0x22>
    19e2:	6f c0       	rjmp	.+222    	; 0x1ac2 <u8g_com_arduino_ssd_i2c_fn+0x100>
    19e4:	74 c0       	rjmp	.+232    	; 0x1ace <u8g_com_arduino_ssd_i2c_fn+0x10c>
    19e6:	66 30       	cpi	r22, 0x06	; 6
    19e8:	41 f1       	breq	.+80     	; 0x1a3a <u8g_com_arduino_ssd_i2c_fn+0x78>
    19ea:	67 30       	cpi	r22, 0x07	; 7
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <u8g_com_arduino_ssd_i2c_fn+0x2e>
    19ee:	48 c0       	rjmp	.+144    	; 0x1a80 <u8g_com_arduino_ssd_i2c_fn+0xbe>
    19f0:	65 30       	cpi	r22, 0x05	; 5
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <u8g_com_arduino_ssd_i2c_fn+0x34>
    19f4:	6c c0       	rjmp	.+216    	; 0x1ace <u8g_com_arduino_ssd_i2c_fn+0x10c>
    19f6:	10 c0       	rjmp	.+32     	; 0x1a18 <u8g_com_arduino_ssd_i2c_fn+0x56>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    19f8:	fc 01       	movw	r30, r24
    19fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    19fc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g_i2c_init>
      }
      */
#endif
      break;
  }
  return 1;
    1a00:	c1 e0       	ldi	r28, 0x01	; 1
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);

      break;
    1a02:	6a c0       	rjmp	.+212    	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    1a04:	fc 01       	movw	r30, r24
    1a06:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    1a08:	21 e0       	ldi	r18, 0x01	; 1
    1a0a:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    1a0c:	41 11       	cpse	r20, r1
    1a0e:	61 c0       	rjmp	.+194    	; 0x1ad2 <u8g_com_arduino_ssd_i2c_fn+0x110>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    1a10:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <u8g_i2c_stop>
      }
      */
#endif
      break;
  }
  return 1;
    1a14:	c1 e0       	ldi	r28, 0x01	; 1
    1a16:	60 c0       	rjmp	.+192    	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1a18:	0e 94 c1 0c 	call	0x1982	; 0x1982 <u8g_com_arduino_ssd_start_sequence>
    1a1c:	c8 2f       	mov	r28, r24
    1a1e:	81 11       	cpse	r24, r1
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <u8g_com_arduino_ssd_i2c_fn+0x66>
	return u8g_i2c_stop(), 0;
    1a22:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <u8g_i2c_stop>
    1a26:	58 c0       	rjmp	.+176    	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    1a28:	8e 2d       	mov	r24, r14
    1a2a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <u8g_i2c_send_byte>
    1a2e:	c8 2f       	mov	r28, r24
    1a30:	81 11       	cpse	r24, r1
    1a32:	51 c0       	rjmp	.+162    	; 0x1ad6 <u8g_com_arduino_ssd_i2c_fn+0x114>
	return u8g_i2c_stop(), 0;
    1a34:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <u8g_i2c_stop>
    1a38:	4f c0       	rjmp	.+158    	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1a3a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <u8g_com_arduino_ssd_start_sequence>
    1a3e:	c8 2f       	mov	r28, r24
    1a40:	88 23       	and	r24, r24
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <u8g_com_arduino_ssd_i2c_fn+0x8a>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1a44:	e1 10       	cpse	r14, r1
    1a46:	05 c0       	rjmp	.+10     	; 0x1a52 <u8g_com_arduino_ssd_i2c_fn+0x90>
      }
      */
#endif
      break;
  }
  return 1;
    1a48:	c1 e0       	ldi	r28, 0x01	; 1
    1a4a:	46 c0       	rjmp	.+140    	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1a4c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <u8g_i2c_stop>
    1a50:	43 c0       	rjmp	.+134    	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1a52:	68 01       	movw	r12, r16
    1a54:	ea 94       	dec	r14
    1a56:	8e 2d       	mov	r24, r14
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	08 0f       	add	r16, r24
    1a5e:	19 1f       	adc	r17, r25
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    1a60:	f6 01       	movw	r30, r12
    1a62:	81 91       	ld	r24, Z+
    1a64:	6f 01       	movw	r12, r30
    1a66:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <u8g_i2c_send_byte>
    1a6a:	c8 2f       	mov	r28, r24
    1a6c:	81 11       	cpse	r24, r1
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <u8g_com_arduino_ssd_i2c_fn+0xb4>
	    return u8g_i2c_stop(), 0;
    1a70:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <u8g_i2c_stop>
    1a74:	31 c0       	rjmp	.+98     	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1a76:	c0 16       	cp	r12, r16
    1a78:	d1 06       	cpc	r13, r17
    1a7a:	91 f7       	brne	.-28     	; 0x1a60 <u8g_com_arduino_ssd_i2c_fn+0x9e>
      }
      */
#endif
      break;
  }
  return 1;
    1a7c:	c1 e0       	ldi	r28, 0x01	; 1
    1a7e:	2c c0       	rjmp	.+88     	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1a80:	0e 94 c1 0c 	call	0x1982	; 0x1982 <u8g_com_arduino_ssd_start_sequence>
    1a84:	c8 2f       	mov	r28, r24
    1a86:	88 23       	and	r24, r24
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <u8g_com_arduino_ssd_i2c_fn+0xd0>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1a8a:	e1 10       	cpse	r14, r1
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <u8g_com_arduino_ssd_i2c_fn+0xd6>
      }
      */
#endif
      break;
  }
  return 1;
    1a8e:	c1 e0       	ldi	r28, 0x01	; 1
    1a90:	23 c0       	rjmp	.+70     	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1a92:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <u8g_i2c_stop>
    1a96:	20 c0       	rjmp	.+64     	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1a98:	ea 94       	dec	r14
    1a9a:	f1 2c       	mov	r15, r1
    1a9c:	ff ef       	ldi	r31, 0xFF	; 255
    1a9e:	ef 1a       	sub	r14, r31
    1aa0:	ff 0a       	sbc	r15, r31
    1aa2:	e0 0e       	add	r14, r16
    1aa4:	f1 1e       	adc	r15, r17
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	84 91       	lpm	r24, Z
    1aaa:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <u8g_i2c_send_byte>
    1aae:	c8 2f       	mov	r28, r24
    1ab0:	88 23       	and	r24, r24
    1ab2:	91 f0       	breq	.+36     	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
	    return 0;
          ptr++;
    1ab4:	0f 5f       	subi	r16, 0xFF	; 255
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1ab8:	0e 15       	cp	r16, r14
    1aba:	1f 05       	cpc	r17, r15
    1abc:	a1 f7       	brne	.-24     	; 0x1aa6 <u8g_com_arduino_ssd_i2c_fn+0xe4>
      }
      */
#endif
      break;
  }
  return 1;
    1abe:	c1 e0       	ldi	r28, 0x01	; 1
    1ac0:	0b c0       	rjmp	.+22     	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    1ac6:	21 e0       	ldi	r18, 0x01	; 1
    1ac8:	23 a7       	std	Z+43, r18	; 0x2b
      }
      */
#endif
      break;
  }
  return 1;
    1aca:	c1 e0       	ldi	r28, 0x01	; 1
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
  }
  return 1;
    1ace:	c1 e0       	ldi	r28, 0x01	; 1
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1ad2:	c1 e0       	ldi	r28, 0x01	; 1
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1ad6:	c1 e0       	ldi	r28, 0x01	; 1
}
    1ad8:	8c 2f       	mov	r24, r28
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	08 95       	ret

00001aea <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    1aea:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <u8g_i2c_err_code>
    1aee:	91 11       	cpse	r25, r1
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <u8g_i2c_set_error+0x10>
    1af2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <u8g_i2c_err_code>
    1af6:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <__data_end>
    1afa:	08 95       	ret

00001afc <u8g_i2c_clear_error>:
    1afc:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <u8g_i2c_err_code>
    1b00:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
    1b04:	08 95       	ret

00001b06 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    1b06:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u8g_i2c_opt>
  TWSR = 0;
    1b0a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    1b0e:	84 ff       	sbrs	r24, 4
    1b10:	04 c0       	rjmp	.+8      	; 0x1b1a <u8g_i2c_init+0x14>
  {
    TWBR = F_CPU/(2*400000)-8;
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <u8g_i2c_init+0x1a>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    1b1a:	80 e2       	ldi	r24, 0x20	; 32
    1b1c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    1b20:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <u8g_i2c_clear_error>
    1b24:	08 95       	ret

00001b26 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <u8g_i2c_wait+0x8>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    1b32:	20 ed       	ldi	r18, 0xD0	; 208
    1b34:	37 e0       	ldi	r19, 0x07	; 7
    1b36:	3a 83       	std	Y+2, r19	; 0x02
    1b38:	29 83       	std	Y+1, r18	; 0x01
  while( !(TWCR & mask) )
    1b3a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1b3e:	98 23       	and	r25, r24
    1b40:	01 f5       	brne	.+64     	; 0x1b82 <u8g_i2c_wait+0x5c>
  {
      if ( cnt == 0 )
    1b42:	29 81       	ldd	r18, Y+1	; 0x01
    1b44:	3a 81       	ldd	r19, Y+2	; 0x02
    1b46:	23 2b       	or	r18, r19
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <u8g_i2c_wait+0x32>
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1b4a:	ec eb       	ldi	r30, 0xBC	; 188
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	0e c0       	rjmp	.+28     	; 0x1b6c <u8g_i2c_wait+0x46>
  {
      if ( cnt == 0 )
    1b50:	29 81       	ldd	r18, Y+1	; 0x01
    1b52:	3a 81       	ldd	r19, Y+2	; 0x02
    1b54:	23 2b       	or	r18, r19
    1b56:	51 f4       	brne	.+20     	; 0x1b6c <u8g_i2c_wait+0x46>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1b58:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    1b5c:	18 2f       	mov	r17, r24
    1b5e:	12 70       	andi	r17, 0x02	; 2
    1b60:	81 fd       	sbrc	r24, 1
    1b62:	11 c0       	rjmp	.+34     	; 0x1b86 <u8g_i2c_wait+0x60>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e 94 75 0d 	call	0x1aea	; 0x1aea <u8g_i2c_set_error>
	  return 0; /* error */
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <u8g_i2c_wait+0x62>
	}
      }
      cnt--;
    1b6c:	29 81       	ldd	r18, Y+1	; 0x01
    1b6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b70:	21 50       	subi	r18, 0x01	; 1
    1b72:	31 09       	sbc	r19, r1
    1b74:	3a 83       	std	Y+2, r19	; 0x02
    1b76:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1b78:	90 81       	ld	r25, Z
    1b7a:	98 23       	and	r25, r24
    1b7c:	49 f3       	breq	.-46     	; 0x1b50 <u8g_i2c_wait+0x2a>
	  return 0; /* error */
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
    1b7e:	11 e0       	ldi	r17, 0x01	; 1
    1b80:	03 c0       	rjmp	.+6      	; 0x1b88 <u8g_i2c_wait+0x62>
    1b82:	11 e0       	ldi	r17, 0x01	; 1
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <u8g_i2c_wait+0x62>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    1b86:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    1b88:	81 2f       	mov	r24, r17
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	08 95       	ret

00001b96 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	d8 2f       	mov	r29, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    1b9c:	94 ea       	ldi	r25, 0xA4	; 164
    1b9e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	80 e8       	ldi	r24, 0x80	; 128
    1ba6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <u8g_i2c_wait>
    1baa:	c8 2f       	mov	r28, r24
    1bac:	88 23       	and	r24, r24
    1bae:	61 f1       	breq	.+88     	; 0x1c08 <u8g_i2c_start+0x72>
    return 0;
  
  status = TW_STATUS;
    1bb0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1bb4:	98 7f       	andi	r25, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    1bb6:	98 30       	cpi	r25, 0x08	; 8
    1bb8:	41 f0       	breq	.+16     	; 0x1bca <u8g_i2c_start+0x34>
    1bba:	90 31       	cpi	r25, 0x10	; 16
    1bbc:	31 f0       	breq	.+12     	; 0x1bca <u8g_i2c_start+0x34>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <u8g_i2c_set_error>
    return 0;
    1bc6:	c0 e0       	ldi	r28, 0x00	; 0
    1bc8:	1f c0       	rjmp	.+62     	; 0x1c08 <u8g_i2c_start+0x72>
  }

  /* set slave address */  
  TWDR = sla;
    1bca:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1bce:	84 e8       	ldi	r24, 0x84	; 132
    1bd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    1bd4:	62 e0       	ldi	r22, 0x02	; 2
    1bd6:	80 e8       	ldi	r24, 0x80	; 128
    1bd8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <u8g_i2c_wait>
    1bdc:	c8 2f       	mov	r28, r24
    1bde:	88 23       	and	r24, r24
    1be0:	99 f0       	breq	.+38     	; 0x1c08 <u8g_i2c_start+0x72>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1be2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    1be6:	c8 2f       	mov	r28, r24
    1be8:	c2 70       	andi	r28, 0x02	; 2
    1bea:	81 fd       	sbrc	r24, 1
    1bec:	0a c0       	rjmp	.+20     	; 0x1c02 <u8g_i2c_start+0x6c>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    1bee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1bf2:	88 7f       	andi	r24, 0xF8	; 248
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    1bf4:	88 31       	cpi	r24, 0x18	; 24
    1bf6:	39 f0       	breq	.+14     	; 0x1c06 <u8g_i2c_start+0x70>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    1bf8:	62 e0       	ldi	r22, 0x02	; 2
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	0e 94 75 0d 	call	0x1aea	; 0x1aea <u8g_i2c_set_error>
      return 0;
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <u8g_i2c_start+0x72>
    }
  }

   return 1;
    1c02:	c1 e0       	ldi	r28, 0x01	; 1
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <u8g_i2c_start+0x72>
    1c06:	c1 e0       	ldi	r28, 0x01	; 1
}
    1c08:	8c 2f       	mov	r24, r28
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    1c10:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    1c12:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1c16:	84 e8       	ldi	r24, 0x84	; 132
    1c18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    1c1c:	63 e0       	ldi	r22, 0x03	; 3
    1c1e:	80 e8       	ldi	r24, 0x80	; 128
    1c20:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <u8g_i2c_wait>
    1c24:	c8 2f       	mov	r28, r24
    1c26:	88 23       	and	r24, r24
    1c28:	99 f0       	breq	.+38     	; 0x1c50 <u8g_i2c_send_byte+0x40>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1c2a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8g_i2c_opt>
    1c2e:	c8 2f       	mov	r28, r24
    1c30:	c2 70       	andi	r28, 0x02	; 2
    1c32:	81 fd       	sbrc	r24, 1
    1c34:	0a c0       	rjmp	.+20     	; 0x1c4a <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    1c36:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1c3a:	88 7f       	andi	r24, 0xF8	; 248
    if ( status != TW_MT_DATA_ACK )
    1c3c:	88 32       	cpi	r24, 0x28	; 40
    1c3e:	39 f0       	breq	.+14     	; 0x1c4e <u8g_i2c_send_byte+0x3e>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    1c40:	63 e0       	ldi	r22, 0x03	; 3
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	0e 94 75 0d 	call	0x1aea	; 0x1aea <u8g_i2c_set_error>
      return 0;
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <u8g_i2c_send_byte+0x40>
    }
  }

  return 1;  
    1c4a:	c1 e0       	ldi	r28, 0x01	; 1
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <u8g_i2c_send_byte+0x40>
    1c4e:	c1 e0       	ldi	r28, 0x01	; 1
}
    1c50:	8c 2f       	mov	r24, r28
    1c52:	cf 91       	pop	r28
    1c54:	08 95       	ret

00001c56 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    1c56:	84 e9       	ldi	r24, 0x94	; 148
    1c58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    1c5c:	64 e0       	ldi	r22, 0x04	; 4
    1c5e:	80 e1       	ldi	r24, 0x10	; 16
    1c60:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <u8g_i2c_wait>
    1c64:	08 95       	ret

00001c66 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	39 f0       	breq	.+14     	; 0x1c78 <u8g_Delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c6a:	2e ec       	ldi	r18, 0xCE	; 206
    1c6c:	37 e0       	ldi	r19, 0x07	; 7
    1c6e:	f9 01       	movw	r30, r18
    1c70:	31 97       	sbiw	r30, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1c74:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1c76:	d9 f7       	brne	.-10     	; 0x1c6e <u8g_Delay+0x8>
    1c78:	08 95       	ret

00001c7a <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1c7a:	af 92       	push	r10
    1c7c:	bf 92       	push	r11
    1c7e:	cf 92       	push	r12
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	7c 01       	movw	r14, r24
    1c8e:	8b 01       	movw	r16, r22
    1c90:	c4 2f       	mov	r28, r20
    1c92:	69 01       	movw	r12, r18
  switch(msg)
    1c94:	40 31       	cpi	r20, 0x10	; 16
    1c96:	99 f1       	breq	.+102    	; 0x1cfe <u8g_dev_ssd1306_128x64_fn+0x84>
    1c98:	18 f4       	brcc	.+6      	; 0x1ca0 <u8g_dev_ssd1306_128x64_fn+0x26>
    1c9a:	4a 30       	cpi	r20, 0x0A	; 10
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <u8g_dev_ssd1306_128x64_fn+0x30>
    1c9e:	3b c0       	rjmp	.+118    	; 0x1d16 <u8g_dev_ssd1306_128x64_fn+0x9c>
    1ca0:	41 31       	cpi	r20, 0x11	; 17
    1ca2:	99 f1       	breq	.+102    	; 0x1d0a <u8g_dev_ssd1306_128x64_fn+0x90>
    1ca4:	45 31       	cpi	r20, 0x15	; 21
    1ca6:	59 f0       	breq	.+22     	; 0x1cbe <u8g_dev_ssd1306_128x64_fn+0x44>
    1ca8:	36 c0       	rjmp	.+108    	; 0x1d16 <u8g_dev_ssd1306_128x64_fn+0x9c>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    1caa:	42 e0       	ldi	r20, 0x02	; 2
    1cac:	0e 94 05 0c 	call	0x180a	; 0x180a <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    1cb0:	4c ee       	ldi	r20, 0xEC	; 236
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	b8 01       	movw	r22, r16
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <u8g_WriteEscSeqP>
      break;
    1cbc:	2c c0       	rjmp	.+88     	; 0x1d16 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1cbe:	fb 01       	movw	r30, r22
    1cc0:	a2 80       	ldd	r10, Z+2	; 0x02
    1cc2:	b3 80       	ldd	r11, Z+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    1cc4:	44 ee       	ldi	r20, 0xE4	; 228
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    1ccc:	f5 01       	movw	r30, r10
    1cce:	44 81       	ldd	r20, Z+4	; 0x04
    1cd0:	40 6b       	ori	r20, 0xB0	; 176
    1cd2:	b8 01       	movw	r22, r16
    1cd4:	c7 01       	movw	r24, r14
    1cd6:	0e 94 39 0c 	call	0x1872	; 0x1872 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	b8 01       	movw	r22, r16
    1cde:	c7 01       	movw	r24, r14
    1ce0:	0e 94 2f 0c 	call	0x185e	; 0x185e <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    1ce4:	a8 01       	movw	r20, r16
    1ce6:	b7 01       	movw	r22, r14
    1ce8:	c5 01       	movw	r24, r10
    1cea:	0e 94 58 12 	call	0x24b0	; 0x24b0 <u8g_pb_WriteBuffer>
    1cee:	88 23       	and	r24, r24
    1cf0:	c1 f0       	breq	.+48     	; 0x1d22 <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	b8 01       	movw	r22, r16
    1cf6:	c7 01       	movw	r24, r14
    1cf8:	0e 94 0f 0c 	call	0x181e	; 0x181e <u8g_SetChipSelect>
      }
      break;
    1cfc:	0c c0       	rjmp	.+24     	; 0x1d16 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    1cfe:	4b ed       	ldi	r20, 0xDB	; 219
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0e 94 4b 0c 	call	0x1896	; 0x1896 <u8g_WriteEscSeqP>
      return 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	0c c0       	rjmp	.+24     	; 0x1d22 <u8g_dev_ssd1306_128x64_fn+0xa8>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    1d0a:	40 ed       	ldi	r20, 0xD0	; 208
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <u8g_WriteEscSeqP>
      return 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	06 c0       	rjmp	.+12     	; 0x1d22 <u8g_dev_ssd1306_128x64_fn+0xa8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    1d16:	96 01       	movw	r18, r12
    1d18:	4c 2f       	mov	r20, r28
    1d1a:	b8 01       	movw	r22, r16
    1d1c:	c7 01       	movw	r24, r14
    1d1e:	0e 94 cc 12 	call	0x2598	; 0x2598 <u8g_dev_pb8v1_base_fn>
}
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	bf 90       	pop	r11
    1d32:	af 90       	pop	r10
    1d34:	08 95       	ret

00001d36 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    1d36:	fc 01       	movw	r30, r24
    1d38:	e6 0f       	add	r30, r22
    1d3a:	f1 1d       	adc	r31, r1
    1d3c:	84 91       	lpm	r24, Z
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	98 2f       	mov	r25, r24
    1d42:	88 27       	eor	r24, r24
    1d44:	31 96       	adiw	r30, 0x01	; 1
    1d46:	e4 91       	lpm	r30, Z
    1d48:	8e 0f       	add	r24, r30
    1d4a:	91 1d       	adc	r25, r1
    1d4c:	08 95       	ret

00001d4e <u8g_font_GetFormat>:
    1d4e:	fc 01       	movw	r30, r24
    1d50:	84 91       	lpm	r24, Z
    1d52:	08 95       	ret

00001d54 <u8g_font_GetFontGlyphStructureSize>:
    1d54:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <u8g_font_GetFormat>
    1d58:	88 23       	and	r24, r24
    1d5a:	21 f0       	breq	.+8      	; 0x1d64 <u8g_font_GetFontGlyphStructureSize+0x10>
    1d5c:	82 30       	cpi	r24, 0x02	; 2
    1d5e:	11 f0       	breq	.+4      	; 0x1d64 <u8g_font_GetFontGlyphStructureSize+0x10>
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	08 95       	ret
    1d64:	86 e0       	ldi	r24, 0x06	; 6
    1d66:	08 95       	ret

00001d68 <u8g_font_calc_vref_font>:
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	08 95       	ret

00001d6c <u8g_font_GetEncoding65Pos>:
    1d6c:	66 e0       	ldi	r22, 0x06	; 6
    1d6e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <u8g_font_get_word>
    1d72:	08 95       	ret

00001d74 <u8g_font_GetEncoding97Pos>:
    1d74:	68 e0       	ldi	r22, 0x08	; 8
    1d76:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <u8g_font_get_word>
    1d7a:	08 95       	ret

00001d7c <u8g_font_GetFontStartEncoding>:
    1d7c:	0a 96       	adiw	r24, 0x0a	; 10
    1d7e:	fc 01       	movw	r30, r24
    1d80:	84 91       	lpm	r24, Z
    1d82:	08 95       	ret

00001d84 <u8g_font_GetFontEndEncoding>:
    1d84:	0b 96       	adiw	r24, 0x0b	; 11
    1d86:	fc 01       	movw	r30, r24
    1d88:	84 91       	lpm	r24, Z
    1d8a:	08 95       	ret

00001d8c <u8g_GetGlyph>:
    1d8c:	af 92       	push	r10
    1d8e:	bf 92       	push	r11
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	7c 01       	movw	r14, r24
    1da2:	b6 2e       	mov	r11, r22
    1da4:	dc 01       	movw	r26, r24
    1da6:	14 96       	adiw	r26, 0x04	; 4
    1da8:	cd 91       	ld	r28, X+
    1daa:	dc 91       	ld	r29, X
    1dac:	15 97       	sbiw	r26, 0x05	; 5
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <u8g_font_GetFormat>
    1db4:	18 2f       	mov	r17, r24
    1db6:	f7 01       	movw	r30, r14
    1db8:	84 81       	ldd	r24, Z+4	; 0x04
    1dba:	95 81       	ldd	r25, Z+5	; 0x05
    1dbc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <u8g_font_GetFontGlyphStructureSize>
    1dc0:	d8 2e       	mov	r13, r24
    1dc2:	11 30       	cpi	r17, 0x01	; 1
    1dc4:	29 f4       	brne	.+10     	; 0x1dd0 <u8g_GetGlyph+0x44>
    1dc6:	0f 2e       	mov	r0, r31
    1dc8:	ff e0       	ldi	r31, 0x0F	; 15
    1dca:	af 2e       	mov	r10, r31
    1dcc:	f0 2d       	mov	r31, r0
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <u8g_GetGlyph+0x48>
    1dd0:	aa 24       	eor	r10, r10
    1dd2:	aa 94       	dec	r10
    1dd4:	d7 01       	movw	r26, r14
    1dd6:	14 96       	adiw	r26, 0x04	; 4
    1dd8:	8d 91       	ld	r24, X+
    1dda:	9c 91       	ld	r25, X
    1ddc:	15 97       	sbiw	r26, 0x05	; 5
    1dde:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <u8g_font_GetFontStartEncoding>
    1de2:	18 2f       	mov	r17, r24
    1de4:	f7 01       	movw	r30, r14
    1de6:	84 81       	ldd	r24, Z+4	; 0x04
    1de8:	95 81       	ldd	r25, Z+5	; 0x05
    1dea:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <u8g_font_GetFontEndEncoding>
    1dee:	08 2f       	mov	r16, r24
    1df0:	d7 01       	movw	r26, r14
    1df2:	14 96       	adiw	r26, 0x04	; 4
    1df4:	8d 91       	ld	r24, X+
    1df6:	9c 91       	ld	r25, X
    1df8:	15 97       	sbiw	r26, 0x05	; 5
    1dfa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <u8g_font_GetEncoding97Pos>
    1dfe:	b0 e6       	ldi	r27, 0x60	; 96
    1e00:	bb 15       	cp	r27, r11
    1e02:	30 f4       	brcc	.+12     	; 0x1e10 <u8g_GetGlyph+0x84>
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	21 f0       	breq	.+8      	; 0x1e10 <u8g_GetGlyph+0x84>
    1e08:	c8 0f       	add	r28, r24
    1e0a:	d9 1f       	adc	r29, r25
    1e0c:	11 e6       	ldi	r17, 0x61	; 97
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <u8g_GetGlyph+0xa2>
    1e10:	f7 01       	movw	r30, r14
    1e12:	84 81       	ldd	r24, Z+4	; 0x04
    1e14:	95 81       	ldd	r25, Z+5	; 0x05
    1e16:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <u8g_font_GetEncoding65Pos>
    1e1a:	f0 e4       	ldi	r31, 0x40	; 64
    1e1c:	fb 15       	cp	r31, r11
    1e1e:	30 f4       	brcc	.+12     	; 0x1e2c <u8g_GetGlyph+0xa0>
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	21 f0       	breq	.+8      	; 0x1e2c <u8g_GetGlyph+0xa0>
    1e24:	c8 0f       	add	r28, r24
    1e26:	d9 1f       	adc	r29, r25
    1e28:	11 e4       	ldi	r17, 0x41	; 65
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <u8g_GetGlyph+0xa2>
    1e2c:	61 96       	adiw	r28, 0x11	; 17
    1e2e:	0b 15       	cp	r16, r11
    1e30:	90 f4       	brcc	.+36     	; 0x1e56 <u8g_GetGlyph+0xca>
    1e32:	d7 01       	movw	r26, r14
    1e34:	50 96       	adiw	r26, 0x10	; 16
    1e36:	1c 92       	st	X, r1
    1e38:	50 97       	sbiw	r26, 0x10	; 16
    1e3a:	53 96       	adiw	r26, 0x13	; 19
    1e3c:	1c 92       	st	X, r1
    1e3e:	53 97       	sbiw	r26, 0x13	; 19
    1e40:	54 96       	adiw	r26, 0x14	; 20
    1e42:	1c 92       	st	X, r1
    1e44:	54 97       	sbiw	r26, 0x14	; 20
    1e46:	51 96       	adiw	r26, 0x11	; 17
    1e48:	1c 92       	st	X, r1
    1e4a:	51 97       	sbiw	r26, 0x11	; 17
    1e4c:	52 96       	adiw	r26, 0x12	; 18
    1e4e:	1c 92       	st	X, r1
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	75 c0       	rjmp	.+234    	; 0x1f40 <u8g_GetGlyph+0x1b4>
    1e56:	01 17       	cp	r16, r17
    1e58:	08 f4       	brcc	.+2      	; 0x1e5c <u8g_GetGlyph+0xd0>
    1e5a:	6a c0       	rjmp	.+212    	; 0x1f30 <u8g_GetGlyph+0x1a4>
    1e5c:	2d 2d       	mov	r18, r13
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	6e 01       	movw	r12, r28
    1e62:	fe 01       	movw	r30, r28
    1e64:	94 91       	lpm	r25, Z
    1e66:	9f 3f       	cpi	r25, 0xFF	; 255
    1e68:	11 f4       	brne	.+4      	; 0x1e6e <u8g_GetGlyph+0xe2>
    1e6a:	21 96       	adiw	r28, 0x01	; 1
    1e6c:	5d c0       	rjmp	.+186    	; 0x1f28 <u8g_GetGlyph+0x19c>
    1e6e:	1b 11       	cpse	r17, r11
    1e70:	52 c0       	rjmp	.+164    	; 0x1f16 <u8g_GetGlyph+0x18a>
    1e72:	8e 01       	movw	r16, r28
    1e74:	d7 01       	movw	r26, r14
    1e76:	14 96       	adiw	r26, 0x04	; 4
    1e78:	8d 91       	ld	r24, X+
    1e7a:	9c 91       	ld	r25, X
    1e7c:	15 97       	sbiw	r26, 0x05	; 5
    1e7e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <u8g_font_GetFormat>
    1e82:	88 23       	and	r24, r24
    1e84:	11 f0       	breq	.+4      	; 0x1e8a <u8g_GetGlyph+0xfe>
    1e86:	82 30       	cpi	r24, 0x02	; 2
    1e88:	f1 f4       	brne	.+60     	; 0x1ec6 <u8g_GetGlyph+0x13a>
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	c4 90       	lpm	r12, Z
    1e8e:	d7 01       	movw	r26, r14
    1e90:	53 96       	adiw	r26, 0x13	; 19
    1e92:	cc 92       	st	X, r12
    1e94:	53 97       	sbiw	r26, 0x13	; 19
    1e96:	f8 01       	movw	r30, r16
    1e98:	31 96       	adiw	r30, 0x01	; 1
    1e9a:	e4 91       	lpm	r30, Z
    1e9c:	54 96       	adiw	r26, 0x14	; 20
    1e9e:	ec 93       	st	X, r30
    1ea0:	54 97       	sbiw	r26, 0x14	; 20
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	33 96       	adiw	r30, 0x03	; 3
    1ea6:	e4 91       	lpm	r30, Z
    1ea8:	50 96       	adiw	r26, 0x10	; 16
    1eaa:	ec 93       	st	X, r30
    1eac:	50 97       	sbiw	r26, 0x10	; 16
    1eae:	f8 01       	movw	r30, r16
    1eb0:	34 96       	adiw	r30, 0x04	; 4
    1eb2:	e4 91       	lpm	r30, Z
    1eb4:	51 96       	adiw	r26, 0x11	; 17
    1eb6:	ec 93       	st	X, r30
    1eb8:	51 97       	sbiw	r26, 0x11	; 17
    1eba:	f8 01       	movw	r30, r16
    1ebc:	35 96       	adiw	r30, 0x05	; 5
    1ebe:	e4 91       	lpm	r30, Z
    1ec0:	52 96       	adiw	r26, 0x12	; 18
    1ec2:	ec 93       	st	X, r30
    1ec4:	25 c0       	rjmp	.+74     	; 0x1f10 <u8g_GetGlyph+0x184>
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	84 91       	lpm	r24, Z
    1eca:	98 2f       	mov	r25, r24
    1ecc:	9f 70       	andi	r25, 0x0F	; 15
    1ece:	92 50       	subi	r25, 0x02	; 2
    1ed0:	d7 01       	movw	r26, r14
    1ed2:	52 96       	adiw	r26, 0x12	; 18
    1ed4:	9c 93       	st	X, r25
    1ed6:	52 97       	sbiw	r26, 0x12	; 18
    1ed8:	c8 2e       	mov	r12, r24
    1eda:	c6 94       	lsr	r12
    1edc:	c6 94       	lsr	r12
    1ede:	c6 94       	lsr	r12
    1ee0:	c6 94       	lsr	r12
    1ee2:	51 96       	adiw	r26, 0x11	; 17
    1ee4:	cc 92       	st	X, r12
    1ee6:	51 97       	sbiw	r26, 0x11	; 17
    1ee8:	fe 01       	movw	r30, r28
    1eea:	31 96       	adiw	r30, 0x01	; 1
    1eec:	e4 91       	lpm	r30, Z
    1eee:	8e 2f       	mov	r24, r30
    1ef0:	8f 70       	andi	r24, 0x0F	; 15
    1ef2:	54 96       	adiw	r26, 0x14	; 20
    1ef4:	8c 93       	st	X, r24
    1ef6:	54 97       	sbiw	r26, 0x14	; 20
    1ef8:	e2 95       	swap	r30
    1efa:	ef 70       	andi	r30, 0x0F	; 15
    1efc:	53 96       	adiw	r26, 0x13	; 19
    1efe:	ec 93       	st	X, r30
    1f00:	53 97       	sbiw	r26, 0x13	; 19
    1f02:	fe 01       	movw	r30, r28
    1f04:	32 96       	adiw	r30, 0x02	; 2
    1f06:	e4 91       	lpm	r30, Z
    1f08:	e2 95       	swap	r30
    1f0a:	ef 70       	andi	r30, 0x0F	; 15
    1f0c:	50 96       	adiw	r26, 0x10	; 16
    1f0e:	ec 93       	st	X, r30
    1f10:	8c 2f       	mov	r24, r28
    1f12:	9d 2f       	mov	r25, r29
    1f14:	15 c0       	rjmp	.+42     	; 0x1f40 <u8g_GetGlyph+0x1b4>
    1f16:	fe 01       	movw	r30, r28
    1f18:	32 96       	adiw	r30, 0x02	; 2
    1f1a:	e4 91       	lpm	r30, Z
    1f1c:	ea 21       	and	r30, r10
    1f1e:	c9 01       	movw	r24, r18
    1f20:	8e 0f       	add	r24, r30
    1f22:	91 1d       	adc	r25, r1
    1f24:	c8 0f       	add	r28, r24
    1f26:	d9 1f       	adc	r29, r25
    1f28:	10 17       	cp	r17, r16
    1f2a:	11 f0       	breq	.+4      	; 0x1f30 <u8g_GetGlyph+0x1a4>
    1f2c:	1f 5f       	subi	r17, 0xFF	; 255
    1f2e:	98 cf       	rjmp	.-208    	; 0x1e60 <u8g_GetGlyph+0xd4>
    1f30:	f7 01       	movw	r30, r14
    1f32:	10 8a       	std	Z+16, r1	; 0x10
    1f34:	13 8a       	std	Z+19, r1	; 0x13
    1f36:	14 8a       	std	Z+20, r1	; 0x14
    1f38:	11 8a       	std	Z+17, r1	; 0x11
    1f3a:	12 8a       	std	Z+18, r1	; 0x12
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	bf 90       	pop	r11
    1f52:	af 90       	pop	r10
    1f54:	08 95       	ret

00001f56 <u8g_draw_glyph>:
    1f56:	6f 92       	push	r6
    1f58:	7f 92       	push	r7
    1f5a:	8f 92       	push	r8
    1f5c:	9f 92       	push	r9
    1f5e:	af 92       	push	r10
    1f60:	bf 92       	push	r11
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	5c 01       	movw	r10, r24
    1f74:	16 2f       	mov	r17, r22
    1f76:	64 2e       	mov	r6, r20
    1f78:	62 2f       	mov	r22, r18
    1f7a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <u8g_GetGlyph>
    1f7e:	6c 01       	movw	r12, r24
    1f80:	89 2b       	or	r24, r25
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <u8g_draw_glyph+0x30>
    1f84:	48 c0       	rjmp	.+144    	; 0x2016 <u8g_draw_glyph+0xc0>
    1f86:	f5 01       	movw	r30, r10
    1f88:	84 81       	ldd	r24, Z+4	; 0x04
    1f8a:	95 81       	ldd	r25, Z+5	; 0x05
    1f8c:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <u8g_font_GetFontGlyphStructureSize>
    1f90:	98 2e       	mov	r9, r24
    1f92:	f5 01       	movw	r30, r10
    1f94:	d3 89       	ldd	r29, Z+19	; 0x13
    1f96:	c4 89       	ldd	r28, Z+20	; 0x14
    1f98:	71 88       	ldd	r7, Z+17	; 0x11
    1f9a:	71 0e       	add	r7, r17
    1f9c:	92 89       	ldd	r25, Z+18	; 0x12
    1f9e:	69 1a       	sub	r6, r25
    1fa0:	f6 2c       	mov	r15, r6
    1fa2:	fc 1a       	sub	r15, r28
    1fa4:	0c 2f       	mov	r16, r28
    1fa6:	2d 2f       	mov	r18, r29
    1fa8:	4f 2d       	mov	r20, r15
    1faa:	67 2d       	mov	r22, r7
    1fac:	c5 01       	movw	r24, r10
    1fae:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <u8g_IsBBXIntersection>
    1fb2:	81 11       	cpse	r24, r1
    1fb4:	03 c0       	rjmp	.+6      	; 0x1fbc <u8g_draw_glyph+0x66>
    1fb6:	f5 01       	movw	r30, r10
    1fb8:	80 89       	ldd	r24, Z+16	; 0x10
    1fba:	2e c0       	rjmp	.+92     	; 0x2018 <u8g_draw_glyph+0xc2>
    1fbc:	d9 5f       	subi	r29, 0xF9	; 249
    1fbe:	ed 2e       	mov	r14, r29
    1fc0:	e6 94       	lsr	r14
    1fc2:	e6 94       	lsr	r14
    1fc4:	e6 94       	lsr	r14
    1fc6:	cc 23       	and	r28, r28
    1fc8:	19 f1       	breq	.+70     	; 0x2010 <u8g_draw_glyph+0xba>
    1fca:	e6 01       	movw	r28, r12
    1fcc:	c9 0d       	add	r28, r9
    1fce:	d1 1d       	adc	r29, r1
    1fd0:	88 24       	eor	r8, r8
    1fd2:	8a 94       	dec	r8
    1fd4:	8e 0c       	add	r8, r14
    1fd6:	91 2c       	mov	r9, r1
    1fd8:	ff ef       	ldi	r31, 0xFF	; 255
    1fda:	8f 1a       	sub	r8, r31
    1fdc:	9f 0a       	sbc	r9, r31
    1fde:	11 c0       	rjmp	.+34     	; 0x2002 <u8g_draw_glyph+0xac>
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	04 91       	lpm	r16, Z
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	4f 2d       	mov	r20, r15
    1fe8:	61 2f       	mov	r22, r17
    1fea:	c5 01       	movw	r24, r10
    1fec:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <u8g_Draw8Pixel>
    1ff0:	21 96       	adiw	r28, 0x01	; 1
    1ff2:	18 5f       	subi	r17, 0xF8	; 248
    1ff4:	cc 15       	cp	r28, r12
    1ff6:	dd 05       	cpc	r29, r13
    1ff8:	99 f7       	brne	.-26     	; 0x1fe0 <u8g_draw_glyph+0x8a>
    1ffa:	e6 01       	movw	r28, r12
    1ffc:	f3 94       	inc	r15
    1ffe:	f6 14       	cp	r15, r6
    2000:	39 f0       	breq	.+14     	; 0x2010 <u8g_draw_glyph+0xba>
    2002:	ee 20       	and	r14, r14
    2004:	d9 f3       	breq	.-10     	; 0x1ffc <u8g_draw_glyph+0xa6>
    2006:	6e 01       	movw	r12, r28
    2008:	c8 0c       	add	r12, r8
    200a:	d9 1c       	adc	r13, r9
    200c:	17 2d       	mov	r17, r7
    200e:	e8 cf       	rjmp	.-48     	; 0x1fe0 <u8g_draw_glyph+0x8a>
    2010:	f5 01       	movw	r30, r10
    2012:	80 89       	ldd	r24, Z+16	; 0x10
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <u8g_draw_glyph+0xc2>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	df 90       	pop	r13
    2026:	cf 90       	pop	r12
    2028:	bf 90       	pop	r11
    202a:	af 90       	pop	r10
    202c:	9f 90       	pop	r9
    202e:	8f 90       	pop	r8
    2030:	7f 90       	pop	r7
    2032:	6f 90       	pop	r6
    2034:	08 95       	ret

00002036 <u8g_DrawStr>:
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ff 92       	push	r15
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	6c 01       	movw	r12, r24
    2046:	c6 2f       	mov	r28, r22
    2048:	f4 2e       	mov	r15, r20
    204a:	89 01       	movw	r16, r18
    204c:	dc 01       	movw	r26, r24
    204e:	55 96       	adiw	r26, 0x15	; 21
    2050:	ed 91       	ld	r30, X+
    2052:	fc 91       	ld	r31, X
    2054:	56 97       	sbiw	r26, 0x16	; 22
    2056:	09 95       	icall
    2058:	f8 0e       	add	r15, r24
    205a:	f8 01       	movw	r30, r16
    205c:	20 81       	ld	r18, Z
    205e:	22 23       	and	r18, r18
    2060:	81 f0       	breq	.+32     	; 0x2082 <u8g_DrawStr+0x4c>
    2062:	0f 5f       	subi	r16, 0xFF	; 255
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	d0 e0       	ldi	r29, 0x00	; 0
    2068:	4f 2d       	mov	r20, r15
    206a:	6c 2f       	mov	r22, r28
    206c:	c6 01       	movw	r24, r12
    206e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <u8g_draw_glyph>
    2072:	c8 0f       	add	r28, r24
    2074:	d8 0f       	add	r29, r24
    2076:	d8 01       	movw	r26, r16
    2078:	2d 91       	ld	r18, X+
    207a:	8d 01       	movw	r16, r26
    207c:	21 11       	cpse	r18, r1
    207e:	f4 cf       	rjmp	.-24     	; 0x2068 <u8g_DrawStr+0x32>
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <u8g_DrawStr+0x4e>
    2082:	d0 e0       	ldi	r29, 0x00	; 0
    2084:	8d 2f       	mov	r24, r29
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	df 90       	pop	r13
    2092:	cf 90       	pop	r12
    2094:	08 95       	ret

00002096 <u8g_UpdateRefHeight>:
    2096:	dc 01       	movw	r26, r24
    2098:	14 96       	adiw	r26, 0x04	; 4
    209a:	8d 91       	ld	r24, X+
    209c:	9c 91       	ld	r25, X
    209e:	15 97       	sbiw	r26, 0x05	; 5
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <u8g_UpdateRefHeight+0x10>
    20a4:	4d c0       	rjmp	.+154    	; 0x2140 <u8g_UpdateRefHeight+0xaa>
    20a6:	57 96       	adiw	r26, 0x17	; 23
    20a8:	2c 91       	ld	r18, X
    20aa:	57 97       	sbiw	r26, 0x17	; 23
    20ac:	21 11       	cpse	r18, r1
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <u8g_UpdateRefHeight+0x34>
    20b0:	fc 01       	movw	r30, r24
    20b2:	35 96       	adiw	r30, 0x05	; 5
    20b4:	e4 91       	lpm	r30, Z
    20b6:	58 96       	adiw	r26, 0x18	; 24
    20b8:	ec 93       	st	X, r30
    20ba:	58 97       	sbiw	r26, 0x18	; 24
    20bc:	fc 01       	movw	r30, r24
    20be:	3c 96       	adiw	r30, 0x0c	; 12
    20c0:	e4 91       	lpm	r30, Z
    20c2:	59 96       	adiw	r26, 0x19	; 25
    20c4:	ec 93       	st	X, r30
    20c6:	59 97       	sbiw	r26, 0x19	; 25
    20c8:	1b c0       	rjmp	.+54     	; 0x2100 <u8g_UpdateRefHeight+0x6a>
    20ca:	21 30       	cpi	r18, 0x01	; 1
    20cc:	69 f4       	brne	.+26     	; 0x20e8 <u8g_UpdateRefHeight+0x52>
    20ce:	fc 01       	movw	r30, r24
    20d0:	3f 96       	adiw	r30, 0x0f	; 15
    20d2:	e4 91       	lpm	r30, Z
    20d4:	58 96       	adiw	r26, 0x18	; 24
    20d6:	ec 93       	st	X, r30
    20d8:	58 97       	sbiw	r26, 0x18	; 24
    20da:	fc 01       	movw	r30, r24
    20dc:	70 96       	adiw	r30, 0x10	; 16
    20de:	e4 91       	lpm	r30, Z
    20e0:	59 96       	adiw	r26, 0x19	; 25
    20e2:	ec 93       	st	X, r30
    20e4:	59 97       	sbiw	r26, 0x19	; 25
    20e6:	0c c0       	rjmp	.+24     	; 0x2100 <u8g_UpdateRefHeight+0x6a>
    20e8:	fc 01       	movw	r30, r24
    20ea:	3d 96       	adiw	r30, 0x0d	; 13
    20ec:	e4 91       	lpm	r30, Z
    20ee:	58 96       	adiw	r26, 0x18	; 24
    20f0:	ec 93       	st	X, r30
    20f2:	58 97       	sbiw	r26, 0x18	; 24
    20f4:	fc 01       	movw	r30, r24
    20f6:	3e 96       	adiw	r30, 0x0e	; 14
    20f8:	e4 91       	lpm	r30, Z
    20fa:	59 96       	adiw	r26, 0x19	; 25
    20fc:	ec 93       	st	X, r30
    20fe:	59 97       	sbiw	r26, 0x19	; 25
    2100:	58 96       	adiw	r26, 0x18	; 24
    2102:	8c 91       	ld	r24, X
    2104:	58 97       	sbiw	r26, 0x18	; 24
    2106:	08 2e       	mov	r0, r24
    2108:	00 0c       	add	r0, r0
    210a:	99 0b       	sbc	r25, r25
    210c:	59 96       	adiw	r26, 0x19	; 25
    210e:	2c 91       	ld	r18, X
    2110:	59 97       	sbiw	r26, 0x19	; 25
    2112:	82 1b       	sub	r24, r18
    2114:	91 09       	sbc	r25, r1
    2116:	27 fd       	sbrc	r18, 7
    2118:	93 95       	inc	r25
    211a:	5a 96       	adiw	r26, 0x1a	; 26
    211c:	2c 91       	ld	r18, X
    211e:	5a 97       	sbiw	r26, 0x1a	; 26
    2120:	20 34       	cpi	r18, 0x40	; 64
    2122:	61 f0       	breq	.+24     	; 0x213c <u8g_UpdateRefHeight+0xa6>
    2124:	82 9f       	mul	r24, r18
    2126:	c0 01       	movw	r24, r0
    2128:	11 24       	eor	r1, r1
    212a:	00 24       	eor	r0, r0
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	00 1c       	adc	r0, r0
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	00 1c       	adc	r0, r0
    2138:	89 2f       	mov	r24, r25
    213a:	90 2d       	mov	r25, r0
    213c:	5b 96       	adiw	r26, 0x1b	; 27
    213e:	8c 93       	st	X, r24
    2140:	08 95       	ret

00002142 <u8g_SetFontPosBaseline>:
    2142:	24 eb       	ldi	r18, 0xB4	; 180
    2144:	3e e0       	ldi	r19, 0x0E	; 14
    2146:	fc 01       	movw	r30, r24
    2148:	36 8b       	std	Z+22, r19	; 0x16
    214a:	25 8b       	std	Z+21, r18	; 0x15
    214c:	08 95       	ret

0000214e <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
  if ( u8g->font != font )
    2152:	fc 01       	movw	r30, r24
    2154:	24 81       	ldd	r18, Z+4	; 0x04
    2156:	35 81       	ldd	r19, Z+5	; 0x05
    2158:	26 17       	cp	r18, r22
    215a:	37 07       	cpc	r19, r23
    215c:	49 f0       	breq	.+18     	; 0x2170 <u8g_SetFont+0x22>
    215e:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    2160:	75 83       	std	Z+5, r23	; 0x05
    2162:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    2164:	0e 94 4b 10 	call	0x2096	; 0x2096 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2168:	84 eb       	ldi	r24, 0xB4	; 180
    216a:	9e e0       	ldi	r25, 0x0E	; 14
    216c:	9e 8b       	std	Y+22, r25	; 0x16
    216e:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	08 95       	ret

00002176 <u8g_init_data>:
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	ec 01       	movw	r28, r24
    217e:	1d 82       	std	Y+5, r1	; 0x05
    2180:	1c 82       	std	Y+4, r1	; 0x04
    2182:	1f 82       	std	Y+7, r1	; 0x07
    2184:	1e 82       	std	Y+6, r1	; 0x06
    2186:	19 86       	std	Y+9, r1	; 0x09
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	88 87       	std	Y+8, r24	; 0x08
    218c:	82 e2       	ldi	r24, 0x22	; 34
    218e:	8a 87       	std	Y+10, r24	; 0x0a
    2190:	1f 86       	std	Y+15, r1	; 0x0f
    2192:	1e 86       	std	Y+14, r1	; 0x0e
    2194:	fe 01       	movw	r30, r28
    2196:	b3 96       	adiw	r30, 0x23	; 35
    2198:	9e 01       	movw	r18, r28
    219a:	2f 5c       	subi	r18, 0xCF	; 207
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	81 93       	st	Z+, r24
    21a2:	e2 17       	cp	r30, r18
    21a4:	f3 07       	cpc	r31, r19
    21a6:	e1 f7       	brne	.-8      	; 0x21a0 <u8g_init_data+0x2a>
    21a8:	11 e0       	ldi	r17, 0x01	; 1
    21aa:	18 a3       	std	Y+32, r17	; 0x20
    21ac:	ce 01       	movw	r24, r28
    21ae:	0e 94 a1 10 	call	0x2142	; 0x2142 <u8g_SetFontPosBaseline>
    21b2:	1f 8b       	std	Y+23, r17	; 0x17
    21b4:	18 8e       	std	Y+24, r1	; 0x18
    21b6:	19 8e       	std	Y+25, r1	; 0x19
    21b8:	80 e4       	ldi	r24, 0x40	; 64
    21ba:	8a 8f       	std	Y+26, r24	; 0x1a
    21bc:	1b 8e       	std	Y+27, r1	; 0x1b
    21be:	8a e1       	ldi	r24, 0x1A	; 26
    21c0:	93 e1       	ldi	r25, 0x13	; 19
    21c2:	9a ab       	std	Y+50, r25	; 0x32
    21c4:	89 ab       	std	Y+49, r24	; 0x31
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	08 95       	ret

000021ce <u8g_call_dev_fn>:
    21ce:	db 01       	movw	r26, r22
    21d0:	ed 91       	ld	r30, X+
    21d2:	fc 91       	ld	r31, X
    21d4:	09 95       	icall
    21d6:	08 95       	ret

000021d8 <u8g_InitLL>:
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	ec 01       	movw	r28, r24
    21e2:	8b 01       	movw	r16, r22
    21e4:	e9 a9       	ldd	r30, Y+49	; 0x31
    21e6:	fa a9       	ldd	r31, Y+50	; 0x32
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	09 95       	icall
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a e0       	ldi	r20, 0x0A	; 10
    21f2:	b8 01       	movw	r22, r16
    21f4:	ce 01       	movw	r24, r28
    21f6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    21fa:	18 2f       	mov	r17, r24
    21fc:	e9 a9       	ldd	r30, Y+49	; 0x31
    21fe:	fa a9       	ldd	r31, Y+50	; 0x32
    2200:	83 e0       	ldi	r24, 0x03	; 3
    2202:	09 95       	icall
    2204:	e9 a9       	ldd	r30, Y+49	; 0x31
    2206:	fa a9       	ldd	r31, Y+50	; 0x32
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	09 95       	icall
    220c:	81 2f       	mov	r24, r17
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	08 95       	ret

00002218 <u8g_FirstPageLL>:
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	ec 01       	movw	r28, r24
    2222:	8b 01       	movw	r16, r22
    2224:	e9 a9       	ldd	r30, Y+49	; 0x31
    2226:	fa a9       	ldd	r31, Y+50	; 0x32
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	09 95       	icall
    222c:	e9 a9       	ldd	r30, Y+49	; 0x31
    222e:	fa a9       	ldd	r31, Y+50	; 0x32
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	09 95       	icall
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	44 e1       	ldi	r20, 0x14	; 20
    223a:	b8 01       	movw	r22, r16
    223c:	ce 01       	movw	r24, r28
    223e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    2242:	9e 01       	movw	r18, r28
    2244:	2d 5c       	subi	r18, 0xCD	; 205
    2246:	3f 4f       	sbci	r19, 0xFF	; 255
    2248:	47 e1       	ldi	r20, 0x17	; 23
    224a:	b8 01       	movw	r22, r16
    224c:	ce 01       	movw	r24, r28
    224e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    2252:	e9 a9       	ldd	r30, Y+49	; 0x31
    2254:	fa a9       	ldd	r31, Y+50	; 0x32
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	09 95       	icall
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret

00002264 <u8g_NextPageLL>:
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	ec 01       	movw	r28, r24
    2270:	7b 01       	movw	r14, r22
    2272:	e9 a9       	ldd	r30, Y+49	; 0x31
    2274:	fa a9       	ldd	r31, Y+50	; 0x32
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	09 95       	icall
    227a:	e9 a9       	ldd	r30, Y+49	; 0x31
    227c:	fa a9       	ldd	r31, Y+50	; 0x32
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	09 95       	icall
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	45 e1       	ldi	r20, 0x15	; 21
    2288:	b7 01       	movw	r22, r14
    228a:	ce 01       	movw	r24, r28
    228c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    2290:	18 2f       	mov	r17, r24
    2292:	88 23       	and	r24, r24
    2294:	41 f0       	breq	.+16     	; 0x22a6 <u8g_NextPageLL+0x42>
    2296:	9e 01       	movw	r18, r28
    2298:	2d 5c       	subi	r18, 0xCD	; 205
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	47 e1       	ldi	r20, 0x17	; 23
    229e:	b7 01       	movw	r22, r14
    22a0:	ce 01       	movw	r24, r28
    22a2:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    22a6:	e9 a9       	ldd	r30, Y+49	; 0x31
    22a8:	fa a9       	ldd	r31, Y+50	; 0x32
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	09 95       	icall
    22ae:	81 2f       	mov	r24, r17
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	08 95       	ret

000022bc <u8g_GetWidthLL>:
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	1f 92       	push	r1
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	9e 01       	movw	r18, r28
    22c8:	2f 5f       	subi	r18, 0xFF	; 255
    22ca:	3f 4f       	sbci	r19, 0xFF	; 255
    22cc:	46 e4       	ldi	r20, 0x46	; 70
    22ce:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	0f 90       	pop	r0
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	08 95       	ret

000022dc <u8g_GetHeightLL>:
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	1f 92       	push	r1
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	9e 01       	movw	r18, r28
    22e8:	2f 5f       	subi	r18, 0xFF	; 255
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	47 e4       	ldi	r20, 0x47	; 71
    22ee:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	0f 90       	pop	r0
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <u8g_GetModeLL>:
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	48 e4       	ldi	r20, 0x48	; 72
    2302:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    2306:	08 95       	ret

00002308 <u8g_UpdateDimension>:
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	ec 01       	movw	r28, r24
    230e:	6a 81       	ldd	r22, Y+2	; 0x02
    2310:	7b 81       	ldd	r23, Y+3	; 0x03
    2312:	0e 94 5e 11 	call	0x22bc	; 0x22bc <u8g_GetWidthLL>
    2316:	88 83       	st	Y, r24
    2318:	6a 81       	ldd	r22, Y+2	; 0x02
    231a:	7b 81       	ldd	r23, Y+3	; 0x03
    231c:	ce 01       	movw	r24, r28
    231e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <u8g_GetHeightLL>
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	6a 81       	ldd	r22, Y+2	; 0x02
    2326:	7b 81       	ldd	r23, Y+3	; 0x03
    2328:	ce 01       	movw	r24, r28
    232a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <u8g_GetModeLL>
    232e:	8b 87       	std	Y+11, r24	; 0x0b
    2330:	9e 01       	movw	r18, r28
    2332:	2d 5c       	subi	r18, 0xCD	; 205
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	6a 81       	ldd	r22, Y+2	; 0x02
    2338:	7b 81       	ldd	r23, Y+3	; 0x03
    233a:	47 e1       	ldi	r20, 0x17	; 23
    233c:	ce 01       	movw	r24, r28
    233e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <u8g_Begin>:
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	ec 01       	movw	r28, r24
    234e:	6a 81       	ldd	r22, Y+2	; 0x02
    2350:	7b 81       	ldd	r23, Y+3	; 0x03
    2352:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <u8g_InitLL>
    2356:	88 23       	and	r24, r24
    2358:	21 f0       	breq	.+8      	; 0x2362 <u8g_Begin+0x1a>
    235a:	ce 01       	movw	r24, r28
    235c:	0e 94 84 11 	call	0x2308	; 0x2308 <u8g_UpdateDimension>
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <u8g_InitI2C>:
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	ec 01       	movw	r28, r24
    2374:	7b 01       	movw	r14, r22
    2376:	14 2f       	mov	r17, r20
    2378:	0e 94 bb 10 	call	0x2176	; 0x2176 <u8g_init_data>
    237c:	fb 82       	std	Y+3, r15	; 0x03
    237e:	ea 82       	std	Y+2, r14	; 0x02
    2380:	1e a7       	std	Y+46, r17	; 0x2e
    2382:	ce 01       	movw	r24, r28
    2384:	0e 94 a4 11 	call	0x2348	; 0x2348 <u8g_Begin>
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	08 95       	ret

00002394 <u8g_FirstPage>:
    2394:	fc 01       	movw	r30, r24
    2396:	62 81       	ldd	r22, Z+2	; 0x02
    2398:	73 81       	ldd	r23, Z+3	; 0x03
    239a:	0e 94 0c 11 	call	0x2218	; 0x2218 <u8g_FirstPageLL>
    239e:	08 95       	ret

000023a0 <u8g_NextPage>:
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	ec 01       	movw	r28, r24
    23a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    23a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    23aa:	30 97       	sbiw	r30, 0x00	; 0
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <u8g_NextPage+0x10>
    23ae:	09 95       	icall
    23b0:	6a 81       	ldd	r22, Y+2	; 0x02
    23b2:	7b 81       	ldd	r23, Y+3	; 0x03
    23b4:	ce 01       	movw	r24, r28
    23b6:	0e 94 32 11 	call	0x2264	; 0x2264 <u8g_NextPageLL>
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	08 95       	ret

000023c0 <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    23c0:	0f 93       	push	r16
    23c2:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    23c8:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    23ca:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    23cc:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    23ce:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    23d0:	9f 01       	movw	r18, r30
    23d2:	24 5e       	subi	r18, 0xE4	; 228
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    23d6:	4b e3       	ldi	r20, 0x3B	; 59
    23d8:	bc 01       	movw	r22, r24
    23da:	cf 01       	movw	r24, r30
    23dc:	0e 94 e7 10 	call	0x21ce	; 0x21ce <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    23e0:	0f 91       	pop	r16
    23e2:	08 95       	ret

000023e4 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    23e4:	fc 01       	movw	r30, r24
    23e6:	12 82       	std	Z+2, r1	; 0x02
    23e8:	80 81       	ld	r24, Z
    23ea:	81 50       	subi	r24, 0x01	; 1
    23ec:	83 83       	std	Z+3, r24	; 0x03
    23ee:	14 82       	std	Z+4, r1	; 0x04
    23f0:	08 95       	ret

000023f2 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    23f2:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    23f4:	90 81       	ld	r25, Z
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	89 0f       	add	r24, r25
    23fa:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    23fc:	21 81       	ldd	r18, Z+1	; 0x01
    23fe:	82 17       	cp	r24, r18
    2400:	60 f4       	brcc	.+24     	; 0x241a <u8g_page_Next+0x28>
    return 0;
  p->page++;
    2402:	84 81       	ldd	r24, Z+4	; 0x04
    2404:	8f 5f       	subi	r24, 0xFF	; 255
    2406:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    2408:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    240a:	98 0f       	add	r25, r24
  if ( y1 >= p->total_height )
    240c:	92 17       	cp	r25, r18
    240e:	10 f0       	brcs	.+4      	; 0x2414 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    2410:	9f ef       	ldi	r25, 0xFF	; 255
    2412:	92 0f       	add	r25, r18
  }
  p->page_y1 = y1;
    2414:	93 83       	std	Z+3, r25	; 0x03
  
  return 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    241a:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    241c:	08 95       	ret

0000241e <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    241e:	dc 01       	movw	r26, r24
    2420:	16 96       	adiw	r26, 0x06	; 6
    2422:	ed 91       	ld	r30, X+
    2424:	fc 91       	ld	r31, X
    2426:	17 97       	sbiw	r26, 0x07	; 7
    2428:	15 96       	adiw	r26, 0x05	; 5
    242a:	8c 91       	ld	r24, X
    242c:	9f 01       	movw	r18, r30
    242e:	28 0f       	add	r18, r24
    2430:	31 1d       	adc	r19, r1
    2432:	c9 01       	movw	r24, r18
    2434:	11 92       	st	Z+, r1
    2436:	e8 17       	cp	r30, r24
    2438:	f9 07       	cpc	r31, r25
    243a:	e1 f7       	brne	.-8      	; 0x2434 <u8g_pb_Clear+0x16>
    243c:	08 95       	ret

0000243e <u8g_pb_IsYIntersection>:
    243e:	fc 01       	movw	r30, r24
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	83 81       	ldd	r24, Z+3	; 0x03
    2444:	86 17       	cp	r24, r22
    2446:	08 f4       	brcc	.+2      	; 0x244a <u8g_pb_IsYIntersection+0xc>
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	31 e0       	ldi	r19, 0x01	; 1
    244c:	46 17       	cp	r20, r22
    244e:	08 f0       	brcs	.+2      	; 0x2452 <u8g_pb_IsYIntersection+0x14>
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	83 2f       	mov	r24, r19
    2454:	89 2b       	or	r24, r25
    2456:	21 e0       	ldi	r18, 0x01	; 1
    2458:	52 81       	ldd	r21, Z+2	; 0x02
    245a:	45 17       	cp	r20, r21
    245c:	08 f4       	brcc	.+2      	; 0x2460 <u8g_pb_IsYIntersection+0x22>
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	28 23       	and	r18, r24
    2462:	83 2f       	mov	r24, r19
    2464:	89 23       	and	r24, r25
    2466:	82 2b       	or	r24, r18
    2468:	08 95       	ret

0000246a <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    246a:	dc 01       	movw	r26, r24
    246c:	fb 01       	movw	r30, r22
  box->x0 = 0;
    246e:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    2470:	12 96       	adiw	r26, 0x02	; 2
    2472:	8c 91       	ld	r24, X
    2474:	12 97       	sbiw	r26, 0x02	; 2
    2476:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    2478:	15 96       	adiw	r26, 0x05	; 5
    247a:	8c 91       	ld	r24, X
    247c:	15 97       	sbiw	r26, 0x05	; 5
    247e:	81 50       	subi	r24, 0x01	; 1
    2480:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    2482:	13 96       	adiw	r26, 0x03	; 3
    2484:	8c 91       	ld	r24, X
    2486:	83 83       	std	Z+3, r24	; 0x03
    2488:	08 95       	ret

0000248a <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    248a:	fb 01       	movw	r30, r22
    248c:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    248e:	23 81       	ldd	r18, Z+3	; 0x03
    2490:	21 30       	cpi	r18, 0x01	; 1
    2492:	19 f0       	breq	.+6      	; 0x249a <u8g_pb_Is8PixelVisible+0x10>
    2494:	23 30       	cpi	r18, 0x03	; 3
    2496:	21 f0       	breq	.+8      	; 0x24a0 <u8g_pb_Is8PixelVisible+0x16>
    2498:	06 c0       	rjmp	.+12     	; 0x24a6 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    249a:	48 e0       	ldi	r20, 0x08	; 8
    249c:	43 0f       	add	r20, r19
      break;
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    24a0:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    24a2:	38 50       	subi	r19, 0x08	; 8
      break;
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    24a6:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    24a8:	63 2f       	mov	r22, r19
    24aa:	0e 94 1f 12 	call	0x243e	; 0x243e <u8g_pb_IsYIntersection>
}
    24ae:	08 95       	ret

000024b0 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    24b0:	fc 01       	movw	r30, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    24b6:	26 81       	ldd	r18, Z+6	; 0x06
    24b8:	37 81       	ldd	r19, Z+7	; 0x07
    24ba:	45 81       	ldd	r20, Z+5	; 0x05
    24bc:	0e 94 43 0c 	call	0x1886	; 0x1886 <u8g_WriteSequence>
}
    24c0:	08 95       	ret

000024c2 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    24c2:	dc 01       	movw	r26, r24
    24c4:	16 96       	adiw	r26, 0x06	; 6
    24c6:	ed 91       	ld	r30, X+
    24c8:	fc 91       	ld	r31, X
    24ca:	17 97       	sbiw	r26, 0x07	; 7
    24cc:	12 96       	adiw	r26, 0x02	; 2
    24ce:	8c 91       	ld	r24, X
    24d0:	48 1b       	sub	r20, r24
    24d2:	47 70       	andi	r20, 0x07	; 7
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <u8g_pb8v1_set_pixel+0x1c>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	4a 95       	dec	r20
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <u8g_pb8v1_set_pixel+0x18>
    24e2:	e6 0f       	add	r30, r22
    24e4:	f1 1d       	adc	r31, r1
    24e6:	22 23       	and	r18, r18
    24e8:	21 f0       	breq	.+8      	; 0x24f2 <u8g_pb8v1_set_pixel+0x30>
    24ea:	90 81       	ld	r25, Z
    24ec:	89 2b       	or	r24, r25
    24ee:	80 83       	st	Z, r24
    24f0:	08 95       	ret
    24f2:	80 95       	com	r24
    24f4:	90 81       	ld	r25, Z
    24f6:	89 23       	and	r24, r25
    24f8:	80 83       	st	Z, r24
    24fa:	08 95       	ret

000024fc <u8g_pb8v1_SetPixel>:
    24fc:	fb 01       	movw	r30, r22
    24fe:	41 81       	ldd	r20, Z+1	; 0x01
    2500:	fc 01       	movw	r30, r24
    2502:	22 81       	ldd	r18, Z+2	; 0x02
    2504:	42 17       	cp	r20, r18
    2506:	70 f0       	brcs	.+28     	; 0x2524 <u8g_pb8v1_SetPixel+0x28>
    2508:	23 81       	ldd	r18, Z+3	; 0x03
    250a:	24 17       	cp	r18, r20
    250c:	58 f0       	brcs	.+22     	; 0x2524 <u8g_pb8v1_SetPixel+0x28>
    250e:	fb 01       	movw	r30, r22
    2510:	30 81       	ld	r19, Z
    2512:	fc 01       	movw	r30, r24
    2514:	25 81       	ldd	r18, Z+5	; 0x05
    2516:	32 17       	cp	r19, r18
    2518:	28 f4       	brcc	.+10     	; 0x2524 <u8g_pb8v1_SetPixel+0x28>
    251a:	fb 01       	movw	r30, r22
    251c:	24 81       	ldd	r18, Z+4	; 0x04
    251e:	63 2f       	mov	r22, r19
    2520:	0e 94 61 12 	call	0x24c2	; 0x24c2 <u8g_pb8v1_set_pixel>
    2524:	08 95       	ret

00002526 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    2526:	df 92       	push	r13
    2528:	ef 92       	push	r14
    252a:	ff 92       	push	r15
    252c:	0f 93       	push	r16
    252e:	1f 93       	push	r17
    2530:	cf 93       	push	r28
    2532:	df 93       	push	r29
    2534:	7c 01       	movw	r14, r24
    2536:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    2538:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	49 f0       	breq	.+18     	; 0x2552 <u8g_pb8v1_Set8PixelOpt2+0x2c>
    2540:	28 f0       	brcs	.+10     	; 0x254c <u8g_pb8v1_Set8PixelOpt2+0x26>
    2542:	82 30       	cpi	r24, 0x02	; 2
    2544:	51 f0       	breq	.+20     	; 0x255a <u8g_pb8v1_Set8PixelOpt2+0x34>
    2546:	83 30       	cpi	r24, 0x03	; 3
    2548:	59 f0       	breq	.+22     	; 0x2560 <u8g_pb8v1_Set8PixelOpt2+0x3a>
    254a:	0e c0       	rjmp	.+28     	; 0x2568 <u8g_pb8v1_Set8PixelOpt2+0x42>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    254c:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    254e:	01 e0       	ldi	r16, 0x01	; 1
    2550:	0d c0       	rjmp	.+26     	; 0x256c <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 1: dy++; break;
    2552:	dd 24       	eor	r13, r13
    2554:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2556:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    2558:	09 c0       	rjmp	.+18     	; 0x256c <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    255a:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    255c:	0f ef       	ldi	r16, 0xFF	; 255
    255e:	06 c0       	rjmp	.+12     	; 0x256c <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
    2560:	dd 24       	eor	r13, r13
    2562:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2564:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2566:	02 c0       	rjmp	.+4      	; 0x256c <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2568:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    256a:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    256c:	11 23       	and	r17, r17
    256e:	24 f4       	brge	.+8      	; 0x2578 <u8g_pb8v1_Set8PixelOpt2+0x52>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    2570:	be 01       	movw	r22, r28
    2572:	c7 01       	movw	r24, r14
    2574:	0e 94 7e 12 	call	0x24fc	; 0x24fc <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2578:	98 81       	ld	r25, Y
    257a:	90 0f       	add	r25, r16
    257c:	98 83       	st	Y, r25
    arg_pixel->y += dy;
    257e:	99 81       	ldd	r25, Y+1	; 0x01
    2580:	9d 0d       	add	r25, r13
    2582:	99 83       	std	Y+1, r25	; 0x01
    pixel <<= 1;
    2584:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    2586:	91 f7       	brne	.-28     	; 0x256c <u8g_pb8v1_Set8PixelOpt2+0x46>
  
}
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	df 90       	pop	r13
    2596:	08 95       	ret

00002598 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    25a0:	fb 01       	movw	r30, r22
    25a2:	c2 81       	ldd	r28, Z+2	; 0x02
    25a4:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	fa 01       	movw	r30, r20
    25aa:	74 97       	sbiw	r30, 0x14	; 20
    25ac:	e4 33       	cpi	r30, 0x34	; 52
    25ae:	f1 05       	cpc	r31, r1
    25b0:	c8 f5       	brcc	.+114    	; 0x2624 <u8g_dev_pb8v1_base_fn+0x8c>
    25b2:	89 01       	movw	r16, r18
    25b4:	ec 5c       	subi	r30, 0xCC	; 204
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    25bc:	b9 01       	movw	r22, r18
    25be:	ce 01       	movw	r24, r28
    25c0:	0e 94 45 12 	call	0x248a	; 0x248a <u8g_pb_Is8PixelVisible>
    25c4:	88 23       	and	r24, r24
    25c6:	81 f1       	breq	.+96     	; 0x2628 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    25c8:	b8 01       	movw	r22, r16
    25ca:	ce 01       	movw	r24, r28
    25cc:	0e 94 93 12 	call	0x2526	; 0x2526 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	2b c0       	rjmp	.+86     	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    25d4:	b9 01       	movw	r22, r18
    25d6:	ce 01       	movw	r24, r28
    25d8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    25de:	25 c0       	rjmp	.+74     	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    25e0:	ce 01       	movw	r24, r28
    25e2:	0e 94 0f 12 	call	0x241e	; 0x241e <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    25e6:	ce 01       	movw	r24, r28
    25e8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    25ee:	1d c0       	rjmp	.+58     	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    25f0:	ce 01       	movw	r24, r28
    25f2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <u8g_page_Next>
    25f6:	88 23       	and	r24, r24
    25f8:	c1 f0       	breq	.+48     	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
        return 0;
      u8g_pb_Clear(pb);
    25fa:	ce 01       	movw	r24, r28
    25fc:	0e 94 0f 12 	call	0x241e	; 0x241e <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    2602:	13 c0       	rjmp	.+38     	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    2604:	b9 01       	movw	r22, r18
    2606:	ce 01       	movw	r24, r28
    2608:	0e 94 35 12 	call	0x246a	; 0x246a <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    260e:	0d c0       	rjmp	.+26     	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	f9 01       	movw	r30, r18
    2614:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    2618:	08 c0       	rjmp	.+16     	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	f9 01       	movw	r30, r18
    261e:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    2622:	03 c0       	rjmp	.+6      	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	01 c0       	rjmp	.+2      	; 0x262a <u8g_dev_pb8v1_base_fn+0x92>
  }
  return 1;
    2628:	81 e0       	ldi	r24, 0x01	; 1
}
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	08 95       	ret

00002634 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    2634:	08 95       	ret

00002636 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    2636:	1f 92       	push	r1
    2638:	0f 92       	push	r0
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	0f 92       	push	r0
    263e:	11 24       	eor	r1, r1
    2640:	2f 93       	push	r18
    2642:	8f 93       	push	r24
    2644:	9f 93       	push	r25
    2646:	ef 93       	push	r30
    2648:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    264a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    264e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    2652:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2654:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <UART_RxHead>
    2658:	ef 5f       	subi	r30, 0xFF	; 255
    265a:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    265c:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <UART_RxTail>
    2660:	e9 17       	cp	r30, r25
    2662:	39 f0       	breq	.+14     	; 0x2672 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    2664:	e0 93 b9 01 	sts	0x01B9, r30	; 0x8001b9 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	e4 54       	subi	r30, 0x44	; 68
    266c:	fe 4f       	sbci	r31, 0xFE	; 254
    266e:	20 83       	st	Z, r18
    2670:	01 c0       	rjmp	.+2      	; 0x2674 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2672:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    2674:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <UART_LastRxError>
}
    2678:	ff 91       	pop	r31
    267a:	ef 91       	pop	r30
    267c:	9f 91       	pop	r25
    267e:	8f 91       	pop	r24
    2680:	2f 91       	pop	r18
    2682:	0f 90       	pop	r0
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	0f 90       	pop	r0
    2688:	1f 90       	pop	r1
    268a:	18 95       	reti

0000268c <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    268c:	1f 92       	push	r1
    268e:	0f 92       	push	r0
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	0f 92       	push	r0
    2694:	11 24       	eor	r1, r1
    2696:	8f 93       	push	r24
    2698:	9f 93       	push	r25
    269a:	ef 93       	push	r30
    269c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    269e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <UART_TxHead>
    26a2:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <UART_TxTail>
    26a6:	98 17       	cp	r25, r24
    26a8:	69 f0       	breq	.+26     	; 0x26c4 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    26aa:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <UART_TxTail>
    26ae:	ef 5f       	subi	r30, 0xFF	; 255
    26b0:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    26b2:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	e4 52       	subi	r30, 0x24	; 36
    26ba:	fe 4f       	sbci	r31, 0xFE	; 254
    26bc:	80 81       	ld	r24, Z
    26be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    26c4:	e1 ec       	ldi	r30, 0xC1	; 193
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	8f 7d       	andi	r24, 0xDF	; 223
    26cc:	80 83       	st	Z, r24
    }
}
    26ce:	ff 91       	pop	r31
    26d0:	ef 91       	pop	r30
    26d2:	9f 91       	pop	r25
    26d4:	8f 91       	pop	r24
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	0f 90       	pop	r0
    26dc:	1f 90       	pop	r1
    26de:	18 95       	reti

000026e0 <__divsf3>:
    26e0:	0e 94 84 13 	call	0x2708	; 0x2708 <__divsf3x>
    26e4:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__fp_round>
    26e8:	0e 94 65 14 	call	0x28ca	; 0x28ca <__fp_pscB>
    26ec:	58 f0       	brcs	.+22     	; 0x2704 <__divsf3+0x24>
    26ee:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__fp_pscA>
    26f2:	40 f0       	brcs	.+16     	; 0x2704 <__divsf3+0x24>
    26f4:	29 f4       	brne	.+10     	; 0x2700 <__divsf3+0x20>
    26f6:	5f 3f       	cpi	r21, 0xFF	; 255
    26f8:	29 f0       	breq	.+10     	; 0x2704 <__divsf3+0x24>
    26fa:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__fp_inf>
    26fe:	51 11       	cpse	r21, r1
    2700:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__fp_szero>
    2704:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__fp_nan>

00002708 <__divsf3x>:
    2708:	0e 94 7d 14 	call	0x28fa	; 0x28fa <__fp_split3>
    270c:	68 f3       	brcs	.-38     	; 0x26e8 <__divsf3+0x8>

0000270e <__divsf3_pse>:
    270e:	99 23       	and	r25, r25
    2710:	b1 f3       	breq	.-20     	; 0x26fe <__divsf3+0x1e>
    2712:	55 23       	and	r21, r21
    2714:	91 f3       	breq	.-28     	; 0x26fa <__divsf3+0x1a>
    2716:	95 1b       	sub	r25, r21
    2718:	55 0b       	sbc	r21, r21
    271a:	bb 27       	eor	r27, r27
    271c:	aa 27       	eor	r26, r26
    271e:	62 17       	cp	r22, r18
    2720:	73 07       	cpc	r23, r19
    2722:	84 07       	cpc	r24, r20
    2724:	38 f0       	brcs	.+14     	; 0x2734 <__divsf3_pse+0x26>
    2726:	9f 5f       	subi	r25, 0xFF	; 255
    2728:	5f 4f       	sbci	r21, 0xFF	; 255
    272a:	22 0f       	add	r18, r18
    272c:	33 1f       	adc	r19, r19
    272e:	44 1f       	adc	r20, r20
    2730:	aa 1f       	adc	r26, r26
    2732:	a9 f3       	breq	.-22     	; 0x271e <__divsf3_pse+0x10>
    2734:	35 d0       	rcall	.+106    	; 0x27a0 <__divsf3_pse+0x92>
    2736:	0e 2e       	mov	r0, r30
    2738:	3a f0       	brmi	.+14     	; 0x2748 <__divsf3_pse+0x3a>
    273a:	e0 e8       	ldi	r30, 0x80	; 128
    273c:	32 d0       	rcall	.+100    	; 0x27a2 <__divsf3_pse+0x94>
    273e:	91 50       	subi	r25, 0x01	; 1
    2740:	50 40       	sbci	r21, 0x00	; 0
    2742:	e6 95       	lsr	r30
    2744:	00 1c       	adc	r0, r0
    2746:	ca f7       	brpl	.-14     	; 0x273a <__divsf3_pse+0x2c>
    2748:	2b d0       	rcall	.+86     	; 0x27a0 <__divsf3_pse+0x92>
    274a:	fe 2f       	mov	r31, r30
    274c:	29 d0       	rcall	.+82     	; 0x27a0 <__divsf3_pse+0x92>
    274e:	66 0f       	add	r22, r22
    2750:	77 1f       	adc	r23, r23
    2752:	88 1f       	adc	r24, r24
    2754:	bb 1f       	adc	r27, r27
    2756:	26 17       	cp	r18, r22
    2758:	37 07       	cpc	r19, r23
    275a:	48 07       	cpc	r20, r24
    275c:	ab 07       	cpc	r26, r27
    275e:	b0 e8       	ldi	r27, 0x80	; 128
    2760:	09 f0       	breq	.+2      	; 0x2764 <__divsf3_pse+0x56>
    2762:	bb 0b       	sbc	r27, r27
    2764:	80 2d       	mov	r24, r0
    2766:	bf 01       	movw	r22, r30
    2768:	ff 27       	eor	r31, r31
    276a:	93 58       	subi	r25, 0x83	; 131
    276c:	5f 4f       	sbci	r21, 0xFF	; 255
    276e:	3a f0       	brmi	.+14     	; 0x277e <__divsf3_pse+0x70>
    2770:	9e 3f       	cpi	r25, 0xFE	; 254
    2772:	51 05       	cpc	r21, r1
    2774:	78 f0       	brcs	.+30     	; 0x2794 <__divsf3_pse+0x86>
    2776:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__fp_inf>
    277a:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__fp_szero>
    277e:	5f 3f       	cpi	r21, 0xFF	; 255
    2780:	e4 f3       	brlt	.-8      	; 0x277a <__divsf3_pse+0x6c>
    2782:	98 3e       	cpi	r25, 0xE8	; 232
    2784:	d4 f3       	brlt	.-12     	; 0x277a <__divsf3_pse+0x6c>
    2786:	86 95       	lsr	r24
    2788:	77 95       	ror	r23
    278a:	67 95       	ror	r22
    278c:	b7 95       	ror	r27
    278e:	f7 95       	ror	r31
    2790:	9f 5f       	subi	r25, 0xFF	; 255
    2792:	c9 f7       	brne	.-14     	; 0x2786 <__divsf3_pse+0x78>
    2794:	88 0f       	add	r24, r24
    2796:	91 1d       	adc	r25, r1
    2798:	96 95       	lsr	r25
    279a:	87 95       	ror	r24
    279c:	97 f9       	bld	r25, 7
    279e:	08 95       	ret
    27a0:	e1 e0       	ldi	r30, 0x01	; 1
    27a2:	66 0f       	add	r22, r22
    27a4:	77 1f       	adc	r23, r23
    27a6:	88 1f       	adc	r24, r24
    27a8:	bb 1f       	adc	r27, r27
    27aa:	62 17       	cp	r22, r18
    27ac:	73 07       	cpc	r23, r19
    27ae:	84 07       	cpc	r24, r20
    27b0:	ba 07       	cpc	r27, r26
    27b2:	20 f0       	brcs	.+8      	; 0x27bc <__divsf3_pse+0xae>
    27b4:	62 1b       	sub	r22, r18
    27b6:	73 0b       	sbc	r23, r19
    27b8:	84 0b       	sbc	r24, r20
    27ba:	ba 0b       	sbc	r27, r26
    27bc:	ee 1f       	adc	r30, r30
    27be:	88 f7       	brcc	.-30     	; 0x27a2 <__divsf3_pse+0x94>
    27c0:	e0 95       	com	r30
    27c2:	08 95       	ret

000027c4 <__fixsfsi>:
    27c4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__fixunssfsi>
    27c8:	68 94       	set
    27ca:	b1 11       	cpse	r27, r1
    27cc:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__fp_szero>
    27d0:	08 95       	ret

000027d2 <__fixunssfsi>:
    27d2:	0e 94 85 14 	call	0x290a	; 0x290a <__fp_splitA>
    27d6:	88 f0       	brcs	.+34     	; 0x27fa <__fixunssfsi+0x28>
    27d8:	9f 57       	subi	r25, 0x7F	; 127
    27da:	98 f0       	brcs	.+38     	; 0x2802 <__fixunssfsi+0x30>
    27dc:	b9 2f       	mov	r27, r25
    27de:	99 27       	eor	r25, r25
    27e0:	b7 51       	subi	r27, 0x17	; 23
    27e2:	b0 f0       	brcs	.+44     	; 0x2810 <__fixunssfsi+0x3e>
    27e4:	e1 f0       	breq	.+56     	; 0x281e <__fixunssfsi+0x4c>
    27e6:	66 0f       	add	r22, r22
    27e8:	77 1f       	adc	r23, r23
    27ea:	88 1f       	adc	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	1a f0       	brmi	.+6      	; 0x27f6 <__fixunssfsi+0x24>
    27f0:	ba 95       	dec	r27
    27f2:	c9 f7       	brne	.-14     	; 0x27e6 <__fixunssfsi+0x14>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <__fixunssfsi+0x4c>
    27f6:	b1 30       	cpi	r27, 0x01	; 1
    27f8:	91 f0       	breq	.+36     	; 0x281e <__fixunssfsi+0x4c>
    27fa:	0e 94 9f 14 	call	0x293e	; 0x293e <__fp_zero>
    27fe:	b1 e0       	ldi	r27, 0x01	; 1
    2800:	08 95       	ret
    2802:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__fp_zero>
    2806:	67 2f       	mov	r22, r23
    2808:	78 2f       	mov	r23, r24
    280a:	88 27       	eor	r24, r24
    280c:	b8 5f       	subi	r27, 0xF8	; 248
    280e:	39 f0       	breq	.+14     	; 0x281e <__fixunssfsi+0x4c>
    2810:	b9 3f       	cpi	r27, 0xF9	; 249
    2812:	cc f3       	brlt	.-14     	; 0x2806 <__fixunssfsi+0x34>
    2814:	86 95       	lsr	r24
    2816:	77 95       	ror	r23
    2818:	67 95       	ror	r22
    281a:	b3 95       	inc	r27
    281c:	d9 f7       	brne	.-10     	; 0x2814 <__fixunssfsi+0x42>
    281e:	3e f4       	brtc	.+14     	; 0x282e <__fixunssfsi+0x5c>
    2820:	90 95       	com	r25
    2822:	80 95       	com	r24
    2824:	70 95       	com	r23
    2826:	61 95       	neg	r22
    2828:	7f 4f       	sbci	r23, 0xFF	; 255
    282a:	8f 4f       	sbci	r24, 0xFF	; 255
    282c:	9f 4f       	sbci	r25, 0xFF	; 255
    282e:	08 95       	ret

00002830 <__floatunsisf>:
    2830:	e8 94       	clt
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <__floatsisf+0x12>

00002834 <__floatsisf>:
    2834:	97 fb       	bst	r25, 7
    2836:	3e f4       	brtc	.+14     	; 0x2846 <__floatsisf+0x12>
    2838:	90 95       	com	r25
    283a:	80 95       	com	r24
    283c:	70 95       	com	r23
    283e:	61 95       	neg	r22
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	8f 4f       	sbci	r24, 0xFF	; 255
    2844:	9f 4f       	sbci	r25, 0xFF	; 255
    2846:	99 23       	and	r25, r25
    2848:	a9 f0       	breq	.+42     	; 0x2874 <__floatsisf+0x40>
    284a:	f9 2f       	mov	r31, r25
    284c:	96 e9       	ldi	r25, 0x96	; 150
    284e:	bb 27       	eor	r27, r27
    2850:	93 95       	inc	r25
    2852:	f6 95       	lsr	r31
    2854:	87 95       	ror	r24
    2856:	77 95       	ror	r23
    2858:	67 95       	ror	r22
    285a:	b7 95       	ror	r27
    285c:	f1 11       	cpse	r31, r1
    285e:	f8 cf       	rjmp	.-16     	; 0x2850 <__floatsisf+0x1c>
    2860:	fa f4       	brpl	.+62     	; 0x28a0 <__floatsisf+0x6c>
    2862:	bb 0f       	add	r27, r27
    2864:	11 f4       	brne	.+4      	; 0x286a <__floatsisf+0x36>
    2866:	60 ff       	sbrs	r22, 0
    2868:	1b c0       	rjmp	.+54     	; 0x28a0 <__floatsisf+0x6c>
    286a:	6f 5f       	subi	r22, 0xFF	; 255
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	8f 4f       	sbci	r24, 0xFF	; 255
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	16 c0       	rjmp	.+44     	; 0x28a0 <__floatsisf+0x6c>
    2874:	88 23       	and	r24, r24
    2876:	11 f0       	breq	.+4      	; 0x287c <__floatsisf+0x48>
    2878:	96 e9       	ldi	r25, 0x96	; 150
    287a:	11 c0       	rjmp	.+34     	; 0x289e <__floatsisf+0x6a>
    287c:	77 23       	and	r23, r23
    287e:	21 f0       	breq	.+8      	; 0x2888 <__floatsisf+0x54>
    2880:	9e e8       	ldi	r25, 0x8E	; 142
    2882:	87 2f       	mov	r24, r23
    2884:	76 2f       	mov	r23, r22
    2886:	05 c0       	rjmp	.+10     	; 0x2892 <__floatsisf+0x5e>
    2888:	66 23       	and	r22, r22
    288a:	71 f0       	breq	.+28     	; 0x28a8 <__floatsisf+0x74>
    288c:	96 e8       	ldi	r25, 0x86	; 134
    288e:	86 2f       	mov	r24, r22
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	2a f0       	brmi	.+10     	; 0x28a0 <__floatsisf+0x6c>
    2896:	9a 95       	dec	r25
    2898:	66 0f       	add	r22, r22
    289a:	77 1f       	adc	r23, r23
    289c:	88 1f       	adc	r24, r24
    289e:	da f7       	brpl	.-10     	; 0x2896 <__floatsisf+0x62>
    28a0:	88 0f       	add	r24, r24
    28a2:	96 95       	lsr	r25
    28a4:	87 95       	ror	r24
    28a6:	97 f9       	bld	r25, 7
    28a8:	08 95       	ret

000028aa <__fp_inf>:
    28aa:	97 f9       	bld	r25, 7
    28ac:	9f 67       	ori	r25, 0x7F	; 127
    28ae:	80 e8       	ldi	r24, 0x80	; 128
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	60 e0       	ldi	r22, 0x00	; 0
    28b4:	08 95       	ret

000028b6 <__fp_nan>:
    28b6:	9f ef       	ldi	r25, 0xFF	; 255
    28b8:	80 ec       	ldi	r24, 0xC0	; 192
    28ba:	08 95       	ret

000028bc <__fp_pscA>:
    28bc:	00 24       	eor	r0, r0
    28be:	0a 94       	dec	r0
    28c0:	16 16       	cp	r1, r22
    28c2:	17 06       	cpc	r1, r23
    28c4:	18 06       	cpc	r1, r24
    28c6:	09 06       	cpc	r0, r25
    28c8:	08 95       	ret

000028ca <__fp_pscB>:
    28ca:	00 24       	eor	r0, r0
    28cc:	0a 94       	dec	r0
    28ce:	12 16       	cp	r1, r18
    28d0:	13 06       	cpc	r1, r19
    28d2:	14 06       	cpc	r1, r20
    28d4:	05 06       	cpc	r0, r21
    28d6:	08 95       	ret

000028d8 <__fp_round>:
    28d8:	09 2e       	mov	r0, r25
    28da:	03 94       	inc	r0
    28dc:	00 0c       	add	r0, r0
    28de:	11 f4       	brne	.+4      	; 0x28e4 <__fp_round+0xc>
    28e0:	88 23       	and	r24, r24
    28e2:	52 f0       	brmi	.+20     	; 0x28f8 <__fp_round+0x20>
    28e4:	bb 0f       	add	r27, r27
    28e6:	40 f4       	brcc	.+16     	; 0x28f8 <__fp_round+0x20>
    28e8:	bf 2b       	or	r27, r31
    28ea:	11 f4       	brne	.+4      	; 0x28f0 <__fp_round+0x18>
    28ec:	60 ff       	sbrs	r22, 0
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <__fp_round+0x20>
    28f0:	6f 5f       	subi	r22, 0xFF	; 255
    28f2:	7f 4f       	sbci	r23, 0xFF	; 255
    28f4:	8f 4f       	sbci	r24, 0xFF	; 255
    28f6:	9f 4f       	sbci	r25, 0xFF	; 255
    28f8:	08 95       	ret

000028fa <__fp_split3>:
    28fa:	57 fd       	sbrc	r21, 7
    28fc:	90 58       	subi	r25, 0x80	; 128
    28fe:	44 0f       	add	r20, r20
    2900:	55 1f       	adc	r21, r21
    2902:	59 f0       	breq	.+22     	; 0x291a <__fp_splitA+0x10>
    2904:	5f 3f       	cpi	r21, 0xFF	; 255
    2906:	71 f0       	breq	.+28     	; 0x2924 <__fp_splitA+0x1a>
    2908:	47 95       	ror	r20

0000290a <__fp_splitA>:
    290a:	88 0f       	add	r24, r24
    290c:	97 fb       	bst	r25, 7
    290e:	99 1f       	adc	r25, r25
    2910:	61 f0       	breq	.+24     	; 0x292a <__fp_splitA+0x20>
    2912:	9f 3f       	cpi	r25, 0xFF	; 255
    2914:	79 f0       	breq	.+30     	; 0x2934 <__fp_splitA+0x2a>
    2916:	87 95       	ror	r24
    2918:	08 95       	ret
    291a:	12 16       	cp	r1, r18
    291c:	13 06       	cpc	r1, r19
    291e:	14 06       	cpc	r1, r20
    2920:	55 1f       	adc	r21, r21
    2922:	f2 cf       	rjmp	.-28     	; 0x2908 <__fp_split3+0xe>
    2924:	46 95       	lsr	r20
    2926:	f1 df       	rcall	.-30     	; 0x290a <__fp_splitA>
    2928:	08 c0       	rjmp	.+16     	; 0x293a <__fp_splitA+0x30>
    292a:	16 16       	cp	r1, r22
    292c:	17 06       	cpc	r1, r23
    292e:	18 06       	cpc	r1, r24
    2930:	99 1f       	adc	r25, r25
    2932:	f1 cf       	rjmp	.-30     	; 0x2916 <__fp_splitA+0xc>
    2934:	86 95       	lsr	r24
    2936:	71 05       	cpc	r23, r1
    2938:	61 05       	cpc	r22, r1
    293a:	08 94       	sec
    293c:	08 95       	ret

0000293e <__fp_zero>:
    293e:	e8 94       	clt

00002940 <__fp_szero>:
    2940:	bb 27       	eor	r27, r27
    2942:	66 27       	eor	r22, r22
    2944:	77 27       	eor	r23, r23
    2946:	cb 01       	movw	r24, r22
    2948:	97 f9       	bld	r25, 7
    294a:	08 95       	ret

0000294c <__divmodhi4>:
    294c:	97 fb       	bst	r25, 7
    294e:	07 2e       	mov	r0, r23
    2950:	16 f4       	brtc	.+4      	; 0x2956 <__divmodhi4+0xa>
    2952:	00 94       	com	r0
    2954:	07 d0       	rcall	.+14     	; 0x2964 <__divmodhi4_neg1>
    2956:	77 fd       	sbrc	r23, 7
    2958:	09 d0       	rcall	.+18     	; 0x296c <__divmodhi4_neg2>
    295a:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__udivmodhi4>
    295e:	07 fc       	sbrc	r0, 7
    2960:	05 d0       	rcall	.+10     	; 0x296c <__divmodhi4_neg2>
    2962:	3e f4       	brtc	.+14     	; 0x2972 <__divmodhi4_exit>

00002964 <__divmodhi4_neg1>:
    2964:	90 95       	com	r25
    2966:	81 95       	neg	r24
    2968:	9f 4f       	sbci	r25, 0xFF	; 255
    296a:	08 95       	ret

0000296c <__divmodhi4_neg2>:
    296c:	70 95       	com	r23
    296e:	61 95       	neg	r22
    2970:	7f 4f       	sbci	r23, 0xFF	; 255

00002972 <__divmodhi4_exit>:
    2972:	08 95       	ret

00002974 <__udivmodsi4>:
    2974:	a1 e2       	ldi	r26, 0x21	; 33
    2976:	1a 2e       	mov	r1, r26
    2978:	aa 1b       	sub	r26, r26
    297a:	bb 1b       	sub	r27, r27
    297c:	fd 01       	movw	r30, r26
    297e:	0d c0       	rjmp	.+26     	; 0x299a <__udivmodsi4_ep>

00002980 <__udivmodsi4_loop>:
    2980:	aa 1f       	adc	r26, r26
    2982:	bb 1f       	adc	r27, r27
    2984:	ee 1f       	adc	r30, r30
    2986:	ff 1f       	adc	r31, r31
    2988:	a2 17       	cp	r26, r18
    298a:	b3 07       	cpc	r27, r19
    298c:	e4 07       	cpc	r30, r20
    298e:	f5 07       	cpc	r31, r21
    2990:	20 f0       	brcs	.+8      	; 0x299a <__udivmodsi4_ep>
    2992:	a2 1b       	sub	r26, r18
    2994:	b3 0b       	sbc	r27, r19
    2996:	e4 0b       	sbc	r30, r20
    2998:	f5 0b       	sbc	r31, r21

0000299a <__udivmodsi4_ep>:
    299a:	66 1f       	adc	r22, r22
    299c:	77 1f       	adc	r23, r23
    299e:	88 1f       	adc	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	1a 94       	dec	r1
    29a4:	69 f7       	brne	.-38     	; 0x2980 <__udivmodsi4_loop>
    29a6:	60 95       	com	r22
    29a8:	70 95       	com	r23
    29aa:	80 95       	com	r24
    29ac:	90 95       	com	r25
    29ae:	9b 01       	movw	r18, r22
    29b0:	ac 01       	movw	r20, r24
    29b2:	bd 01       	movw	r22, r26
    29b4:	cf 01       	movw	r24, r30
    29b6:	08 95       	ret

000029b8 <__tablejump2__>:
    29b8:	ee 0f       	add	r30, r30
    29ba:	ff 1f       	adc	r31, r31
    29bc:	05 90       	lpm	r0, Z+
    29be:	f4 91       	lpm	r31, Z
    29c0:	e0 2d       	mov	r30, r0
    29c2:	09 94       	ijmp

000029c4 <__udivmodhi4>:
    29c4:	aa 1b       	sub	r26, r26
    29c6:	bb 1b       	sub	r27, r27
    29c8:	51 e1       	ldi	r21, 0x11	; 17
    29ca:	07 c0       	rjmp	.+14     	; 0x29da <__udivmodhi4_ep>

000029cc <__udivmodhi4_loop>:
    29cc:	aa 1f       	adc	r26, r26
    29ce:	bb 1f       	adc	r27, r27
    29d0:	a6 17       	cp	r26, r22
    29d2:	b7 07       	cpc	r27, r23
    29d4:	10 f0       	brcs	.+4      	; 0x29da <__udivmodhi4_ep>
    29d6:	a6 1b       	sub	r26, r22
    29d8:	b7 0b       	sbc	r27, r23

000029da <__udivmodhi4_ep>:
    29da:	88 1f       	adc	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	5a 95       	dec	r21
    29e0:	a9 f7       	brne	.-22     	; 0x29cc <__udivmodhi4_loop>
    29e2:	80 95       	com	r24
    29e4:	90 95       	com	r25
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	08 95       	ret

000029ec <__itoa_ncheck>:
    29ec:	bb 27       	eor	r27, r27
    29ee:	4a 30       	cpi	r20, 0x0A	; 10
    29f0:	31 f4       	brne	.+12     	; 0x29fe <__itoa_ncheck+0x12>
    29f2:	99 23       	and	r25, r25
    29f4:	22 f4       	brpl	.+8      	; 0x29fe <__itoa_ncheck+0x12>
    29f6:	bd e2       	ldi	r27, 0x2D	; 45
    29f8:	90 95       	com	r25
    29fa:	81 95       	neg	r24
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__utoa_common>

00002a02 <__utoa_ncheck>:
    2a02:	bb 27       	eor	r27, r27

00002a04 <__utoa_common>:
    2a04:	fb 01       	movw	r30, r22
    2a06:	55 27       	eor	r21, r21
    2a08:	aa 27       	eor	r26, r26
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	aa 1f       	adc	r26, r26
    2a10:	a4 17       	cp	r26, r20
    2a12:	10 f0       	brcs	.+4      	; 0x2a18 <__utoa_common+0x14>
    2a14:	a4 1b       	sub	r26, r20
    2a16:	83 95       	inc	r24
    2a18:	50 51       	subi	r21, 0x10	; 16
    2a1a:	b9 f7       	brne	.-18     	; 0x2a0a <__utoa_common+0x6>
    2a1c:	a0 5d       	subi	r26, 0xD0	; 208
    2a1e:	aa 33       	cpi	r26, 0x3A	; 58
    2a20:	08 f0       	brcs	.+2      	; 0x2a24 <__utoa_common+0x20>
    2a22:	a9 5d       	subi	r26, 0xD9	; 217
    2a24:	a1 93       	st	Z+, r26
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	79 f7       	brne	.-34     	; 0x2a08 <__utoa_common+0x4>
    2a2a:	b1 11       	cpse	r27, r1
    2a2c:	b1 93       	st	Z+, r27
    2a2e:	11 92       	st	Z+, r1
    2a30:	cb 01       	movw	r24, r22
    2a32:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <strrev>

00002a36 <strrev>:
    2a36:	dc 01       	movw	r26, r24
    2a38:	fc 01       	movw	r30, r24
    2a3a:	67 2f       	mov	r22, r23
    2a3c:	71 91       	ld	r23, Z+
    2a3e:	77 23       	and	r23, r23
    2a40:	e1 f7       	brne	.-8      	; 0x2a3a <strrev+0x4>
    2a42:	32 97       	sbiw	r30, 0x02	; 2
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <strrev+0x18>
    2a46:	7c 91       	ld	r23, X
    2a48:	6d 93       	st	X+, r22
    2a4a:	70 83       	st	Z, r23
    2a4c:	62 91       	ld	r22, -Z
    2a4e:	ae 17       	cp	r26, r30
    2a50:	bf 07       	cpc	r27, r31
    2a52:	c8 f3       	brcs	.-14     	; 0x2a46 <strrev+0x10>
    2a54:	08 95       	ret

00002a56 <_exit>:
    2a56:	f8 94       	cli

00002a58 <__stop_program>:
    2a58:	ff cf       	rjmp	.-2      	; 0x2a58 <__stop_program>
