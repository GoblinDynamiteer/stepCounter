
mpu_conntest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00003912  000039a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  00800158  00800158  000039fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00003a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fcd4  00000000  00000000  0000428c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000256b  00000000  00000000  00013f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f29  00000000  00000000  000164cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000199c  00000000  00000000  0001a3f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039be  00000000  00000000  0001bd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ab4e  00000000  00000000  0001f74e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e0  00000000  00000000  0002a29c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__ctors_end>
       4:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
       8:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
       c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      10:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      14:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      18:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      1c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      20:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      24:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      28:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      2c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      30:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      34:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      38:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      3c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      40:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      44:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      48:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__vector_18>
      4c:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__vector_19>
      50:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      54:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      58:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      5c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      60:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      64:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__bad_interrupt>
      68:	f0 16       	cp	r15, r16
      6a:	f8 16       	cp	r15, r24
      6c:	12 17       	cp	r17, r18
      6e:	02 17       	cp	r16, r18
      70:	12 17       	cp	r17, r18
      72:	12 17       	cp	r17, r18
      74:	12 17       	cp	r17, r18
      76:	12 17       	cp	r17, r18
      78:	12 17       	cp	r17, r18
      7a:	12 17       	cp	r17, r18
      7c:	12 17       	cp	r17, r18
      7e:	12 17       	cp	r17, r18
      80:	12 17       	cp	r17, r18
      82:	12 17       	cp	r17, r18
      84:	12 17       	cp	r17, r18
      86:	12 17       	cp	r17, r18
      88:	12 17       	cp	r17, r18
      8a:	12 17       	cp	r17, r18
      8c:	12 17       	cp	r17, r18
      8e:	12 17       	cp	r17, r18
      90:	12 17       	cp	r17, r18
      92:	12 17       	cp	r17, r18
      94:	12 17       	cp	r17, r18
      96:	12 17       	cp	r17, r18
      98:	12 17       	cp	r17, r18
      9a:	12 17       	cp	r17, r18
      9c:	12 17       	cp	r17, r18
      9e:	12 17       	cp	r17, r18
      a0:	12 17       	cp	r17, r18
      a2:	12 17       	cp	r17, r18
      a4:	ea 16       	cp	r14, r26
      a6:	12 17       	cp	r17, r18
      a8:	12 17       	cp	r17, r18
      aa:	12 17       	cp	r17, r18
      ac:	12 17       	cp	r17, r18
      ae:	12 17       	cp	r17, r18
      b0:	12 17       	cp	r17, r18
      b2:	12 17       	cp	r17, r18
      b4:	12 17       	cp	r17, r18
      b6:	de 16       	cp	r13, r30
      b8:	12 17       	cp	r17, r18
      ba:	12 17       	cp	r17, r18
      bc:	12 17       	cp	r17, r18
      be:	12 17       	cp	r17, r18
      c0:	12 17       	cp	r17, r18
      c2:	12 17       	cp	r17, r18
      c4:	12 17       	cp	r17, r18
      c6:	12 17       	cp	r17, r18
      c8:	12 17       	cp	r17, r18
      ca:	12 17       	cp	r17, r18
      cc:	08 17       	cp	r16, r24
      ce:	0d 17       	cp	r16, r29

000000d0 <__trampolines_end>:
      d0:	ff e0       	ldi	r31, 0x0F	; 15
      d2:	ff d1       	rcall	.+1022   	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
      d4:	af ff       	.word	0xffaf	; ????
      d6:	32 ff       	sbrs	r19, 2
      d8:	d0 ff       	sbrs	r29, 0
      da:	fe ff       	Address 0x000000da is out of bounds.
.word	0xffff	; ????

000000db <u8g_dev_ssd13xx_sleep_on>:
      db:	ff e0 ff d1 ae ff d0 ff fe                          .........

000000e4 <u8g_dev_ssd1306_128x64_data_start>:
      e4:	ff e0 ff d1 10 00 ff fe                             ........

000000ec <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      ec:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      fc:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     10c:	a6 af ff d0 ff fe                                   ......

00000112 <u8g_font_fub14>:
     112:	00 1f 1a fe fb 0e 03 74 07 5f 20 ff fc 15 fb 0e     .......t._ .....
     122:	fc 00 00 00 06 00 00 03 0e 0e 08 03 00 e0 e0 e0     ................
     132:	e0 e0 e0 e0 e0 e0 e0 00 00 e0 e0 08 06 06 0a 01     ................
     142:	08 e7 67 67 67 67 67 0c 0e 1c 0e 01 00 06 60 06     ..ggggg.......`.
     152:	60 0c 60 3f f0 3f f0 18 c0 19 80 19 80 ff e0 ff     `.`?.?..........
     162:	e0 33 00 33 00 63 00 66 00 0a 11 22 0c 01 fe 04     .3.3.c.f..."....
     172:	00 1f 00 7f 80 77 80 e5 c0 e4 00 fc 00 7e 00 1f     .....w.......~..
     182:	80 07 c0 05 c0 e5 c0 e5 c0 7f 80 3f 00 04 00 04     ...........?....
     192:	00 12 0e 2a 14 01 00 3c 04 00 7e 0c 00 c3 18 00     ...*...<..~.....
     1a2:	c3 10 00 c3 30 00 e7 60 00 7e 67 00 18 cd 80 00     ....0..`.~g.....
     1b2:	98 c0 01 98 c0 03 18 c0 03 18 c0 06 0f 80 0c 07     ................
     1c2:	00 0e 0e 1c 10 01 00 1f 00 7f 80 71 c0 71 c0 73     ...........q.q.s
     1d2:	80 3f 00 1e 00 7e 38 f7 30 e3 b0 e1 f0 e0 e0 7f     .?...~8.0.......
     1e2:	f0 1f bc 03 06 06 08 03 08 e0 c0 c0 c0 c0 c0 04     ................
     1f2:	11 11 08 02 fd 30 70 70 60 e0 e0 e0 e0 e0 e0 e0     .....0pp`.......
     202:	e0 e0 60 70 70 30 04 11 11 08 02 fd c0 c0 e0 e0     ..`pp0..........
     212:	60 60 70 70 70 70 70 60 60 e0 e0 c0 c0 08 07 07     ``ppppp``.......
     222:	0c 02 07 66 3c 18 ff 18 3c 66 0c 0c 18 14 04 00     ...f<...<f......
     232:	02 00 02 00 02 00 02 00 02 00 ff f0 ff f0 02 00     ................
     242:	02 00 02 00 02 00 02 00 04 05 05 06 01 fe 70 70     ..............pp
     252:	60 e0 c0 05 03 03 07 01 04 f8 f8 f8 03 03 03 06     `...............
     262:	02 00 e0 e0 e0 06 0f 0f 09 01 ff 0c 0c 0c 0c 18     ................
     272:	18 18 30 30 30 60 60 60 60 c0 0a 0e 1c 0b 01 00     ..000````.......
     282:	1e 00 7f 00 61 80 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0     ....a...........
     292:	e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 06 0e 0e 0b     ......a.........
     2a2:	02 00 1c 7c fc dc 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     ...|............
     2b2:	0a 0e 1c 0b 01 00 1f 00 7f 80 61 c0 e1 c0 01 c0     ..........a.....
     2c2:	01 c0 03 80 07 80 0f 00 1e 00 38 00 70 00 ff c0     ..........8.p...
     2d2:	ff c0 0a 0e 1c 0b 01 00 3e 00 7f 00 e3 80 03 80     ........>.......
     2e2:	03 80 1f 00 1f 00 03 80 01 c0 01 c0 e1 c0 f3 80     ................
     2f2:	7f 00 3e 00 0b 0e 1c 0b 01 00 07 80 0f 80 0f 80     ..>.............
     302:	1b 80 3b 80 33 80 73 80 63 80 e3 80 ff e0 ff e0     ..;.3.s.c.......
     312:	03 80 03 80 03 80 0a 0e 1c 0b 01 00 ff 80 ff 80     ................
     322:	e0 00 e0 00 e0 00 ff 00 ff 80 e1 80 01 c0 01 c0     ................
     332:	e1 c0 e3 80 7f 00 3e 00 0a 0e 1c 0b 01 00 1e 00     ......>.........
     342:	3f 80 61 80 60 00 e0 00 df 00 ff 80 e1 80 e1 c0     ?.a.`...........
     352:	e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0b 01 00     ....a...........
     362:	ff c0 ff c0 01 c0 03 80 03 80 07 80 07 00 07 00     ................
     372:	0e 00 0e 00 1c 00 1c 00 3c 00 38 00 0a 0e 1c 0b     ........<.8.....
     382:	01 00 3f 00 7f 80 e1 c0 e1 c0 e1 80 7f 00 3f 00     ..?...........?.
     392:	73 80 e1 c0 e1 c0 e1 c0 e1 c0 7f 80 3f 00 0a 0e     s...........?...
     3a2:	1c 0b 01 00 1e 00 7f 00 e1 80 e1 80 e1 c0 e1 c0     ................
     3b2:	f3 c0 7f c0 19 c0 01 80 e1 80 63 80 7f 00 3e 00     ..........c...>.
     3c2:	03 0a 0a 07 03 00 e0 e0 e0 00 00 00 00 e0 e0 e0     ................
     3d2:	04 0c 0c 06 01 fe 70 70 70 00 00 00 00 70 60 e0     ......ppp....p`.
     3e2:	c0 c0 0c 0a 14 14 04 01 00 10 00 e0 03 80 1c 00     ................
     3f2:	e0 00 c0 00 38 00 07 00 01 c0 00 30 0c 05 0a 14     ....8......0....
     402:	04 03 ff f0 ff f0 00 00 ff f0 ff f0 0c 0a 14 14     ................
     412:	04 01 80 00 70 00 1c 00 03 80 00 70 00 30 01 c0     ....p......p.0..
     422:	0e 00 38 00 c0 00 09 0e 1c 0b 01 00 3e 00 7f 00     ..8.........>...
     432:	c3 80 43 80 03 80 07 00 06 00 0c 00 18 00 18 00     ..C.............
     442:	18 00 00 00 18 00 18 00 13 12 36 15 01 fc 01 f8     ..........6.....
     452:	00 0f fe 00 1e 07 80 38 03 c0 71 fd c0 73 fc e0     .......8..q..s..
     462:	e7 1c e0 e7 1c e0 e7 1c e0 e7 1c e0 e7 1c e0 e7     ................
     472:	3c c0 73 ff c0 71 e7 80 38 00 00 1e 04 00 0f fc     <.s..q..8.......
     482:	00 03 fc 00 0e 0e 1c 0e 00 00 07 80 07 80 07 c0     ................
     492:	0f c0 0e c0 1c e0 1c e0 1c 60 38 70 3f f0 3f f8     .........`8p?.?.
     4a2:	70 38 70 38 e0 1c 0b 0e 1c 0d 01 00 ff 00 ff 80     p8p8............
     4b2:	e1 c0 e1 c0 e1 c0 e3 80 ff 00 ff 80 e0 c0 e0 e0     ................
     4c2:	e0 e0 e0 e0 ff c0 ff 00 0d 0e 1c 0f 01 00 0f 80     ................
     4d2:	3f e0 70 70 60 70 e0 00 e0 00 e0 00 e0 00 e0 00     ?.pp`p..........
     4e2:	e0 78 60 70 70 f0 3f e0 0f 80 0c 0e 1c 0e 01 00     .x`pp.?.........
     4f2:	ff 00 ff c0 e1 e0 e0 e0 e0 70 e0 70 e0 70 e0 70     .........p.p.p.p
     502:	e0 70 e0 70 e0 e0 e1 e0 ff c0 ff 00 0a 0e 1c 0c     .p.p............
     512:	01 00 ff c0 ff c0 e0 00 e0 00 e0 00 e0 00 ff 80     ................
     522:	ff 80 e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 09 0e     ................
     532:	1c 0b 01 00 ff 80 ff 80 e0 00 e0 00 e0 00 e0 00     ................
     542:	ff 80 ff 80 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
     552:	0d 0e 1c 0f 01 00 0f c0 1f f0 38 38 70 38 e0 00     ..........88p8..
     562:	e0 00 e1 f8 e1 f8 e0 38 e0 38 70 38 78 38 3f f8     .......8.8p8x8?.
     572:	0f f0 0c 0e 1c 0e 01 00 e0 70 e0 70 e0 70 e0 70     .........p.p.p.p
     582:	e0 70 e0 70 ff f0 ff f0 e0 70 e0 70 e0 70 e0 70     .p.p.....p.p.p.p
     592:	e0 70 e0 70 03 0e 0e 05 01 00 e0 e0 e0 e0 e0 e0     .p.p............
     5a2:	e0 e0 e0 e0 e0 e0 e0 e0 0a 0e 1c 0c 01 00 01 c0     ................
     5b2:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     5c2:	e1 c0 e1 c0 f3 c0 7f 80 3e 00 0b 0e 1c 0d 01 00     ........>.......
     5d2:	e1 e0 e3 c0 e3 80 e7 00 ee 00 fc 00 fc 00 fe 00     ................
     5e2:	ee 00 e7 00 e7 80 e3 c0 e1 c0 e0 e0 0a 0e 1c 0b     ................
     5f2:	01 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
     602:	e0 00 e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 10 0e     ................
     612:	1c 12 01 00 f8 1f f8 1f fc 3f fc 3f fc 37 ec 77     .........?.?.7.w
     622:	ee 77 ee 67 e6 e7 e7 e7 e7 c7 e3 c7 e3 c7 e3 87     .w.g............
     632:	0d 0e 1c 0f 01 00 f0 38 f8 38 f8 38 fc 38 ee 38     .......8.8.8.8.8
     642:	ee 38 e7 38 e7 38 e3 b8 e3 b8 e1 f8 e1 f8 e0 f8     .8.8.8..........
     652:	e0 f8 0e 0e 1c 10 01 00 0f c0 3f f0 70 70 60 38     ..........?.pp`8
     662:	e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70 70     ............`8pp
     672:	3f f0 0f c0 0b 0e 1c 0d 01 00 ff 00 ff c0 e1 c0     ?...............
     682:	e0 e0 e0 e0 e0 e0 e1 c0 ff c0 ff 00 e0 00 e0 00     ................
     692:	e0 00 e0 00 e0 00 0f 0e 1c 11 01 00 0f c0 3f e0     ..............?.
     6a2:	70 70 60 38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18     pp`8............
     6b2:	60 38 70 78 3f fe 0f fe 0b 0e 1c 0d 01 00 ff 80     `8px?...........
     6c2:	ff c0 e0 e0 e0 e0 e0 e0 e0 e0 ff 80 ff c0 e1 c0     ................
     6d2:	e0 e0 e0 e0 e0 e0 e0 e0 e0 60 0c 0e 1c 0e 01 00     .........`......
     6e2:	1f 80 3f c0 60 e0 e0 e0 e0 00 fc 00 7f 80 1f e0     ..?.`...........
     6f2:	03 e0 00 70 e0 70 e0 60 7f c0 1f 80 0c 0e 1c 0e     ...p.p.`........
     702:	01 00 ff f0 ff f0 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     712:	0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0c 0e     ................
     722:	1c 0e 01 00 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70     .....p.p.p.p.p.p
     732:	e0 70 e0 70 e0 70 e0 70 e0 70 70 e0 3f c0 1f 80     .p.p.p.p.pp.?...
     742:	0e 0e 1c 0f 00 00 f0 1c 70 1c 70 3c 38 38 38 38     ........p.p<8888
     752:	38 70 1c 70 1c 70 1e e0 0e e0 0f c0 07 c0 07 c0     8p.p.p..........
     762:	07 80 14 0e 2a 14 00 00 f0 f0 f0 70 f0 e0 70 f0     ....*......p..p.
     772:	e0 71 f8 e0 71 f8 e0 39 99 c0 39 99 c0 3b 9d c0     .q..q..9..9..;..
     782:	3b 9d c0 1b 0d 80 1f 0f 80 1f 0f 80 1f 0f 80 0e     ;...............
     792:	07 00 0c 0e 1c 0e 01 00 e0 70 70 e0 78 e0 39 c0     .........pp.x.9.
     7a2:	1f 80 1f 00 0f 00 0f 00 1f 80 3b c0 39 c0 70 e0     ..........;.9.p.
     7b2:	e0 f0 e0 70 0c 0e 1c 0d 00 00 f0 70 70 f0 38 e0     ...p.......pp.8.
     7c2:	38 e0 1d c0 1d c0 0f 80 0f 00 07 00 07 00 07 00     8...............
     7d2:	07 00 07 00 07 00 0b 0e 1c 0d 01 00 7f e0 7f e0     ................
     7e2:	01 e0 03 c0 03 80 07 80 0f 00 1e 00 1e 00 3c 00     ..............<.
     7f2:	78 00 f8 00 ff e0 ff e0 05 12 12 08 02 fc f8 f8     x...............
     802:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 f8 f8     ................
     812:	06 0f 0f 09 01 ff c0 c0 60 60 60 30 30 30 10 18     ........```000..
     822:	18 18 0c 0c 0c 05 12 12 08 02 fc f8 f8 38 38 38     .............888
     832:	38 38 38 38 38 38 38 38 38 38 38 f8 f8 0a 0c 18     88888888888.....
     842:	14 05 00 0c 00 0c 00 0c 00 12 00 12 00 33 00 21     .............3.!
     852:	00 21 00 40 80 40 80 c0 c0 80 40 0a 02 04 0a 00     .!.@.@....@.....
     862:	fd ff c0 ff c0 05 04 04 05 ff 0c e0 70 30 18 09     ............p0..
     872:	0a 14 0b 01 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3     .....>..........
     882:	80 e3 80 e3 80 ff 80 39 80 0a 0e 1c 0c 01 00 e0     .......9........
     892:	00 e0 00 e0 00 e0 00 ef 00 ff 80 e1 c0 e1 c0 e1     ................
     8a2:	c0 e1 c0 e1 c0 e1 80 ff 80 ef 00 09 0a 14 0b 01     ................
     8b2:	00 3e 00 7f 00 e3 80 e3 80 e0 00 e0 00 e3 80 e3     .>..............
     8c2:	80 7f 00 3e 00 0a 0e 1c 0c 01 00 01 c0 01 c0 01     ...>............
     8d2:	c0 01 c0 3d c0 7f c0 e1 c0 e1 c0 e1 c0 e1 c0 e1     ...=............
     8e2:	c0 e1 c0 7f c0 3d c0 09 0a 14 0b 01 00 1e 00 7f     .....=..........
     8f2:	00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f 80 3e     ...............>
     902:	00 07 0e 0e 08 01 00 1e 3e 38 38 fe fe 38 38 38     ........>88..888
     912:	38 38 38 38 38 0a 0e 1c 0c 01 fc 3d c0 7f c0 71     88888......=...q
     922:	c0 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 7f c0 3d c0 01     .............=..
     932:	c0 61 c0 7f 80 3f 00 09 0e 1c 0b 01 00 e0 00 e0     .a...?..........
     942:	00 e0 00 e0 00 ef 00 ff 80 e3 80 e3 80 e3 80 e3     ................
     952:	80 e3 80 e3 80 e3 80 e3 80 03 0e 0e 05 01 00 e0     ................
     962:	e0 e0 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 04 12 12     ................
     972:	07 02 fc 70 70 70 00 70 70 70 70 70 70 70 70 70     ...ppp.ppppppppp
     982:	70 70 70 f0 e0 09 0e 1c 0b 01 00 e0 00 e0 00 e0     ppp.............
     992:	00 e0 00 e7 80 e7 00 ee 00 fc 00 fc 00 fc 00 ee     ................
     9a2:	00 e7 00 e7 00 e3 80 03 0e 0e 05 01 00 e0 e0 e0     ................
     9b2:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 0f 0a 14 12 01     ................
     9c2:	00 ef 3c ff fe e3 ce e3 86 e3 86 e3 86 e3 86 e3     ..<.............
     9d2:	86 e3 86 e3 86 09 0a 14 0b 01 00 ef 00 ff 80 e3     ................
     9e2:	80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 0a     ................
     9f2:	0a 14 0c 01 00 1e 00 7f 80 61 80 e1 c0 e1 c0 e1     .........a......
     a02:	c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0c 01 fc ef     ...a............
     a12:	00 ff 80 e1 80 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 ff     ................
     a22:	80 ef 00 e0 00 e0 00 e0 00 e0 00 0a 0e 1c 0c 01     ................
     a32:	fc 3d c0 7f c0 e1 c0 e1 c0 e1 c0 e1 c0 e1 c0 e1     .=..............
     a42:	c0 7f c0 3d c0 01 c0 01 c0 01 c0 01 c0 06 0a 0a     ...=............
     a52:	08 01 00 ec fc f0 e0 e0 e0 e0 e0 e0 e0 09 0a 14     ................
     a62:	0b 01 00 3e 00 ff 00 e3 80 e0 00 7e 00 1f 00 03     ...>.......~....
     a72:	80 e3 80 ff 00 3e 00 07 0d 0d 09 01 00 08 38 38     .....>........88
     a82:	fe fe 38 38 38 38 38 38 3e 1e 09 0a 14 0b 01 00     ..888888>.......
     a92:	e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80     ................
     aa2:	ff 80 7b 80 0b 0a 14 0b 00 00 e0 e0 71 c0 71 c0     ..{.........q.q.
     ab2:	31 80 3b 80 3b 80 1b 00 1f 00 1f 00 0e 00 11 0a     1.;.;...........
     ac2:	1e 11 00 00 e1 c3 80 61 e3 00 73 e7 00 73 67 00     .......a..s..sg.
     ad2:	33 77 00 3f 76 00 3f 3e 00 3e 3e 00 1e 3c 00 1e     3w.?v.?>.>>..<..
     ae2:	1c 00 09 0a 14 0b 01 00 e3 80 73 00 77 00 3e 00     ..........s.w.>.
     af2:	1c 00 3e 00 3e 00 77 00 e3 80 e3 80 0b 0e 1c 0b     ..>.>.w.........
     b02:	00 fc e0 e0 71 c0 71 c0 39 80 3b 80 3b 80 1f 00     ....q.q.9.;.;...
     b12:	1f 00 0f 00 0e 00 0e 00 0e 00 1c 00 1c 00 08 0a     ................
     b22:	0a 0a 01 00 ff ff 07 0e 1c 38 70 e0 ff ff 07 13     .........8p.....
     b32:	13 0a 02 fb 0e 3e 38 38 38 38 38 30 f0 c0 f0 70     .....>888880...p
     b42:	38 38 38 38 38 3e 0e 01 15 15 07 03 fb 80 80 80     88888>..........
     b52:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     b62:	80 80 07 13 13 0a 02 fb e0 f0 38 38 38 38 38 38     ..........888888
     b72:	1c 06 1c 38 38 38 38 38 38 f0 e0 0b 03 06 0b 00     ...888888.......
     b82:	04 30 60 7f c0 c7 80 ff ff ff ff ff ff ff ff ff     .0`.............
     b92:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ba2:	ff ff ff ff ff ff ff ff 00 00 00 06 00 00 03 0e     ................
     bb2:	0e 09 03 fc e0 e0 00 00 e0 e0 e0 e0 e0 e0 e0 e0     ................
     bc2:	e0 e0 09 0e 1c 0b 01 fe 02 00 02 00 3e 00 7f 00     ............>...
     bd2:	e7 80 e7 80 e8 00 e8 00 eb 80 f3 80 7f 00 3e 00     ..............>.
     be2:	20 00 20 00 0a 0e 1c 0c 01 00 1f 00 3f c0 71 c0      . .........?.q.
     bf2:	70 00 70 00 fe 00 fe 00 70 00 70 00 70 00 70 00     p.p.....p.p.p.p.
     c02:	70 00 ff c0 ff c0 0a 0a 14 0c 01 03 80 40 5e 80     p............@^.
     c12:	21 00 40 80 40 80 40 80 40 80 21 00 5e 80 80 40     !.@.@.@.@.!.^..@
     c22:	0b 0e 1c 0d 01 00 e0 e0 e1 c0 71 c0 71 80 fb e0     ..........q.q...
     c32:	fb e0 1f 00 ff e0 ff e0 0e 00 0e 00 0e 00 0e 00     ................
     c42:	0e 00 01 12 12 07 03 fc 80 80 80 80 80 80 80 80     ................
     c52:	00 00 80 80 80 80 80 80 80 80 08 12 12 0a 01 fc     ................
     c62:	3e 7e e0 e0 70 3c 7e e7 e7 e7 fe 7c 1e 07 07 87     >~..p<~....|....
     c72:	fe 38 07 02 02 07 00 0c ee ee 0f 0e 1c 11 01 00     .8..............
     c82:	07 c0 1f f0 37 98 6f cc cc e4 9c 02 9c 02 9c e2     ....7.o.........
     c92:	8c e2 cf c6 47 84 20 18 1c 70 0f c0 07 09 09 08     ....G. ..p......
     ca2:	01 05 78 cc 7c cc cc fc 24 00 fe 0a 08 10 0c 01     ..x.|...$.......
     cb2:	01 39 c0 71 80 73 80 e7 00 e7 00 73 80 71 80 39     .9.q.s.....s.q.9
     cc2:	c0 0b 05 0a 0d 01 04 ff e0 ff e0 00 20 00 20 00     ............ . .
     cd2:	20 ff 0f 0e 1c 11 01 00 07 c0 1f f0 3f 98 6f ec      ...........?.o.
     ce2:	cc 64 8c 62 8f c2 8f c2 8c 62 cc 66 4c 64 20 18     .d.b.....b.fLd .
     cf2:	1c 70 0f c0 06 02 02 06 00 0c fc fc 05 05 05 07     .p..............
     d02:	01 09 70 88 88 88 70 0c 0c 18 14 04 00 02 00 02     ..p...p.........
     d12:	00 02 00 ff f0 ff f0 02 00 02 00 02 00 00 00 00     ................
     d22:	00 ff f0 ff f0 06 08 08 08 01 06 78 cc 0c 18 30     ...........x...0
     d32:	e0 fc fc 06 07 07 08 01 07 78 cc 0c 30 0c cc 78     .........x..0..x
     d42:	04 04 04 04 01 0c 30 60 60 c0 ff 09 11 22 0b 01     ......0``...."..
     d52:	fd 3f 80 79 00 f9 00 f9 00 f9 00 f9 00 79 00 09     .?.y.........y..
     d62:	00 09 00 09 00 09 00 09 00 09 00 09 00 09 00 09     ................
     d72:	00 09 00 03 03 03 06 02 05 e0 e0 e0 05 05 05 05     ................
     d82:	01 fb 40 70 18 18 f0 04 08 08 06 01 06 30 f0 30     ..@p.........0.0
     d92:	30 30 30 30 30 07 09 09 09 01 05 38 44 c6 c6 c6     00000......8D...
     da2:	44 38 00 fe 0a 08 10 0c 01 01 e7 00 63 80 73 80     D8..........c.s.
     db2:	39 c0 39 c0 73 80 63 80 e7 00 0e 0e 1c 10 01 00     9.9.s.c.........
     dc2:	70 30 f0 30 30 60 30 c0 30 c0 31 80 31 9c 33 3c     p0.00`0.0.1.1.3<
     dd2:	06 3c 06 6c 0c cc 18 fc 18 0c 30 0c 0f 0e 1c 11     .<.l......0.....
     de2:	01 00 70 30 f0 20 30 60 30 c0 30 c0 31 80 33 3c     ..p0. 0`0.0.1.3<
     df2:	33 66 06 06 0c 0e 0c 1c 18 30 30 7e 30 7e 0e 0e     3f.......00~0~..
     e02:	1c 10 01 00 78 18 cc 30 0c 30 30 60 0c c0 cc c0     ....x..0.00`....
     e12:	79 9c 01 bc 03 3c 06 6c 06 cc 0c fc 08 0c 18 0c     y....<.l........
     e22:	09 0e 1c 0b 01 fc 0e 00 0e 00 00 00 0e 00 0e 00     ................
     e32:	0e 00 3c 00 70 00 e0 00 e0 00 e1 80 e1 80 7f 80     ..<.p...........
     e42:	3e 00 0e 14 28 0e 00 00 0c 00 0e 00 06 00 03 00     >...(...........
     e52:	00 00 00 00 07 80 07 80 07 c0 0f c0 0e c0 1c e0     ................
     e62:	1c e0 1c 60 38 70 3f f0 3f f8 70 38 70 38 e0 1c     ...`8p?.?.p8p8..
     e72:	0e 14 28 0e 00 00 00 c0 01 c0 01 80 03 00 00 00     ..(.............
     e82:	00 00 07 80 07 80 07 c0 0f c0 0e c0 1c e0 1c e0     ................
     e92:	1c 60 38 70 3f f0 3f f8 70 38 70 38 e0 1c 0e 14     .`8p?.?.p8p8....
     ea2:	28 0e 00 00 03 80 07 80 06 c0 0c c0 00 00 00 00     (...............
     eb2:	07 80 07 80 07 c0 0f c0 0e c0 1c e0 1c e0 1c 60     ...............`
     ec2:	38 70 3f f0 3f f8 70 38 70 38 e0 1c 0e 13 26 0e     8p?.?.p8p8....&.
     ed2:	00 00 06 40 0f c0 08 80 00 00 00 00 07 80 07 80     ...@............
     ee2:	07 c0 0f c0 0e c0 1c e0 1c e0 1c 60 38 70 3f f0     ...........`8p?.
     ef2:	3f f8 70 38 70 38 e0 1c 0e 13 26 0f 00 00 0e e0     ?.p8p8....&.....
     f02:	0e e0 00 00 00 00 00 00 03 80 07 80 07 c0 07 c0     ................
     f12:	0e c0 0e e0 1c e0 1c 70 1c 70 3f f8 3f f8 70 38     .......p.p?.?.p8
     f22:	70 1c e0 1c 0d 15 2a 0f 01 00 07 00 08 80 08 80     p.....*.........
     f32:	08 80 07 00 00 00 00 00 07 00 0f 80 0f 80 1d c0     ................
     f42:	1d c0 1d c0 38 e0 38 e0 30 60 7f f0 7f f0 e0 38     ....8.8.0`.....8
     f52:	e0 38 e0 38 13 0e 2a 14 00 00 00 ff e0 01 ff e0     .8.8..*.........
     f62:	03 f0 00 03 70 00 07 70 00 07 70 00 0e 7f c0 0e     ....p..p..p.....
     f72:	7f c0 1c 70 00 1f f0 00 3f f0 00 70 70 00 70 7f     ...p....?..pp.p.
     f82:	e0 e0 7f e0 0d 12 24 0f 01 fc 0f 80 3f e0 70 f0     ......$.....?.p.
     f92:	60 70 e0 00 e0 00 e0 00 e0 00 e0 00 e0 78 60 70     `p...........x`p
     fa2:	70 f0 3f e0 1f 80 04 00 07 80 01 80 0f 00 0a 14     p.?.............
     fb2:	28 0c 01 00 30 00 38 00 18 00 0c 00 00 00 00 00     (...0.8.........
     fc2:	ff c0 ff c0 e0 00 e0 00 e0 00 e0 00 ff 80 ff 80     ................
     fd2:	e0 00 e0 00 e0 00 e0 00 ff c0 ff c0 0a 14 28 0c     ..............(.
     fe2:	01 00 07 00 06 00 0c 00 08 00 00 00 00 00 ff c0     ................
     ff2:	ff c0 e0 00 e0 00 e0 00 e0 00 ff 80 ff 80 e0 00     ................
    1002:	e0 00 e0 00 e0 00 ff c0 ff c0 0a 14 28 0c 01 00     ............(...
    1012:	1c 00 1e 00 36 00 23 00 00 00 00 00 ff c0 ff c0     ....6.#.........
    1022:	e0 00 e0 00 e0 00 e0 00 ff 80 ff 80 e0 00 e0 00     ................
    1032:	e0 00 e0 00 ff c0 ff c0 0a 13 26 0c 01 00 77 00     ..........&...w.
    1042:	77 00 00 00 00 00 00 00 ff c0 ff c0 e0 00 e0 00     w...............
    1052:	e0 00 e0 00 ff 80 ff 80 e0 00 e0 00 e0 00 e0 00     ................
    1062:	ff c0 ff c0 05 14 14 05 ff 00 e0 60 30 10 00 00     ...........`0...
    1072:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 04 14     88888888888888..
    1082:	14 05 01 00 30 70 60 c0 00 00 e0 e0 e0 e0 e0 e0     ....0p`.........
    1092:	e0 e0 e0 e0 e0 e0 e0 e0 05 14 14 05 00 00 70 70     ..............pp
    10a2:	d8 88 00 00 70 70 70 70 70 70 70 70 70 70 70 70     ....pppppppppppp
    10b2:	70 70 07 13 13 07 00 00 ee ee 00 00 00 38 38 38     pp...........888
    10c2:	38 38 38 38 38 38 38 38 38 38 38 0d 0e 1c 0e 00     88888888888.....
    10d2:	00 7f 80 7f e0 70 f0 70 70 70 38 70 38 fe 38 fe     .....p.ppp8p8.8.
    10e2:	38 70 38 70 38 70 70 70 f0 7f e0 7f 80 0d 13 26     8p8p8ppp.......&
    10f2:	0f 01 00 0c 40 1f 80 11 00 00 00 00 00 f0 38 f8     ....@.........8.
    1102:	38 f8 38 fc 38 ee 38 ee 38 e7 38 e7 38 e3 b8 e3     8.8.8.8.8.8.8...
    1112:	b8 e1 f8 e1 f8 e0 f8 e0 f8 0e 14 28 10 01 00 1c     ...........(....
    1122:	00 0c 00 06 00 02 00 00 00 00 00 0f c0 3f f0 70     .............?.p
    1132:	70 60 38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60     p`8............`
    1142:	38 70 70 3f f0 0f c0 0e 14 28 10 01 00 00 e0 01     8pp?.....(......
    1152:	c0 01 80 03 00 00 00 00 00 0f c0 3f f0 70 70 60     ...........?.pp`
    1162:	38 e0 18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70     8............`8p
    1172:	70 3f f0 0f c0 0e 14 28 10 01 00 07 00 07 80 0d     p?.....(........
    1182:	c0 08 c0 00 00 00 00 0f c0 3f f0 70 70 60 38 e0     .........?.pp`8.
    1192:	18 e0 1c e0 1c e0 1c e0 1c e0 18 60 38 70 70 3f     ...........`8pp?
    11a2:	f0 0f c0 0e 13 26 10 01 00 07 c0 0f c0 00 00 00     .....&..........
    11b2:	00 00 00 0f c0 3f f0 70 30 60 38 e0 18 e0 1c e0     .....?.p0`8.....
    11c2:	1c e0 1c e0 1c e0 18 70 38 78 f0 3f f0 0f c0 0e     .......p8x.?....
    11d2:	13 26 10 01 00 1d c0 1d c0 00 00 00 00 00 00 0f     .&..............
    11e2:	c0 3f f0 70 70 60 38 e0 18 e0 1c e0 1c e0 1c e0     .?.pp`8.........
    11f2:	1c e0 18 60 38 70 70 3f f0 0f c0 0a 0a 14 14 05     ...`8pp?........
    1202:	01 80 40 c0 c0 61 80 33 00 0c 00 0c 00 12 00 21     ..@..a.3.......!
    1212:	00 40 80 80 40 0f 10 20 10 00 ff 00 02 07 e6 1f     .@..@.. ........
    1222:	fc 38 3c 30 3c 70 6c 70 ee 71 ce 73 8e 77 0e 7e     .8<0<plp.q.s.w.~
    1232:	0c 7c 1c 38 38 3f f0 ef e0 40 00 0c 14 28 0e 01     .|.88?...@...(..
    1242:	00 38 00 18 00 0c 00 06 00 00 00 00 00 e0 70 e0     .8............p.
    1252:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0     p.p.p.p.p.p.p.p.
    1262:	70 e0 70 71 e0 3f c0 1f 80 0c 14 28 0e 01 00 01     p.pq.?.....(....
    1272:	c0 03 80 03 00 06 00 00 00 00 00 e0 70 e0 70 e0     ............p.p.
    1282:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0     p.p.p.p.p.p.p.p.
    1292:	70 71 e0 3f c0 1f 80 0c 14 28 0e 01 00 0e 00 0f     pq.?.....(......
    12a2:	00 1b 00 11 80 00 00 00 00 e0 70 e0 70 e0 70 e0     ..........p.p.p.
    12b2:	70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 e0 70 71     p.p.p.p.p.p.p.pq
    12c2:	e0 3f c0 1f 80 0c 13 26 0e 01 00 1d c0 1d c0 00     .?.....&........
    12d2:	00 00 00 00 00 e0 70 e0 70 e0 70 e0 70 e0 70 e0     ......p.p.p.p.p.
    12e2:	70 e0 70 e0 70 e0 70 e0 70 e0 70 70 e0 3f c0 1f     p.p.p.p.p.pp.?..
    12f2:	80 0c 13 26 0d 00 00 01 80 03 00 02 00 00 00 00     ...&............
    1302:	00 f0 70 70 f0 38 e0 38 e0 1d c0 1d c0 0f 80 0f     ..pp.8.8........
    1312:	00 07 00 07 00 07 00 07 00 07 00 07 00 0b 0e 1c     ................
    1322:	0d 01 00 e0 00 e0 00 ff 00 ff c0 e1 c0 e0 e0 e0     ................
    1332:	e0 e0 e0 e1 c0 ff 80 fe 00 e0 00 e0 00 e0 00 0a     ................
    1342:	0e 1c 0c 01 00 3e 00 7f 80 e3 80 e3 80 e3 00 e7     .....>..........
    1352:	00 ee 00 ee 00 e7 80 e3 c0 e1 c0 fd c0 ff c0 ef     ................
    1362:	80 09 10 20 0b 01 00 70 00 30 00 18 00 08 00 00     ... ...p.0......
    1372:	00 00 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3 80 e3     ...>............
    1382:	80 e3 80 ff 80 39 80 09 10 20 0b 01 00 07 00 06     .....9... ......
    1392:	00 0c 00 0c 00 00 00 00 00 3e 00 7f 80 e3 80 03     .........>......
    13a2:	80 3f 80 fb 80 e3 80 e3 80 ff 80 79 80 09 10 20     .?.........y... 
    13b2:	0b 01 00 1c 00 1e 00 36 00 23 00 00 00 00 00 3e     .......6.#.....>
    13c2:	00 7f 80 e3 80 1f 80 7f 80 e3 80 e3 80 e3 80 ff     ................
    13d2:	80 39 80 09 0e 1c 0b 01 00 3f 00 3e 00 00 00 00     .9.......?.>....
    13e2:	00 3e 00 7f 80 e3 80 1f 80 7f 80 e3 80 e3 80 e3     .>..............
    13f2:	80 ff 80 39 80 09 0f 1e 0b 01 00 77 00 77 00 00     ...9.......w.w..
    1402:	00 00 00 00 00 3e 00 7f 80 e3 80 1f 80 7f 80 e3     .....>..........
    1412:	80 e3 80 e3 80 ff 80 39 80 09 11 22 0b 01 00 1c     .......9..."....
    1422:	00 22 00 22 00 22 00 1c 00 00 00 00 00 3e 00 7f     .".".".......>..
    1432:	80 e3 80 1f 80 7f 80 e3 80 e3 80 e3 80 ff 80 39     ...............9
    1442:	80 10 0a 14 12 01 00 3e 7c 7f fe e3 87 1f ff 7f     .......>|.......
    1452:	ff e3 80 e3 80 e3 c7 fe fe 3c 7c 09 0e 1c 0b 01     .........<|.....
    1462:	fc 3e 00 7f 00 e3 80 e3 80 e0 00 e0 00 e3 80 e3     .>..............
    1472:	80 7f 00 3e 00 10 00 1e 00 06 00 3e 00 09 10 20     ...>.......>... 
    1482:	0b 01 00 70 00 30 00 18 00 08 00 00 00 00 00 1e     ...p.0..........
    1492:	00 7f 00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f     ................
    14a2:	80 3e 00 09 10 20 0b 01 00 07 00 06 00 0c 00 08     .>... ..........
    14b2:	00 00 00 00 00 1e 00 7f 00 e3 80 e3 80 ff 80 ff     ................
    14c2:	80 e0 00 e3 80 7f 80 3e 00 09 10 20 0b 01 00 1c     .......>... ....
    14d2:	00 1e 00 36 00 23 00 00 00 00 00 1e 00 7f 00 e3     ...6.#..........
    14e2:	80 e3 80 ff 80 ff 80 e0 00 e3 80 7f 80 3e 00 09     .............>..
    14f2:	0f 1e 0b 01 00 77 00 77 00 00 00 00 00 00 00 1e     .....w.w........
    1502:	00 7f 00 e3 80 e3 80 ff 80 ff 80 e0 00 e3 80 7f     ................
    1512:	80 3e 00 04 0f 0f 05 00 00 c0 e0 60 30 00 70 70     .>.........`0.pp
    1522:	70 70 70 70 70 70 70 70 04 0f 0f 04 01 00 70 60     pppppppp......p`
    1532:	c0 80 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 07 0f 0f     ................
    1542:	05 ff 00 38 7c 4c c6 00 38 38 38 38 38 38 38 38     ...8|L..88888888
    1552:	38 38 07 0e 0e 06 00 00 ee ee 00 00 38 38 38 38     88..........8888
    1562:	38 38 38 38 38 38 0a 0e 1c 0c 01 00 39 80 0f 00     888888......9...
    1572:	1f 00 63 00 1f 80 7f 80 61 c0 e1 c0 e1 c0 e1 c0     ..c.....a.......
    1582:	e1 c0 61 c0 7f 80 1f 00 09 0e 1c 0b 01 00 3e 00     ..a...........>.
    1592:	3c 00 00 00 00 00 ef 00 ff 80 e3 80 e3 80 e3 80     <...............
    15a2:	e3 80 e3 80 e3 80 e3 80 e3 80 0a 10 20 0c 01 00     ............ ...
    15b2:	30 00 18 00 18 00 0c 00 00 00 00 00 1e 00 7f 80     0...............
    15c2:	61 80 e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00     a.........a.....
    15d2:	0a 10 20 0c 01 00 03 00 06 00 06 00 0c 00 00 00     .. .............
    15e2:	00 00 1e 00 7f 80 61 80 e1 c0 e1 c0 e1 c0 e1 c0     ......a.........
    15f2:	61 80 7f 80 1e 00 0a 10 20 0c 01 00 0c 00 1e 00     a....... .......
    1602:	1a 00 33 00 00 00 00 00 1e 00 7f 80 61 80 e1 c0     ..3.........a...
    1612:	e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0e 1c 0c     ......a.........
    1622:	01 00 1f 00 3e 00 00 00 00 00 1e 00 7f 80 61 80     ....>.........a.
    1632:	e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80 1e 00 0a 0f     ........a.......
    1642:	1e 0c 01 00 3b 80 3b 80 00 00 00 00 00 00 1e 00     ....;.;.........
    1652:	7f 80 61 80 e1 c0 e1 c0 e1 c0 e1 c0 61 80 7f 80     ..a.........a...
    1662:	1e 00 0c 08 10 14 04 02 06 00 0e 00 00 00 ff f0     ................
    1672:	ff f0 00 00 06 00 0e 00 0a 0c 18 0c 01 00 00 c0     ................
    1682:	1f 80 7f 80 63 80 e7 c0 ed c0 e9 c0 f1 c0 71 80     ....c.........q.
    1692:	7f 80 de 00 80 00 09 10 20 0b 01 00 70 00 30 00     ........ ...p.0.
    16a2:	18 00 08 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80     ................
    16b2:	e3 80 e3 80 e3 80 e3 80 ff 80 7b 80 09 10 20 0b     ..........{... .
    16c2:	01 00 07 00 06 00 0c 00 08 00 00 00 00 00 e3 80     ................
    16d2:	e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80 ff 80     ................
    16e2:	7b 80 09 10 20 0b 01 00 1c 00 1c 00 36 00 22 00     {... .......6.".
    16f2:	00 00 00 00 e3 80 e3 80 e3 80 e3 80 e3 80 e3 80     ................
    1702:	e3 80 e3 80 ff 80 7b 80 09 0f 1e 0b 01 00 77 00     ......{.......w.
    1712:	77 00 00 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80     w...............
    1722:	e3 80 e3 80 e3 80 e3 80 ff 80 7b 80 0b 13 26 0b     ..........{...&.
    1732:	00 fc 01 80 03 00 02 00 04 00 00 00 70 e0 71 c0     ............p.q.
    1742:	71 c0 39 c0 3b 80 1b 80 1f 80 1f 00 0f 00 0e 00     q.9.;...........
    1752:	0e 00 4e 00 fc 00 78 00 0a 12 24 0c 01 fc e0 00     ..N...x...$.....
    1762:	e0 00 e0 00 e0 00 ef 00 ff 80 e1 80 e1 c0 e1 c0     ................
    1772:	e1 c0 e1 c0 e1 c0 ff 80 ff 00 e0 00 e0 00 e0 00     ................
    1782:	e0 00 0b 12 24 0b 00 fc 3b 80 3b 80 00 00 00 00     ....$...;.;.....
    1792:	e1 e0 71 c0 71 c0 73 80 3b 80 3b 80 1f 00 1f 00     ..q.q.s.;.;.....
    17a2:	1f 00 0e 00 0e 00 0c 00 1c 00 1c 00                 ............

000017ae <__ctors_end>:
    17ae:	11 24       	eor	r1, r1
    17b0:	1f be       	out	0x3f, r1	; 63
    17b2:	cf ef       	ldi	r28, 0xFF	; 255
    17b4:	d8 e0       	ldi	r29, 0x08	; 8
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	cd bf       	out	0x3d, r28	; 61

000017ba <__do_copy_data>:
    17ba:	11 e0       	ldi	r17, 0x01	; 1
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b1 e0       	ldi	r27, 0x01	; 1
    17c0:	e2 e1       	ldi	r30, 0x12	; 18
    17c2:	f9 e3       	ldi	r31, 0x39	; 57
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <__do_copy_data+0x10>
    17c6:	05 90       	lpm	r0, Z+
    17c8:	0d 92       	st	X+, r0
    17ca:	a8 35       	cpi	r26, 0x58	; 88
    17cc:	b1 07       	cpc	r27, r17
    17ce:	d9 f7       	brne	.-10     	; 0x17c6 <__do_copy_data+0xc>

000017d0 <__do_clear_bss>:
    17d0:	22 e0       	ldi	r18, 0x02	; 2
    17d2:	a8 e5       	ldi	r26, 0x58	; 88
    17d4:	b1 e0       	ldi	r27, 0x01	; 1
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <.do_clear_bss_start>

000017d8 <.do_clear_bss_loop>:
    17d8:	1d 92       	st	X+, r1

000017da <.do_clear_bss_start>:
    17da:	a1 37       	cpi	r26, 0x71	; 113
    17dc:	b2 07       	cpc	r27, r18
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <.do_clear_bss_loop>
    17e0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <main>
    17e4:	0c 94 87 1c 	jmp	0x390e	; 0x390e <_exit>

000017e8 <__bad_interrupt>:
    17e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000017ec <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    17ec:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    17f0:	88 e4       	ldi	r24, 0x48	; 72
    17f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    17f6:	08 95       	ret

000017f8 <i2c_start>:
    17f8:	94 ea       	ldi	r25, 0xA4	; 164
    17fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17fe:	4f ef       	ldi	r20, 0xFF	; 255
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	ec eb       	ldi	r30, 0xBC	; 188
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	90 81       	ld	r25, Z
    180c:	99 23       	and	r25, r25
    180e:	34 f0       	brlt	.+12     	; 0x181c <i2c_start+0x24>
    1810:	41 50       	subi	r20, 0x01	; 1
    1812:	51 09       	sbc	r21, r1
    1814:	61 09       	sbc	r22, r1
    1816:	71 09       	sbc	r23, r1
    1818:	c0 f7       	brcc	.-16     	; 0x180a <i2c_start+0x12>
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <i2c_start+0x2c>
    181c:	45 2b       	or	r20, r21
    181e:	46 2b       	or	r20, r22
    1820:	47 2b       	or	r20, r23
    1822:	41 f1       	breq	.+80     	; 0x1874 <i2c_start+0x7c>
    1824:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1828:	98 7f       	andi	r25, 0xF8	; 248
    182a:	98 30       	cpi	r25, 0x08	; 8
    182c:	11 f0       	breq	.+4      	; 0x1832 <i2c_start+0x3a>
    182e:	90 31       	cpi	r25, 0x10	; 16
    1830:	19 f5       	brne	.+70     	; 0x1878 <i2c_start+0x80>
    1832:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1836:	84 e8       	ldi	r24, 0x84	; 132
    1838:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a0 e0       	ldi	r26, 0x00	; 0
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ec eb       	ldi	r30, 0xBC	; 188
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	20 81       	ld	r18, Z
    184a:	22 23       	and	r18, r18
    184c:	2c f0       	brlt	.+10     	; 0x1858 <i2c_start+0x60>
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	a1 09       	sbc	r26, r1
    1852:	b1 09       	sbc	r27, r1
    1854:	c8 f7       	brcc	.-14     	; 0x1848 <i2c_start+0x50>
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <i2c_start+0x68>
    1858:	89 2b       	or	r24, r25
    185a:	8a 2b       	or	r24, r26
    185c:	8b 2b       	or	r24, r27
    185e:	71 f0       	breq	.+28     	; 0x187c <i2c_start+0x84>
    1860:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1864:	98 7f       	andi	r25, 0xF8	; 248
    1866:	98 31       	cpi	r25, 0x18	; 24
    1868:	59 f0       	breq	.+22     	; 0x1880 <i2c_start+0x88>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 34       	cpi	r25, 0x40	; 64
    186e:	49 f4       	brne	.+18     	; 0x1882 <i2c_start+0x8a>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	08 95       	ret
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	08 95       	ret
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	08 95       	ret
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	08 95       	ret
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	08 95       	ret

00001884 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1884:	84 e9       	ldi	r24, 0x94	; 148
    1886:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	ec eb       	ldi	r30, 0xBC	; 188
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	20 81       	ld	r18, Z
    1894:	24 ff       	sbrs	r18, 4
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <i2c_stop+0x1e>
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	81 15       	cp	r24, r1
    189c:	21 e0       	ldi	r18, 0x01	; 1
    189e:	92 07       	cpc	r25, r18
    18a0:	c1 f7       	brne	.-16     	; 0x1892 <i2c_stop+0xe>
    18a2:	08 95       	ret

000018a4 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    18a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    18a8:	84 e8       	ldi	r24, 0x84	; 132
    18aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    18b6:	ec eb       	ldi	r30, 0xBC	; 188
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	20 81       	ld	r18, Z
    18bc:	22 23       	and	r18, r18
    18be:	2c f0       	brlt	.+10     	; 0x18ca <i2c_write+0x26>
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	a1 09       	sbc	r26, r1
    18c4:	b1 09       	sbc	r27, r1
    18c6:	c8 f7       	brcc	.-14     	; 0x18ba <i2c_write+0x16>
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <i2c_write+0x2e>
	if(i2c_timer == 0)
    18ca:	89 2b       	or	r24, r25
    18cc:	8a 2b       	or	r24, r26
    18ce:	8b 2b       	or	r24, r27
    18d0:	41 f0       	breq	.+16     	; 0x18e2 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    18d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    18d6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	98 32       	cpi	r25, 0x28	; 40
    18dc:	19 f4       	brne	.+6      	; 0x18e4 <i2c_write+0x40>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    18e4:	08 95       	ret

000018e6 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    18e6:	84 ec       	ldi	r24, 0xC4	; 196
    18e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    18f4:	ec eb       	ldi	r30, 0xBC	; 188
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	20 81       	ld	r18, Z
    18fa:	22 23       	and	r18, r18
    18fc:	2c f0       	brlt	.+10     	; 0x1908 <i2c_readAck+0x22>
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	a1 09       	sbc	r26, r1
    1902:	b1 09       	sbc	r27, r1
    1904:	c8 f7       	brcc	.-14     	; 0x18f8 <i2c_readAck+0x12>
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    1908:	89 2b       	or	r24, r25
    190a:	8a 2b       	or	r24, r26
    190c:	8b 2b       	or	r24, r27
    190e:	19 f0       	breq	.+6      	; 0x1916 <i2c_readAck+0x30>
		return 0;

    return TWDR;
    1910:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1914:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1916:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    1918:	08 95       	ret

0000191a <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    191a:	84 e8       	ldi	r24, 0x84	; 132
    191c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1928:	ec eb       	ldi	r30, 0xBC	; 188
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	20 81       	ld	r18, Z
    192e:	22 23       	and	r18, r18
    1930:	2c f0       	brlt	.+10     	; 0x193c <i2c_readNak+0x22>
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	a1 09       	sbc	r26, r1
    1936:	b1 09       	sbc	r27, r1
    1938:	c8 f7       	brcc	.-14     	; 0x192c <i2c_readNak+0x12>
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    193c:	89 2b       	or	r24, r25
    193e:	8a 2b       	or	r24, r26
    1940:	8b 2b       	or	r24, r27
    1942:	19 f0       	breq	.+6      	; 0x194a <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    1944:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1948:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    194a:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    194c:	08 95       	ret

0000194e <getAcc>:
	accZ = getAcc(Z);
	return (accX + accY + accZ);
}

/*	 Get acceleration data, input is address for X, Y or Z	*/
double getAcc(int addr){
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	c8 2f       	mov	r28, r24
	int16_t ret = 0;
	uint8_t buffer[2];
	i2c_start(MPU6050_ADDR | I2C_WRITE);
    1954:	80 ed       	ldi	r24, 0xD0	; 208
    1956:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
	i2c_write(addr);
    195a:	8c 2f       	mov	r24, r28
    195c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1960:	85 e3       	ldi	r24, 0x35	; 53
    1962:	8a 95       	dec	r24
    1964:	f1 f7       	brne	.-4      	; 0x1962 <getAcc+0x14>
    1966:	00 00       	nop
	_delay_us(10);
	i2c_start(MPU6050_ADDR | I2C_READ);
    1968:	81 ed       	ldi	r24, 0xD1	; 209
    196a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
	buffer[0] = i2c_readAck();
    196e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <i2c_readAck>
    1972:	d8 2f       	mov	r29, r24
	buffer[1] = i2c_readNak();
    1974:	0e 94 8d 0c 	call	0x191a	; 0x191a <i2c_readNak>
    1978:	c8 2f       	mov	r28, r24
	i2c_stop();
    197a:	0e 94 42 0c 	call	0x1884	; 0x1884 <i2c_stop>
	ret = fabs((((int16_t)buffer[0]) << 8) | buffer[1]);
    197e:	6c 2f       	mov	r22, r28
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	7d 2b       	or	r23, r29
    1984:	07 2e       	mov	r0, r23
    1986:	00 0c       	add	r0, r0
    1988:	88 0b       	sbc	r24, r24
    198a:	99 0b       	sbc	r25, r25
    198c:	0e 94 87 18 	call	0x310e	; 0x310e <__floatsisf>
    1990:	9f 77       	andi	r25, 0x7F	; 127
    1992:	0e 94 4f 18 	call	0x309e	; 0x309e <__fixsfsi>
	return (double)(ret)/MPU6050_AGAIN;
    1996:	07 2e       	mov	r0, r23
    1998:	00 0c       	add	r0, r0
    199a:	88 0b       	sbc	r24, r24
    199c:	99 0b       	sbc	r25, r25
    199e:	0e 94 87 18 	call	0x310e	; 0x310e <__floatsisf>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	58 e3       	ldi	r21, 0x38	; 56
    19aa:	0e 94 18 19 	call	0x3230	; 0x3230 <__mulsf3>
}
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <getAccXYZ>:
		}
	}
}

/*	 Get added value of acceleration for X, Y and Z	*/
double getAccXYZ(void){
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
	accX = getAcc(X);
    19bc:	8b e3       	ldi	r24, 0x3B	; 59
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 a7 0c 	call	0x194e	; 0x194e <getAcc>
    19c4:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <accX>
    19c8:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <accX+0x1>
    19cc:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <accX+0x2>
    19d0:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <accX+0x3>
	accY = getAcc(Y);
    19d4:	8d e3       	ldi	r24, 0x3D	; 61
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 a7 0c 	call	0x194e	; 0x194e <getAcc>
    19dc:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <accY>
    19e0:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <accY+0x1>
    19e4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <accY+0x2>
    19e8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <accY+0x3>
	accZ = getAcc(Z);
    19ec:	8f e3       	ldi	r24, 0x3F	; 63
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 a7 0c 	call	0x194e	; 0x194e <getAcc>
    19f4:	6b 01       	movw	r12, r22
    19f6:	7c 01       	movw	r14, r24
    19f8:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <accZ>
    19fc:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <accZ+0x1>
    1a00:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <accZ+0x2>
    1a04:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <accZ+0x3>
	return (accX + accY + accZ);
    1a08:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <accY>
    1a0c:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <accY+0x1>
    1a10:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <accY+0x2>
    1a14:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <accY+0x3>
    1a18:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <accX>
    1a1c:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <accX+0x1>
    1a20:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <accX+0x2>
    1a24:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <accX+0x3>
    1a28:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__addsf3>
    1a2c:	9b 01       	movw	r18, r22
    1a2e:	ac 01       	movw	r20, r24
    1a30:	c7 01       	movw	r24, r14
    1a32:	b6 01       	movw	r22, r12
    1a34:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__addsf3>
}
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	cf 90       	pop	r12
    1a40:	08 95       	ret

00001a42 <drawString>:
	sprintf(counterString, "Steps: %i", steps);
	drawString(counterString, DISPLAY_MIDDLE);
}

/*	 Draw text string to display	*/
void drawString(char * string, int line){
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	8c 01       	movw	r16, r24
    1a4a:	c6 2f       	mov	r28, r22
	u8g_FirstPage(&u8g);
    1a4c:	8a e3       	ldi	r24, 0x3A	; 58
    1a4e:	92 e0       	ldi	r25, 0x02	; 2
    1a50:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <u8g_FirstPage>
	do{
		u8g_DrawStr(&u8g, 2, line, string);
    1a54:	98 01       	movw	r18, r16
    1a56:	4c 2f       	mov	r20, r28
    1a58:	62 e0       	ldi	r22, 0x02	; 2
    1a5a:	8a e3       	ldi	r24, 0x3A	; 58
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	0e 94 09 14 	call	0x2812	; 0x2812 <u8g_DrawStr>
	}while(u8g_NextPage(&u8g));
    1a62:	8a e3       	ldi	r24, 0x3A	; 58
    1a64:	92 e0       	ldi	r25, 0x02	; 2
    1a66:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <u8g_NextPage>
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	f3 cf       	rjmp	.-26     	; 0x1a54 <drawString+0x12>
}
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	08 95       	ret

00001a76 <drawSteps>:
	ret = fabs((((int16_t)buffer[0]) << 8) | buffer[1]);
	return (double)(ret)/MPU6050_AGAIN;
}

/*	 Draw step count to display	*/
void drawSteps(uint16_t steps){
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	64 97       	sbiw	r28, 0x14	; 20
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
	char counterString[20] = "\0";
    1a8e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <u8g_dev_ssd1306_128x64_i2c_pb+0x8>
    1a92:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <u8g_dev_ssd1306_128x64_i2c_pb+0x9>
    1a96:	3a 83       	std	Y+2, r19	; 0x02
    1a98:	29 83       	std	Y+1, r18	; 0x01
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	33 96       	adiw	r30, 0x03	; 3
    1a9e:	22 e1       	ldi	r18, 0x12	; 18
    1aa0:	df 01       	movw	r26, r30
    1aa2:	1d 92       	st	X+, r1
    1aa4:	2a 95       	dec	r18
    1aa6:	e9 f7       	brne	.-6      	; 0x1aa2 <drawSteps+0x2c>
	sprintf(counterString, "Steps: %i", steps);
    1aa8:	9f 93       	push	r25
    1aaa:	8f 93       	push	r24
    1aac:	82 e2       	ldi	r24, 0x22	; 34
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	9f 93       	push	r25
    1ab2:	8f 93       	push	r24
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	0f 5f       	subi	r16, 0xFF	; 255
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	1f 93       	push	r17
    1abc:	0f 93       	push	r16
    1abe:	0e 94 af 19 	call	0x335e	; 0x335e <sprintf>
	drawString(counterString, DISPLAY_MIDDLE);
    1ac2:	62 e2       	ldi	r22, 0x22	; 34
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	c8 01       	movw	r24, r16
    1ac8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawString>
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
}
    1ad8:	64 96       	adiw	r28, 0x14	; 20
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	08 95       	ret

00001aee <setAccIdle>:
		u8g_DrawStr(&u8g, 2, line, string);
	}while(u8g_NextPage(&u8g));
}

/* Determine acceleration idle value	*/
void setAccIdle(){
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	c4 e1       	ldi	r28, 0x14	; 20
    1af4:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < SET_IDLE_LOOP; i++){
		 accIdle += getAccXYZ();
    1af6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <getAccXYZ>
    1afa:	9b 01       	movw	r18, r22
    1afc:	ac 01       	movw	r20, r24
    1afe:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <accIdle>
    1b02:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <accIdle+0x1>
    1b06:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <accIdle+0x2>
    1b0a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <accIdle+0x3>
    1b0e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__addsf3>
    1b12:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <accIdle>
    1b16:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <accIdle+0x1>
    1b1a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <accIdle+0x2>
    1b1e:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <accIdle+0x3>
		 drawString("Calibrating..", DISPLAY_MIDDLE);
    1b22:	62 e2       	ldi	r22, 0x22	; 34
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	8c e2       	ldi	r24, 0x2C	; 44
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b2e:	2f ef       	ldi	r18, 0xFF	; 255
    1b30:	81 ee       	ldi	r24, 0xE1	; 225
    1b32:	94 e0       	ldi	r25, 0x04	; 4
    1b34:	21 50       	subi	r18, 0x01	; 1
    1b36:	80 40       	sbci	r24, 0x00	; 0
    1b38:	90 40       	sbci	r25, 0x00	; 0
    1b3a:	e1 f7       	brne	.-8      	; 0x1b34 <setAccIdle+0x46>
    1b3c:	00 c0       	rjmp	.+0      	; 0x1b3e <setAccIdle+0x50>
    1b3e:	00 00       	nop
    1b40:	21 97       	sbiw	r28, 0x01	; 1
	}while(u8g_NextPage(&u8g));
}

/* Determine acceleration idle value	*/
void setAccIdle(){
	for(int i = 0; i < SET_IDLE_LOOP; i++){
    1b42:	c9 f6       	brne	.-78     	; 0x1af6 <setAccIdle+0x8>
		 accIdle += getAccXYZ();
		 drawString("Calibrating..", DISPLAY_MIDDLE);
		 _delay_ms(100);
	}
	accIdle /= SET_IDLE_LOOP;
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 ea       	ldi	r20, 0xA0	; 160
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <accIdle>
    1b50:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <accIdle+0x1>
    1b54:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <accIdle+0x2>
    1b58:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <accIdle+0x3>
    1b5c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__divsf3>
    1b60:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <accIdle>
    1b64:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <accIdle+0x1>
    1b68:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <accIdle+0x2>
    1b6c:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <accIdle+0x3>
	drawString("Idle..", DISPLAY_MIDDLE);
    1b70:	62 e2       	ldi	r22, 0x22	; 34
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	8a e3       	ldi	r24, 0x3A	; 58
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawString>
}
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

00001b82 <toggleDisplaySleep>:

/*	 Toggle display sleep  mode on/off	*/
void toggleDisplaySleep(void){
	if(displaySleeping){
    1b82:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <displaySleeping>
    1b86:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <displaySleeping+0x1>
    1b8a:	89 2b       	or	r24, r25
    1b8c:	49 f0       	breq	.+18     	; 0x1ba0 <toggleDisplaySleep+0x1e>
		u8g_SleepOff(&u8g);
    1b8e:	8a e3       	ldi	r24, 0x3A	; 58
    1b90:	92 e0       	ldi	r25, 0x02	; 2
    1b92:	0e 94 d7 15 	call	0x2bae	; 0x2bae <u8g_SleepOff>
		displaySleeping = 0;
    1b96:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <displaySleeping+0x1>
    1b9a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <displaySleeping>
    1b9e:	08 95       	ret
	}
	else{
		u8g_SleepOn(&u8g);
    1ba0:	8a e3       	ldi	r24, 0x3A	; 58
    1ba2:	92 e0       	ldi	r25, 0x02	; 2
    1ba4:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <u8g_SleepOn>
		displaySleeping = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <displaySleeping+0x1>
    1bb0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <displaySleeping>
    1bb4:	08 95       	ret

00001bb6 <main>:
void toggleDisplaySleep(void);
double getAccXYZ(void);

int main(void) {
	/*	 Init MPU	*/
	sei();
    1bb6:	78 94       	sei
	mpu6050_init();
    1bb8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <mpu6050_init>
    1bbc:	2f ef       	ldi	r18, 0xFF	; 255
    1bbe:	80 e7       	ldi	r24, 0x70	; 112
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
    1bc2:	21 50       	subi	r18, 0x01	; 1
    1bc4:	80 40       	sbci	r24, 0x00	; 0
    1bc6:	90 40       	sbci	r25, 0x00	; 0
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <main+0xc>
    1bca:	00 c0       	rjmp	.+0      	; 0x1bcc <main+0x16>
    1bcc:	00 00       	nop
	_delay_ms(50);

	/*	 Init display	*/
	u8g_InitI2C(&u8g, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	71 e0       	ldi	r23, 0x01	; 1
    1bd4:	8a e3       	ldi	r24, 0x3A	; 58
    1bd6:	92 e0       	ldi	r25, 0x02	; 2
    1bd8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <u8g_InitI2C>
	u8g_SetFont(&u8g, u8g_font_fub14);
    1bdc:	62 e1       	ldi	r22, 0x12	; 18
    1bde:	71 e0       	ldi	r23, 0x01	; 1
    1be0:	8a e3       	ldi	r24, 0x3A	; 58
    1be2:	92 e0       	ldi	r25, 0x02	; 2
    1be4:	0e 94 95 14 	call	0x292a	; 0x292a <u8g_SetFont>
    1be8:	2f ef       	ldi	r18, 0xFF	; 255
    1bea:	80 e7       	ldi	r24, 0x70	; 112
    1bec:	92 e0       	ldi	r25, 0x02	; 2
    1bee:	21 50       	subi	r18, 0x01	; 1
    1bf0:	80 40       	sbci	r24, 0x00	; 0
    1bf2:	90 40       	sbci	r25, 0x00	; 0
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <main+0x38>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <main+0x42>
    1bf8:	00 00       	nop

	_delay_ms(50);
	drawString("STEPCOUNTER!", DISPLAY_MIDDLE);
    1bfa:	62 e2       	ldi	r22, 0x22	; 34
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	81 e4       	ldi	r24, 0x41	; 65
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawString>
    1c06:	2f ef       	ldi	r18, 0xFF	; 255
    1c08:	83 ed       	ldi	r24, 0xD3	; 211
    1c0a:	90 e3       	ldi	r25, 0x30	; 48
    1c0c:	21 50       	subi	r18, 0x01	; 1
    1c0e:	80 40       	sbci	r24, 0x00	; 0
    1c10:	90 40       	sbci	r25, 0x00	; 0
    1c12:	e1 f7       	brne	.-8      	; 0x1c0c <main+0x56>
    1c14:	00 c0       	rjmp	.+0      	; 0x1c16 <main+0x60>
    1c16:	00 00       	nop
	_delay_ms(1000);

	setAccIdle();
    1c18:	0e 94 77 0d 	call	0x1aee	; 0x1aee <setAccIdle>
    1c1c:	2f ef       	ldi	r18, 0xFF	; 255
    1c1e:	80 e7       	ldi	r24, 0x70	; 112
    1c20:	92 e0       	ldi	r25, 0x02	; 2
    1c22:	21 50       	subi	r18, 0x01	; 1
    1c24:	80 40       	sbci	r24, 0x00	; 0
    1c26:	90 40       	sbci	r25, 0x00	; 0
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <main+0x6c>
    1c2a:	00 c0       	rjmp	.+0      	; 0x1c2c <main+0x76>
    1c2c:	00 00       	nop
	_delay_ms(50);
	
	while(1) {
		accCombined = getAccXYZ();
    1c2e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <getAccXYZ>
    1c32:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <accCombined>
    1c36:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <accCombined+0x1>
    1c3a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <accCombined+0x2>
    1c3e:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <accCombined+0x3>
		if(fabs(accCombined - accIdle) > STEP_ACC_TRIGGER){
    1c42:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <accIdle>
    1c46:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <accIdle+0x1>
    1c4a:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <accIdle+0x2>
    1c4e:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <accIdle+0x3>
    1c52:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__subsf3>
    1c56:	9f 77       	andi	r25, 0x7F	; 127
    1c58:	23 e3       	ldi	r18, 0x33	; 51
    1c5a:	33 e3       	ldi	r19, 0x33	; 51
    1c5c:	43 e1       	ldi	r20, 0x13	; 19
    1c5e:	50 e4       	ldi	r21, 0x40	; 64
    1c60:	0e 94 13 19 	call	0x3226	; 0x3226 <__gesf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	f4 f4       	brge	.+60     	; 0x1ca4 <main+0xee>
			/*	 Wake display if sleeping	*/
			if(displaySleeping){
    1c68:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <displaySleeping>
    1c6c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <displaySleeping+0x1>
    1c70:	89 2b       	or	r24, r25
    1c72:	11 f0       	breq	.+4      	; 0x1c78 <main+0xc2>
				toggleDisplaySleep();
    1c74:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <toggleDisplaySleep>
			}
			drawSteps(steps++);
    1c78:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <steps>
    1c7c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <steps+0x1>
    1c80:	9c 01       	movw	r18, r24
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <steps+0x1>
    1c8a:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <steps>
    1c8e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <drawSteps>
    1c92:	2f ef       	ldi	r18, 0xFF	; 255
    1c94:	80 e7       	ldi	r24, 0x70	; 112
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	21 50       	subi	r18, 0x01	; 1
    1c9a:	80 40       	sbci	r24, 0x00	; 0
    1c9c:	90 40       	sbci	r25, 0x00	; 0
    1c9e:	e1 f7       	brne	.-8      	; 0x1c98 <main+0xe2>
    1ca0:	00 c0       	rjmp	.+0      	; 0x1ca2 <main+0xec>
    1ca2:	00 00       	nop
    1ca4:	8f e3       	ldi	r24, 0x3F	; 63
    1ca6:	9c e9       	ldi	r25, 0x9C	; 156
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <main+0xf2>
    1cac:	00 c0       	rjmp	.+0      	; 0x1cae <main+0xf8>
    1cae:	00 00       	nop
			_delay_ms(50);
		}
		_delay_ms(10);
		/*	 Set display to sleep if timer is reached	*/
		if(displaySleepTimer++ > DISPLAY_SLEEP_DELAY){
    1cb0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
    1cb4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <__data_end+0x1>
    1cb8:	9c 01       	movw	r18, r24
    1cba:	2f 5f       	subi	r18, 0xFF	; 255
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <__data_end+0x1>
    1cc2:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <__data_end>
    1cc6:	89 3b       	cpi	r24, 0xB9	; 185
    1cc8:	9b 40       	sbci	r25, 0x0B	; 11
    1cca:	0c f4       	brge	.+2      	; 0x1cce <main+0x118>
    1ccc:	b0 cf       	rjmp	.-160    	; 0x1c2e <main+0x78>
			displaySleepTimer = 0;
    1cce:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__data_end+0x1>
    1cd2:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end>
			if(!displaySleeping){
    1cd6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <displaySleeping>
    1cda:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <displaySleeping+0x1>
    1cde:	89 2b       	or	r24, r25
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <main+0x12e>
    1ce2:	a5 cf       	rjmp	.-182    	; 0x1c2e <main+0x78>
				drawString("Sleeping", DISPLAY_MIDDLE);
    1ce4:	62 e2       	ldi	r22, 0x22	; 34
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	8e e4       	ldi	r24, 0x4E	; 78
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawString>
    1cf0:	8f ef       	ldi	r24, 0xFF	; 255
    1cf2:	93 ed       	ldi	r25, 0xD3	; 211
    1cf4:	20 e3       	ldi	r18, 0x30	; 48
    1cf6:	81 50       	subi	r24, 0x01	; 1
    1cf8:	90 40       	sbci	r25, 0x00	; 0
    1cfa:	20 40       	sbci	r18, 0x00	; 0
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <main+0x140>
    1cfe:	00 c0       	rjmp	.+0      	; 0x1d00 <main+0x14a>
    1d00:	00 00       	nop
				_delay_ms(1000);
				toggleDisplaySleep();
    1d02:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <toggleDisplaySleep>
    1d06:	93 cf       	rjmp	.-218    	; 0x1c2e <main+0x78>

00001d08 <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
    1d08:	af 92       	push	r10
    1d0a:	bf 92       	push	r11
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	66 23       	and	r22, r22
    1d1c:	b9 f1       	breq	.+110    	; 0x1d8c <mpu6050_readBytes+0x84>
    1d1e:	c5 2f       	mov	r28, r21
    1d20:	d4 2f       	mov	r29, r20
    1d22:	d6 2e       	mov	r13, r22
    1d24:	18 2f       	mov	r17, r24
    1d26:	80 ed       	ldi	r24, 0xD0	; 208
    1d28:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
    1d2c:	81 2f       	mov	r24, r17
    1d2e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <i2c_write>
    1d32:	85 e3       	ldi	r24, 0x35	; 53
    1d34:	8a 95       	dec	r24
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <mpu6050_readBytes+0x2c>
    1d38:	00 00       	nop
    1d3a:	81 ed       	ldi	r24, 0xD1	; 209
    1d3c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
    1d40:	0d 2f       	mov	r16, r29
    1d42:	1c 2f       	mov	r17, r28
    1d44:	ee 24       	eor	r14, r14
    1d46:	ea 94       	dec	r14
    1d48:	ed 0c       	add	r14, r13
    1d4a:	f1 2c       	mov	r15, r1
    1d4c:	ef ef       	ldi	r30, 0xFF	; 255
    1d4e:	ee 1a       	sub	r14, r30
    1d50:	fe 0a       	sbc	r15, r30
    1d52:	c0 e0       	ldi	r28, 0x00	; 0
    1d54:	d0 e0       	ldi	r29, 0x00	; 0
    1d56:	ad 2c       	mov	r10, r13
    1d58:	b1 2c       	mov	r11, r1
    1d5a:	f1 e0       	ldi	r31, 0x01	; 1
    1d5c:	af 1a       	sub	r10, r31
    1d5e:	b1 08       	sbc	r11, r1
    1d60:	ca 15       	cp	r28, r10
    1d62:	db 05       	cpc	r29, r11
    1d64:	29 f4       	brne	.+10     	; 0x1d70 <mpu6050_readBytes+0x68>
    1d66:	0e 94 8d 0c 	call	0x191a	; 0x191a <i2c_readNak>
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	80 83       	st	Z, r24
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <mpu6050_readBytes+0x70>
    1d70:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <i2c_readAck>
    1d74:	f8 01       	movw	r30, r16
    1d76:	80 83       	st	Z, r24
    1d78:	21 96       	adiw	r28, 0x01	; 1
    1d7a:	0f 5f       	subi	r16, 0xFF	; 255
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	ce 15       	cp	r28, r14
    1d80:	df 05       	cpc	r29, r15
    1d82:	71 f7       	brne	.-36     	; 0x1d60 <mpu6050_readBytes+0x58>
    1d84:	cd 2d       	mov	r28, r13
    1d86:	0e 94 42 0c 	call	0x1884	; 0x1884 <i2c_stop>
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <mpu6050_readBytes+0x86>
    1d8c:	c0 e0       	ldi	r28, 0x00	; 0
    1d8e:	8c 2f       	mov	r24, r28
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	bf 90       	pop	r11
    1da0:	af 90       	pop	r10
    1da2:	08 95       	ret

00001da4 <mpu6050_readByte>:
    1da4:	ab 01       	movw	r20, r22
    1da6:	61 e0       	ldi	r22, 0x01	; 1
    1da8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <mpu6050_readBytes>
    1dac:	08 95       	ret

00001dae <mpu6050_writeBytes>:
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	66 23       	and	r22, r22
    1dbc:	d1 f0       	breq	.+52     	; 0x1df2 <mpu6050_writeBytes+0x44>
    1dbe:	7a 01       	movw	r14, r20
    1dc0:	16 2f       	mov	r17, r22
    1dc2:	c8 2f       	mov	r28, r24
    1dc4:	80 ed       	ldi	r24, 0xD0	; 208
    1dc6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_start>
    1dca:	8c 2f       	mov	r24, r28
    1dcc:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <i2c_write>
    1dd0:	e7 01       	movw	r28, r14
    1dd2:	6f ef       	ldi	r22, 0xFF	; 255
    1dd4:	61 0f       	add	r22, r17
    1dd6:	06 2f       	mov	r16, r22
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	0f 5f       	subi	r16, 0xFF	; 255
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	0e 0d       	add	r16, r14
    1de0:	1f 1d       	adc	r17, r15
    1de2:	89 91       	ld	r24, Y+
    1de4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <i2c_write>
    1de8:	c0 17       	cp	r28, r16
    1dea:	d1 07       	cpc	r29, r17
    1dec:	d1 f7       	brne	.-12     	; 0x1de2 <mpu6050_writeBytes+0x34>
    1dee:	0e 94 42 0c 	call	0x1884	; 0x1884 <i2c_stop>
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	08 95       	ret

00001e00 <mpu6050_writeByte>:
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	1f 92       	push	r1
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	69 83       	std	Y+1, r22	; 0x01
    1e0c:	ae 01       	movw	r20, r28
    1e0e:	4f 5f       	subi	r20, 0xFF	; 255
    1e10:	5f 4f       	sbci	r21, 0xFF	; 255
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <mpu6050_writeBytes>
    1e18:	0f 90       	pop	r0
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <mpu6050_writeBits>:
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	1f 92       	push	r1
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	44 23       	and	r20, r20
    1e34:	89 f1       	breq	.+98     	; 0x1e98 <mpu6050_writeBits+0x78>
    1e36:	f2 2e       	mov	r15, r18
    1e38:	14 2f       	mov	r17, r20
    1e3a:	06 2f       	mov	r16, r22
    1e3c:	e8 2e       	mov	r14, r24
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    1e40:	be 01       	movw	r22, r28
    1e42:	6f 5f       	subi	r22, 0xFF	; 255
    1e44:	7f 4f       	sbci	r23, 0xFF	; 255
    1e46:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <mpu6050_readByte>
    1e4a:	88 23       	and	r24, r24
    1e4c:	29 f1       	breq	.+74     	; 0x1e98 <mpu6050_writeBits+0x78>
    1e4e:	40 2f       	mov	r20, r16
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	41 1b       	sub	r20, r17
    1e54:	51 09       	sbc	r21, r1
    1e56:	4f 5f       	subi	r20, 0xFF	; 255
    1e58:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <mpu6050_writeBits+0x44>
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	1a 95       	dec	r17
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <mpu6050_writeBits+0x40>
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	04 2e       	mov	r0, r20
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <mpu6050_writeBits+0x52>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <mpu6050_writeBits+0x4e>
    1e76:	2f 2d       	mov	r18, r15
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <mpu6050_writeBits+0x60>
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	4a 95       	dec	r20
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <mpu6050_writeBits+0x5c>
    1e84:	68 2f       	mov	r22, r24
    1e86:	60 95       	com	r22
    1e88:	99 81       	ldd	r25, Y+1	; 0x01
    1e8a:	69 23       	and	r22, r25
    1e8c:	82 23       	and	r24, r18
    1e8e:	68 2b       	or	r22, r24
    1e90:	69 83       	std	Y+1, r22	; 0x01
    1e92:	8e 2d       	mov	r24, r14
    1e94:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <mpu6050_writeByte>
    1e98:	0f 90       	pop	r0
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	08 95       	ret

00001ea8 <mpu6050_writeBit>:
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	1f 92       	push	r1
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	18 2f       	mov	r17, r24
    1eba:	06 2f       	mov	r16, r22
    1ebc:	f4 2e       	mov	r15, r20
    1ebe:	be 01       	movw	r22, r28
    1ec0:	6f 5f       	subi	r22, 0xFF	; 255
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <mpu6050_readByte>
    1ec8:	ff 20       	and	r15, r15
    1eca:	59 f0       	breq	.+22     	; 0x1ee2 <mpu6050_writeBit+0x3a>
    1ecc:	21 e0       	ldi	r18, 0x01	; 1
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	b9 01       	movw	r22, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <mpu6050_writeBit+0x30>
    1ed4:	66 0f       	add	r22, r22
    1ed6:	77 1f       	adc	r23, r23
    1ed8:	0a 95       	dec	r16
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <mpu6050_writeBit+0x2c>
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	68 2b       	or	r22, r24
    1ee0:	0b c0       	rjmp	.+22     	; 0x1ef8 <mpu6050_writeBit+0x50>
    1ee2:	21 e0       	ldi	r18, 0x01	; 1
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	b9 01       	movw	r22, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <mpu6050_writeBit+0x46>
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	0a 95       	dec	r16
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <mpu6050_writeBit+0x42>
    1ef2:	60 95       	com	r22
    1ef4:	99 81       	ldd	r25, Y+1	; 0x01
    1ef6:	69 23       	and	r22, r25
    1ef8:	69 83       	std	Y+1, r22	; 0x01
    1efa:	81 2f       	mov	r24, r17
    1efc:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <mpu6050_writeByte>
    1f00:	0f 90       	pop	r0
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	08 95       	ret

00001f0e <mpu6050_setSleepDisabled>:
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	66 e0       	ldi	r22, 0x06	; 6
    1f12:	8b e6       	ldi	r24, 0x6B	; 107
    1f14:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <mpu6050_writeBit>
    1f18:	08 95       	ret

00001f1a <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    1f1a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f1e:	25 e3       	ldi	r18, 0x35	; 53
    1f20:	2a 95       	dec	r18
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <mpu6050_init+0x6>
    1f24:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	91 ee       	ldi	r25, 0xE1	; 225
    1f2a:	24 e0       	ldi	r18, 0x04	; 4
    1f2c:	81 50       	subi	r24, 0x01	; 1
    1f2e:	90 40       	sbci	r25, 0x00	; 0
    1f30:	20 40       	sbci	r18, 0x00	; 0
    1f32:	e1 f7       	brne	.-8      	; 0x1f2c <mpu6050_init+0x12>
    1f34:	00 c0       	rjmp	.+0      	; 0x1f36 <mpu6050_init+0x1c>
    1f36:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    1f38:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <mpu6050_setSleepDisabled>
    1f3c:	8f e3       	ldi	r24, 0x3F	; 63
    1f3e:	9c e9       	ldi	r25, 0x9C	; 156
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <mpu6050_init+0x26>
    1f44:	00 c0       	rjmp	.+0      	; 0x1f46 <mpu6050_init+0x2c>
    1f46:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    1f48:	21 e0       	ldi	r18, 0x01	; 1
    1f4a:	43 e0       	ldi	r20, 0x03	; 3
    1f4c:	62 e0       	ldi	r22, 0x02	; 2
    1f4e:	8b e6       	ldi	r24, 0x6B	; 107
    1f50:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1f54:	23 e0       	ldi	r18, 0x03	; 3
    1f56:	43 e0       	ldi	r20, 0x03	; 3
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	8a e1       	ldi	r24, 0x1A	; 26
    1f5c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1f60:	64 e0       	ldi	r22, 0x04	; 4
    1f62:	89 e1       	ldi	r24, 0x19	; 25
    1f64:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    1f68:	23 e0       	ldi	r18, 0x03	; 3
    1f6a:	42 e0       	ldi	r20, 0x02	; 2
    1f6c:	64 e0       	ldi	r22, 0x04	; 4
    1f6e:	8b e1       	ldi	r24, 0x1B	; 27
    1f70:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	42 e0       	ldi	r20, 0x02	; 2
    1f78:	64 e0       	ldi	r22, 0x04	; 4
    1f7a:	8c e1       	ldi	r24, 0x1C	; 28
    1f7c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <mpu6050_writeBits>
    1f80:	08 95       	ret

00001f82 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1f82:	0f 93       	push	r16
    1f84:	fc 01       	movw	r30, r24
    1f86:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    1f88:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1f8a:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1f8c:	96 a9       	ldd	r25, Z+54	; 0x36
    1f8e:	94 17       	cp	r25, r20
    1f90:	38 f0       	brcs	.+14     	; 0x1fa0 <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    1f92:	08 17       	cp	r16, r24
    1f94:	68 f4       	brcc	.+26     	; 0x1fb0 <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	04 17       	cp	r16, r20
    1f9a:	40 f0       	brcs	.+16     	; 0x1fac <u8g_IsBBXIntersection+0x2a>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	06 c0       	rjmp	.+12     	; 0x1fac <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1fa0:	08 17       	cp	r16, r24
    1fa2:	d0 f0       	brcs	.+52     	; 0x1fd8 <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	04 17       	cp	r16, r20
    1fa8:	08 f0       	brcs	.+2      	; 0x1fac <u8g_IsBBXIntersection+0x2a>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1fac:	88 23       	and	r24, r24
    1fae:	c9 f0       	breq	.+50     	; 0x1fe2 <u8g_IsBBXIntersection+0x60>
    1fb0:	21 50       	subi	r18, 0x01	; 1
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    1fb2:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    1fb4:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1fb6:	95 a9       	ldd	r25, Z+53	; 0x35
    1fb8:	96 17       	cp	r25, r22
    1fba:	38 f0       	brcs	.+14     	; 0x1fca <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    1fbc:	28 17       	cp	r18, r24
    1fbe:	70 f4       	brcc	.+28     	; 0x1fdc <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	26 17       	cp	r18, r22
    1fc4:	70 f0       	brcs	.+28     	; 0x1fe2 <u8g_IsBBXIntersection+0x60>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	0c c0       	rjmp	.+24     	; 0x1fe2 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1fca:	28 17       	cp	r18, r24
    1fcc:	48 f0       	brcs	.+18     	; 0x1fe0 <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	26 17       	cp	r18, r22
    1fd2:	38 f0       	brcs	.+14     	; 0x1fe2 <u8g_IsBBXIntersection+0x60>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	03 c0       	rjmp	.+6      	; 0x1fe2 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    1fe6:	db 01       	movw	r26, r22
    1fe8:	14 96       	adiw	r26, 0x04	; 4
    1fea:	ed 91       	ld	r30, X+
    1fec:	fc 91       	ld	r31, X
    1fee:	15 97       	sbiw	r26, 0x05	; 5
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	09 95       	icall
    1ff8:	08 95       	ret

00001ffa <u8g_SetChipSelect>:
    1ffa:	db 01       	movw	r26, r22
    1ffc:	14 96       	adiw	r26, 0x04	; 4
    1ffe:	ed 91       	ld	r30, X+
    2000:	fc 91       	ld	r31, X
    2002:	15 97       	sbiw	r26, 0x05	; 5
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	63 e0       	ldi	r22, 0x03	; 3
    200a:	09 95       	icall
    200c:	08 95       	ret

0000200e <u8g_SetResetLow>:
    200e:	db 01       	movw	r26, r22
    2010:	14 96       	adiw	r26, 0x04	; 4
    2012:	ed 91       	ld	r30, X+
    2014:	fc 91       	ld	r31, X
    2016:	15 97       	sbiw	r26, 0x05	; 5
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	64 e0       	ldi	r22, 0x04	; 4
    2020:	09 95       	icall
    2022:	08 95       	ret

00002024 <u8g_SetResetHigh>:
    2024:	db 01       	movw	r26, r22
    2026:	14 96       	adiw	r26, 0x04	; 4
    2028:	ed 91       	ld	r30, X+
    202a:	fc 91       	ld	r31, X
    202c:	15 97       	sbiw	r26, 0x05	; 5
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	64 e0       	ldi	r22, 0x04	; 4
    2036:	09 95       	icall
    2038:	08 95       	ret

0000203a <u8g_SetAddress>:
    203a:	db 01       	movw	r26, r22
    203c:	14 96       	adiw	r26, 0x04	; 4
    203e:	ed 91       	ld	r30, X+
    2040:	fc 91       	ld	r31, X
    2042:	15 97       	sbiw	r26, 0x05	; 5
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	62 e0       	ldi	r22, 0x02	; 2
    204a:	09 95       	icall
    204c:	08 95       	ret

0000204e <u8g_WriteByte>:
    204e:	db 01       	movw	r26, r22
    2050:	14 96       	adiw	r26, 0x04	; 4
    2052:	ed 91       	ld	r30, X+
    2054:	fc 91       	ld	r31, X
    2056:	15 97       	sbiw	r26, 0x05	; 5
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	65 e0       	ldi	r22, 0x05	; 5
    205e:	09 95       	icall
    2060:	08 95       	ret

00002062 <u8g_WriteSequence>:
    2062:	db 01       	movw	r26, r22
    2064:	14 96       	adiw	r26, 0x04	; 4
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	15 97       	sbiw	r26, 0x05	; 5
    206c:	66 e0       	ldi	r22, 0x06	; 6
    206e:	09 95       	icall
    2070:	08 95       	ret

00002072 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    2072:	af 92       	push	r10
    2074:	bf 92       	push	r11
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	6c 01       	movw	r12, r24
    2088:	7b 01       	movw	r14, r22
    208a:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    208c:	d0 e0       	ldi	r29, 0x00	; 0
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    208e:	b1 2c       	mov	r11, r1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    2090:	aa 24       	eor	r10, r10
    2092:	a3 94       	inc	r10
{
  uint8_t is_escape = 0;
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    2094:	f8 01       	movw	r30, r16
    2096:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    2098:	d1 11       	cpse	r29, r1
    209a:	0b c0       	rjmp	.+22     	; 0x20b2 <u8g_WriteEscSeqP+0x40>
    {
      if ( value != 255 )
    209c:	cf 3f       	cpi	r28, 0xFF	; 255
    209e:	09 f4       	brne	.+2      	; 0x20a2 <u8g_WriteEscSeqP+0x30>
    20a0:	4a c0       	rjmp	.+148    	; 0x2136 <u8g_WriteEscSeqP+0xc4>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    20a2:	4c 2f       	mov	r20, r28
    20a4:	b7 01       	movw	r22, r14
    20a6:	c6 01       	movw	r24, r12
    20a8:	0e 94 27 10 	call	0x204e	; 0x204e <u8g_WriteByte>
    20ac:	81 11       	cpse	r24, r1
    20ae:	48 c0       	rjmp	.+144    	; 0x2140 <u8g_WriteEscSeqP+0xce>
    20b0:	4b c0       	rjmp	.+150    	; 0x2148 <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    20b2:	cf 3f       	cpi	r28, 0xFF	; 255
    20b4:	51 f4       	brne	.+20     	; 0x20ca <u8g_WriteEscSeqP+0x58>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    20b6:	4f ef       	ldi	r20, 0xFF	; 255
    20b8:	b7 01       	movw	r22, r14
    20ba:	c6 01       	movw	r24, r12
    20bc:	0e 94 27 10 	call	0x204e	; 0x204e <u8g_WriteByte>
    20c0:	88 23       	and	r24, r24
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <u8g_WriteEscSeqP+0x54>
    20c4:	41 c0       	rjmp	.+130    	; 0x2148 <u8g_WriteEscSeqP+0xd6>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    20c6:	db 2d       	mov	r29, r11
    20c8:	3b c0       	rjmp	.+118    	; 0x2140 <u8g_WriteEscSeqP+0xce>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    20ca:	ce 3f       	cpi	r28, 0xFE	; 254
    20cc:	e1 f1       	breq	.+120    	; 0x2146 <u8g_WriteEscSeqP+0xd4>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    20ce:	c0 3f       	cpi	r28, 0xF0	; 240
    20d0:	a0 f5       	brcc	.+104    	; 0x213a <u8g_WriteEscSeqP+0xc8>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    20d2:	c0 3e       	cpi	r28, 0xE0	; 224
    20d4:	40 f0       	brcs	.+16     	; 0x20e6 <u8g_WriteEscSeqP+0x74>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    20d6:	4c 2f       	mov	r20, r28
    20d8:	4f 70       	andi	r20, 0x0F	; 15
    20da:	b7 01       	movw	r22, r14
    20dc:	c6 01       	movw	r24, r12
    20de:	0e 94 1d 10 	call	0x203a	; 0x203a <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    20e2:	db 2d       	mov	r29, r11
    20e4:	2d c0       	rjmp	.+90     	; 0x2140 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    20e6:	c0 3d       	cpi	r28, 0xD0	; 208
    20e8:	40 f0       	brcs	.+16     	; 0x20fa <u8g_WriteEscSeqP+0x88>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    20ea:	4c 2f       	mov	r20, r28
    20ec:	4f 70       	andi	r20, 0x0F	; 15
    20ee:	b7 01       	movw	r22, r14
    20f0:	c6 01       	movw	r24, r12
    20f2:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    20f6:	db 2d       	mov	r29, r11
    20f8:	23 c0       	rjmp	.+70     	; 0x2140 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    20fa:	c0 3c       	cpi	r28, 0xC0	; 192
    20fc:	a0 f0       	brcs	.+40     	; 0x2126 <u8g_WriteEscSeqP+0xb4>
      {
        u8g_SetResetLow(u8g, dev);
    20fe:	b7 01       	movw	r22, r14
    2100:	c6 01       	movw	r24, r12
    2102:	0e 94 07 10 	call	0x200e	; 0x200e <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    2106:	c2 95       	swap	r28
    2108:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
    210a:	ce 5f       	subi	r28, 0xFE	; 254
        u8g_Delay(value);
    210c:	d0 e0       	ldi	r29, 0x00	; 0
    210e:	ce 01       	movw	r24, r28
    2110:	0e 94 21 12 	call	0x2442	; 0x2442 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    2114:	b7 01       	movw	r22, r14
    2116:	c6 01       	movw	r24, r12
    2118:	0e 94 12 10 	call	0x2024	; 0x2024 <u8g_SetResetHigh>
        u8g_Delay(value);
    211c:	ce 01       	movw	r24, r28
    211e:	0e 94 21 12 	call	0x2442	; 0x2442 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    2122:	db 2d       	mov	r29, r11
    2124:	0d c0       	rjmp	.+26     	; 0x2140 <u8g_WriteEscSeqP+0xce>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    2126:	cc 23       	and	r28, r28
    2128:	54 f0       	brlt	.+20     	; 0x213e <u8g_WriteEscSeqP+0xcc>
      {
        u8g_Delay(value);
    212a:	8c 2f       	mov	r24, r28
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 21 12 	call	0x2442	; 0x2442 <u8g_Delay>
      }
      is_escape = 0;
    2132:	db 2d       	mov	r29, r11
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <u8g_WriteEscSeqP+0xce>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    2136:	da 2d       	mov	r29, r10
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    213a:	db 2d       	mov	r29, r11
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <u8g_WriteEscSeqP+0xce>
    213e:	db 2d       	mov	r29, r11
    }
    esc_seq++;
    2140:	0f 5f       	subi	r16, 0xFF	; 255
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    2144:	a7 cf       	rjmp	.-178    	; 0x2094 <u8g_WriteEscSeqP+0x22>
  return 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
}
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	ef 90       	pop	r14
    2154:	df 90       	pop	r13
    2156:	cf 90       	pop	r12
    2158:	bf 90       	pop	r11
    215a:	af 90       	pop	r10
    215c:	08 95       	ret

0000215e <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    2162:	fc 01       	movw	r30, r24
    2164:	23 a5       	ldd	r18, Z+43	; 0x2b
    2166:	22 23       	and	r18, r18
    2168:	b1 f0       	breq	.+44     	; 0x2196 <u8g_com_arduino_ssd_start_sequence+0x38>
    216a:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    216c:	88 e7       	ldi	r24, 0x78	; 120
    216e:	0e 94 b9 11 	call	0x2372	; 0x2372 <u8g_i2c_start>
    2172:	88 23       	and	r24, r24
    2174:	89 f0       	breq	.+34     	; 0x2198 <u8g_com_arduino_ssd_start_sequence+0x3a>
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    2176:	8e a1       	ldd	r24, Y+38	; 0x26
    2178:	81 11       	cpse	r24, r1
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    217c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <u8g_i2c_send_byte>
    2180:	81 11       	cpse	r24, r1
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <u8g_com_arduino_ssd_start_sequence+0x32>
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    2186:	80 e4       	ldi	r24, 0x40	; 64
    2188:	0e 94 f6 11 	call	0x23ec	; 0x23ec <u8g_i2c_send_byte>
    218c:	88 23       	and	r24, r24
    218e:	21 f0       	breq	.+8      	; 0x2198 <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    2190:	1b a6       	std	Y+43, r1	; 0x2b
  return 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <u8g_com_arduino_ssd_start_sequence+0x3a>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    2196:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	08 95       	ret

0000219e <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	e4 2e       	mov	r14, r20
    21ae:	89 01       	movw	r16, r18
  switch(msg)
    21b0:	63 30       	cpi	r22, 0x03	; 3
    21b2:	b1 f0       	breq	.+44     	; 0x21e0 <u8g_com_arduino_ssd_i2c_fn+0x42>
    21b4:	30 f4       	brcc	.+12     	; 0x21c2 <u8g_com_arduino_ssd_i2c_fn+0x24>
    21b6:	61 30       	cpi	r22, 0x01	; 1
    21b8:	69 f0       	breq	.+26     	; 0x21d4 <u8g_com_arduino_ssd_i2c_fn+0x36>
    21ba:	62 30       	cpi	r22, 0x02	; 2
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <u8g_com_arduino_ssd_i2c_fn+0x22>
    21be:	6f c0       	rjmp	.+222    	; 0x229e <u8g_com_arduino_ssd_i2c_fn+0x100>
    21c0:	74 c0       	rjmp	.+232    	; 0x22aa <u8g_com_arduino_ssd_i2c_fn+0x10c>
    21c2:	66 30       	cpi	r22, 0x06	; 6
    21c4:	41 f1       	breq	.+80     	; 0x2216 <u8g_com_arduino_ssd_i2c_fn+0x78>
    21c6:	67 30       	cpi	r22, 0x07	; 7
    21c8:	09 f4       	brne	.+2      	; 0x21cc <u8g_com_arduino_ssd_i2c_fn+0x2e>
    21ca:	48 c0       	rjmp	.+144    	; 0x225c <u8g_com_arduino_ssd_i2c_fn+0xbe>
    21cc:	65 30       	cpi	r22, 0x05	; 5
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <u8g_com_arduino_ssd_i2c_fn+0x34>
    21d0:	6c c0       	rjmp	.+216    	; 0x22aa <u8g_com_arduino_ssd_i2c_fn+0x10c>
    21d2:	10 c0       	rjmp	.+32     	; 0x21f4 <u8g_com_arduino_ssd_i2c_fn+0x56>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    21d4:	fc 01       	movw	r30, r24
    21d6:	86 a5       	ldd	r24, Z+46	; 0x2e
    21d8:	0e 94 71 11 	call	0x22e2	; 0x22e2 <u8g_i2c_init>
      }
      */
#endif
      break;
  }
  return 1;
    21dc:	c1 e0       	ldi	r28, 0x01	; 1
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);

      break;
    21de:	6a c0       	rjmp	.+212    	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    21e0:	fc 01       	movw	r30, r24
    21e2:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    21e4:	21 e0       	ldi	r18, 0x01	; 1
    21e6:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    21e8:	41 11       	cpse	r20, r1
    21ea:	61 c0       	rjmp	.+194    	; 0x22ae <u8g_com_arduino_ssd_i2c_fn+0x110>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    21ec:	0e 94 19 12 	call	0x2432	; 0x2432 <u8g_i2c_stop>
      }
      */
#endif
      break;
  }
  return 1;
    21f0:	c1 e0       	ldi	r28, 0x01	; 1
    21f2:	60 c0       	rjmp	.+192    	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    21f4:	0e 94 af 10 	call	0x215e	; 0x215e <u8g_com_arduino_ssd_start_sequence>
    21f8:	c8 2f       	mov	r28, r24
    21fa:	81 11       	cpse	r24, r1
    21fc:	03 c0       	rjmp	.+6      	; 0x2204 <u8g_com_arduino_ssd_i2c_fn+0x66>
	return u8g_i2c_stop(), 0;
    21fe:	0e 94 19 12 	call	0x2432	; 0x2432 <u8g_i2c_stop>
    2202:	58 c0       	rjmp	.+176    	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    2204:	8e 2d       	mov	r24, r14
    2206:	0e 94 f6 11 	call	0x23ec	; 0x23ec <u8g_i2c_send_byte>
    220a:	c8 2f       	mov	r28, r24
    220c:	81 11       	cpse	r24, r1
    220e:	51 c0       	rjmp	.+162    	; 0x22b2 <u8g_com_arduino_ssd_i2c_fn+0x114>
	return u8g_i2c_stop(), 0;
    2210:	0e 94 19 12 	call	0x2432	; 0x2432 <u8g_i2c_stop>
    2214:	4f c0       	rjmp	.+158    	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    2216:	0e 94 af 10 	call	0x215e	; 0x215e <u8g_com_arduino_ssd_start_sequence>
    221a:	c8 2f       	mov	r28, r24
    221c:	88 23       	and	r24, r24
    221e:	21 f0       	breq	.+8      	; 0x2228 <u8g_com_arduino_ssd_i2c_fn+0x8a>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2220:	e1 10       	cpse	r14, r1
    2222:	05 c0       	rjmp	.+10     	; 0x222e <u8g_com_arduino_ssd_i2c_fn+0x90>
      }
      */
#endif
      break;
  }
  return 1;
    2224:	c1 e0       	ldi	r28, 0x01	; 1
    2226:	46 c0       	rjmp	.+140    	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    2228:	0e 94 19 12 	call	0x2432	; 0x2432 <u8g_i2c_stop>
    222c:	43 c0       	rjmp	.+134    	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
    222e:	68 01       	movw	r12, r16
    2230:	ea 94       	dec	r14
    2232:	8e 2d       	mov	r24, r14
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	08 0f       	add	r16, r24
    223a:	19 1f       	adc	r17, r25
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    223c:	f6 01       	movw	r30, r12
    223e:	81 91       	ld	r24, Z+
    2240:	6f 01       	movw	r12, r30
    2242:	0e 94 f6 11 	call	0x23ec	; 0x23ec <u8g_i2c_send_byte>
    2246:	c8 2f       	mov	r28, r24
    2248:	81 11       	cpse	r24, r1
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <u8g_com_arduino_ssd_i2c_fn+0xb4>
	    return u8g_i2c_stop(), 0;
    224c:	0e 94 19 12 	call	0x2432	; 0x2432 <u8g_i2c_stop>
    2250:	31 c0       	rjmp	.+98     	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2252:	c0 16       	cp	r12, r16
    2254:	d1 06       	cpc	r13, r17
    2256:	91 f7       	brne	.-28     	; 0x223c <u8g_com_arduino_ssd_i2c_fn+0x9e>
      }
      */
#endif
      break;
  }
  return 1;
    2258:	c1 e0       	ldi	r28, 0x01	; 1
    225a:	2c c0       	rjmp	.+88     	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    225c:	0e 94 af 10 	call	0x215e	; 0x215e <u8g_com_arduino_ssd_start_sequence>
    2260:	c8 2f       	mov	r28, r24
    2262:	88 23       	and	r24, r24
    2264:	21 f0       	breq	.+8      	; 0x226e <u8g_com_arduino_ssd_i2c_fn+0xd0>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2266:	e1 10       	cpse	r14, r1
    2268:	05 c0       	rjmp	.+10     	; 0x2274 <u8g_com_arduino_ssd_i2c_fn+0xd6>
      }
      */
#endif
      break;
  }
  return 1;
    226a:	c1 e0       	ldi	r28, 0x01	; 1
    226c:	23 c0       	rjmp	.+70     	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    226e:	0e 94 19 12 	call	0x2432	; 0x2432 <u8g_i2c_stop>
    2272:	20 c0       	rjmp	.+64     	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
    2274:	ea 94       	dec	r14
    2276:	f1 2c       	mov	r15, r1
    2278:	ff ef       	ldi	r31, 0xFF	; 255
    227a:	ef 1a       	sub	r14, r31
    227c:	ff 0a       	sbc	r15, r31
    227e:	e0 0e       	add	r14, r16
    2280:	f1 1e       	adc	r15, r17
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    2282:	f8 01       	movw	r30, r16
    2284:	84 91       	lpm	r24, Z
    2286:	0e 94 f6 11 	call	0x23ec	; 0x23ec <u8g_i2c_send_byte>
    228a:	c8 2f       	mov	r28, r24
    228c:	88 23       	and	r24, r24
    228e:	91 f0       	breq	.+36     	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
	    return 0;
          ptr++;
    2290:	0f 5f       	subi	r16, 0xFF	; 255
    2292:	1f 4f       	sbci	r17, 0xFF	; 255
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2294:	0e 15       	cp	r16, r14
    2296:	1f 05       	cpc	r17, r15
    2298:	a1 f7       	brne	.-24     	; 0x2282 <u8g_com_arduino_ssd_i2c_fn+0xe4>
      }
      */
#endif
      break;
  }
  return 1;
    229a:	c1 e0       	ldi	r28, 0x01	; 1
    229c:	0b c0       	rjmp	.+22     	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    229e:	fc 01       	movw	r30, r24
    22a0:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    22a2:	21 e0       	ldi	r18, 0x01	; 1
    22a4:	23 a7       	std	Z+43, r18	; 0x2b
      }
      */
#endif
      break;
  }
  return 1;
    22a6:	c1 e0       	ldi	r28, 0x01	; 1
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
  }
  return 1;
    22aa:	c1 e0       	ldi	r28, 0x01	; 1
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
    22ae:	c1 e0       	ldi	r28, 0x01	; 1
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <u8g_com_arduino_ssd_i2c_fn+0x116>
    22b2:	c1 e0       	ldi	r28, 0x01	; 1
}
    22b4:	8c 2f       	mov	r24, r28
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	df 90       	pop	r13
    22c2:	cf 90       	pop	r12
    22c4:	08 95       	ret

000022c6 <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    22c6:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <u8g_i2c_err_code>
    22ca:	91 11       	cpse	r25, r1
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <u8g_i2c_set_error+0x10>
    22ce:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <u8g_i2c_err_code>
    22d2:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <u8g_i2c_err_pos>
    22d6:	08 95       	ret

000022d8 <u8g_i2c_clear_error>:
    22d8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <u8g_i2c_err_code>
    22dc:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <u8g_i2c_err_pos>
    22e0:	08 95       	ret

000022e2 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    22e2:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <u8g_i2c_opt>
  TWSR = 0;
    22e6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    22ea:	84 ff       	sbrs	r24, 4
    22ec:	04 c0       	rjmp	.+8      	; 0x22f6 <u8g_i2c_init+0x14>
  {
    TWBR = F_CPU/(2*400000)-8;
    22ee:	8c e0       	ldi	r24, 0x0C	; 12
    22f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <u8g_i2c_init+0x1a>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    22f6:	88 e4       	ldi	r24, 0x48	; 72
    22f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    22fc:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <u8g_i2c_clear_error>
    2300:	08 95       	ret

00002302 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	00 d0       	rcall	.+0      	; 0x230a <u8g_i2c_wait+0x8>
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    230e:	20 ed       	ldi	r18, 0xD0	; 208
    2310:	37 e0       	ldi	r19, 0x07	; 7
    2312:	3a 83       	std	Y+2, r19	; 0x02
    2314:	29 83       	std	Y+1, r18	; 0x01
  while( !(TWCR & mask) )
    2316:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    231a:	98 23       	and	r25, r24
    231c:	01 f5       	brne	.+64     	; 0x235e <u8g_i2c_wait+0x5c>
  {
      if ( cnt == 0 )
    231e:	29 81       	ldd	r18, Y+1	; 0x01
    2320:	3a 81       	ldd	r19, Y+2	; 0x02
    2322:	23 2b       	or	r18, r19
    2324:	39 f0       	breq	.+14     	; 0x2334 <u8g_i2c_wait+0x32>
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    2326:	ec eb       	ldi	r30, 0xBC	; 188
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	0e c0       	rjmp	.+28     	; 0x2348 <u8g_i2c_wait+0x46>
  {
      if ( cnt == 0 )
    232c:	29 81       	ldd	r18, Y+1	; 0x01
    232e:	3a 81       	ldd	r19, Y+2	; 0x02
    2330:	23 2b       	or	r18, r19
    2332:	51 f4       	brne	.+20     	; 0x2348 <u8g_i2c_wait+0x46>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2334:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <u8g_i2c_opt>
    2338:	18 2f       	mov	r17, r24
    233a:	12 70       	andi	r17, 0x02	; 2
    233c:	81 fd       	sbrc	r24, 1
    233e:	11 c0       	rjmp	.+34     	; 0x2362 <u8g_i2c_wait+0x60>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	0e 94 63 11 	call	0x22c6	; 0x22c6 <u8g_i2c_set_error>
	  return 0; /* error */
    2346:	0e c0       	rjmp	.+28     	; 0x2364 <u8g_i2c_wait+0x62>
	}
      }
      cnt--;
    2348:	29 81       	ldd	r18, Y+1	; 0x01
    234a:	3a 81       	ldd	r19, Y+2	; 0x02
    234c:	21 50       	subi	r18, 0x01	; 1
    234e:	31 09       	sbc	r19, r1
    2350:	3a 83       	std	Y+2, r19	; 0x02
    2352:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    2354:	90 81       	ld	r25, Z
    2356:	98 23       	and	r25, r24
    2358:	49 f3       	breq	.-46     	; 0x232c <u8g_i2c_wait+0x2a>
	  return 0; /* error */
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
    235a:	11 e0       	ldi	r17, 0x01	; 1
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <u8g_i2c_wait+0x62>
    235e:	11 e0       	ldi	r17, 0x01	; 1
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <u8g_i2c_wait+0x62>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    2362:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    2364:	81 2f       	mov	r24, r17
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	08 95       	ret

00002372 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	d8 2f       	mov	r29, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    2378:	94 ea       	ldi	r25, 0xA4	; 164
    237a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	80 e8       	ldi	r24, 0x80	; 128
    2382:	0e 94 81 11 	call	0x2302	; 0x2302 <u8g_i2c_wait>
    2386:	c8 2f       	mov	r28, r24
    2388:	88 23       	and	r24, r24
    238a:	61 f1       	breq	.+88     	; 0x23e4 <u8g_i2c_start+0x72>
    return 0;
  
  status = TW_STATUS;
    238c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2390:	98 7f       	andi	r25, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    2392:	98 30       	cpi	r25, 0x08	; 8
    2394:	41 f0       	breq	.+16     	; 0x23a6 <u8g_i2c_start+0x34>
    2396:	90 31       	cpi	r25, 0x10	; 16
    2398:	31 f0       	breq	.+12     	; 0x23a6 <u8g_i2c_start+0x34>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    239a:	61 e0       	ldi	r22, 0x01	; 1
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <u8g_i2c_set_error>
    return 0;
    23a2:	c0 e0       	ldi	r28, 0x00	; 0
    23a4:	1f c0       	rjmp	.+62     	; 0x23e4 <u8g_i2c_start+0x72>
  }

  /* set slave address */  
  TWDR = sla;
    23a6:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    23aa:	84 e8       	ldi	r24, 0x84	; 132
    23ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	80 e8       	ldi	r24, 0x80	; 128
    23b4:	0e 94 81 11 	call	0x2302	; 0x2302 <u8g_i2c_wait>
    23b8:	c8 2f       	mov	r28, r24
    23ba:	88 23       	and	r24, r24
    23bc:	99 f0       	breq	.+38     	; 0x23e4 <u8g_i2c_start+0x72>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    23be:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <u8g_i2c_opt>
    23c2:	c8 2f       	mov	r28, r24
    23c4:	c2 70       	andi	r28, 0x02	; 2
    23c6:	81 fd       	sbrc	r24, 1
    23c8:	0a c0       	rjmp	.+20     	; 0x23de <u8g_i2c_start+0x6c>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    23ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    23ce:	88 7f       	andi	r24, 0xF8	; 248
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    23d0:	88 31       	cpi	r24, 0x18	; 24
    23d2:	39 f0       	breq	.+14     	; 0x23e2 <u8g_i2c_start+0x70>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    23d4:	62 e0       	ldi	r22, 0x02	; 2
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <u8g_i2c_set_error>
      return 0;
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <u8g_i2c_start+0x72>
    }
  }

   return 1;
    23de:	c1 e0       	ldi	r28, 0x01	; 1
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <u8g_i2c_start+0x72>
    23e2:	c1 e0       	ldi	r28, 0x01	; 1
}
    23e4:	8c 2f       	mov	r24, r28
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	08 95       	ret

000023ec <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    23ec:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    23ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    23f2:	84 e8       	ldi	r24, 0x84	; 132
    23f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    23f8:	63 e0       	ldi	r22, 0x03	; 3
    23fa:	80 e8       	ldi	r24, 0x80	; 128
    23fc:	0e 94 81 11 	call	0x2302	; 0x2302 <u8g_i2c_wait>
    2400:	c8 2f       	mov	r28, r24
    2402:	88 23       	and	r24, r24
    2404:	99 f0       	breq	.+38     	; 0x242c <u8g_i2c_send_byte+0x40>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2406:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <u8g_i2c_opt>
    240a:	c8 2f       	mov	r28, r24
    240c:	c2 70       	andi	r28, 0x02	; 2
    240e:	81 fd       	sbrc	r24, 1
    2410:	0a c0       	rjmp	.+20     	; 0x2426 <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    2412:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2416:	88 7f       	andi	r24, 0xF8	; 248
    if ( status != TW_MT_DATA_ACK )
    2418:	88 32       	cpi	r24, 0x28	; 40
    241a:	39 f0       	breq	.+14     	; 0x242a <u8g_i2c_send_byte+0x3e>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    241c:	63 e0       	ldi	r22, 0x03	; 3
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	0e 94 63 11 	call	0x22c6	; 0x22c6 <u8g_i2c_set_error>
      return 0;
    2424:	03 c0       	rjmp	.+6      	; 0x242c <u8g_i2c_send_byte+0x40>
    }
  }

  return 1;  
    2426:	c1 e0       	ldi	r28, 0x01	; 1
    2428:	01 c0       	rjmp	.+2      	; 0x242c <u8g_i2c_send_byte+0x40>
    242a:	c1 e0       	ldi	r28, 0x01	; 1
}
    242c:	8c 2f       	mov	r24, r28
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    2432:	84 e9       	ldi	r24, 0x94	; 148
    2434:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    2438:	64 e0       	ldi	r22, 0x04	; 4
    243a:	80 e1       	ldi	r24, 0x10	; 16
    243c:	0e 94 81 11 	call	0x2302	; 0x2302 <u8g_i2c_wait>
    2440:	08 95       	ret

00002442 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	39 f0       	breq	.+14     	; 0x2454 <u8g_Delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2446:	2e e9       	ldi	r18, 0x9E	; 158
    2448:	3f e0       	ldi	r19, 0x0F	; 15
    244a:	f9 01       	movw	r30, r18
    244c:	31 97       	sbiw	r30, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    2450:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    2452:	d9 f7       	brne	.-10     	; 0x244a <u8g_Delay+0x8>
    2454:	08 95       	ret

00002456 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2456:	af 92       	push	r10
    2458:	bf 92       	push	r11
    245a:	cf 92       	push	r12
    245c:	df 92       	push	r13
    245e:	ef 92       	push	r14
    2460:	ff 92       	push	r15
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	7c 01       	movw	r14, r24
    246a:	8b 01       	movw	r16, r22
    246c:	c4 2f       	mov	r28, r20
    246e:	69 01       	movw	r12, r18
  switch(msg)
    2470:	40 31       	cpi	r20, 0x10	; 16
    2472:	99 f1       	breq	.+102    	; 0x24da <u8g_dev_ssd1306_128x64_fn+0x84>
    2474:	18 f4       	brcc	.+6      	; 0x247c <u8g_dev_ssd1306_128x64_fn+0x26>
    2476:	4a 30       	cpi	r20, 0x0A	; 10
    2478:	31 f0       	breq	.+12     	; 0x2486 <u8g_dev_ssd1306_128x64_fn+0x30>
    247a:	3b c0       	rjmp	.+118    	; 0x24f2 <u8g_dev_ssd1306_128x64_fn+0x9c>
    247c:	41 31       	cpi	r20, 0x11	; 17
    247e:	99 f1       	breq	.+102    	; 0x24e6 <u8g_dev_ssd1306_128x64_fn+0x90>
    2480:	45 31       	cpi	r20, 0x15	; 21
    2482:	59 f0       	breq	.+22     	; 0x249a <u8g_dev_ssd1306_128x64_fn+0x44>
    2484:	36 c0       	rjmp	.+108    	; 0x24f2 <u8g_dev_ssd1306_128x64_fn+0x9c>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    2486:	42 e0       	ldi	r20, 0x02	; 2
    2488:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    248c:	4c ee       	ldi	r20, 0xEC	; 236
    248e:	50 e0       	ldi	r21, 0x00	; 0
    2490:	b8 01       	movw	r22, r16
    2492:	c7 01       	movw	r24, r14
    2494:	0e 94 39 10 	call	0x2072	; 0x2072 <u8g_WriteEscSeqP>
      break;
    2498:	2c c0       	rjmp	.+88     	; 0x24f2 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    249a:	fb 01       	movw	r30, r22
    249c:	a2 80       	ldd	r10, Z+2	; 0x02
    249e:	b3 80       	ldd	r11, Z+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    24a0:	44 ee       	ldi	r20, 0xE4	; 228
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	0e 94 39 10 	call	0x2072	; 0x2072 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    24a8:	f5 01       	movw	r30, r10
    24aa:	44 81       	ldd	r20, Z+4	; 0x04
    24ac:	40 6b       	ori	r20, 0xB0	; 176
    24ae:	b8 01       	movw	r22, r16
    24b0:	c7 01       	movw	r24, r14
    24b2:	0e 94 27 10 	call	0x204e	; 0x204e <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	b8 01       	movw	r22, r16
    24ba:	c7 01       	movw	r24, r14
    24bc:	0e 94 1d 10 	call	0x203a	; 0x203a <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    24c0:	a8 01       	movw	r20, r16
    24c2:	b7 01       	movw	r22, r14
    24c4:	c5 01       	movw	r24, r10
    24c6:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <u8g_pb_WriteBuffer>
    24ca:	88 23       	and	r24, r24
    24cc:	c1 f0       	breq	.+48     	; 0x24fe <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	b8 01       	movw	r22, r16
    24d2:	c7 01       	movw	r24, r14
    24d4:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <u8g_SetChipSelect>
      }
      break;
    24d8:	0c c0       	rjmp	.+24     	; 0x24f2 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    24da:	4b ed       	ldi	r20, 0xDB	; 219
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	0e 94 39 10 	call	0x2072	; 0x2072 <u8g_WriteEscSeqP>
      return 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	0c c0       	rjmp	.+24     	; 0x24fe <u8g_dev_ssd1306_128x64_fn+0xa8>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    24e6:	40 ed       	ldi	r20, 0xD0	; 208
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	0e 94 39 10 	call	0x2072	; 0x2072 <u8g_WriteEscSeqP>
      return 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	06 c0       	rjmp	.+12     	; 0x24fe <u8g_dev_ssd1306_128x64_fn+0xa8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    24f2:	96 01       	movw	r18, r12
    24f4:	4c 2f       	mov	r20, r28
    24f6:	b8 01       	movw	r22, r16
    24f8:	c7 01       	movw	r24, r14
    24fa:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <u8g_dev_pb8v1_base_fn>
}
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	cf 90       	pop	r12
    250c:	bf 90       	pop	r11
    250e:	af 90       	pop	r10
    2510:	08 95       	ret

00002512 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    2512:	fc 01       	movw	r30, r24
    2514:	e6 0f       	add	r30, r22
    2516:	f1 1d       	adc	r31, r1
    2518:	84 91       	lpm	r24, Z
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	98 2f       	mov	r25, r24
    251e:	88 27       	eor	r24, r24
    2520:	31 96       	adiw	r30, 0x01	; 1
    2522:	e4 91       	lpm	r30, Z
    2524:	8e 0f       	add	r24, r30
    2526:	91 1d       	adc	r25, r1
    2528:	08 95       	ret

0000252a <u8g_font_GetFormat>:
    252a:	fc 01       	movw	r30, r24
    252c:	84 91       	lpm	r24, Z
    252e:	08 95       	ret

00002530 <u8g_font_GetFontGlyphStructureSize>:
    2530:	0e 94 95 12 	call	0x252a	; 0x252a <u8g_font_GetFormat>
    2534:	88 23       	and	r24, r24
    2536:	21 f0       	breq	.+8      	; 0x2540 <u8g_font_GetFontGlyphStructureSize+0x10>
    2538:	82 30       	cpi	r24, 0x02	; 2
    253a:	11 f0       	breq	.+4      	; 0x2540 <u8g_font_GetFontGlyphStructureSize+0x10>
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	08 95       	ret
    2540:	86 e0       	ldi	r24, 0x06	; 6
    2542:	08 95       	ret

00002544 <u8g_font_calc_vref_font>:
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	08 95       	ret

00002548 <u8g_font_GetEncoding65Pos>:
    2548:	66 e0       	ldi	r22, 0x06	; 6
    254a:	0e 94 89 12 	call	0x2512	; 0x2512 <u8g_font_get_word>
    254e:	08 95       	ret

00002550 <u8g_font_GetEncoding97Pos>:
    2550:	68 e0       	ldi	r22, 0x08	; 8
    2552:	0e 94 89 12 	call	0x2512	; 0x2512 <u8g_font_get_word>
    2556:	08 95       	ret

00002558 <u8g_font_GetFontStartEncoding>:
    2558:	0a 96       	adiw	r24, 0x0a	; 10
    255a:	fc 01       	movw	r30, r24
    255c:	84 91       	lpm	r24, Z
    255e:	08 95       	ret

00002560 <u8g_font_GetFontEndEncoding>:
    2560:	0b 96       	adiw	r24, 0x0b	; 11
    2562:	fc 01       	movw	r30, r24
    2564:	84 91       	lpm	r24, Z
    2566:	08 95       	ret

00002568 <u8g_GetGlyph>:
    2568:	af 92       	push	r10
    256a:	bf 92       	push	r11
    256c:	cf 92       	push	r12
    256e:	df 92       	push	r13
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	7c 01       	movw	r14, r24
    257e:	b6 2e       	mov	r11, r22
    2580:	dc 01       	movw	r26, r24
    2582:	14 96       	adiw	r26, 0x04	; 4
    2584:	cd 91       	ld	r28, X+
    2586:	dc 91       	ld	r29, X
    2588:	15 97       	sbiw	r26, 0x05	; 5
    258a:	ce 01       	movw	r24, r28
    258c:	0e 94 95 12 	call	0x252a	; 0x252a <u8g_font_GetFormat>
    2590:	18 2f       	mov	r17, r24
    2592:	f7 01       	movw	r30, r14
    2594:	84 81       	ldd	r24, Z+4	; 0x04
    2596:	95 81       	ldd	r25, Z+5	; 0x05
    2598:	0e 94 98 12 	call	0x2530	; 0x2530 <u8g_font_GetFontGlyphStructureSize>
    259c:	d8 2e       	mov	r13, r24
    259e:	11 30       	cpi	r17, 0x01	; 1
    25a0:	29 f4       	brne	.+10     	; 0x25ac <u8g_GetGlyph+0x44>
    25a2:	0f 2e       	mov	r0, r31
    25a4:	ff e0       	ldi	r31, 0x0F	; 15
    25a6:	af 2e       	mov	r10, r31
    25a8:	f0 2d       	mov	r31, r0
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <u8g_GetGlyph+0x48>
    25ac:	aa 24       	eor	r10, r10
    25ae:	aa 94       	dec	r10
    25b0:	d7 01       	movw	r26, r14
    25b2:	14 96       	adiw	r26, 0x04	; 4
    25b4:	8d 91       	ld	r24, X+
    25b6:	9c 91       	ld	r25, X
    25b8:	15 97       	sbiw	r26, 0x05	; 5
    25ba:	0e 94 ac 12 	call	0x2558	; 0x2558 <u8g_font_GetFontStartEncoding>
    25be:	18 2f       	mov	r17, r24
    25c0:	f7 01       	movw	r30, r14
    25c2:	84 81       	ldd	r24, Z+4	; 0x04
    25c4:	95 81       	ldd	r25, Z+5	; 0x05
    25c6:	0e 94 b0 12 	call	0x2560	; 0x2560 <u8g_font_GetFontEndEncoding>
    25ca:	08 2f       	mov	r16, r24
    25cc:	d7 01       	movw	r26, r14
    25ce:	14 96       	adiw	r26, 0x04	; 4
    25d0:	8d 91       	ld	r24, X+
    25d2:	9c 91       	ld	r25, X
    25d4:	15 97       	sbiw	r26, 0x05	; 5
    25d6:	0e 94 a8 12 	call	0x2550	; 0x2550 <u8g_font_GetEncoding97Pos>
    25da:	b0 e6       	ldi	r27, 0x60	; 96
    25dc:	bb 15       	cp	r27, r11
    25de:	30 f4       	brcc	.+12     	; 0x25ec <u8g_GetGlyph+0x84>
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	21 f0       	breq	.+8      	; 0x25ec <u8g_GetGlyph+0x84>
    25e4:	c8 0f       	add	r28, r24
    25e6:	d9 1f       	adc	r29, r25
    25e8:	11 e6       	ldi	r17, 0x61	; 97
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <u8g_GetGlyph+0xa2>
    25ec:	f7 01       	movw	r30, r14
    25ee:	84 81       	ldd	r24, Z+4	; 0x04
    25f0:	95 81       	ldd	r25, Z+5	; 0x05
    25f2:	0e 94 a4 12 	call	0x2548	; 0x2548 <u8g_font_GetEncoding65Pos>
    25f6:	f0 e4       	ldi	r31, 0x40	; 64
    25f8:	fb 15       	cp	r31, r11
    25fa:	30 f4       	brcc	.+12     	; 0x2608 <u8g_GetGlyph+0xa0>
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	21 f0       	breq	.+8      	; 0x2608 <u8g_GetGlyph+0xa0>
    2600:	c8 0f       	add	r28, r24
    2602:	d9 1f       	adc	r29, r25
    2604:	11 e4       	ldi	r17, 0x41	; 65
    2606:	01 c0       	rjmp	.+2      	; 0x260a <u8g_GetGlyph+0xa2>
    2608:	61 96       	adiw	r28, 0x11	; 17
    260a:	0b 15       	cp	r16, r11
    260c:	90 f4       	brcc	.+36     	; 0x2632 <u8g_GetGlyph+0xca>
    260e:	d7 01       	movw	r26, r14
    2610:	50 96       	adiw	r26, 0x10	; 16
    2612:	1c 92       	st	X, r1
    2614:	50 97       	sbiw	r26, 0x10	; 16
    2616:	53 96       	adiw	r26, 0x13	; 19
    2618:	1c 92       	st	X, r1
    261a:	53 97       	sbiw	r26, 0x13	; 19
    261c:	54 96       	adiw	r26, 0x14	; 20
    261e:	1c 92       	st	X, r1
    2620:	54 97       	sbiw	r26, 0x14	; 20
    2622:	51 96       	adiw	r26, 0x11	; 17
    2624:	1c 92       	st	X, r1
    2626:	51 97       	sbiw	r26, 0x11	; 17
    2628:	52 96       	adiw	r26, 0x12	; 18
    262a:	1c 92       	st	X, r1
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	75 c0       	rjmp	.+234    	; 0x271c <u8g_GetGlyph+0x1b4>
    2632:	01 17       	cp	r16, r17
    2634:	08 f4       	brcc	.+2      	; 0x2638 <u8g_GetGlyph+0xd0>
    2636:	6a c0       	rjmp	.+212    	; 0x270c <u8g_GetGlyph+0x1a4>
    2638:	2d 2d       	mov	r18, r13
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	6e 01       	movw	r12, r28
    263e:	fe 01       	movw	r30, r28
    2640:	94 91       	lpm	r25, Z
    2642:	9f 3f       	cpi	r25, 0xFF	; 255
    2644:	11 f4       	brne	.+4      	; 0x264a <u8g_GetGlyph+0xe2>
    2646:	21 96       	adiw	r28, 0x01	; 1
    2648:	5d c0       	rjmp	.+186    	; 0x2704 <u8g_GetGlyph+0x19c>
    264a:	1b 11       	cpse	r17, r11
    264c:	52 c0       	rjmp	.+164    	; 0x26f2 <u8g_GetGlyph+0x18a>
    264e:	8e 01       	movw	r16, r28
    2650:	d7 01       	movw	r26, r14
    2652:	14 96       	adiw	r26, 0x04	; 4
    2654:	8d 91       	ld	r24, X+
    2656:	9c 91       	ld	r25, X
    2658:	15 97       	sbiw	r26, 0x05	; 5
    265a:	0e 94 95 12 	call	0x252a	; 0x252a <u8g_font_GetFormat>
    265e:	88 23       	and	r24, r24
    2660:	11 f0       	breq	.+4      	; 0x2666 <u8g_GetGlyph+0xfe>
    2662:	82 30       	cpi	r24, 0x02	; 2
    2664:	f1 f4       	brne	.+60     	; 0x26a2 <u8g_GetGlyph+0x13a>
    2666:	f6 01       	movw	r30, r12
    2668:	c4 90       	lpm	r12, Z
    266a:	d7 01       	movw	r26, r14
    266c:	53 96       	adiw	r26, 0x13	; 19
    266e:	cc 92       	st	X, r12
    2670:	53 97       	sbiw	r26, 0x13	; 19
    2672:	f8 01       	movw	r30, r16
    2674:	31 96       	adiw	r30, 0x01	; 1
    2676:	e4 91       	lpm	r30, Z
    2678:	54 96       	adiw	r26, 0x14	; 20
    267a:	ec 93       	st	X, r30
    267c:	54 97       	sbiw	r26, 0x14	; 20
    267e:	f8 01       	movw	r30, r16
    2680:	33 96       	adiw	r30, 0x03	; 3
    2682:	e4 91       	lpm	r30, Z
    2684:	50 96       	adiw	r26, 0x10	; 16
    2686:	ec 93       	st	X, r30
    2688:	50 97       	sbiw	r26, 0x10	; 16
    268a:	f8 01       	movw	r30, r16
    268c:	34 96       	adiw	r30, 0x04	; 4
    268e:	e4 91       	lpm	r30, Z
    2690:	51 96       	adiw	r26, 0x11	; 17
    2692:	ec 93       	st	X, r30
    2694:	51 97       	sbiw	r26, 0x11	; 17
    2696:	f8 01       	movw	r30, r16
    2698:	35 96       	adiw	r30, 0x05	; 5
    269a:	e4 91       	lpm	r30, Z
    269c:	52 96       	adiw	r26, 0x12	; 18
    269e:	ec 93       	st	X, r30
    26a0:	25 c0       	rjmp	.+74     	; 0x26ec <u8g_GetGlyph+0x184>
    26a2:	fe 01       	movw	r30, r28
    26a4:	84 91       	lpm	r24, Z
    26a6:	98 2f       	mov	r25, r24
    26a8:	9f 70       	andi	r25, 0x0F	; 15
    26aa:	92 50       	subi	r25, 0x02	; 2
    26ac:	d7 01       	movw	r26, r14
    26ae:	52 96       	adiw	r26, 0x12	; 18
    26b0:	9c 93       	st	X, r25
    26b2:	52 97       	sbiw	r26, 0x12	; 18
    26b4:	c8 2e       	mov	r12, r24
    26b6:	c6 94       	lsr	r12
    26b8:	c6 94       	lsr	r12
    26ba:	c6 94       	lsr	r12
    26bc:	c6 94       	lsr	r12
    26be:	51 96       	adiw	r26, 0x11	; 17
    26c0:	cc 92       	st	X, r12
    26c2:	51 97       	sbiw	r26, 0x11	; 17
    26c4:	fe 01       	movw	r30, r28
    26c6:	31 96       	adiw	r30, 0x01	; 1
    26c8:	e4 91       	lpm	r30, Z
    26ca:	8e 2f       	mov	r24, r30
    26cc:	8f 70       	andi	r24, 0x0F	; 15
    26ce:	54 96       	adiw	r26, 0x14	; 20
    26d0:	8c 93       	st	X, r24
    26d2:	54 97       	sbiw	r26, 0x14	; 20
    26d4:	e2 95       	swap	r30
    26d6:	ef 70       	andi	r30, 0x0F	; 15
    26d8:	53 96       	adiw	r26, 0x13	; 19
    26da:	ec 93       	st	X, r30
    26dc:	53 97       	sbiw	r26, 0x13	; 19
    26de:	fe 01       	movw	r30, r28
    26e0:	32 96       	adiw	r30, 0x02	; 2
    26e2:	e4 91       	lpm	r30, Z
    26e4:	e2 95       	swap	r30
    26e6:	ef 70       	andi	r30, 0x0F	; 15
    26e8:	50 96       	adiw	r26, 0x10	; 16
    26ea:	ec 93       	st	X, r30
    26ec:	8c 2f       	mov	r24, r28
    26ee:	9d 2f       	mov	r25, r29
    26f0:	15 c0       	rjmp	.+42     	; 0x271c <u8g_GetGlyph+0x1b4>
    26f2:	fe 01       	movw	r30, r28
    26f4:	32 96       	adiw	r30, 0x02	; 2
    26f6:	e4 91       	lpm	r30, Z
    26f8:	ea 21       	and	r30, r10
    26fa:	c9 01       	movw	r24, r18
    26fc:	8e 0f       	add	r24, r30
    26fe:	91 1d       	adc	r25, r1
    2700:	c8 0f       	add	r28, r24
    2702:	d9 1f       	adc	r29, r25
    2704:	10 17       	cp	r17, r16
    2706:	11 f0       	breq	.+4      	; 0x270c <u8g_GetGlyph+0x1a4>
    2708:	1f 5f       	subi	r17, 0xFF	; 255
    270a:	98 cf       	rjmp	.-208    	; 0x263c <u8g_GetGlyph+0xd4>
    270c:	f7 01       	movw	r30, r14
    270e:	10 8a       	std	Z+16, r1	; 0x10
    2710:	13 8a       	std	Z+19, r1	; 0x13
    2712:	14 8a       	std	Z+20, r1	; 0x14
    2714:	11 8a       	std	Z+17, r1	; 0x11
    2716:	12 8a       	std	Z+18, r1	; 0x12
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	df 90       	pop	r13
    272a:	cf 90       	pop	r12
    272c:	bf 90       	pop	r11
    272e:	af 90       	pop	r10
    2730:	08 95       	ret

00002732 <u8g_draw_glyph>:
    2732:	6f 92       	push	r6
    2734:	7f 92       	push	r7
    2736:	8f 92       	push	r8
    2738:	9f 92       	push	r9
    273a:	af 92       	push	r10
    273c:	bf 92       	push	r11
    273e:	cf 92       	push	r12
    2740:	df 92       	push	r13
    2742:	ef 92       	push	r14
    2744:	ff 92       	push	r15
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	5c 01       	movw	r10, r24
    2750:	16 2f       	mov	r17, r22
    2752:	64 2e       	mov	r6, r20
    2754:	62 2f       	mov	r22, r18
    2756:	0e 94 b4 12 	call	0x2568	; 0x2568 <u8g_GetGlyph>
    275a:	6c 01       	movw	r12, r24
    275c:	89 2b       	or	r24, r25
    275e:	09 f4       	brne	.+2      	; 0x2762 <u8g_draw_glyph+0x30>
    2760:	48 c0       	rjmp	.+144    	; 0x27f2 <u8g_draw_glyph+0xc0>
    2762:	f5 01       	movw	r30, r10
    2764:	84 81       	ldd	r24, Z+4	; 0x04
    2766:	95 81       	ldd	r25, Z+5	; 0x05
    2768:	0e 94 98 12 	call	0x2530	; 0x2530 <u8g_font_GetFontGlyphStructureSize>
    276c:	98 2e       	mov	r9, r24
    276e:	f5 01       	movw	r30, r10
    2770:	d3 89       	ldd	r29, Z+19	; 0x13
    2772:	c4 89       	ldd	r28, Z+20	; 0x14
    2774:	71 88       	ldd	r7, Z+17	; 0x11
    2776:	71 0e       	add	r7, r17
    2778:	92 89       	ldd	r25, Z+18	; 0x12
    277a:	69 1a       	sub	r6, r25
    277c:	f6 2c       	mov	r15, r6
    277e:	fc 1a       	sub	r15, r28
    2780:	0c 2f       	mov	r16, r28
    2782:	2d 2f       	mov	r18, r29
    2784:	4f 2d       	mov	r20, r15
    2786:	67 2d       	mov	r22, r7
    2788:	c5 01       	movw	r24, r10
    278a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <u8g_IsBBXIntersection>
    278e:	81 11       	cpse	r24, r1
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <u8g_draw_glyph+0x66>
    2792:	f5 01       	movw	r30, r10
    2794:	80 89       	ldd	r24, Z+16	; 0x10
    2796:	2e c0       	rjmp	.+92     	; 0x27f4 <u8g_draw_glyph+0xc2>
    2798:	d9 5f       	subi	r29, 0xF9	; 249
    279a:	ed 2e       	mov	r14, r29
    279c:	e6 94       	lsr	r14
    279e:	e6 94       	lsr	r14
    27a0:	e6 94       	lsr	r14
    27a2:	cc 23       	and	r28, r28
    27a4:	19 f1       	breq	.+70     	; 0x27ec <u8g_draw_glyph+0xba>
    27a6:	e6 01       	movw	r28, r12
    27a8:	c9 0d       	add	r28, r9
    27aa:	d1 1d       	adc	r29, r1
    27ac:	88 24       	eor	r8, r8
    27ae:	8a 94       	dec	r8
    27b0:	8e 0c       	add	r8, r14
    27b2:	91 2c       	mov	r9, r1
    27b4:	ff ef       	ldi	r31, 0xFF	; 255
    27b6:	8f 1a       	sub	r8, r31
    27b8:	9f 0a       	sbc	r9, r31
    27ba:	11 c0       	rjmp	.+34     	; 0x27de <u8g_draw_glyph+0xac>
    27bc:	fe 01       	movw	r30, r28
    27be:	04 91       	lpm	r16, Z
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	4f 2d       	mov	r20, r15
    27c4:	61 2f       	mov	r22, r17
    27c6:	c5 01       	movw	r24, r10
    27c8:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <u8g_Draw8Pixel>
    27cc:	21 96       	adiw	r28, 0x01	; 1
    27ce:	18 5f       	subi	r17, 0xF8	; 248
    27d0:	cc 15       	cp	r28, r12
    27d2:	dd 05       	cpc	r29, r13
    27d4:	99 f7       	brne	.-26     	; 0x27bc <u8g_draw_glyph+0x8a>
    27d6:	e6 01       	movw	r28, r12
    27d8:	f3 94       	inc	r15
    27da:	f6 14       	cp	r15, r6
    27dc:	39 f0       	breq	.+14     	; 0x27ec <u8g_draw_glyph+0xba>
    27de:	ee 20       	and	r14, r14
    27e0:	d9 f3       	breq	.-10     	; 0x27d8 <u8g_draw_glyph+0xa6>
    27e2:	6e 01       	movw	r12, r28
    27e4:	c8 0c       	add	r12, r8
    27e6:	d9 1c       	adc	r13, r9
    27e8:	17 2d       	mov	r17, r7
    27ea:	e8 cf       	rjmp	.-48     	; 0x27bc <u8g_draw_glyph+0x8a>
    27ec:	f5 01       	movw	r30, r10
    27ee:	80 89       	ldd	r24, Z+16	; 0x10
    27f0:	01 c0       	rjmp	.+2      	; 0x27f4 <u8g_draw_glyph+0xc2>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	ff 90       	pop	r15
    27fe:	ef 90       	pop	r14
    2800:	df 90       	pop	r13
    2802:	cf 90       	pop	r12
    2804:	bf 90       	pop	r11
    2806:	af 90       	pop	r10
    2808:	9f 90       	pop	r9
    280a:	8f 90       	pop	r8
    280c:	7f 90       	pop	r7
    280e:	6f 90       	pop	r6
    2810:	08 95       	ret

00002812 <u8g_DrawStr>:
    2812:	cf 92       	push	r12
    2814:	df 92       	push	r13
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	6c 01       	movw	r12, r24
    2822:	c6 2f       	mov	r28, r22
    2824:	f4 2e       	mov	r15, r20
    2826:	89 01       	movw	r16, r18
    2828:	dc 01       	movw	r26, r24
    282a:	55 96       	adiw	r26, 0x15	; 21
    282c:	ed 91       	ld	r30, X+
    282e:	fc 91       	ld	r31, X
    2830:	56 97       	sbiw	r26, 0x16	; 22
    2832:	09 95       	icall
    2834:	f8 0e       	add	r15, r24
    2836:	f8 01       	movw	r30, r16
    2838:	20 81       	ld	r18, Z
    283a:	22 23       	and	r18, r18
    283c:	81 f0       	breq	.+32     	; 0x285e <u8g_DrawStr+0x4c>
    283e:	0f 5f       	subi	r16, 0xFF	; 255
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
    2842:	d0 e0       	ldi	r29, 0x00	; 0
    2844:	4f 2d       	mov	r20, r15
    2846:	6c 2f       	mov	r22, r28
    2848:	c6 01       	movw	r24, r12
    284a:	0e 94 99 13 	call	0x2732	; 0x2732 <u8g_draw_glyph>
    284e:	c8 0f       	add	r28, r24
    2850:	d8 0f       	add	r29, r24
    2852:	d8 01       	movw	r26, r16
    2854:	2d 91       	ld	r18, X+
    2856:	8d 01       	movw	r16, r26
    2858:	21 11       	cpse	r18, r1
    285a:	f4 cf       	rjmp	.-24     	; 0x2844 <u8g_DrawStr+0x32>
    285c:	01 c0       	rjmp	.+2      	; 0x2860 <u8g_DrawStr+0x4e>
    285e:	d0 e0       	ldi	r29, 0x00	; 0
    2860:	8d 2f       	mov	r24, r29
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	df 90       	pop	r13
    286e:	cf 90       	pop	r12
    2870:	08 95       	ret

00002872 <u8g_UpdateRefHeight>:
    2872:	dc 01       	movw	r26, r24
    2874:	14 96       	adiw	r26, 0x04	; 4
    2876:	8d 91       	ld	r24, X+
    2878:	9c 91       	ld	r25, X
    287a:	15 97       	sbiw	r26, 0x05	; 5
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	09 f4       	brne	.+2      	; 0x2882 <u8g_UpdateRefHeight+0x10>
    2880:	4d c0       	rjmp	.+154    	; 0x291c <u8g_UpdateRefHeight+0xaa>
    2882:	57 96       	adiw	r26, 0x17	; 23
    2884:	2c 91       	ld	r18, X
    2886:	57 97       	sbiw	r26, 0x17	; 23
    2888:	21 11       	cpse	r18, r1
    288a:	0d c0       	rjmp	.+26     	; 0x28a6 <u8g_UpdateRefHeight+0x34>
    288c:	fc 01       	movw	r30, r24
    288e:	35 96       	adiw	r30, 0x05	; 5
    2890:	e4 91       	lpm	r30, Z
    2892:	58 96       	adiw	r26, 0x18	; 24
    2894:	ec 93       	st	X, r30
    2896:	58 97       	sbiw	r26, 0x18	; 24
    2898:	fc 01       	movw	r30, r24
    289a:	3c 96       	adiw	r30, 0x0c	; 12
    289c:	e4 91       	lpm	r30, Z
    289e:	59 96       	adiw	r26, 0x19	; 25
    28a0:	ec 93       	st	X, r30
    28a2:	59 97       	sbiw	r26, 0x19	; 25
    28a4:	1b c0       	rjmp	.+54     	; 0x28dc <u8g_UpdateRefHeight+0x6a>
    28a6:	21 30       	cpi	r18, 0x01	; 1
    28a8:	69 f4       	brne	.+26     	; 0x28c4 <u8g_UpdateRefHeight+0x52>
    28aa:	fc 01       	movw	r30, r24
    28ac:	3f 96       	adiw	r30, 0x0f	; 15
    28ae:	e4 91       	lpm	r30, Z
    28b0:	58 96       	adiw	r26, 0x18	; 24
    28b2:	ec 93       	st	X, r30
    28b4:	58 97       	sbiw	r26, 0x18	; 24
    28b6:	fc 01       	movw	r30, r24
    28b8:	70 96       	adiw	r30, 0x10	; 16
    28ba:	e4 91       	lpm	r30, Z
    28bc:	59 96       	adiw	r26, 0x19	; 25
    28be:	ec 93       	st	X, r30
    28c0:	59 97       	sbiw	r26, 0x19	; 25
    28c2:	0c c0       	rjmp	.+24     	; 0x28dc <u8g_UpdateRefHeight+0x6a>
    28c4:	fc 01       	movw	r30, r24
    28c6:	3d 96       	adiw	r30, 0x0d	; 13
    28c8:	e4 91       	lpm	r30, Z
    28ca:	58 96       	adiw	r26, 0x18	; 24
    28cc:	ec 93       	st	X, r30
    28ce:	58 97       	sbiw	r26, 0x18	; 24
    28d0:	fc 01       	movw	r30, r24
    28d2:	3e 96       	adiw	r30, 0x0e	; 14
    28d4:	e4 91       	lpm	r30, Z
    28d6:	59 96       	adiw	r26, 0x19	; 25
    28d8:	ec 93       	st	X, r30
    28da:	59 97       	sbiw	r26, 0x19	; 25
    28dc:	58 96       	adiw	r26, 0x18	; 24
    28de:	8c 91       	ld	r24, X
    28e0:	58 97       	sbiw	r26, 0x18	; 24
    28e2:	08 2e       	mov	r0, r24
    28e4:	00 0c       	add	r0, r0
    28e6:	99 0b       	sbc	r25, r25
    28e8:	59 96       	adiw	r26, 0x19	; 25
    28ea:	2c 91       	ld	r18, X
    28ec:	59 97       	sbiw	r26, 0x19	; 25
    28ee:	82 1b       	sub	r24, r18
    28f0:	91 09       	sbc	r25, r1
    28f2:	27 fd       	sbrc	r18, 7
    28f4:	93 95       	inc	r25
    28f6:	5a 96       	adiw	r26, 0x1a	; 26
    28f8:	2c 91       	ld	r18, X
    28fa:	5a 97       	sbiw	r26, 0x1a	; 26
    28fc:	20 34       	cpi	r18, 0x40	; 64
    28fe:	61 f0       	breq	.+24     	; 0x2918 <u8g_UpdateRefHeight+0xa6>
    2900:	82 9f       	mul	r24, r18
    2902:	c0 01       	movw	r24, r0
    2904:	11 24       	eor	r1, r1
    2906:	00 24       	eor	r0, r0
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	00 1c       	adc	r0, r0
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	00 1c       	adc	r0, r0
    2914:	89 2f       	mov	r24, r25
    2916:	90 2d       	mov	r25, r0
    2918:	5b 96       	adiw	r26, 0x1b	; 27
    291a:	8c 93       	st	X, r24
    291c:	08 95       	ret

0000291e <u8g_SetFontPosBaseline>:
    291e:	22 ea       	ldi	r18, 0xA2	; 162
    2920:	32 e1       	ldi	r19, 0x12	; 18
    2922:	fc 01       	movw	r30, r24
    2924:	36 8b       	std	Z+22, r19	; 0x16
    2926:	25 8b       	std	Z+21, r18	; 0x15
    2928:	08 95       	ret

0000292a <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
  if ( u8g->font != font )
    292e:	fc 01       	movw	r30, r24
    2930:	24 81       	ldd	r18, Z+4	; 0x04
    2932:	35 81       	ldd	r19, Z+5	; 0x05
    2934:	26 17       	cp	r18, r22
    2936:	37 07       	cpc	r19, r23
    2938:	49 f0       	breq	.+18     	; 0x294c <u8g_SetFont+0x22>
    293a:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    293c:	75 83       	std	Z+5, r23	; 0x05
    293e:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    2940:	0e 94 39 14 	call	0x2872	; 0x2872 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2944:	82 ea       	ldi	r24, 0xA2	; 162
    2946:	92 e1       	ldi	r25, 0x12	; 18
    2948:	9e 8b       	std	Y+22, r25	; 0x16
    294a:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	08 95       	ret

00002952 <u8g_init_data>:
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    2952:	1f 93       	push	r17
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	ec 01       	movw	r28, r24
    295a:	1d 82       	std	Y+5, r1	; 0x05
    295c:	1c 82       	std	Y+4, r1	; 0x04
    295e:	1f 82       	std	Y+7, r1	; 0x07
    2960:	1e 82       	std	Y+6, r1	; 0x06
    2962:	19 86       	std	Y+9, r1	; 0x09
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	88 87       	std	Y+8, r24	; 0x08
    2968:	82 e2       	ldi	r24, 0x22	; 34
    296a:	8a 87       	std	Y+10, r24	; 0x0a
    296c:	1f 86       	std	Y+15, r1	; 0x0f
    296e:	1e 86       	std	Y+14, r1	; 0x0e
    2970:	fe 01       	movw	r30, r28
    2972:	b3 96       	adiw	r30, 0x23	; 35
    2974:	9e 01       	movw	r18, r28
    2976:	2f 5c       	subi	r18, 0xCF	; 207
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	8f ef       	ldi	r24, 0xFF	; 255
    297c:	81 93       	st	Z+, r24
    297e:	e2 17       	cp	r30, r18
    2980:	f3 07       	cpc	r31, r19
    2982:	e1 f7       	brne	.-8      	; 0x297c <u8g_init_data+0x2a>
    2984:	11 e0       	ldi	r17, 0x01	; 1
    2986:	18 a3       	std	Y+32, r17	; 0x20
    2988:	ce 01       	movw	r24, r28
    298a:	0e 94 8f 14 	call	0x291e	; 0x291e <u8g_SetFontPosBaseline>
    298e:	1f 8b       	std	Y+23, r17	; 0x17
    2990:	18 8e       	std	Y+24, r1	; 0x18
    2992:	19 8e       	std	Y+25, r1	; 0x19
    2994:	80 e4       	ldi	r24, 0x40	; 64
    2996:	8a 8f       	std	Y+26, r24	; 0x1a
    2998:	1b 8e       	std	Y+27, r1	; 0x1b
    299a:	8a e1       	ldi	r24, 0x1A	; 26
    299c:	97 e1       	ldi	r25, 0x17	; 23
    299e:	9a ab       	std	Y+50, r25	; 0x32
    29a0:	89 ab       	std	Y+49, r24	; 0x31
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	08 95       	ret

000029aa <u8g_call_dev_fn>:
    29aa:	db 01       	movw	r26, r22
    29ac:	ed 91       	ld	r30, X+
    29ae:	fc 91       	ld	r31, X
    29b0:	09 95       	icall
    29b2:	08 95       	ret

000029b4 <u8g_InitLL>:
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	ec 01       	movw	r28, r24
    29be:	8b 01       	movw	r16, r22
    29c0:	e9 a9       	ldd	r30, Y+49	; 0x31
    29c2:	fa a9       	ldd	r31, Y+50	; 0x32
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	09 95       	icall
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	4a e0       	ldi	r20, 0x0A	; 10
    29ce:	b8 01       	movw	r22, r16
    29d0:	ce 01       	movw	r24, r28
    29d2:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    29d6:	18 2f       	mov	r17, r24
    29d8:	e9 a9       	ldd	r30, Y+49	; 0x31
    29da:	fa a9       	ldd	r31, Y+50	; 0x32
    29dc:	83 e0       	ldi	r24, 0x03	; 3
    29de:	09 95       	icall
    29e0:	e9 a9       	ldd	r30, Y+49	; 0x31
    29e2:	fa a9       	ldd	r31, Y+50	; 0x32
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	09 95       	icall
    29e8:	81 2f       	mov	r24, r17
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret

000029f4 <u8g_FirstPageLL>:
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	ec 01       	movw	r28, r24
    29fe:	8b 01       	movw	r16, r22
    2a00:	e9 a9       	ldd	r30, Y+49	; 0x31
    2a02:	fa a9       	ldd	r31, Y+50	; 0x32
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	09 95       	icall
    2a08:	e9 a9       	ldd	r30, Y+49	; 0x31
    2a0a:	fa a9       	ldd	r31, Y+50	; 0x32
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	09 95       	icall
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	44 e1       	ldi	r20, 0x14	; 20
    2a16:	b8 01       	movw	r22, r16
    2a18:	ce 01       	movw	r24, r28
    2a1a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2a1e:	9e 01       	movw	r18, r28
    2a20:	2d 5c       	subi	r18, 0xCD	; 205
    2a22:	3f 4f       	sbci	r19, 0xFF	; 255
    2a24:	47 e1       	ldi	r20, 0x17	; 23
    2a26:	b8 01       	movw	r22, r16
    2a28:	ce 01       	movw	r24, r28
    2a2a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2a2e:	e9 a9       	ldd	r30, Y+49	; 0x31
    2a30:	fa a9       	ldd	r31, Y+50	; 0x32
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	09 95       	icall
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	08 95       	ret

00002a40 <u8g_NextPageLL>:
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	1f 93       	push	r17
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	ec 01       	movw	r28, r24
    2a4c:	7b 01       	movw	r14, r22
    2a4e:	e9 a9       	ldd	r30, Y+49	; 0x31
    2a50:	fa a9       	ldd	r31, Y+50	; 0x32
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	09 95       	icall
    2a56:	e9 a9       	ldd	r30, Y+49	; 0x31
    2a58:	fa a9       	ldd	r31, Y+50	; 0x32
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	09 95       	icall
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	45 e1       	ldi	r20, 0x15	; 21
    2a64:	b7 01       	movw	r22, r14
    2a66:	ce 01       	movw	r24, r28
    2a68:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2a6c:	18 2f       	mov	r17, r24
    2a6e:	88 23       	and	r24, r24
    2a70:	41 f0       	breq	.+16     	; 0x2a82 <u8g_NextPageLL+0x42>
    2a72:	9e 01       	movw	r18, r28
    2a74:	2d 5c       	subi	r18, 0xCD	; 205
    2a76:	3f 4f       	sbci	r19, 0xFF	; 255
    2a78:	47 e1       	ldi	r20, 0x17	; 23
    2a7a:	b7 01       	movw	r22, r14
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2a82:	e9 a9       	ldd	r30, Y+49	; 0x31
    2a84:	fa a9       	ldd	r31, Y+50	; 0x32
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	09 95       	icall
    2a8a:	81 2f       	mov	r24, r17
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	08 95       	ret

00002a98 <u8g_GetWidthLL>:
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	1f 92       	push	r1
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	9e 01       	movw	r18, r28
    2aa4:	2f 5f       	subi	r18, 0xFF	; 255
    2aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa8:	46 e4       	ldi	r20, 0x46	; 70
    2aaa:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	0f 90       	pop	r0
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	08 95       	ret

00002ab8 <u8g_GetHeightLL>:
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	1f 92       	push	r1
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	9e 01       	movw	r18, r28
    2ac4:	2f 5f       	subi	r18, 0xFF	; 255
    2ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac8:	47 e4       	ldi	r20, 0x47	; 71
    2aca:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	0f 90       	pop	r0
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	08 95       	ret

00002ad8 <u8g_GetModeLL>:
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	48 e4       	ldi	r20, 0x48	; 72
    2ade:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2ae2:	08 95       	ret

00002ae4 <u8g_UpdateDimension>:
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	ec 01       	movw	r28, r24
    2aea:	6a 81       	ldd	r22, Y+2	; 0x02
    2aec:	7b 81       	ldd	r23, Y+3	; 0x03
    2aee:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <u8g_GetWidthLL>
    2af2:	88 83       	st	Y, r24
    2af4:	6a 81       	ldd	r22, Y+2	; 0x02
    2af6:	7b 81       	ldd	r23, Y+3	; 0x03
    2af8:	ce 01       	movw	r24, r28
    2afa:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <u8g_GetHeightLL>
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	6a 81       	ldd	r22, Y+2	; 0x02
    2b02:	7b 81       	ldd	r23, Y+3	; 0x03
    2b04:	ce 01       	movw	r24, r28
    2b06:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <u8g_GetModeLL>
    2b0a:	8b 87       	std	Y+11, r24	; 0x0b
    2b0c:	9e 01       	movw	r18, r28
    2b0e:	2d 5c       	subi	r18, 0xCD	; 205
    2b10:	3f 4f       	sbci	r19, 0xFF	; 255
    2b12:	6a 81       	ldd	r22, Y+2	; 0x02
    2b14:	7b 81       	ldd	r23, Y+3	; 0x03
    2b16:	47 e1       	ldi	r20, 0x17	; 23
    2b18:	ce 01       	movw	r24, r28
    2b1a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	08 95       	ret

00002b24 <u8g_Begin>:
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	ec 01       	movw	r28, r24
    2b2a:	6a 81       	ldd	r22, Y+2	; 0x02
    2b2c:	7b 81       	ldd	r23, Y+3	; 0x03
    2b2e:	0e 94 da 14 	call	0x29b4	; 0x29b4 <u8g_InitLL>
    2b32:	88 23       	and	r24, r24
    2b34:	21 f0       	breq	.+8      	; 0x2b3e <u8g_Begin+0x1a>
    2b36:	ce 01       	movw	r24, r28
    2b38:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <u8g_UpdateDimension>
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	08 95       	ret

00002b44 <u8g_InitI2C>:
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	ec 01       	movw	r28, r24
    2b50:	7b 01       	movw	r14, r22
    2b52:	14 2f       	mov	r17, r20
    2b54:	0e 94 a9 14 	call	0x2952	; 0x2952 <u8g_init_data>
    2b58:	fb 82       	std	Y+3, r15	; 0x03
    2b5a:	ea 82       	std	Y+2, r14	; 0x02
    2b5c:	1e a7       	std	Y+46, r17	; 0x2e
    2b5e:	ce 01       	movw	r24, r28
    2b60:	0e 94 92 15 	call	0x2b24	; 0x2b24 <u8g_Begin>
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	1f 91       	pop	r17
    2b6a:	ff 90       	pop	r15
    2b6c:	ef 90       	pop	r14
    2b6e:	08 95       	ret

00002b70 <u8g_FirstPage>:
    2b70:	fc 01       	movw	r30, r24
    2b72:	62 81       	ldd	r22, Z+2	; 0x02
    2b74:	73 81       	ldd	r23, Z+3	; 0x03
    2b76:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <u8g_FirstPageLL>
    2b7a:	08 95       	ret

00002b7c <u8g_NextPage>:
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	ec 01       	movw	r28, r24
    2b82:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b84:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b86:	30 97       	sbiw	r30, 0x00	; 0
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <u8g_NextPage+0x10>
    2b8a:	09 95       	icall
    2b8c:	6a 81       	ldd	r22, Y+2	; 0x02
    2b8e:	7b 81       	ldd	r23, Y+3	; 0x03
    2b90:	ce 01       	movw	r24, r28
    2b92:	0e 94 20 15 	call	0x2a40	; 0x2a40 <u8g_NextPageLL>
    2b96:	df 91       	pop	r29
    2b98:	cf 91       	pop	r28
    2b9a:	08 95       	ret

00002b9c <u8g_SleepOn>:
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	62 81       	ldd	r22, Z+2	; 0x02
    2ba0:	73 81       	ldd	r23, Z+3	; 0x03
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e1       	ldi	r20, 0x10	; 16
    2ba8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2bac:	08 95       	ret

00002bae <u8g_SleepOff>:
    2bae:	fc 01       	movw	r30, r24
    2bb0:	62 81       	ldd	r22, Z+2	; 0x02
    2bb2:	73 81       	ldd	r23, Z+3	; 0x03
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	41 e1       	ldi	r20, 0x11	; 17
    2bba:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
    2bbe:	08 95       	ret

00002bc0 <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    2bc0:	0f 93       	push	r16
    2bc2:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    2bc8:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    2bca:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    2bcc:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    2bce:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    2bd0:	9f 01       	movw	r18, r30
    2bd2:	24 5e       	subi	r18, 0xE4	; 228
    2bd4:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    2bd6:	4b e3       	ldi	r20, 0x3B	; 59
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cf 01       	movw	r24, r30
    2bdc:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    2be0:	0f 91       	pop	r16
    2be2:	08 95       	ret

00002be4 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    2be4:	fc 01       	movw	r30, r24
    2be6:	12 82       	std	Z+2, r1	; 0x02
    2be8:	80 81       	ld	r24, Z
    2bea:	81 50       	subi	r24, 0x01	; 1
    2bec:	83 83       	std	Z+3, r24	; 0x03
    2bee:	14 82       	std	Z+4, r1	; 0x04
    2bf0:	08 95       	ret

00002bf2 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    2bf2:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    2bf4:	90 81       	ld	r25, Z
    2bf6:	82 81       	ldd	r24, Z+2	; 0x02
    2bf8:	89 0f       	add	r24, r25
    2bfa:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    2bfc:	21 81       	ldd	r18, Z+1	; 0x01
    2bfe:	82 17       	cp	r24, r18
    2c00:	60 f4       	brcc	.+24     	; 0x2c1a <u8g_page_Next+0x28>
    return 0;
  p->page++;
    2c02:	84 81       	ldd	r24, Z+4	; 0x04
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    2c08:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    2c0a:	98 0f       	add	r25, r24
  if ( y1 >= p->total_height )
    2c0c:	92 17       	cp	r25, r18
    2c0e:	10 f0       	brcs	.+4      	; 0x2c14 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    2c10:	9f ef       	ldi	r25, 0xFF	; 255
    2c12:	92 0f       	add	r25, r18
  }
  p->page_y1 = y1;
    2c14:	93 83       	std	Z+3, r25	; 0x03
  
  return 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    2c1c:	08 95       	ret

00002c1e <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    2c1e:	dc 01       	movw	r26, r24
    2c20:	16 96       	adiw	r26, 0x06	; 6
    2c22:	ed 91       	ld	r30, X+
    2c24:	fc 91       	ld	r31, X
    2c26:	17 97       	sbiw	r26, 0x07	; 7
    2c28:	15 96       	adiw	r26, 0x05	; 5
    2c2a:	8c 91       	ld	r24, X
    2c2c:	9f 01       	movw	r18, r30
    2c2e:	28 0f       	add	r18, r24
    2c30:	31 1d       	adc	r19, r1
    2c32:	c9 01       	movw	r24, r18
    2c34:	11 92       	st	Z+, r1
    2c36:	e8 17       	cp	r30, r24
    2c38:	f9 07       	cpc	r31, r25
    2c3a:	e1 f7       	brne	.-8      	; 0x2c34 <u8g_pb_Clear+0x16>
    2c3c:	08 95       	ret

00002c3e <u8g_pb_IsYIntersection>:
    2c3e:	fc 01       	movw	r30, r24
    2c40:	91 e0       	ldi	r25, 0x01	; 1
    2c42:	83 81       	ldd	r24, Z+3	; 0x03
    2c44:	86 17       	cp	r24, r22
    2c46:	08 f4       	brcc	.+2      	; 0x2c4a <u8g_pb_IsYIntersection+0xc>
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	31 e0       	ldi	r19, 0x01	; 1
    2c4c:	46 17       	cp	r20, r22
    2c4e:	08 f0       	brcs	.+2      	; 0x2c52 <u8g_pb_IsYIntersection+0x14>
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	83 2f       	mov	r24, r19
    2c54:	89 2b       	or	r24, r25
    2c56:	21 e0       	ldi	r18, 0x01	; 1
    2c58:	52 81       	ldd	r21, Z+2	; 0x02
    2c5a:	45 17       	cp	r20, r21
    2c5c:	08 f4       	brcc	.+2      	; 0x2c60 <u8g_pb_IsYIntersection+0x22>
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	28 23       	and	r18, r24
    2c62:	83 2f       	mov	r24, r19
    2c64:	89 23       	and	r24, r25
    2c66:	82 2b       	or	r24, r18
    2c68:	08 95       	ret

00002c6a <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	fb 01       	movw	r30, r22
  box->x0 = 0;
    2c6e:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    2c70:	12 96       	adiw	r26, 0x02	; 2
    2c72:	8c 91       	ld	r24, X
    2c74:	12 97       	sbiw	r26, 0x02	; 2
    2c76:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    2c78:	15 96       	adiw	r26, 0x05	; 5
    2c7a:	8c 91       	ld	r24, X
    2c7c:	15 97       	sbiw	r26, 0x05	; 5
    2c7e:	81 50       	subi	r24, 0x01	; 1
    2c80:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    2c82:	13 96       	adiw	r26, 0x03	; 3
    2c84:	8c 91       	ld	r24, X
    2c86:	83 83       	std	Z+3, r24	; 0x03
    2c88:	08 95       	ret

00002c8a <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2c8a:	fb 01       	movw	r30, r22
    2c8c:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    2c8e:	23 81       	ldd	r18, Z+3	; 0x03
    2c90:	21 30       	cpi	r18, 0x01	; 1
    2c92:	19 f0       	breq	.+6      	; 0x2c9a <u8g_pb_Is8PixelVisible+0x10>
    2c94:	23 30       	cpi	r18, 0x03	; 3
    2c96:	21 f0       	breq	.+8      	; 0x2ca0 <u8g_pb_Is8PixelVisible+0x16>
    2c98:	06 c0       	rjmp	.+12     	; 0x2ca6 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    2c9a:	48 e0       	ldi	r20, 0x08	; 8
    2c9c:	43 0f       	add	r20, r19
      break;
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2ca0:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    2ca2:	38 50       	subi	r19, 0x08	; 8
      break;
    2ca4:	01 c0       	rjmp	.+2      	; 0x2ca8 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2ca6:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    2ca8:	63 2f       	mov	r22, r19
    2caa:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <u8g_pb_IsYIntersection>
}
    2cae:	08 95       	ret

00002cb0 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    2cb6:	26 81       	ldd	r18, Z+6	; 0x06
    2cb8:	37 81       	ldd	r19, Z+7	; 0x07
    2cba:	45 81       	ldd	r20, Z+5	; 0x05
    2cbc:	0e 94 31 10 	call	0x2062	; 0x2062 <u8g_WriteSequence>
}
    2cc0:	08 95       	ret

00002cc2 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	16 96       	adiw	r26, 0x06	; 6
    2cc6:	ed 91       	ld	r30, X+
    2cc8:	fc 91       	ld	r31, X
    2cca:	17 97       	sbiw	r26, 0x07	; 7
    2ccc:	12 96       	adiw	r26, 0x02	; 2
    2cce:	8c 91       	ld	r24, X
    2cd0:	48 1b       	sub	r20, r24
    2cd2:	47 70       	andi	r20, 0x07	; 7
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <u8g_pb8v1_set_pixel+0x1c>
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	4a 95       	dec	r20
    2ce0:	e2 f7       	brpl	.-8      	; 0x2cda <u8g_pb8v1_set_pixel+0x18>
    2ce2:	e6 0f       	add	r30, r22
    2ce4:	f1 1d       	adc	r31, r1
    2ce6:	22 23       	and	r18, r18
    2ce8:	21 f0       	breq	.+8      	; 0x2cf2 <u8g_pb8v1_set_pixel+0x30>
    2cea:	90 81       	ld	r25, Z
    2cec:	89 2b       	or	r24, r25
    2cee:	80 83       	st	Z, r24
    2cf0:	08 95       	ret
    2cf2:	80 95       	com	r24
    2cf4:	90 81       	ld	r25, Z
    2cf6:	89 23       	and	r24, r25
    2cf8:	80 83       	st	Z, r24
    2cfa:	08 95       	ret

00002cfc <u8g_pb8v1_SetPixel>:
    2cfc:	fb 01       	movw	r30, r22
    2cfe:	41 81       	ldd	r20, Z+1	; 0x01
    2d00:	fc 01       	movw	r30, r24
    2d02:	22 81       	ldd	r18, Z+2	; 0x02
    2d04:	42 17       	cp	r20, r18
    2d06:	70 f0       	brcs	.+28     	; 0x2d24 <u8g_pb8v1_SetPixel+0x28>
    2d08:	23 81       	ldd	r18, Z+3	; 0x03
    2d0a:	24 17       	cp	r18, r20
    2d0c:	58 f0       	brcs	.+22     	; 0x2d24 <u8g_pb8v1_SetPixel+0x28>
    2d0e:	fb 01       	movw	r30, r22
    2d10:	30 81       	ld	r19, Z
    2d12:	fc 01       	movw	r30, r24
    2d14:	25 81       	ldd	r18, Z+5	; 0x05
    2d16:	32 17       	cp	r19, r18
    2d18:	28 f4       	brcc	.+10     	; 0x2d24 <u8g_pb8v1_SetPixel+0x28>
    2d1a:	fb 01       	movw	r30, r22
    2d1c:	24 81       	ldd	r18, Z+4	; 0x04
    2d1e:	63 2f       	mov	r22, r19
    2d20:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <u8g_pb8v1_set_pixel>
    2d24:	08 95       	ret

00002d26 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    2d26:	df 92       	push	r13
    2d28:	ef 92       	push	r14
    2d2a:	ff 92       	push	r15
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	7c 01       	movw	r14, r24
    2d36:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    2d38:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	81 30       	cpi	r24, 0x01	; 1
    2d3e:	49 f0       	breq	.+18     	; 0x2d52 <u8g_pb8v1_Set8PixelOpt2+0x2c>
    2d40:	28 f0       	brcs	.+10     	; 0x2d4c <u8g_pb8v1_Set8PixelOpt2+0x26>
    2d42:	82 30       	cpi	r24, 0x02	; 2
    2d44:	51 f0       	breq	.+20     	; 0x2d5a <u8g_pb8v1_Set8PixelOpt2+0x34>
    2d46:	83 30       	cpi	r24, 0x03	; 3
    2d48:	59 f0       	breq	.+22     	; 0x2d60 <u8g_pb8v1_Set8PixelOpt2+0x3a>
    2d4a:	0e c0       	rjmp	.+28     	; 0x2d68 <u8g_pb8v1_Set8PixelOpt2+0x42>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2d4c:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    2d4e:	01 e0       	ldi	r16, 0x01	; 1
    2d50:	0d c0       	rjmp	.+26     	; 0x2d6c <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 1: dy++; break;
    2d52:	dd 24       	eor	r13, r13
    2d54:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2d56:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    2d58:	09 c0       	rjmp	.+18     	; 0x2d6c <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2d5a:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    2d5c:	0f ef       	ldi	r16, 0xFF	; 255
    2d5e:	06 c0       	rjmp	.+12     	; 0x2d6c <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
    2d60:	dd 24       	eor	r13, r13
    2d62:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2d64:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2d68:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2d6a:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    2d6c:	11 23       	and	r17, r17
    2d6e:	24 f4       	brge	.+8      	; 0x2d78 <u8g_pb8v1_Set8PixelOpt2+0x52>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    2d70:	be 01       	movw	r22, r28
    2d72:	c7 01       	movw	r24, r14
    2d74:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2d78:	98 81       	ld	r25, Y
    2d7a:	90 0f       	add	r25, r16
    2d7c:	98 83       	st	Y, r25
    arg_pixel->y += dy;
    2d7e:	99 81       	ldd	r25, Y+1	; 0x01
    2d80:	9d 0d       	add	r25, r13
    2d82:	99 83       	std	Y+1, r25	; 0x01
    pixel <<= 1;
    2d84:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    2d86:	91 f7       	brne	.-28     	; 0x2d6c <u8g_pb8v1_Set8PixelOpt2+0x46>
  
}
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	08 95       	ret

00002d98 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    2da0:	fb 01       	movw	r30, r22
    2da2:	c2 81       	ldd	r28, Z+2	; 0x02
    2da4:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    2da6:	50 e0       	ldi	r21, 0x00	; 0
    2da8:	fa 01       	movw	r30, r20
    2daa:	74 97       	sbiw	r30, 0x14	; 20
    2dac:	e4 33       	cpi	r30, 0x34	; 52
    2dae:	f1 05       	cpc	r31, r1
    2db0:	c8 f5       	brcc	.+114    	; 0x2e24 <u8g_dev_pb8v1_base_fn+0x8c>
    2db2:	89 01       	movw	r16, r18
    2db4:	ec 5c       	subi	r30, 0xCC	; 204
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    2dbc:	b9 01       	movw	r22, r18
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <u8g_pb_Is8PixelVisible>
    2dc4:	88 23       	and	r24, r24
    2dc6:	81 f1       	breq	.+96     	; 0x2e28 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    2dc8:	b8 01       	movw	r22, r16
    2dca:	ce 01       	movw	r24, r28
    2dcc:	0e 94 93 16 	call	0x2d26	; 0x2d26 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	2b c0       	rjmp	.+86     	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    2dd4:	b9 01       	movw	r22, r18
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    2dde:	25 c0       	rjmp	.+74     	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    2de0:	ce 01       	movw	r24, r28
    2de2:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    2de6:	ce 01       	movw	r24, r28
    2de8:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    2dee:	1d c0       	rjmp	.+58     	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    2df0:	ce 01       	movw	r24, r28
    2df2:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <u8g_page_Next>
    2df6:	88 23       	and	r24, r24
    2df8:	c1 f0       	breq	.+48     	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
        return 0;
      u8g_pb_Clear(pb);
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    2e02:	13 c0       	rjmp	.+38     	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    2e04:	b9 01       	movw	r22, r18
    2e06:	ce 01       	movw	r24, r28
    2e08:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    2e0e:	0d c0       	rjmp	.+26     	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	f9 01       	movw	r30, r18
    2e14:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    2e18:	08 c0       	rjmp	.+16     	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	f9 01       	movw	r30, r18
    2e1e:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <u8g_dev_pb8v1_base_fn+0x92>
  }
  return 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
}
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	08 95       	ret

00002e34 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    2e34:	08 95       	ret

00002e36 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    2e36:	1f 92       	push	r1
    2e38:	0f 92       	push	r0
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	0f 92       	push	r0
    2e3e:	11 24       	eor	r1, r1
    2e40:	2f 93       	push	r18
    2e42:	8f 93       	push	r24
    2e44:	9f 93       	push	r25
    2e46:	ef 93       	push	r30
    2e48:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2e4a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    2e4e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    2e52:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2e54:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <UART_RxHead>
    2e58:	ef 5f       	subi	r30, 0xFF	; 255
    2e5a:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    2e5c:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <UART_RxTail>
    2e60:	e9 17       	cp	r30, r25
    2e62:	39 f0       	breq	.+14     	; 0x2e72 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    2e64:	e0 93 f7 01 	sts	0x01F7, r30	; 0x8001f7 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	e6 50       	subi	r30, 0x06	; 6
    2e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6e:	20 83       	st	Z, r18
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2e72:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    2e74:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <UART_LastRxError>
}
    2e78:	ff 91       	pop	r31
    2e7a:	ef 91       	pop	r30
    2e7c:	9f 91       	pop	r25
    2e7e:	8f 91       	pop	r24
    2e80:	2f 91       	pop	r18
    2e82:	0f 90       	pop	r0
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	0f 90       	pop	r0
    2e88:	1f 90       	pop	r1
    2e8a:	18 95       	reti

00002e8c <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    2e8c:	1f 92       	push	r1
    2e8e:	0f 92       	push	r0
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	0f 92       	push	r0
    2e94:	11 24       	eor	r1, r1
    2e96:	8f 93       	push	r24
    2e98:	9f 93       	push	r25
    2e9a:	ef 93       	push	r30
    2e9c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    2e9e:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <UART_TxHead>
    2ea2:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <UART_TxTail>
    2ea6:	98 17       	cp	r25, r24
    2ea8:	69 f0       	breq	.+26     	; 0x2ec4 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2eaa:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <UART_TxTail>
    2eae:	ef 5f       	subi	r30, 0xFF	; 255
    2eb0:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    2eb2:	e0 93 f8 01 	sts	0x01F8, r30	; 0x8001f8 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	e6 5e       	subi	r30, 0xE6	; 230
    2eba:	fd 4f       	sbci	r31, 0xFD	; 253
    2ebc:	80 81       	ld	r24, Z
    2ebe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2ec2:	05 c0       	rjmp	.+10     	; 0x2ece <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2ec4:	e1 ec       	ldi	r30, 0xC1	; 193
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	8f 7d       	andi	r24, 0xDF	; 223
    2ecc:	80 83       	st	Z, r24
    }
}
    2ece:	ff 91       	pop	r31
    2ed0:	ef 91       	pop	r30
    2ed2:	9f 91       	pop	r25
    2ed4:	8f 91       	pop	r24
    2ed6:	0f 90       	pop	r0
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	0f 90       	pop	r0
    2edc:	1f 90       	pop	r1
    2ede:	18 95       	reti

00002ee0 <__subsf3>:
    2ee0:	50 58       	subi	r21, 0x80	; 128

00002ee2 <__addsf3>:
    2ee2:	bb 27       	eor	r27, r27
    2ee4:	aa 27       	eor	r26, r26
    2ee6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__addsf3x>
    2eea:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__fp_round>
    2eee:	0e 94 cb 18 	call	0x3196	; 0x3196 <__fp_pscA>
    2ef2:	38 f0       	brcs	.+14     	; 0x2f02 <__addsf3+0x20>
    2ef4:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__fp_pscB>
    2ef8:	20 f0       	brcs	.+8      	; 0x2f02 <__addsf3+0x20>
    2efa:	39 f4       	brne	.+14     	; 0x2f0a <__addsf3+0x28>
    2efc:	9f 3f       	cpi	r25, 0xFF	; 255
    2efe:	19 f4       	brne	.+6      	; 0x2f06 <__addsf3+0x24>
    2f00:	26 f4       	brtc	.+8      	; 0x2f0a <__addsf3+0x28>
    2f02:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_nan>
    2f06:	0e f4       	brtc	.+2      	; 0x2f0a <__addsf3+0x28>
    2f08:	e0 95       	com	r30
    2f0a:	e7 fb       	bst	r30, 7
    2f0c:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__fp_inf>

00002f10 <__addsf3x>:
    2f10:	e9 2f       	mov	r30, r25
    2f12:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__fp_split3>
    2f16:	58 f3       	brcs	.-42     	; 0x2eee <__addsf3+0xc>
    2f18:	ba 17       	cp	r27, r26
    2f1a:	62 07       	cpc	r22, r18
    2f1c:	73 07       	cpc	r23, r19
    2f1e:	84 07       	cpc	r24, r20
    2f20:	95 07       	cpc	r25, r21
    2f22:	20 f0       	brcs	.+8      	; 0x2f2c <__addsf3x+0x1c>
    2f24:	79 f4       	brne	.+30     	; 0x2f44 <__addsf3x+0x34>
    2f26:	a6 f5       	brtc	.+104    	; 0x2f90 <__addsf3x+0x80>
    2f28:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__fp_zero>
    2f2c:	0e f4       	brtc	.+2      	; 0x2f30 <__addsf3x+0x20>
    2f2e:	e0 95       	com	r30
    2f30:	0b 2e       	mov	r0, r27
    2f32:	ba 2f       	mov	r27, r26
    2f34:	a0 2d       	mov	r26, r0
    2f36:	0b 01       	movw	r0, r22
    2f38:	b9 01       	movw	r22, r18
    2f3a:	90 01       	movw	r18, r0
    2f3c:	0c 01       	movw	r0, r24
    2f3e:	ca 01       	movw	r24, r20
    2f40:	a0 01       	movw	r20, r0
    2f42:	11 24       	eor	r1, r1
    2f44:	ff 27       	eor	r31, r31
    2f46:	59 1b       	sub	r21, r25
    2f48:	99 f0       	breq	.+38     	; 0x2f70 <__addsf3x+0x60>
    2f4a:	59 3f       	cpi	r21, 0xF9	; 249
    2f4c:	50 f4       	brcc	.+20     	; 0x2f62 <__addsf3x+0x52>
    2f4e:	50 3e       	cpi	r21, 0xE0	; 224
    2f50:	68 f1       	brcs	.+90     	; 0x2fac <__addsf3x+0x9c>
    2f52:	1a 16       	cp	r1, r26
    2f54:	f0 40       	sbci	r31, 0x00	; 0
    2f56:	a2 2f       	mov	r26, r18
    2f58:	23 2f       	mov	r18, r19
    2f5a:	34 2f       	mov	r19, r20
    2f5c:	44 27       	eor	r20, r20
    2f5e:	58 5f       	subi	r21, 0xF8	; 248
    2f60:	f3 cf       	rjmp	.-26     	; 0x2f48 <__addsf3x+0x38>
    2f62:	46 95       	lsr	r20
    2f64:	37 95       	ror	r19
    2f66:	27 95       	ror	r18
    2f68:	a7 95       	ror	r26
    2f6a:	f0 40       	sbci	r31, 0x00	; 0
    2f6c:	53 95       	inc	r21
    2f6e:	c9 f7       	brne	.-14     	; 0x2f62 <__addsf3x+0x52>
    2f70:	7e f4       	brtc	.+30     	; 0x2f90 <__addsf3x+0x80>
    2f72:	1f 16       	cp	r1, r31
    2f74:	ba 0b       	sbc	r27, r26
    2f76:	62 0b       	sbc	r22, r18
    2f78:	73 0b       	sbc	r23, r19
    2f7a:	84 0b       	sbc	r24, r20
    2f7c:	ba f0       	brmi	.+46     	; 0x2fac <__addsf3x+0x9c>
    2f7e:	91 50       	subi	r25, 0x01	; 1
    2f80:	a1 f0       	breq	.+40     	; 0x2faa <__addsf3x+0x9a>
    2f82:	ff 0f       	add	r31, r31
    2f84:	bb 1f       	adc	r27, r27
    2f86:	66 1f       	adc	r22, r22
    2f88:	77 1f       	adc	r23, r23
    2f8a:	88 1f       	adc	r24, r24
    2f8c:	c2 f7       	brpl	.-16     	; 0x2f7e <__addsf3x+0x6e>
    2f8e:	0e c0       	rjmp	.+28     	; 0x2fac <__addsf3x+0x9c>
    2f90:	ba 0f       	add	r27, r26
    2f92:	62 1f       	adc	r22, r18
    2f94:	73 1f       	adc	r23, r19
    2f96:	84 1f       	adc	r24, r20
    2f98:	48 f4       	brcc	.+18     	; 0x2fac <__addsf3x+0x9c>
    2f9a:	87 95       	ror	r24
    2f9c:	77 95       	ror	r23
    2f9e:	67 95       	ror	r22
    2fa0:	b7 95       	ror	r27
    2fa2:	f7 95       	ror	r31
    2fa4:	9e 3f       	cpi	r25, 0xFE	; 254
    2fa6:	08 f0       	brcs	.+2      	; 0x2faa <__addsf3x+0x9a>
    2fa8:	b0 cf       	rjmp	.-160    	; 0x2f0a <__addsf3+0x28>
    2faa:	93 95       	inc	r25
    2fac:	88 0f       	add	r24, r24
    2fae:	08 f0       	brcs	.+2      	; 0x2fb2 <__addsf3x+0xa2>
    2fb0:	99 27       	eor	r25, r25
    2fb2:	ee 0f       	add	r30, r30
    2fb4:	97 95       	ror	r25
    2fb6:	87 95       	ror	r24
    2fb8:	08 95       	ret

00002fba <__divsf3>:
    2fba:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__divsf3x>
    2fbe:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__fp_round>
    2fc2:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__fp_pscB>
    2fc6:	58 f0       	brcs	.+22     	; 0x2fde <__divsf3+0x24>
    2fc8:	0e 94 cb 18 	call	0x3196	; 0x3196 <__fp_pscA>
    2fcc:	40 f0       	brcs	.+16     	; 0x2fde <__divsf3+0x24>
    2fce:	29 f4       	brne	.+10     	; 0x2fda <__divsf3+0x20>
    2fd0:	5f 3f       	cpi	r21, 0xFF	; 255
    2fd2:	29 f0       	breq	.+10     	; 0x2fde <__divsf3+0x24>
    2fd4:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__fp_inf>
    2fd8:	51 11       	cpse	r21, r1
    2fda:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__fp_szero>
    2fde:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_nan>

00002fe2 <__divsf3x>:
    2fe2:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__fp_split3>
    2fe6:	68 f3       	brcs	.-38     	; 0x2fc2 <__divsf3+0x8>

00002fe8 <__divsf3_pse>:
    2fe8:	99 23       	and	r25, r25
    2fea:	b1 f3       	breq	.-20     	; 0x2fd8 <__divsf3+0x1e>
    2fec:	55 23       	and	r21, r21
    2fee:	91 f3       	breq	.-28     	; 0x2fd4 <__divsf3+0x1a>
    2ff0:	95 1b       	sub	r25, r21
    2ff2:	55 0b       	sbc	r21, r21
    2ff4:	bb 27       	eor	r27, r27
    2ff6:	aa 27       	eor	r26, r26
    2ff8:	62 17       	cp	r22, r18
    2ffa:	73 07       	cpc	r23, r19
    2ffc:	84 07       	cpc	r24, r20
    2ffe:	38 f0       	brcs	.+14     	; 0x300e <__divsf3_pse+0x26>
    3000:	9f 5f       	subi	r25, 0xFF	; 255
    3002:	5f 4f       	sbci	r21, 0xFF	; 255
    3004:	22 0f       	add	r18, r18
    3006:	33 1f       	adc	r19, r19
    3008:	44 1f       	adc	r20, r20
    300a:	aa 1f       	adc	r26, r26
    300c:	a9 f3       	breq	.-22     	; 0x2ff8 <__divsf3_pse+0x10>
    300e:	35 d0       	rcall	.+106    	; 0x307a <__divsf3_pse+0x92>
    3010:	0e 2e       	mov	r0, r30
    3012:	3a f0       	brmi	.+14     	; 0x3022 <__divsf3_pse+0x3a>
    3014:	e0 e8       	ldi	r30, 0x80	; 128
    3016:	32 d0       	rcall	.+100    	; 0x307c <__divsf3_pse+0x94>
    3018:	91 50       	subi	r25, 0x01	; 1
    301a:	50 40       	sbci	r21, 0x00	; 0
    301c:	e6 95       	lsr	r30
    301e:	00 1c       	adc	r0, r0
    3020:	ca f7       	brpl	.-14     	; 0x3014 <__divsf3_pse+0x2c>
    3022:	2b d0       	rcall	.+86     	; 0x307a <__divsf3_pse+0x92>
    3024:	fe 2f       	mov	r31, r30
    3026:	29 d0       	rcall	.+82     	; 0x307a <__divsf3_pse+0x92>
    3028:	66 0f       	add	r22, r22
    302a:	77 1f       	adc	r23, r23
    302c:	88 1f       	adc	r24, r24
    302e:	bb 1f       	adc	r27, r27
    3030:	26 17       	cp	r18, r22
    3032:	37 07       	cpc	r19, r23
    3034:	48 07       	cpc	r20, r24
    3036:	ab 07       	cpc	r26, r27
    3038:	b0 e8       	ldi	r27, 0x80	; 128
    303a:	09 f0       	breq	.+2      	; 0x303e <__divsf3_pse+0x56>
    303c:	bb 0b       	sbc	r27, r27
    303e:	80 2d       	mov	r24, r0
    3040:	bf 01       	movw	r22, r30
    3042:	ff 27       	eor	r31, r31
    3044:	93 58       	subi	r25, 0x83	; 131
    3046:	5f 4f       	sbci	r21, 0xFF	; 255
    3048:	3a f0       	brmi	.+14     	; 0x3058 <__divsf3_pse+0x70>
    304a:	9e 3f       	cpi	r25, 0xFE	; 254
    304c:	51 05       	cpc	r21, r1
    304e:	78 f0       	brcs	.+30     	; 0x306e <__divsf3_pse+0x86>
    3050:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__fp_inf>
    3054:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__fp_szero>
    3058:	5f 3f       	cpi	r21, 0xFF	; 255
    305a:	e4 f3       	brlt	.-8      	; 0x3054 <__divsf3_pse+0x6c>
    305c:	98 3e       	cpi	r25, 0xE8	; 232
    305e:	d4 f3       	brlt	.-12     	; 0x3054 <__divsf3_pse+0x6c>
    3060:	86 95       	lsr	r24
    3062:	77 95       	ror	r23
    3064:	67 95       	ror	r22
    3066:	b7 95       	ror	r27
    3068:	f7 95       	ror	r31
    306a:	9f 5f       	subi	r25, 0xFF	; 255
    306c:	c9 f7       	brne	.-14     	; 0x3060 <__divsf3_pse+0x78>
    306e:	88 0f       	add	r24, r24
    3070:	91 1d       	adc	r25, r1
    3072:	96 95       	lsr	r25
    3074:	87 95       	ror	r24
    3076:	97 f9       	bld	r25, 7
    3078:	08 95       	ret
    307a:	e1 e0       	ldi	r30, 0x01	; 1
    307c:	66 0f       	add	r22, r22
    307e:	77 1f       	adc	r23, r23
    3080:	88 1f       	adc	r24, r24
    3082:	bb 1f       	adc	r27, r27
    3084:	62 17       	cp	r22, r18
    3086:	73 07       	cpc	r23, r19
    3088:	84 07       	cpc	r24, r20
    308a:	ba 07       	cpc	r27, r26
    308c:	20 f0       	brcs	.+8      	; 0x3096 <__divsf3_pse+0xae>
    308e:	62 1b       	sub	r22, r18
    3090:	73 0b       	sbc	r23, r19
    3092:	84 0b       	sbc	r24, r20
    3094:	ba 0b       	sbc	r27, r26
    3096:	ee 1f       	adc	r30, r30
    3098:	88 f7       	brcc	.-30     	; 0x307c <__divsf3_pse+0x94>
    309a:	e0 95       	com	r30
    309c:	08 95       	ret

0000309e <__fixsfsi>:
    309e:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    30a2:	68 94       	set
    30a4:	b1 11       	cpse	r27, r1
    30a6:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__fp_szero>
    30aa:	08 95       	ret

000030ac <__fixunssfsi>:
    30ac:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__fp_splitA>
    30b0:	88 f0       	brcs	.+34     	; 0x30d4 <__fixunssfsi+0x28>
    30b2:	9f 57       	subi	r25, 0x7F	; 127
    30b4:	98 f0       	brcs	.+38     	; 0x30dc <__fixunssfsi+0x30>
    30b6:	b9 2f       	mov	r27, r25
    30b8:	99 27       	eor	r25, r25
    30ba:	b7 51       	subi	r27, 0x17	; 23
    30bc:	b0 f0       	brcs	.+44     	; 0x30ea <__fixunssfsi+0x3e>
    30be:	e1 f0       	breq	.+56     	; 0x30f8 <__fixunssfsi+0x4c>
    30c0:	66 0f       	add	r22, r22
    30c2:	77 1f       	adc	r23, r23
    30c4:	88 1f       	adc	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	1a f0       	brmi	.+6      	; 0x30d0 <__fixunssfsi+0x24>
    30ca:	ba 95       	dec	r27
    30cc:	c9 f7       	brne	.-14     	; 0x30c0 <__fixunssfsi+0x14>
    30ce:	14 c0       	rjmp	.+40     	; 0x30f8 <__fixunssfsi+0x4c>
    30d0:	b1 30       	cpi	r27, 0x01	; 1
    30d2:	91 f0       	breq	.+36     	; 0x30f8 <__fixunssfsi+0x4c>
    30d4:	0e 94 0c 19 	call	0x3218	; 0x3218 <__fp_zero>
    30d8:	b1 e0       	ldi	r27, 0x01	; 1
    30da:	08 95       	ret
    30dc:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__fp_zero>
    30e0:	67 2f       	mov	r22, r23
    30e2:	78 2f       	mov	r23, r24
    30e4:	88 27       	eor	r24, r24
    30e6:	b8 5f       	subi	r27, 0xF8	; 248
    30e8:	39 f0       	breq	.+14     	; 0x30f8 <__fixunssfsi+0x4c>
    30ea:	b9 3f       	cpi	r27, 0xF9	; 249
    30ec:	cc f3       	brlt	.-14     	; 0x30e0 <__fixunssfsi+0x34>
    30ee:	86 95       	lsr	r24
    30f0:	77 95       	ror	r23
    30f2:	67 95       	ror	r22
    30f4:	b3 95       	inc	r27
    30f6:	d9 f7       	brne	.-10     	; 0x30ee <__fixunssfsi+0x42>
    30f8:	3e f4       	brtc	.+14     	; 0x3108 <__fixunssfsi+0x5c>
    30fa:	90 95       	com	r25
    30fc:	80 95       	com	r24
    30fe:	70 95       	com	r23
    3100:	61 95       	neg	r22
    3102:	7f 4f       	sbci	r23, 0xFF	; 255
    3104:	8f 4f       	sbci	r24, 0xFF	; 255
    3106:	9f 4f       	sbci	r25, 0xFF	; 255
    3108:	08 95       	ret

0000310a <__floatunsisf>:
    310a:	e8 94       	clt
    310c:	09 c0       	rjmp	.+18     	; 0x3120 <__floatsisf+0x12>

0000310e <__floatsisf>:
    310e:	97 fb       	bst	r25, 7
    3110:	3e f4       	brtc	.+14     	; 0x3120 <__floatsisf+0x12>
    3112:	90 95       	com	r25
    3114:	80 95       	com	r24
    3116:	70 95       	com	r23
    3118:	61 95       	neg	r22
    311a:	7f 4f       	sbci	r23, 0xFF	; 255
    311c:	8f 4f       	sbci	r24, 0xFF	; 255
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	99 23       	and	r25, r25
    3122:	a9 f0       	breq	.+42     	; 0x314e <__floatsisf+0x40>
    3124:	f9 2f       	mov	r31, r25
    3126:	96 e9       	ldi	r25, 0x96	; 150
    3128:	bb 27       	eor	r27, r27
    312a:	93 95       	inc	r25
    312c:	f6 95       	lsr	r31
    312e:	87 95       	ror	r24
    3130:	77 95       	ror	r23
    3132:	67 95       	ror	r22
    3134:	b7 95       	ror	r27
    3136:	f1 11       	cpse	r31, r1
    3138:	f8 cf       	rjmp	.-16     	; 0x312a <__floatsisf+0x1c>
    313a:	fa f4       	brpl	.+62     	; 0x317a <__floatsisf+0x6c>
    313c:	bb 0f       	add	r27, r27
    313e:	11 f4       	brne	.+4      	; 0x3144 <__floatsisf+0x36>
    3140:	60 ff       	sbrs	r22, 0
    3142:	1b c0       	rjmp	.+54     	; 0x317a <__floatsisf+0x6c>
    3144:	6f 5f       	subi	r22, 0xFF	; 255
    3146:	7f 4f       	sbci	r23, 0xFF	; 255
    3148:	8f 4f       	sbci	r24, 0xFF	; 255
    314a:	9f 4f       	sbci	r25, 0xFF	; 255
    314c:	16 c0       	rjmp	.+44     	; 0x317a <__floatsisf+0x6c>
    314e:	88 23       	and	r24, r24
    3150:	11 f0       	breq	.+4      	; 0x3156 <__floatsisf+0x48>
    3152:	96 e9       	ldi	r25, 0x96	; 150
    3154:	11 c0       	rjmp	.+34     	; 0x3178 <__floatsisf+0x6a>
    3156:	77 23       	and	r23, r23
    3158:	21 f0       	breq	.+8      	; 0x3162 <__floatsisf+0x54>
    315a:	9e e8       	ldi	r25, 0x8E	; 142
    315c:	87 2f       	mov	r24, r23
    315e:	76 2f       	mov	r23, r22
    3160:	05 c0       	rjmp	.+10     	; 0x316c <__floatsisf+0x5e>
    3162:	66 23       	and	r22, r22
    3164:	71 f0       	breq	.+28     	; 0x3182 <__floatsisf+0x74>
    3166:	96 e8       	ldi	r25, 0x86	; 134
    3168:	86 2f       	mov	r24, r22
    316a:	70 e0       	ldi	r23, 0x00	; 0
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	2a f0       	brmi	.+10     	; 0x317a <__floatsisf+0x6c>
    3170:	9a 95       	dec	r25
    3172:	66 0f       	add	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	88 1f       	adc	r24, r24
    3178:	da f7       	brpl	.-10     	; 0x3170 <__floatsisf+0x62>
    317a:	88 0f       	add	r24, r24
    317c:	96 95       	lsr	r25
    317e:	87 95       	ror	r24
    3180:	97 f9       	bld	r25, 7
    3182:	08 95       	ret

00003184 <__fp_inf>:
    3184:	97 f9       	bld	r25, 7
    3186:	9f 67       	ori	r25, 0x7F	; 127
    3188:	80 e8       	ldi	r24, 0x80	; 128
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	08 95       	ret

00003190 <__fp_nan>:
    3190:	9f ef       	ldi	r25, 0xFF	; 255
    3192:	80 ec       	ldi	r24, 0xC0	; 192
    3194:	08 95       	ret

00003196 <__fp_pscA>:
    3196:	00 24       	eor	r0, r0
    3198:	0a 94       	dec	r0
    319a:	16 16       	cp	r1, r22
    319c:	17 06       	cpc	r1, r23
    319e:	18 06       	cpc	r1, r24
    31a0:	09 06       	cpc	r0, r25
    31a2:	08 95       	ret

000031a4 <__fp_pscB>:
    31a4:	00 24       	eor	r0, r0
    31a6:	0a 94       	dec	r0
    31a8:	12 16       	cp	r1, r18
    31aa:	13 06       	cpc	r1, r19
    31ac:	14 06       	cpc	r1, r20
    31ae:	05 06       	cpc	r0, r21
    31b0:	08 95       	ret

000031b2 <__fp_round>:
    31b2:	09 2e       	mov	r0, r25
    31b4:	03 94       	inc	r0
    31b6:	00 0c       	add	r0, r0
    31b8:	11 f4       	brne	.+4      	; 0x31be <__fp_round+0xc>
    31ba:	88 23       	and	r24, r24
    31bc:	52 f0       	brmi	.+20     	; 0x31d2 <__fp_round+0x20>
    31be:	bb 0f       	add	r27, r27
    31c0:	40 f4       	brcc	.+16     	; 0x31d2 <__fp_round+0x20>
    31c2:	bf 2b       	or	r27, r31
    31c4:	11 f4       	brne	.+4      	; 0x31ca <__fp_round+0x18>
    31c6:	60 ff       	sbrs	r22, 0
    31c8:	04 c0       	rjmp	.+8      	; 0x31d2 <__fp_round+0x20>
    31ca:	6f 5f       	subi	r22, 0xFF	; 255
    31cc:	7f 4f       	sbci	r23, 0xFF	; 255
    31ce:	8f 4f       	sbci	r24, 0xFF	; 255
    31d0:	9f 4f       	sbci	r25, 0xFF	; 255
    31d2:	08 95       	ret

000031d4 <__fp_split3>:
    31d4:	57 fd       	sbrc	r21, 7
    31d6:	90 58       	subi	r25, 0x80	; 128
    31d8:	44 0f       	add	r20, r20
    31da:	55 1f       	adc	r21, r21
    31dc:	59 f0       	breq	.+22     	; 0x31f4 <__fp_splitA+0x10>
    31de:	5f 3f       	cpi	r21, 0xFF	; 255
    31e0:	71 f0       	breq	.+28     	; 0x31fe <__fp_splitA+0x1a>
    31e2:	47 95       	ror	r20

000031e4 <__fp_splitA>:
    31e4:	88 0f       	add	r24, r24
    31e6:	97 fb       	bst	r25, 7
    31e8:	99 1f       	adc	r25, r25
    31ea:	61 f0       	breq	.+24     	; 0x3204 <__fp_splitA+0x20>
    31ec:	9f 3f       	cpi	r25, 0xFF	; 255
    31ee:	79 f0       	breq	.+30     	; 0x320e <__fp_splitA+0x2a>
    31f0:	87 95       	ror	r24
    31f2:	08 95       	ret
    31f4:	12 16       	cp	r1, r18
    31f6:	13 06       	cpc	r1, r19
    31f8:	14 06       	cpc	r1, r20
    31fa:	55 1f       	adc	r21, r21
    31fc:	f2 cf       	rjmp	.-28     	; 0x31e2 <__fp_split3+0xe>
    31fe:	46 95       	lsr	r20
    3200:	f1 df       	rcall	.-30     	; 0x31e4 <__fp_splitA>
    3202:	08 c0       	rjmp	.+16     	; 0x3214 <__fp_splitA+0x30>
    3204:	16 16       	cp	r1, r22
    3206:	17 06       	cpc	r1, r23
    3208:	18 06       	cpc	r1, r24
    320a:	99 1f       	adc	r25, r25
    320c:	f1 cf       	rjmp	.-30     	; 0x31f0 <__fp_splitA+0xc>
    320e:	86 95       	lsr	r24
    3210:	71 05       	cpc	r23, r1
    3212:	61 05       	cpc	r22, r1
    3214:	08 94       	sec
    3216:	08 95       	ret

00003218 <__fp_zero>:
    3218:	e8 94       	clt

0000321a <__fp_szero>:
    321a:	bb 27       	eor	r27, r27
    321c:	66 27       	eor	r22, r22
    321e:	77 27       	eor	r23, r23
    3220:	cb 01       	movw	r24, r22
    3222:	97 f9       	bld	r25, 7
    3224:	08 95       	ret

00003226 <__gesf2>:
    3226:	0e 94 85 19 	call	0x330a	; 0x330a <__fp_cmp>
    322a:	08 f4       	brcc	.+2      	; 0x322e <__gesf2+0x8>
    322c:	8f ef       	ldi	r24, 0xFF	; 255
    322e:	08 95       	ret

00003230 <__mulsf3>:
    3230:	0e 94 2b 19 	call	0x3256	; 0x3256 <__mulsf3x>
    3234:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__fp_round>
    3238:	0e 94 cb 18 	call	0x3196	; 0x3196 <__fp_pscA>
    323c:	38 f0       	brcs	.+14     	; 0x324c <__mulsf3+0x1c>
    323e:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__fp_pscB>
    3242:	20 f0       	brcs	.+8      	; 0x324c <__mulsf3+0x1c>
    3244:	95 23       	and	r25, r21
    3246:	11 f0       	breq	.+4      	; 0x324c <__mulsf3+0x1c>
    3248:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__fp_inf>
    324c:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_nan>
    3250:	11 24       	eor	r1, r1
    3252:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__fp_szero>

00003256 <__mulsf3x>:
    3256:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__fp_split3>
    325a:	70 f3       	brcs	.-36     	; 0x3238 <__mulsf3+0x8>

0000325c <__mulsf3_pse>:
    325c:	95 9f       	mul	r25, r21
    325e:	c1 f3       	breq	.-16     	; 0x3250 <__mulsf3+0x20>
    3260:	95 0f       	add	r25, r21
    3262:	50 e0       	ldi	r21, 0x00	; 0
    3264:	55 1f       	adc	r21, r21
    3266:	62 9f       	mul	r22, r18
    3268:	f0 01       	movw	r30, r0
    326a:	72 9f       	mul	r23, r18
    326c:	bb 27       	eor	r27, r27
    326e:	f0 0d       	add	r31, r0
    3270:	b1 1d       	adc	r27, r1
    3272:	63 9f       	mul	r22, r19
    3274:	aa 27       	eor	r26, r26
    3276:	f0 0d       	add	r31, r0
    3278:	b1 1d       	adc	r27, r1
    327a:	aa 1f       	adc	r26, r26
    327c:	64 9f       	mul	r22, r20
    327e:	66 27       	eor	r22, r22
    3280:	b0 0d       	add	r27, r0
    3282:	a1 1d       	adc	r26, r1
    3284:	66 1f       	adc	r22, r22
    3286:	82 9f       	mul	r24, r18
    3288:	22 27       	eor	r18, r18
    328a:	b0 0d       	add	r27, r0
    328c:	a1 1d       	adc	r26, r1
    328e:	62 1f       	adc	r22, r18
    3290:	73 9f       	mul	r23, r19
    3292:	b0 0d       	add	r27, r0
    3294:	a1 1d       	adc	r26, r1
    3296:	62 1f       	adc	r22, r18
    3298:	83 9f       	mul	r24, r19
    329a:	a0 0d       	add	r26, r0
    329c:	61 1d       	adc	r22, r1
    329e:	22 1f       	adc	r18, r18
    32a0:	74 9f       	mul	r23, r20
    32a2:	33 27       	eor	r19, r19
    32a4:	a0 0d       	add	r26, r0
    32a6:	61 1d       	adc	r22, r1
    32a8:	23 1f       	adc	r18, r19
    32aa:	84 9f       	mul	r24, r20
    32ac:	60 0d       	add	r22, r0
    32ae:	21 1d       	adc	r18, r1
    32b0:	82 2f       	mov	r24, r18
    32b2:	76 2f       	mov	r23, r22
    32b4:	6a 2f       	mov	r22, r26
    32b6:	11 24       	eor	r1, r1
    32b8:	9f 57       	subi	r25, 0x7F	; 127
    32ba:	50 40       	sbci	r21, 0x00	; 0
    32bc:	9a f0       	brmi	.+38     	; 0x32e4 <__mulsf3_pse+0x88>
    32be:	f1 f0       	breq	.+60     	; 0x32fc <__mulsf3_pse+0xa0>
    32c0:	88 23       	and	r24, r24
    32c2:	4a f0       	brmi	.+18     	; 0x32d6 <__mulsf3_pse+0x7a>
    32c4:	ee 0f       	add	r30, r30
    32c6:	ff 1f       	adc	r31, r31
    32c8:	bb 1f       	adc	r27, r27
    32ca:	66 1f       	adc	r22, r22
    32cc:	77 1f       	adc	r23, r23
    32ce:	88 1f       	adc	r24, r24
    32d0:	91 50       	subi	r25, 0x01	; 1
    32d2:	50 40       	sbci	r21, 0x00	; 0
    32d4:	a9 f7       	brne	.-22     	; 0x32c0 <__mulsf3_pse+0x64>
    32d6:	9e 3f       	cpi	r25, 0xFE	; 254
    32d8:	51 05       	cpc	r21, r1
    32da:	80 f0       	brcs	.+32     	; 0x32fc <__mulsf3_pse+0xa0>
    32dc:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__fp_inf>
    32e0:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__fp_szero>
    32e4:	5f 3f       	cpi	r21, 0xFF	; 255
    32e6:	e4 f3       	brlt	.-8      	; 0x32e0 <__mulsf3_pse+0x84>
    32e8:	98 3e       	cpi	r25, 0xE8	; 232
    32ea:	d4 f3       	brlt	.-12     	; 0x32e0 <__mulsf3_pse+0x84>
    32ec:	86 95       	lsr	r24
    32ee:	77 95       	ror	r23
    32f0:	67 95       	ror	r22
    32f2:	b7 95       	ror	r27
    32f4:	f7 95       	ror	r31
    32f6:	e7 95       	ror	r30
    32f8:	9f 5f       	subi	r25, 0xFF	; 255
    32fa:	c1 f7       	brne	.-16     	; 0x32ec <__mulsf3_pse+0x90>
    32fc:	fe 2b       	or	r31, r30
    32fe:	88 0f       	add	r24, r24
    3300:	91 1d       	adc	r25, r1
    3302:	96 95       	lsr	r25
    3304:	87 95       	ror	r24
    3306:	97 f9       	bld	r25, 7
    3308:	08 95       	ret

0000330a <__fp_cmp>:
    330a:	99 0f       	add	r25, r25
    330c:	00 08       	sbc	r0, r0
    330e:	55 0f       	add	r21, r21
    3310:	aa 0b       	sbc	r26, r26
    3312:	e0 e8       	ldi	r30, 0x80	; 128
    3314:	fe ef       	ldi	r31, 0xFE	; 254
    3316:	16 16       	cp	r1, r22
    3318:	17 06       	cpc	r1, r23
    331a:	e8 07       	cpc	r30, r24
    331c:	f9 07       	cpc	r31, r25
    331e:	c0 f0       	brcs	.+48     	; 0x3350 <__fp_cmp+0x46>
    3320:	12 16       	cp	r1, r18
    3322:	13 06       	cpc	r1, r19
    3324:	e4 07       	cpc	r30, r20
    3326:	f5 07       	cpc	r31, r21
    3328:	98 f0       	brcs	.+38     	; 0x3350 <__fp_cmp+0x46>
    332a:	62 1b       	sub	r22, r18
    332c:	73 0b       	sbc	r23, r19
    332e:	84 0b       	sbc	r24, r20
    3330:	95 0b       	sbc	r25, r21
    3332:	39 f4       	brne	.+14     	; 0x3342 <__fp_cmp+0x38>
    3334:	0a 26       	eor	r0, r26
    3336:	61 f0       	breq	.+24     	; 0x3350 <__fp_cmp+0x46>
    3338:	23 2b       	or	r18, r19
    333a:	24 2b       	or	r18, r20
    333c:	25 2b       	or	r18, r21
    333e:	21 f4       	brne	.+8      	; 0x3348 <__fp_cmp+0x3e>
    3340:	08 95       	ret
    3342:	0a 26       	eor	r0, r26
    3344:	09 f4       	brne	.+2      	; 0x3348 <__fp_cmp+0x3e>
    3346:	a1 40       	sbci	r26, 0x01	; 1
    3348:	a6 95       	lsr	r26
    334a:	8f ef       	ldi	r24, 0xFF	; 255
    334c:	81 1d       	adc	r24, r1
    334e:	81 1d       	adc	r24, r1
    3350:	08 95       	ret

00003352 <__tablejump2__>:
    3352:	ee 0f       	add	r30, r30
    3354:	ff 1f       	adc	r31, r31
    3356:	05 90       	lpm	r0, Z+
    3358:	f4 91       	lpm	r31, Z
    335a:	e0 2d       	mov	r30, r0
    335c:	09 94       	ijmp

0000335e <sprintf>:
    335e:	ae e0       	ldi	r26, 0x0E	; 14
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e5 eb       	ldi	r30, 0xB5	; 181
    3364:	f9 e1       	ldi	r31, 0x19	; 25
    3366:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <__prologue_saves__+0x1c>
    336a:	0d 89       	ldd	r16, Y+21	; 0x15
    336c:	1e 89       	ldd	r17, Y+22	; 0x16
    336e:	86 e0       	ldi	r24, 0x06	; 6
    3370:	8c 83       	std	Y+4, r24	; 0x04
    3372:	1a 83       	std	Y+2, r17	; 0x02
    3374:	09 83       	std	Y+1, r16	; 0x01
    3376:	8f ef       	ldi	r24, 0xFF	; 255
    3378:	9f e7       	ldi	r25, 0x7F	; 127
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	8d 83       	std	Y+5, r24	; 0x05
    337e:	ae 01       	movw	r20, r28
    3380:	47 5e       	subi	r20, 0xE7	; 231
    3382:	5f 4f       	sbci	r21, 0xFF	; 255
    3384:	6f 89       	ldd	r22, Y+23	; 0x17
    3386:	78 8d       	ldd	r23, Y+24	; 0x18
    3388:	ce 01       	movw	r24, r28
    338a:	01 96       	adiw	r24, 0x01	; 1
    338c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <vfprintf>
    3390:	2f 81       	ldd	r18, Y+7	; 0x07
    3392:	38 85       	ldd	r19, Y+8	; 0x08
    3394:	f8 01       	movw	r30, r16
    3396:	e2 0f       	add	r30, r18
    3398:	f3 1f       	adc	r31, r19
    339a:	10 82       	st	Z, r1
    339c:	2e 96       	adiw	r28, 0x0e	; 14
    339e:	e4 e0       	ldi	r30, 0x04	; 4
    33a0:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__epilogue_restores__+0x1c>

000033a4 <vfprintf>:
    33a4:	ac e0       	ldi	r26, 0x0C	; 12
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	e8 ed       	ldi	r30, 0xD8	; 216
    33aa:	f9 e1       	ldi	r31, 0x19	; 25
    33ac:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__prologue_saves__>
    33b0:	7c 01       	movw	r14, r24
    33b2:	6b 01       	movw	r12, r22
    33b4:	8a 01       	movw	r16, r20
    33b6:	fc 01       	movw	r30, r24
    33b8:	17 82       	std	Z+7, r1	; 0x07
    33ba:	16 82       	std	Z+6, r1	; 0x06
    33bc:	83 81       	ldd	r24, Z+3	; 0x03
    33be:	81 ff       	sbrs	r24, 1
    33c0:	bd c1       	rjmp	.+890    	; 0x373c <vfprintf+0x398>
    33c2:	ce 01       	movw	r24, r28
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	4c 01       	movw	r8, r24
    33c8:	f7 01       	movw	r30, r14
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	f6 01       	movw	r30, r12
    33ce:	93 fd       	sbrc	r25, 3
    33d0:	85 91       	lpm	r24, Z+
    33d2:	93 ff       	sbrs	r25, 3
    33d4:	81 91       	ld	r24, Z+
    33d6:	6f 01       	movw	r12, r30
    33d8:	88 23       	and	r24, r24
    33da:	09 f4       	brne	.+2      	; 0x33de <vfprintf+0x3a>
    33dc:	ab c1       	rjmp	.+854    	; 0x3734 <vfprintf+0x390>
    33de:	85 32       	cpi	r24, 0x25	; 37
    33e0:	39 f4       	brne	.+14     	; 0x33f0 <vfprintf+0x4c>
    33e2:	93 fd       	sbrc	r25, 3
    33e4:	85 91       	lpm	r24, Z+
    33e6:	93 ff       	sbrs	r25, 3
    33e8:	81 91       	ld	r24, Z+
    33ea:	6f 01       	movw	r12, r30
    33ec:	85 32       	cpi	r24, 0x25	; 37
    33ee:	29 f4       	brne	.+10     	; 0x33fa <vfprintf+0x56>
    33f0:	b7 01       	movw	r22, r14
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    33f8:	e7 cf       	rjmp	.-50     	; 0x33c8 <vfprintf+0x24>
    33fa:	51 2c       	mov	r5, r1
    33fc:	31 2c       	mov	r3, r1
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	20 32       	cpi	r18, 0x20	; 32
    3402:	a0 f4       	brcc	.+40     	; 0x342c <vfprintf+0x88>
    3404:	8b 32       	cpi	r24, 0x2B	; 43
    3406:	69 f0       	breq	.+26     	; 0x3422 <vfprintf+0x7e>
    3408:	30 f4       	brcc	.+12     	; 0x3416 <vfprintf+0x72>
    340a:	80 32       	cpi	r24, 0x20	; 32
    340c:	59 f0       	breq	.+22     	; 0x3424 <vfprintf+0x80>
    340e:	83 32       	cpi	r24, 0x23	; 35
    3410:	69 f4       	brne	.+26     	; 0x342c <vfprintf+0x88>
    3412:	20 61       	ori	r18, 0x10	; 16
    3414:	2c c0       	rjmp	.+88     	; 0x346e <vfprintf+0xca>
    3416:	8d 32       	cpi	r24, 0x2D	; 45
    3418:	39 f0       	breq	.+14     	; 0x3428 <vfprintf+0x84>
    341a:	80 33       	cpi	r24, 0x30	; 48
    341c:	39 f4       	brne	.+14     	; 0x342c <vfprintf+0x88>
    341e:	21 60       	ori	r18, 0x01	; 1
    3420:	26 c0       	rjmp	.+76     	; 0x346e <vfprintf+0xca>
    3422:	22 60       	ori	r18, 0x02	; 2
    3424:	24 60       	ori	r18, 0x04	; 4
    3426:	23 c0       	rjmp	.+70     	; 0x346e <vfprintf+0xca>
    3428:	28 60       	ori	r18, 0x08	; 8
    342a:	21 c0       	rjmp	.+66     	; 0x346e <vfprintf+0xca>
    342c:	27 fd       	sbrc	r18, 7
    342e:	27 c0       	rjmp	.+78     	; 0x347e <vfprintf+0xda>
    3430:	30 ed       	ldi	r19, 0xD0	; 208
    3432:	38 0f       	add	r19, r24
    3434:	3a 30       	cpi	r19, 0x0A	; 10
    3436:	78 f4       	brcc	.+30     	; 0x3456 <vfprintf+0xb2>
    3438:	26 ff       	sbrs	r18, 6
    343a:	06 c0       	rjmp	.+12     	; 0x3448 <vfprintf+0xa4>
    343c:	fa e0       	ldi	r31, 0x0A	; 10
    343e:	5f 9e       	mul	r5, r31
    3440:	30 0d       	add	r19, r0
    3442:	11 24       	eor	r1, r1
    3444:	53 2e       	mov	r5, r19
    3446:	13 c0       	rjmp	.+38     	; 0x346e <vfprintf+0xca>
    3448:	8a e0       	ldi	r24, 0x0A	; 10
    344a:	38 9e       	mul	r3, r24
    344c:	30 0d       	add	r19, r0
    344e:	11 24       	eor	r1, r1
    3450:	33 2e       	mov	r3, r19
    3452:	20 62       	ori	r18, 0x20	; 32
    3454:	0c c0       	rjmp	.+24     	; 0x346e <vfprintf+0xca>
    3456:	8e 32       	cpi	r24, 0x2E	; 46
    3458:	21 f4       	brne	.+8      	; 0x3462 <vfprintf+0xbe>
    345a:	26 fd       	sbrc	r18, 6
    345c:	6b c1       	rjmp	.+726    	; 0x3734 <vfprintf+0x390>
    345e:	20 64       	ori	r18, 0x40	; 64
    3460:	06 c0       	rjmp	.+12     	; 0x346e <vfprintf+0xca>
    3462:	8c 36       	cpi	r24, 0x6C	; 108
    3464:	11 f4       	brne	.+4      	; 0x346a <vfprintf+0xc6>
    3466:	20 68       	ori	r18, 0x80	; 128
    3468:	02 c0       	rjmp	.+4      	; 0x346e <vfprintf+0xca>
    346a:	88 36       	cpi	r24, 0x68	; 104
    346c:	41 f4       	brne	.+16     	; 0x347e <vfprintf+0xda>
    346e:	f6 01       	movw	r30, r12
    3470:	93 fd       	sbrc	r25, 3
    3472:	85 91       	lpm	r24, Z+
    3474:	93 ff       	sbrs	r25, 3
    3476:	81 91       	ld	r24, Z+
    3478:	6f 01       	movw	r12, r30
    347a:	81 11       	cpse	r24, r1
    347c:	c1 cf       	rjmp	.-126    	; 0x3400 <vfprintf+0x5c>
    347e:	98 2f       	mov	r25, r24
    3480:	9f 7d       	andi	r25, 0xDF	; 223
    3482:	95 54       	subi	r25, 0x45	; 69
    3484:	93 30       	cpi	r25, 0x03	; 3
    3486:	28 f4       	brcc	.+10     	; 0x3492 <vfprintf+0xee>
    3488:	0c 5f       	subi	r16, 0xFC	; 252
    348a:	1f 4f       	sbci	r17, 0xFF	; 255
    348c:	ff e3       	ldi	r31, 0x3F	; 63
    348e:	f9 83       	std	Y+1, r31	; 0x01
    3490:	0d c0       	rjmp	.+26     	; 0x34ac <vfprintf+0x108>
    3492:	83 36       	cpi	r24, 0x63	; 99
    3494:	31 f0       	breq	.+12     	; 0x34a2 <vfprintf+0xfe>
    3496:	83 37       	cpi	r24, 0x73	; 115
    3498:	71 f0       	breq	.+28     	; 0x34b6 <vfprintf+0x112>
    349a:	83 35       	cpi	r24, 0x53	; 83
    349c:	09 f0       	breq	.+2      	; 0x34a0 <vfprintf+0xfc>
    349e:	5b c0       	rjmp	.+182    	; 0x3556 <vfprintf+0x1b2>
    34a0:	22 c0       	rjmp	.+68     	; 0x34e6 <vfprintf+0x142>
    34a2:	f8 01       	movw	r30, r16
    34a4:	80 81       	ld	r24, Z
    34a6:	89 83       	std	Y+1, r24	; 0x01
    34a8:	0e 5f       	subi	r16, 0xFE	; 254
    34aa:	1f 4f       	sbci	r17, 0xFF	; 255
    34ac:	44 24       	eor	r4, r4
    34ae:	43 94       	inc	r4
    34b0:	51 2c       	mov	r5, r1
    34b2:	54 01       	movw	r10, r8
    34b4:	15 c0       	rjmp	.+42     	; 0x34e0 <vfprintf+0x13c>
    34b6:	38 01       	movw	r6, r16
    34b8:	f2 e0       	ldi	r31, 0x02	; 2
    34ba:	6f 0e       	add	r6, r31
    34bc:	71 1c       	adc	r7, r1
    34be:	f8 01       	movw	r30, r16
    34c0:	a0 80       	ld	r10, Z
    34c2:	b1 80       	ldd	r11, Z+1	; 0x01
    34c4:	26 ff       	sbrs	r18, 6
    34c6:	03 c0       	rjmp	.+6      	; 0x34ce <vfprintf+0x12a>
    34c8:	65 2d       	mov	r22, r5
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	02 c0       	rjmp	.+4      	; 0x34d2 <vfprintf+0x12e>
    34ce:	6f ef       	ldi	r22, 0xFF	; 255
    34d0:	7f ef       	ldi	r23, 0xFF	; 255
    34d2:	c5 01       	movw	r24, r10
    34d4:	2c 87       	std	Y+12, r18	; 0x0c
    34d6:	0e 94 af 1b 	call	0x375e	; 0x375e <strnlen>
    34da:	2c 01       	movw	r4, r24
    34dc:	83 01       	movw	r16, r6
    34de:	2c 85       	ldd	r18, Y+12	; 0x0c
    34e0:	2f 77       	andi	r18, 0x7F	; 127
    34e2:	22 2e       	mov	r2, r18
    34e4:	17 c0       	rjmp	.+46     	; 0x3514 <vfprintf+0x170>
    34e6:	38 01       	movw	r6, r16
    34e8:	f2 e0       	ldi	r31, 0x02	; 2
    34ea:	6f 0e       	add	r6, r31
    34ec:	71 1c       	adc	r7, r1
    34ee:	f8 01       	movw	r30, r16
    34f0:	a0 80       	ld	r10, Z
    34f2:	b1 80       	ldd	r11, Z+1	; 0x01
    34f4:	26 ff       	sbrs	r18, 6
    34f6:	03 c0       	rjmp	.+6      	; 0x34fe <vfprintf+0x15a>
    34f8:	65 2d       	mov	r22, r5
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <vfprintf+0x15e>
    34fe:	6f ef       	ldi	r22, 0xFF	; 255
    3500:	7f ef       	ldi	r23, 0xFF	; 255
    3502:	c5 01       	movw	r24, r10
    3504:	2c 87       	std	Y+12, r18	; 0x0c
    3506:	0e 94 a4 1b 	call	0x3748	; 0x3748 <strnlen_P>
    350a:	2c 01       	movw	r4, r24
    350c:	2c 85       	ldd	r18, Y+12	; 0x0c
    350e:	20 68       	ori	r18, 0x80	; 128
    3510:	22 2e       	mov	r2, r18
    3512:	83 01       	movw	r16, r6
    3514:	23 fc       	sbrc	r2, 3
    3516:	1b c0       	rjmp	.+54     	; 0x354e <vfprintf+0x1aa>
    3518:	83 2d       	mov	r24, r3
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	48 16       	cp	r4, r24
    351e:	59 06       	cpc	r5, r25
    3520:	b0 f4       	brcc	.+44     	; 0x354e <vfprintf+0x1aa>
    3522:	b7 01       	movw	r22, r14
    3524:	80 e2       	ldi	r24, 0x20	; 32
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    352c:	3a 94       	dec	r3
    352e:	f4 cf       	rjmp	.-24     	; 0x3518 <vfprintf+0x174>
    3530:	f5 01       	movw	r30, r10
    3532:	27 fc       	sbrc	r2, 7
    3534:	85 91       	lpm	r24, Z+
    3536:	27 fe       	sbrs	r2, 7
    3538:	81 91       	ld	r24, Z+
    353a:	5f 01       	movw	r10, r30
    353c:	b7 01       	movw	r22, r14
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    3544:	31 10       	cpse	r3, r1
    3546:	3a 94       	dec	r3
    3548:	f1 e0       	ldi	r31, 0x01	; 1
    354a:	4f 1a       	sub	r4, r31
    354c:	51 08       	sbc	r5, r1
    354e:	41 14       	cp	r4, r1
    3550:	51 04       	cpc	r5, r1
    3552:	71 f7       	brne	.-36     	; 0x3530 <vfprintf+0x18c>
    3554:	e5 c0       	rjmp	.+458    	; 0x3720 <vfprintf+0x37c>
    3556:	84 36       	cpi	r24, 0x64	; 100
    3558:	11 f0       	breq	.+4      	; 0x355e <vfprintf+0x1ba>
    355a:	89 36       	cpi	r24, 0x69	; 105
    355c:	39 f5       	brne	.+78     	; 0x35ac <vfprintf+0x208>
    355e:	f8 01       	movw	r30, r16
    3560:	27 ff       	sbrs	r18, 7
    3562:	07 c0       	rjmp	.+14     	; 0x3572 <vfprintf+0x1ce>
    3564:	60 81       	ld	r22, Z
    3566:	71 81       	ldd	r23, Z+1	; 0x01
    3568:	82 81       	ldd	r24, Z+2	; 0x02
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	0c 5f       	subi	r16, 0xFC	; 252
    356e:	1f 4f       	sbci	r17, 0xFF	; 255
    3570:	08 c0       	rjmp	.+16     	; 0x3582 <vfprintf+0x1de>
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	07 2e       	mov	r0, r23
    3578:	00 0c       	add	r0, r0
    357a:	88 0b       	sbc	r24, r24
    357c:	99 0b       	sbc	r25, r25
    357e:	0e 5f       	subi	r16, 0xFE	; 254
    3580:	1f 4f       	sbci	r17, 0xFF	; 255
    3582:	2f 76       	andi	r18, 0x6F	; 111
    3584:	72 2e       	mov	r7, r18
    3586:	97 ff       	sbrs	r25, 7
    3588:	09 c0       	rjmp	.+18     	; 0x359c <vfprintf+0x1f8>
    358a:	90 95       	com	r25
    358c:	80 95       	com	r24
    358e:	70 95       	com	r23
    3590:	61 95       	neg	r22
    3592:	7f 4f       	sbci	r23, 0xFF	; 255
    3594:	8f 4f       	sbci	r24, 0xFF	; 255
    3596:	9f 4f       	sbci	r25, 0xFF	; 255
    3598:	20 68       	ori	r18, 0x80	; 128
    359a:	72 2e       	mov	r7, r18
    359c:	2a e0       	ldi	r18, 0x0A	; 10
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	a4 01       	movw	r20, r8
    35a2:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__ultoa_invert>
    35a6:	a8 2e       	mov	r10, r24
    35a8:	a8 18       	sub	r10, r8
    35aa:	44 c0       	rjmp	.+136    	; 0x3634 <vfprintf+0x290>
    35ac:	85 37       	cpi	r24, 0x75	; 117
    35ae:	29 f4       	brne	.+10     	; 0x35ba <vfprintf+0x216>
    35b0:	2f 7e       	andi	r18, 0xEF	; 239
    35b2:	b2 2e       	mov	r11, r18
    35b4:	2a e0       	ldi	r18, 0x0A	; 10
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	25 c0       	rjmp	.+74     	; 0x3604 <vfprintf+0x260>
    35ba:	f2 2f       	mov	r31, r18
    35bc:	f9 7f       	andi	r31, 0xF9	; 249
    35be:	bf 2e       	mov	r11, r31
    35c0:	8f 36       	cpi	r24, 0x6F	; 111
    35c2:	c1 f0       	breq	.+48     	; 0x35f4 <vfprintf+0x250>
    35c4:	18 f4       	brcc	.+6      	; 0x35cc <vfprintf+0x228>
    35c6:	88 35       	cpi	r24, 0x58	; 88
    35c8:	79 f0       	breq	.+30     	; 0x35e8 <vfprintf+0x244>
    35ca:	b4 c0       	rjmp	.+360    	; 0x3734 <vfprintf+0x390>
    35cc:	80 37       	cpi	r24, 0x70	; 112
    35ce:	19 f0       	breq	.+6      	; 0x35d6 <vfprintf+0x232>
    35d0:	88 37       	cpi	r24, 0x78	; 120
    35d2:	21 f0       	breq	.+8      	; 0x35dc <vfprintf+0x238>
    35d4:	af c0       	rjmp	.+350    	; 0x3734 <vfprintf+0x390>
    35d6:	2f 2f       	mov	r18, r31
    35d8:	20 61       	ori	r18, 0x10	; 16
    35da:	b2 2e       	mov	r11, r18
    35dc:	b4 fe       	sbrs	r11, 4
    35de:	0d c0       	rjmp	.+26     	; 0x35fa <vfprintf+0x256>
    35e0:	8b 2d       	mov	r24, r11
    35e2:	84 60       	ori	r24, 0x04	; 4
    35e4:	b8 2e       	mov	r11, r24
    35e6:	09 c0       	rjmp	.+18     	; 0x35fa <vfprintf+0x256>
    35e8:	24 ff       	sbrs	r18, 4
    35ea:	0a c0       	rjmp	.+20     	; 0x3600 <vfprintf+0x25c>
    35ec:	9f 2f       	mov	r25, r31
    35ee:	96 60       	ori	r25, 0x06	; 6
    35f0:	b9 2e       	mov	r11, r25
    35f2:	06 c0       	rjmp	.+12     	; 0x3600 <vfprintf+0x25c>
    35f4:	28 e0       	ldi	r18, 0x08	; 8
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	05 c0       	rjmp	.+10     	; 0x3604 <vfprintf+0x260>
    35fa:	20 e1       	ldi	r18, 0x10	; 16
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <vfprintf+0x260>
    3600:	20 e1       	ldi	r18, 0x10	; 16
    3602:	32 e0       	ldi	r19, 0x02	; 2
    3604:	f8 01       	movw	r30, r16
    3606:	b7 fe       	sbrs	r11, 7
    3608:	07 c0       	rjmp	.+14     	; 0x3618 <vfprintf+0x274>
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	0c 5f       	subi	r16, 0xFC	; 252
    3614:	1f 4f       	sbci	r17, 0xFF	; 255
    3616:	06 c0       	rjmp	.+12     	; 0x3624 <vfprintf+0x280>
    3618:	60 81       	ld	r22, Z
    361a:	71 81       	ldd	r23, Z+1	; 0x01
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0e 5f       	subi	r16, 0xFE	; 254
    3622:	1f 4f       	sbci	r17, 0xFF	; 255
    3624:	a4 01       	movw	r20, r8
    3626:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__ultoa_invert>
    362a:	a8 2e       	mov	r10, r24
    362c:	a8 18       	sub	r10, r8
    362e:	fb 2d       	mov	r31, r11
    3630:	ff 77       	andi	r31, 0x7F	; 127
    3632:	7f 2e       	mov	r7, r31
    3634:	76 fe       	sbrs	r7, 6
    3636:	0b c0       	rjmp	.+22     	; 0x364e <vfprintf+0x2aa>
    3638:	37 2d       	mov	r19, r7
    363a:	3e 7f       	andi	r19, 0xFE	; 254
    363c:	a5 14       	cp	r10, r5
    363e:	50 f4       	brcc	.+20     	; 0x3654 <vfprintf+0x2b0>
    3640:	74 fe       	sbrs	r7, 4
    3642:	0a c0       	rjmp	.+20     	; 0x3658 <vfprintf+0x2b4>
    3644:	72 fc       	sbrc	r7, 2
    3646:	08 c0       	rjmp	.+16     	; 0x3658 <vfprintf+0x2b4>
    3648:	37 2d       	mov	r19, r7
    364a:	3e 7e       	andi	r19, 0xEE	; 238
    364c:	05 c0       	rjmp	.+10     	; 0x3658 <vfprintf+0x2b4>
    364e:	ba 2c       	mov	r11, r10
    3650:	37 2d       	mov	r19, r7
    3652:	03 c0       	rjmp	.+6      	; 0x365a <vfprintf+0x2b6>
    3654:	ba 2c       	mov	r11, r10
    3656:	01 c0       	rjmp	.+2      	; 0x365a <vfprintf+0x2b6>
    3658:	b5 2c       	mov	r11, r5
    365a:	34 ff       	sbrs	r19, 4
    365c:	0d c0       	rjmp	.+26     	; 0x3678 <vfprintf+0x2d4>
    365e:	fe 01       	movw	r30, r28
    3660:	ea 0d       	add	r30, r10
    3662:	f1 1d       	adc	r31, r1
    3664:	80 81       	ld	r24, Z
    3666:	80 33       	cpi	r24, 0x30	; 48
    3668:	11 f4       	brne	.+4      	; 0x366e <vfprintf+0x2ca>
    366a:	39 7e       	andi	r19, 0xE9	; 233
    366c:	09 c0       	rjmp	.+18     	; 0x3680 <vfprintf+0x2dc>
    366e:	32 ff       	sbrs	r19, 2
    3670:	06 c0       	rjmp	.+12     	; 0x367e <vfprintf+0x2da>
    3672:	b3 94       	inc	r11
    3674:	b3 94       	inc	r11
    3676:	04 c0       	rjmp	.+8      	; 0x3680 <vfprintf+0x2dc>
    3678:	83 2f       	mov	r24, r19
    367a:	86 78       	andi	r24, 0x86	; 134
    367c:	09 f0       	breq	.+2      	; 0x3680 <vfprintf+0x2dc>
    367e:	b3 94       	inc	r11
    3680:	33 fd       	sbrc	r19, 3
    3682:	13 c0       	rjmp	.+38     	; 0x36aa <vfprintf+0x306>
    3684:	30 ff       	sbrs	r19, 0
    3686:	06 c0       	rjmp	.+12     	; 0x3694 <vfprintf+0x2f0>
    3688:	5a 2c       	mov	r5, r10
    368a:	b3 14       	cp	r11, r3
    368c:	18 f4       	brcc	.+6      	; 0x3694 <vfprintf+0x2f0>
    368e:	53 0c       	add	r5, r3
    3690:	5b 18       	sub	r5, r11
    3692:	b3 2c       	mov	r11, r3
    3694:	b3 14       	cp	r11, r3
    3696:	68 f4       	brcc	.+26     	; 0x36b2 <vfprintf+0x30e>
    3698:	b7 01       	movw	r22, r14
    369a:	80 e2       	ldi	r24, 0x20	; 32
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	3c 87       	std	Y+12, r19	; 0x0c
    36a0:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    36a4:	b3 94       	inc	r11
    36a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    36a8:	f5 cf       	rjmp	.-22     	; 0x3694 <vfprintf+0x2f0>
    36aa:	b3 14       	cp	r11, r3
    36ac:	10 f4       	brcc	.+4      	; 0x36b2 <vfprintf+0x30e>
    36ae:	3b 18       	sub	r3, r11
    36b0:	01 c0       	rjmp	.+2      	; 0x36b4 <vfprintf+0x310>
    36b2:	31 2c       	mov	r3, r1
    36b4:	34 ff       	sbrs	r19, 4
    36b6:	12 c0       	rjmp	.+36     	; 0x36dc <vfprintf+0x338>
    36b8:	b7 01       	movw	r22, r14
    36ba:	80 e3       	ldi	r24, 0x30	; 48
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	3c 87       	std	Y+12, r19	; 0x0c
    36c0:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    36c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    36c6:	32 ff       	sbrs	r19, 2
    36c8:	17 c0       	rjmp	.+46     	; 0x36f8 <vfprintf+0x354>
    36ca:	31 fd       	sbrc	r19, 1
    36cc:	03 c0       	rjmp	.+6      	; 0x36d4 <vfprintf+0x330>
    36ce:	88 e7       	ldi	r24, 0x78	; 120
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	02 c0       	rjmp	.+4      	; 0x36d8 <vfprintf+0x334>
    36d4:	88 e5       	ldi	r24, 0x58	; 88
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	b7 01       	movw	r22, r14
    36da:	0c c0       	rjmp	.+24     	; 0x36f4 <vfprintf+0x350>
    36dc:	83 2f       	mov	r24, r19
    36de:	86 78       	andi	r24, 0x86	; 134
    36e0:	59 f0       	breq	.+22     	; 0x36f8 <vfprintf+0x354>
    36e2:	31 ff       	sbrs	r19, 1
    36e4:	02 c0       	rjmp	.+4      	; 0x36ea <vfprintf+0x346>
    36e6:	8b e2       	ldi	r24, 0x2B	; 43
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <vfprintf+0x348>
    36ea:	80 e2       	ldi	r24, 0x20	; 32
    36ec:	37 fd       	sbrc	r19, 7
    36ee:	8d e2       	ldi	r24, 0x2D	; 45
    36f0:	b7 01       	movw	r22, r14
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    36f8:	a5 14       	cp	r10, r5
    36fa:	38 f4       	brcc	.+14     	; 0x370a <vfprintf+0x366>
    36fc:	b7 01       	movw	r22, r14
    36fe:	80 e3       	ldi	r24, 0x30	; 48
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    3706:	5a 94       	dec	r5
    3708:	f7 cf       	rjmp	.-18     	; 0x36f8 <vfprintf+0x354>
    370a:	aa 94       	dec	r10
    370c:	f4 01       	movw	r30, r8
    370e:	ea 0d       	add	r30, r10
    3710:	f1 1d       	adc	r31, r1
    3712:	80 81       	ld	r24, Z
    3714:	b7 01       	movw	r22, r14
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    371c:	a1 10       	cpse	r10, r1
    371e:	f5 cf       	rjmp	.-22     	; 0x370a <vfprintf+0x366>
    3720:	33 20       	and	r3, r3
    3722:	09 f4       	brne	.+2      	; 0x3726 <vfprintf+0x382>
    3724:	51 ce       	rjmp	.-862    	; 0x33c8 <vfprintf+0x24>
    3726:	b7 01       	movw	r22, r14
    3728:	80 e2       	ldi	r24, 0x20	; 32
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	0e 94 ba 1b 	call	0x3774	; 0x3774 <fputc>
    3730:	3a 94       	dec	r3
    3732:	f6 cf       	rjmp	.-20     	; 0x3720 <vfprintf+0x37c>
    3734:	f7 01       	movw	r30, r14
    3736:	86 81       	ldd	r24, Z+6	; 0x06
    3738:	97 81       	ldd	r25, Z+7	; 0x07
    373a:	02 c0       	rjmp	.+4      	; 0x3740 <vfprintf+0x39c>
    373c:	8f ef       	ldi	r24, 0xFF	; 255
    373e:	9f ef       	ldi	r25, 0xFF	; 255
    3740:	2c 96       	adiw	r28, 0x0c	; 12
    3742:	e2 e1       	ldi	r30, 0x12	; 18
    3744:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__epilogue_restores__>

00003748 <strnlen_P>:
    3748:	fc 01       	movw	r30, r24
    374a:	05 90       	lpm	r0, Z+
    374c:	61 50       	subi	r22, 0x01	; 1
    374e:	70 40       	sbci	r23, 0x00	; 0
    3750:	01 10       	cpse	r0, r1
    3752:	d8 f7       	brcc	.-10     	; 0x374a <strnlen_P+0x2>
    3754:	80 95       	com	r24
    3756:	90 95       	com	r25
    3758:	8e 0f       	add	r24, r30
    375a:	9f 1f       	adc	r25, r31
    375c:	08 95       	ret

0000375e <strnlen>:
    375e:	fc 01       	movw	r30, r24
    3760:	61 50       	subi	r22, 0x01	; 1
    3762:	70 40       	sbci	r23, 0x00	; 0
    3764:	01 90       	ld	r0, Z+
    3766:	01 10       	cpse	r0, r1
    3768:	d8 f7       	brcc	.-10     	; 0x3760 <strnlen+0x2>
    376a:	80 95       	com	r24
    376c:	90 95       	com	r25
    376e:	8e 0f       	add	r24, r30
    3770:	9f 1f       	adc	r25, r31
    3772:	08 95       	ret

00003774 <fputc>:
    3774:	0f 93       	push	r16
    3776:	1f 93       	push	r17
    3778:	cf 93       	push	r28
    377a:	df 93       	push	r29
    377c:	fb 01       	movw	r30, r22
    377e:	23 81       	ldd	r18, Z+3	; 0x03
    3780:	21 fd       	sbrc	r18, 1
    3782:	03 c0       	rjmp	.+6      	; 0x378a <fputc+0x16>
    3784:	8f ef       	ldi	r24, 0xFF	; 255
    3786:	9f ef       	ldi	r25, 0xFF	; 255
    3788:	28 c0       	rjmp	.+80     	; 0x37da <fputc+0x66>
    378a:	22 ff       	sbrs	r18, 2
    378c:	16 c0       	rjmp	.+44     	; 0x37ba <fputc+0x46>
    378e:	46 81       	ldd	r20, Z+6	; 0x06
    3790:	57 81       	ldd	r21, Z+7	; 0x07
    3792:	24 81       	ldd	r18, Z+4	; 0x04
    3794:	35 81       	ldd	r19, Z+5	; 0x05
    3796:	42 17       	cp	r20, r18
    3798:	53 07       	cpc	r21, r19
    379a:	44 f4       	brge	.+16     	; 0x37ac <fputc+0x38>
    379c:	a0 81       	ld	r26, Z
    379e:	b1 81       	ldd	r27, Z+1	; 0x01
    37a0:	9d 01       	movw	r18, r26
    37a2:	2f 5f       	subi	r18, 0xFF	; 255
    37a4:	3f 4f       	sbci	r19, 0xFF	; 255
    37a6:	31 83       	std	Z+1, r19	; 0x01
    37a8:	20 83       	st	Z, r18
    37aa:	8c 93       	st	X, r24
    37ac:	26 81       	ldd	r18, Z+6	; 0x06
    37ae:	37 81       	ldd	r19, Z+7	; 0x07
    37b0:	2f 5f       	subi	r18, 0xFF	; 255
    37b2:	3f 4f       	sbci	r19, 0xFF	; 255
    37b4:	37 83       	std	Z+7, r19	; 0x07
    37b6:	26 83       	std	Z+6, r18	; 0x06
    37b8:	10 c0       	rjmp	.+32     	; 0x37da <fputc+0x66>
    37ba:	eb 01       	movw	r28, r22
    37bc:	09 2f       	mov	r16, r25
    37be:	18 2f       	mov	r17, r24
    37c0:	00 84       	ldd	r0, Z+8	; 0x08
    37c2:	f1 85       	ldd	r31, Z+9	; 0x09
    37c4:	e0 2d       	mov	r30, r0
    37c6:	09 95       	icall
    37c8:	89 2b       	or	r24, r25
    37ca:	e1 f6       	brne	.-72     	; 0x3784 <fputc+0x10>
    37cc:	8e 81       	ldd	r24, Y+6	; 0x06
    37ce:	9f 81       	ldd	r25, Y+7	; 0x07
    37d0:	01 96       	adiw	r24, 0x01	; 1
    37d2:	9f 83       	std	Y+7, r25	; 0x07
    37d4:	8e 83       	std	Y+6, r24	; 0x06
    37d6:	81 2f       	mov	r24, r17
    37d8:	90 2f       	mov	r25, r16
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	1f 91       	pop	r17
    37e0:	0f 91       	pop	r16
    37e2:	08 95       	ret

000037e4 <__ultoa_invert>:
    37e4:	fa 01       	movw	r30, r20
    37e6:	aa 27       	eor	r26, r26
    37e8:	28 30       	cpi	r18, 0x08	; 8
    37ea:	51 f1       	breq	.+84     	; 0x3840 <__ultoa_invert+0x5c>
    37ec:	20 31       	cpi	r18, 0x10	; 16
    37ee:	81 f1       	breq	.+96     	; 0x3850 <__ultoa_invert+0x6c>
    37f0:	e8 94       	clt
    37f2:	6f 93       	push	r22
    37f4:	6e 7f       	andi	r22, 0xFE	; 254
    37f6:	6e 5f       	subi	r22, 0xFE	; 254
    37f8:	7f 4f       	sbci	r23, 0xFF	; 255
    37fa:	8f 4f       	sbci	r24, 0xFF	; 255
    37fc:	9f 4f       	sbci	r25, 0xFF	; 255
    37fe:	af 4f       	sbci	r26, 0xFF	; 255
    3800:	b1 e0       	ldi	r27, 0x01	; 1
    3802:	3e d0       	rcall	.+124    	; 0x3880 <__ultoa_invert+0x9c>
    3804:	b4 e0       	ldi	r27, 0x04	; 4
    3806:	3c d0       	rcall	.+120    	; 0x3880 <__ultoa_invert+0x9c>
    3808:	67 0f       	add	r22, r23
    380a:	78 1f       	adc	r23, r24
    380c:	89 1f       	adc	r24, r25
    380e:	9a 1f       	adc	r25, r26
    3810:	a1 1d       	adc	r26, r1
    3812:	68 0f       	add	r22, r24
    3814:	79 1f       	adc	r23, r25
    3816:	8a 1f       	adc	r24, r26
    3818:	91 1d       	adc	r25, r1
    381a:	a1 1d       	adc	r26, r1
    381c:	6a 0f       	add	r22, r26
    381e:	71 1d       	adc	r23, r1
    3820:	81 1d       	adc	r24, r1
    3822:	91 1d       	adc	r25, r1
    3824:	a1 1d       	adc	r26, r1
    3826:	20 d0       	rcall	.+64     	; 0x3868 <__ultoa_invert+0x84>
    3828:	09 f4       	brne	.+2      	; 0x382c <__ultoa_invert+0x48>
    382a:	68 94       	set
    382c:	3f 91       	pop	r19
    382e:	2a e0       	ldi	r18, 0x0A	; 10
    3830:	26 9f       	mul	r18, r22
    3832:	11 24       	eor	r1, r1
    3834:	30 19       	sub	r19, r0
    3836:	30 5d       	subi	r19, 0xD0	; 208
    3838:	31 93       	st	Z+, r19
    383a:	de f6       	brtc	.-74     	; 0x37f2 <__ultoa_invert+0xe>
    383c:	cf 01       	movw	r24, r30
    383e:	08 95       	ret
    3840:	46 2f       	mov	r20, r22
    3842:	47 70       	andi	r20, 0x07	; 7
    3844:	40 5d       	subi	r20, 0xD0	; 208
    3846:	41 93       	st	Z+, r20
    3848:	b3 e0       	ldi	r27, 0x03	; 3
    384a:	0f d0       	rcall	.+30     	; 0x386a <__ultoa_invert+0x86>
    384c:	c9 f7       	brne	.-14     	; 0x3840 <__ultoa_invert+0x5c>
    384e:	f6 cf       	rjmp	.-20     	; 0x383c <__ultoa_invert+0x58>
    3850:	46 2f       	mov	r20, r22
    3852:	4f 70       	andi	r20, 0x0F	; 15
    3854:	40 5d       	subi	r20, 0xD0	; 208
    3856:	4a 33       	cpi	r20, 0x3A	; 58
    3858:	18 f0       	brcs	.+6      	; 0x3860 <__ultoa_invert+0x7c>
    385a:	49 5d       	subi	r20, 0xD9	; 217
    385c:	31 fd       	sbrc	r19, 1
    385e:	40 52       	subi	r20, 0x20	; 32
    3860:	41 93       	st	Z+, r20
    3862:	02 d0       	rcall	.+4      	; 0x3868 <__ultoa_invert+0x84>
    3864:	a9 f7       	brne	.-22     	; 0x3850 <__ultoa_invert+0x6c>
    3866:	ea cf       	rjmp	.-44     	; 0x383c <__ultoa_invert+0x58>
    3868:	b4 e0       	ldi	r27, 0x04	; 4
    386a:	a6 95       	lsr	r26
    386c:	97 95       	ror	r25
    386e:	87 95       	ror	r24
    3870:	77 95       	ror	r23
    3872:	67 95       	ror	r22
    3874:	ba 95       	dec	r27
    3876:	c9 f7       	brne	.-14     	; 0x386a <__ultoa_invert+0x86>
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	61 05       	cpc	r22, r1
    387c:	71 05       	cpc	r23, r1
    387e:	08 95       	ret
    3880:	9b 01       	movw	r18, r22
    3882:	ac 01       	movw	r20, r24
    3884:	0a 2e       	mov	r0, r26
    3886:	06 94       	lsr	r0
    3888:	57 95       	ror	r21
    388a:	47 95       	ror	r20
    388c:	37 95       	ror	r19
    388e:	27 95       	ror	r18
    3890:	ba 95       	dec	r27
    3892:	c9 f7       	brne	.-14     	; 0x3886 <__ultoa_invert+0xa2>
    3894:	62 0f       	add	r22, r18
    3896:	73 1f       	adc	r23, r19
    3898:	84 1f       	adc	r24, r20
    389a:	95 1f       	adc	r25, r21
    389c:	a0 1d       	adc	r26, r0
    389e:	08 95       	ret

000038a0 <__prologue_saves__>:
    38a0:	2f 92       	push	r2
    38a2:	3f 92       	push	r3
    38a4:	4f 92       	push	r4
    38a6:	5f 92       	push	r5
    38a8:	6f 92       	push	r6
    38aa:	7f 92       	push	r7
    38ac:	8f 92       	push	r8
    38ae:	9f 92       	push	r9
    38b0:	af 92       	push	r10
    38b2:	bf 92       	push	r11
    38b4:	cf 92       	push	r12
    38b6:	df 92       	push	r13
    38b8:	ef 92       	push	r14
    38ba:	ff 92       	push	r15
    38bc:	0f 93       	push	r16
    38be:	1f 93       	push	r17
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	cd b7       	in	r28, 0x3d	; 61
    38c6:	de b7       	in	r29, 0x3e	; 62
    38c8:	ca 1b       	sub	r28, r26
    38ca:	db 0b       	sbc	r29, r27
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	09 94       	ijmp

000038d8 <__epilogue_restores__>:
    38d8:	2a 88       	ldd	r2, Y+18	; 0x12
    38da:	39 88       	ldd	r3, Y+17	; 0x11
    38dc:	48 88       	ldd	r4, Y+16	; 0x10
    38de:	5f 84       	ldd	r5, Y+15	; 0x0f
    38e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    38e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    38e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    38e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    38e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    38ea:	b9 84       	ldd	r11, Y+9	; 0x09
    38ec:	c8 84       	ldd	r12, Y+8	; 0x08
    38ee:	df 80       	ldd	r13, Y+7	; 0x07
    38f0:	ee 80       	ldd	r14, Y+6	; 0x06
    38f2:	fd 80       	ldd	r15, Y+5	; 0x05
    38f4:	0c 81       	ldd	r16, Y+4	; 0x04
    38f6:	1b 81       	ldd	r17, Y+3	; 0x03
    38f8:	aa 81       	ldd	r26, Y+2	; 0x02
    38fa:	b9 81       	ldd	r27, Y+1	; 0x01
    38fc:	ce 0f       	add	r28, r30
    38fe:	d1 1d       	adc	r29, r1
    3900:	0f b6       	in	r0, 0x3f	; 63
    3902:	f8 94       	cli
    3904:	de bf       	out	0x3e, r29	; 62
    3906:	0f be       	out	0x3f, r0	; 63
    3908:	cd bf       	out	0x3d, r28	; 61
    390a:	ed 01       	movw	r28, r26
    390c:	08 95       	ret

0000390e <_exit>:
    390e:	f8 94       	cli

00003910 <__stop_program>:
    3910:	ff cf       	rjmp	.-2      	; 0x3910 <__stop_program>
